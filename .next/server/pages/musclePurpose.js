"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/musclePurpose";
exports.ids = ["pages/musclePurpose"];
exports.modules = {

/***/ "./hooks/useInputTest.js":
/*!*******************************!*\
  !*** ./hooks/useInputTest.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((initialValue = null)=>{\n    const { 0: value , 1: setValue  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initialValue);\n    const onChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{\n        setValue(e.target.value);\n    }, []);\n    return [\n        value,\n        onChange\n    ];\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ob29rcy91c2VJbnB1dFRlc3QuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQThDO0FBRTlDLGlFQUFlLENBQUNFLFlBQVksR0FBRyxJQUFJLEdBQUs7SUFDdEMsTUFBTSxFQUhSLEdBR1NDLEtBQUssR0FIZCxHQUdnQkMsUUFBUSxNQUFJSiwrQ0FBUSxDQUFDRSxZQUFZLENBQUM7SUFDaEQsTUFBTUcsUUFBUSxHQUFHSixrREFBVyxDQUFDLENBQUNLLENBQUMsR0FBSztRQUNsQ0YsUUFBUSxDQUFDRSxDQUFDLENBQUNDLE1BQU0sQ0FBQ0osS0FBSyxDQUFDLENBQUM7S0FDMUIsRUFBRSxFQUFFLENBQUM7SUFDTixPQUFPO1FBQUNBLEtBQUs7UUFBRUUsUUFBUTtLQUFDLENBQUM7Q0FDMUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2RvbmdqdW5lLy4vaG9va3MvdXNlSW5wdXRUZXN0LmpzPzIyOWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUNhbGxiYWNrIH0gZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IChpbml0aWFsVmFsdWUgPSBudWxsKSA9PiB7XG4gIGNvbnN0IFt2YWx1ZSwgc2V0VmFsdWVdID0gdXNlU3RhdGUoaW5pdGlhbFZhbHVlKTtcbiAgY29uc3Qgb25DaGFuZ2UgPSB1c2VDYWxsYmFjaygoZSkgPT4ge1xuICAgIHNldFZhbHVlKGUudGFyZ2V0LnZhbHVlKTtcbiAgfSwgW10pO1xuICByZXR1cm4gW3ZhbHVlLCBvbkNoYW5nZV07XG59O1xuXG4iXSwibmFtZXMiOlsidXNlU3RhdGUiLCJ1c2VDYWxsYmFjayIsImluaXRpYWxWYWx1ZSIsInZhbHVlIiwic2V0VmFsdWUiLCJvbkNoYW5nZSIsImUiLCJ0YXJnZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./hooks/useInputTest.js\n");

/***/ }),

/***/ "./pages/musclePurpose.js":
/*!********************************!*\
  !*** ./pages/musclePurpose.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getServerSideProps\": () => (/* binding */ getServerSideProps),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! antd */ \"antd\");\n/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! moment */ \"moment\");\n/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! styled-components */ \"styled-components\");\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(styled_components__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _reducers_user__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../reducers/user */ \"./reducers/user.js\");\n/* harmony import */ var redux_saga__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! redux-saga */ \"redux-saga\");\n/* harmony import */ var redux_saga__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(redux_saga__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _store_configureStore__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../store/configureStore */ \"./store/configureStore.js\");\n/* harmony import */ var _purposeModal__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./purposeModal */ \"./pages/purposeModal.js\");\n/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! react-redux */ \"react-redux\");\n/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(react_redux__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _fullcalendar_react__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @fullcalendar/react */ \"./node_modules/@fullcalendar/react/dist/main.cjs.js\");\n/* harmony import */ var _fullcalendar_react__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_fullcalendar_react__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var _fullcalendar_interaction__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @fullcalendar/interaction */ \"./node_modules/@fullcalendar/interaction/main.cjs.js\");\n/* harmony import */ var _fullcalendar_timegrid__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @fullcalendar/timegrid */ \"./node_modules/@fullcalendar/timegrid/main.cjs.js\");\n/* harmony import */ var _fullcalendar_daygrid__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @fullcalendar/daygrid */ \"./node_modules/@fullcalendar/daygrid/main.cjs.js\");\n/* harmony import */ var _purposeInformation__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./purposeInformation */ \"./pages/purposeInformation.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// const [value, setValue] = useState(moment().format(\"2022-01-01\"));\n// const onSelect = (value) => {\n//   setValue(value);\n// };\n// const onPanelChange = (value) => {\n//   setValue(value);\n// };\nfunction onPanelChange(value, mode) {\n    console.log(value.format(\"YYYY-MM-DD\"), mode);\n}\nconst musclePurpose = ()=>{\n    const { goalpurpose , allPurpose  } = (0,react_redux__WEBPACK_IMPORTED_MODULE_10__.useSelector)((state)=>state.user\n    );\n    const calendarRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    // const [calendarEvent,setCalendarEvent]=useState([])\n    const calendarEvent = [];\n    if (allPurpose) {\n        for(var i = 0; i < allPurpose.length; i++){\n            if (allPurpose[i].event == \"B\") {\n                var tdate = new Date(allPurpose[i].lastDate);\n                calendarEvent.push({\n                    id: allPurpose[i].id,\n                    title: allPurpose[i].title,\n                    start: allPurpose[i].firstDate,\n                    end: tdate,\n                    color: \"#0000FF\",\n                    textColor: allPurpose[i].goalDistance\n                });\n            } else {\n                console.log(\"qqqqq\", allPurpose[i].lastDate);\n                var tdate = new Date(allPurpose[i].lastDate);\n                console.log(\"dddddd\", tdate);\n                calendarEvent.push({\n                    id: allPurpose[i].id,\n                    title: allPurpose[i].title,\n                    start: allPurpose[i].firstDate,\n                    end: tdate,\n                    color: \"#008000\",\n                    textColor: allPurpose[i].goalDistance\n                });\n            // calendarEvent.push({id:allPurpose[i].id,title:allPurpose[i].title,start:allPurpose[i].firstDate,end:allPurpose[i].lastDate,color:'#008000',textColor:allPurpose[i].goalDistance})\n            }\n        }\n    }\n    //   useEffect(()=>{\n    //     console.log('asdasdsa')\n    // Modal.destroyAll();\n    //   },[goalpurpose])\n    const { 0: isModal , 1: setIsModal  } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const showModal = ()=>{\n        setIsModal(true);\n    };\n    const openModal = ()=>{\n        setIsModal((prev)=>!prev\n        );\n        console.log(isModal);\n    };\n    const { 0: information , 1: setInformation  } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const { 0: informationModal , 1: setInformationModal  } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const showInformationModal = ()=>{\n        setInformationModal(true);\n    };\n    const openInformationModal = ()=>{\n        setInformationModal((prev)=>!prev\n        );\n    };\n    const asd = (a)=>{\n        showInformationModal();\n        setInformation(a.event);\n        console.log(a);\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Container, {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_2__.Button, {\n                type: \"primary\",\n                onClick: showModal,\n                ghost: true,\n                children: \"\\uC6B4\\uB3D9\\uBAA9\\uD45C\\uC124\\uC815\"\n            }, void 0, false, {\n                fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/musclePurpose.js\",\n                lineNumber: 105,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_purposeModal__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                isModal: isModal,\n                openModal: openModal,\n                setIsModal: setIsModal\n            }, void 0, false, {\n                fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/musclePurpose.js\",\n                lineNumber: 108,\n                columnNumber: 13\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Title, {\n                children: \"\\uB098\\uC758 \\uC6B4\\uB3D9\\uBAA9\\uD45C\"\n            }, void 0, false, {\n                fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/musclePurpose.js\",\n                lineNumber: 109,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_2__.Card, {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((_fullcalendar_react__WEBPACK_IMPORTED_MODULE_11___default()), {\n                        eventClick: asd,\n                        events: calendarEvent,\n                        innerRef: calendarRef,\n                        plugins: [\n                            _fullcalendar_daygrid__WEBPACK_IMPORTED_MODULE_14__[\"default\"]\n                        ],\n                        editable: true,\n                        selectable: true\n                    }, void 0, false, {\n                        fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/musclePurpose.js\",\n                        lineNumber: 112,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_purposeInformation__WEBPACK_IMPORTED_MODULE_15__[\"default\"], {\n                        informationModal: informationModal,\n                        openInformationModal: openInformationModal,\n                        setInformationModal: setInformationModal,\n                        information: information\n                    }, void 0, false, {\n                        fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/musclePurpose.js\",\n                        lineNumber: 120,\n                        columnNumber: 6\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/musclePurpose.js\",\n                lineNumber: 110,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/musclePurpose.js\",\n        lineNumber: 104,\n        columnNumber: 5\n    }, undefined);\n};\nconst Title = (styled_components__WEBPACK_IMPORTED_MODULE_4___default().h1)`\n  font-size: 30px;\n  font-weight: bold;\n  margin-bottom: 7px;\n`;\nconst Container = (styled_components__WEBPACK_IMPORTED_MODULE_4___default().div)`\n  // height: 100%;\n  // padding: 0 100px;\n  padding: 2% 5% 0 5%;\n\n  .ant-picker-calendar-header {\n    padding-top: 0;\n  }\n\n  .ant-picker-calendar-date {\n    width: 90% !important;\n  }\n\n  .ant-picker-calendar-date-content {\n    height: 70px !important;\n  }\n\n  .ant-card {\n    width: 100%;\n    border-radius: 9px;\n    box-shadow: 0 1px 2px -2px rgb(0 0 0 / 16%), 0 3px 6px 0 rgb(0 0 0 / 12%);\n  }\n\n  .ant-card-body {\n    padding: 28px 28px 0 28px;\n  }\n`;\nconst getServerSideProps = _store_configureStore__WEBPACK_IMPORTED_MODULE_8__[\"default\"].getServerSideProps(async (context)=>{\n    const cookie = context.req ? context.req.headers.cookie : \"\";\n    (axios__WEBPACK_IMPORTED_MODULE_5___default().defaults.headers.Cookie) = \"\";\n    if (context.req && cookie) {\n        (axios__WEBPACK_IMPORTED_MODULE_5___default().defaults.headers.Cookie) = cookie;\n    }\n    context.store.dispatch({\n        type: _reducers_user__WEBPACK_IMPORTED_MODULE_6__.LOAD_MY_INFO_REQUEST\n    });\n    context.store.dispatch({\n        type: _reducers_user__WEBPACK_IMPORTED_MODULE_6__.ALL_GOAL_REQUEST\n    });\n    context.store.dispatch(redux_saga__WEBPACK_IMPORTED_MODULE_7__.END);\n    await context.store.sagaTask.toPromise();\n});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (musclePurpose);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/musclePurpose.js\n");

/***/ }),

/***/ "./pages/purposeInformation.js":
/*!*************************************!*\
  !*** ./pages/purposeInformation.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! styled-components */ \"styled-components\");\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(styled_components__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! antd */ \"antd\");\n/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _hooks_useInputTest__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../hooks/useInputTest */ \"./hooks/useInputTest.js\");\n/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! moment */ \"moment\");\n/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-redux */ \"react-redux\");\n/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react_redux__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _reducers_user__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../reducers/user */ \"./reducers/user.js\");\n/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ant-design/icons */ \"@ant-design/icons\");\n/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_ant_design_icons__WEBPACK_IMPORTED_MODULE_8__);\n\n\n\n\n\n\n\n\n\nconst { Meta  } = antd__WEBPACK_IMPORTED_MODULE_3__.Card;\nconst { Option  } = antd__WEBPACK_IMPORTED_MODULE_3__.Select;\nconst Signup = ({ informationModal , openInformationModal , setInformationModal , information  })=>{\n    const dispatch = (0,react_redux__WEBPACK_IMPORTED_MODULE_6__.useDispatch)();\n    const deletePurpose = (datas)=>{\n        dispatch({\n            type: _reducers_user__WEBPACK_IMPORTED_MODULE_7__.DELETE_GOAL_REQUEST,\n            data: datas\n        });\n        // location.reload();\n        window.location.href = \"/musclePurpose\";\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ModalWrapper, {\n        visible: informationModal,\n        onCancel: openInformationModal,\n        footer: null,\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(TitleDiv, {}, void 0, false, {\n                fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeInformation.js\",\n                lineNumber: 41,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(FormWrapper, {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(MaleFemale, {\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                                children: information.title\n                            }, void 0, false, {\n                                fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeInformation.js\",\n                                lineNumber: 49,\n                                columnNumber: 11\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                children: information.textColor + \"km\"\n                            }, void 0, false, {\n                                fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeInformation.js\",\n                                lineNumber: 50,\n                                columnNumber: 11\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                children: information.start\n                            }, void 0, false, {\n                                fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeInformation.js\",\n                                lineNumber: 51,\n                                columnNumber: 11\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                children: information.end\n                            }, void 0, false, {\n                                fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeInformation.js\",\n                                lineNumber: 52,\n                                columnNumber: 11\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeInformation.js\",\n                        lineNumber: 48,\n                        columnNumber: 11\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_3__.Button, {\n                        type: \"primary\",\n                        onClick: ()=>deletePurpose(information.id)\n                        ,\n                        danger: true,\n                        children: \"\\uBAA9\\uD45C\\uC0AD\\uC81C\"\n                    }, void 0, false, {\n                        fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeInformation.js\",\n                        lineNumber: 56,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeInformation.js\",\n                lineNumber: 45,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeInformation.js\",\n        lineNumber: 40,\n        columnNumber: 5\n    }, undefined);\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Signup);\n// const BtnWrapper = styled.div` 제거하기\n//   // display: flex;\n//   // justify-content: start;\n//   // margin-top: 10px;\n//   .ant-radio-wrapper {\n//     height: 38px;\n//     line-height: 38px;\n//     padding: 0 5px;\n//     border: 1px solid #ccd0d5;\n//     border-radius: 5px;\n//   }\n// `;\nconst SmallTitle = (styled_components__WEBPACK_IMPORTED_MODULE_2___default().div)`\n  display: flex;\n  justify-content: start;\n  padding-left: 3px;\n`;\n// const SmallSecondTitle = styled(SmallTitle)` 제거\n//   margin-top: 10px;\n// `;\n// 추가하기\nconst SpaceWrapper = styled_components__WEBPACK_IMPORTED_MODULE_2___default()(antd__WEBPACK_IMPORTED_MODULE_3__.Space)`\n  .ant-picker {\n    width: 132px;\n    border-radius: 5px !important;\n  }\n\n  .ant-select-single {\n    width: 125px;\n    border-radius: 5px;\n    // color: rgba(0, 0, 0, 0.4);\n  }\n\n  .ant-select-selector {\n    border-radius: 5px !important;\n  }\n`;\nconst FormWrapper = (styled_components__WEBPACK_IMPORTED_MODULE_2___default().div)`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  height: 470px;\n  // vertical-align:middle;\n  text-align: center;\n  // max-width: 500px;\n  padding: 16px;\n\n  // & Button { 제거\n  //   width: 100%;\n  //   background: #1890ff;\n  //   color: #fff;\n  //   height: 40px;\n  //   margin-top: 5px;\n  // }\n\n  Button {\n    width: 100%;\n    background: #1890ff;\n    color: #fff;\n    height: 48px;\n    margin-top: 5px;\n    font-weight: bold;\n    border-radius: 7px;\n    margin-top: 20px;\n  }\n\n  Button:hover {\n    background: #1683e8;\n    border-color: #1683e8;\n    color: #fff;\n  }\n\n  Button:focus {\n    background: #1890ff;\n    color: #fff;\n  }\n\n  .ant-input,\n  .ant-input-lg {\n    border: 1px solid #ccd0d5;\n    border-radius: 5px;\n  }\n\n  .ant-form-item {\n    margin-bottom: 10px;\n  }\n\n  .ant-form {\n    width: 400px;\n  }\n\n  .ant-form-item-control-input-content {\n    display: inline-block;\n    width: 100%;\n    height: 40.14px;\n  }\n`;\nconst FirstName = styled_components__WEBPACK_IMPORTED_MODULE_2___default()(antd__WEBPACK_IMPORTED_MODULE_3__.Form.Item)`\n  display: inline-block;\n  width: 154px;\n`;\nconst SecondName = styled_components__WEBPACK_IMPORTED_MODULE_2___default()(FirstName)`\n  margin-left: 8px;\n`;\nconst MaleFemale = styled_components__WEBPACK_IMPORTED_MODULE_2___default()(SecondName)`\n  width: 74px;\n\n  .ant-select-single {\n    width: 75px;\n    border-radius: 5px;\n    // color: rgba(0, 0, 0, 0.4);\n  }\n\n  .ant-select-selector {\n    border-radius: 5px !important;\n  }\n`;\nconst TitleDiv = (styled_components__WEBPACK_IMPORTED_MODULE_2___default().div)`\n  display: block;\n  text-align: center;\n  border-bottom: solid 1px #dadde1;\n  padding: 10px 15px 9px 15px;\n\n  div {\n    margin-bottom: 0;\n    font-size: 25px;\n    font-weight: 700;\n  }\n\n  span {\n    font-size: 15px;\n    color: #606770;\n  }\n`;\nconst ModalWrapper = styled_components__WEBPACK_IMPORTED_MODULE_2___default()(antd__WEBPACK_IMPORTED_MODULE_3__.Modal)`\n  top: 130px;\n\n  .ant-modal-content {\n    width: 432px;\n    margin: 0 auto;\n    border-radius: 15px;\n    box-shadow: 0 1px 2px -2px rgb(0 0 0 / 16%), 0 3px 6px 0 rgb(0 0 0 / 12%);\n  }\n  .ant-modal-header {\n    border-radius: 15px;\n  }\n\n  .ant-modal-body {\n    padding: 0;\n  }\n\n  .ant-input-affix-wrapper {\n    // 추가하기\n    border-radius: 5px;\n  }\n`;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/purposeInformation.js\n");

/***/ }),

/***/ "./pages/purposeModal.js":
/*!*******************************!*\
  !*** ./pages/purposeModal.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! styled-components */ \"styled-components\");\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(styled_components__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! antd */ \"antd\");\n/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _hooks_useInputTest__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../hooks/useInputTest */ \"./hooks/useInputTest.js\");\n/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! moment */ \"moment\");\n/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-redux */ \"react-redux\");\n/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react_redux__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _reducers_user__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../reducers/user */ \"./reducers/user.js\");\n/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ant-design/icons */ \"@ant-design/icons\");\n/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_ant_design_icons__WEBPACK_IMPORTED_MODULE_8__);\n\n\n\n\n\n\n\n\n\nconst { Meta  } = antd__WEBPACK_IMPORTED_MODULE_3__.Card;\nconst { Option  } = antd__WEBPACK_IMPORTED_MODULE_3__.Select;\nconst Signup = ({ isModal , openModal , setIsModal  })=>{\n    const { goalpurpose  } = (0,react_redux__WEBPACK_IMPORTED_MODULE_6__.useSelector)((state)=>state.user\n    );\n    const [form] = antd__WEBPACK_IMPORTED_MODULE_3__.Form.useForm();\n    const { 0: btnValue , 1: setBtnValue  } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const btnChange = (e)=>{\n        setBtnValue(e.target.value);\n    };\n    function onChange(date, dateString) {\n        console.log(date, dateString);\n    }\n    const months = [];\n    for(let i = 1; i <= 12; i++){\n        months.push(i);\n    }\n    const days = [];\n    for(let i1 = 1; i1 <= 31; i1++){\n        days.push(i1);\n    }\n    const [title, onChangeTitle] = (0,_hooks_useInputTest__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(\"\");\n    const [purpose, onChangePurpose] = (0,_hooks_useInputTest__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(\"\");\n    // 추가하기\n    const { 0: event , 1: setEvent  } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const onChangeEvent = (v)=>{\n        setEvent(v);\n    };\n    const { 0: start , 1: setStart  } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        year: \"\",\n        month: \"\",\n        day: \"\"\n    });\n    const onChangeStartYear = (date)=>{\n        const dateString = moment__WEBPACK_IMPORTED_MODULE_5___default()(date).format(\"YYYY\");\n        setStart({\n            ...start,\n            year: dateString\n        });\n    };\n    const onChangeStartMonth = (e)=>{\n        setStart({\n            ...start,\n            month: e\n        });\n    };\n    const onChangeStartDay = (e)=>{\n        setStart({\n            ...start,\n            day: e\n        });\n    };\n    const { 0: end , 1: setEnd  } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        year: \"\",\n        month: \"\",\n        day: \"\"\n    });\n    const onChangeEndYear = (date)=>{\n        const dateString = moment__WEBPACK_IMPORTED_MODULE_5___default()(date).format(\"YYYY\");\n        setEnd({\n            ...end,\n            year: dateString\n        });\n    };\n    const onChangeEndMonth = (e)=>{\n        setEnd({\n            ...end,\n            month: e\n        });\n    };\n    const onChangeEndDay = (e)=>{\n        setEnd({\n            ...end,\n            day: e\n        });\n    };\n    // 여기까지\n    const dispatch = (0,react_redux__WEBPACK_IMPORTED_MODULE_6__.useDispatch)();\n    const onSubmit = ()=>{\n        let body = {\n            title,\n            event,\n            purpose,\n            start: start.year + \"-\" + start.month + \"-\" + start.day,\n            end: end.year + \"-\" + end.month + \"-\" + end.day\n        };\n        console.log(body);\n        dispatch({\n            type: _reducers_user__WEBPACK_IMPORTED_MODULE_7__.GOAL_REQUEST,\n            data: body\n        });\n        // dispatch({\n        //     type:ALL_GOAL_REQUEST\n        // })\n        window.location.href = \"/musclePurpose\";\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        setIsModal(false);\n    }, [\n        goalpurpose\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ModalWrapper, {\n        visible: isModal,\n        onCancel: openModal,\n        footer: null,\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(TitleDiv, {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        children: \"\\uC6B4\\uB3D9\\uBAA9\\uD45C\\uC124\\uC815\"\n                    }, void 0, false, {\n                        fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                        lineNumber: 135,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                        children: \"\\uAC04\\uB2E8\\uD569\\uB2C8\\uB2E4\"\n                    }, void 0, false, {\n                        fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                        lineNumber: 136,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                lineNumber: 134,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(FormWrapper, {\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_3__.Form, {\n                    onFinish: onSubmit,\n                    layout: \"horizontal\",\n                    form: form,\n                    size: \"large\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(MaleFemale, {\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_3__.Select, {\n                                placeholder: \"\\uC885\\uBAA9\",\n                                onChange: onChangeEvent,\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Option, {\n                                        value: \"B\",\n                                        children: \"\\uC790\\uC804\\uAC70\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                                        lineNumber: 143,\n                                        columnNumber: 15\n                                    }, undefined),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Option, {\n                                        value: \"R\",\n                                        children: \"\\uB7EC\\uB2DD\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                                        lineNumber: 144,\n                                        columnNumber: 15\n                                    }, undefined)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                                lineNumber: 142,\n                                columnNumber: 13\n                            }, undefined)\n                        }, void 0, false, {\n                            fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                            lineNumber: 141,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(SmallTitle, {\n                            children: \"\\uC81C\\uBAA9\"\n                        }, void 0, false, {\n                            fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                            lineNumber: 148,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_3__.Form.Item, {\n                            rules: [\n                                {\n                                    required: true\n                                }\n                            ],\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_3__.Input, {\n                                value: title,\n                                onChange: onChangeTitle,\n                                placeholder: \"\\uC81C\\uBAA9\"\n                            }, void 0, false, {\n                                fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                                lineNumber: 150,\n                                columnNumber: 13\n                            }, undefined)\n                        }, void 0, false, {\n                            fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                            lineNumber: 149,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(SmallTitle, {\n                            children: \"\\uC6B4\\uB3D9\\uBAA9\\uD45C\"\n                        }, void 0, false, {\n                            fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                            lineNumber: 156,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_3__.Form.Item, {\n                            rules: [\n                                {\n                                    required: true\n                                }\n                            ],\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_3__.Input, {\n                                value: purpose,\n                                onChange: onChangePurpose,\n                                placeholder: \"\\uBAA9\\uD45Ckm\"\n                            }, void 0, false, {\n                                fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                                lineNumber: 158,\n                                columnNumber: 13\n                            }, undefined)\n                        }, void 0, false, {\n                            fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                            lineNumber: 157,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(SmallTitle, {\n                            children: \"\\uC2DC\\uC791\\uB0A0\\uC9DC\"\n                        }, void 0, false, {\n                            fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                            lineNumber: 165,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(SpaceWrapper, {\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_3__.DatePicker, {\n                                    picker: \"year\",\n                                    onChange: onChangeStartYear,\n                                    placeholder: \"\\uB144\\uB3C4\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                                    lineNumber: 167,\n                                    columnNumber: 13\n                                }, undefined),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_3__.Select, {\n                                    name: \"month\",\n                                    placeholder: \"\\uC6D4\",\n                                    onChange: onChangeStartMonth,\n                                    children: months.map((month, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Option, {\n                                            children: month\n                                        }, `${index + 1}`, false, {\n                                            fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                                            lineNumber: 175,\n                                            columnNumber: 17\n                                        }, undefined)\n                                    )\n                                }, void 0, false, {\n                                    fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                                    lineNumber: 173,\n                                    columnNumber: 13\n                                }, undefined),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_3__.Select, {\n                                    name: \"day\",\n                                    placeholder: \"\\uC77C\",\n                                    onChange: onChangeStartDay,\n                                    children: days.map((day, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Option, {\n                                            children: day\n                                        }, `${index + 1}`, false, {\n                                            fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                                            lineNumber: 180,\n                                            columnNumber: 17\n                                        }, undefined)\n                                    )\n                                }, void 0, false, {\n                                    fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                                    lineNumber: 178,\n                                    columnNumber: 13\n                                }, undefined)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                            lineNumber: 166,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(SmallTitle, {\n                            children: \"\\uB05D\\uB098\\uB294\\uB0A0\\uC9DC\"\n                        }, void 0, false, {\n                            fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                            lineNumber: 184,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(SpaceWrapper, {\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_3__.DatePicker, {\n                                    picker: \"year\",\n                                    onChange: onChangeEndYear,\n                                    placeholder: \"\\uB144\\uB3C4\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                                    lineNumber: 186,\n                                    columnNumber: 13\n                                }, undefined),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_3__.Select, {\n                                    name: \"month\",\n                                    placeholder: \"\\uC6D4\",\n                                    onChange: onChangeEndMonth,\n                                    children: months.map((month, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Option, {\n                                            children: month\n                                        }, `${index + 1}`, false, {\n                                            fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                                            lineNumber: 194,\n                                            columnNumber: 17\n                                        }, undefined)\n                                    )\n                                }, void 0, false, {\n                                    fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                                    lineNumber: 192,\n                                    columnNumber: 13\n                                }, undefined),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_3__.Select, {\n                                    name: \"day\",\n                                    placeholder: \"\\uC77C\",\n                                    onChange: onChangeEndDay,\n                                    children: days.map((day, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Option, {\n                                            children: day\n                                        }, `${index + 1}`, false, {\n                                            fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                                            lineNumber: 199,\n                                            columnNumber: 17\n                                        }, undefined)\n                                    )\n                                }, void 0, false, {\n                                    fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                                    lineNumber: 197,\n                                    columnNumber: 13\n                                }, undefined)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                            lineNumber: 185,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_3__.Form.Item, {\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_3__.Button, {\n                                type: \"default\",\n                                htmlType: \"submit\",\n                                children: \"\\uC124\\uC815\"\n                            }, void 0, false, {\n                                fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                                lineNumber: 205,\n                                columnNumber: 13\n                            }, undefined)\n                        }, void 0, false, {\n                            fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                            lineNumber: 204,\n                            columnNumber: 11\n                        }, undefined)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                    lineNumber: 139,\n                    columnNumber: 9\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                lineNumber: 138,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n        lineNumber: 133,\n        columnNumber: 5\n    }, undefined);\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Signup);\n// const BtnWrapper = styled.div` 제거하기\n//   // display: flex;\n//   // justify-content: start;\n//   // margin-top: 10px;\n//   .ant-radio-wrapper {\n//     height: 38px;\n//     line-height: 38px;\n//     padding: 0 5px;\n//     border: 1px solid #ccd0d5;\n//     border-radius: 5px;\n//   }\n// `;\nconst SmallTitle = (styled_components__WEBPACK_IMPORTED_MODULE_2___default().div)`\n  display: flex;\n  justify-content: start;\n  padding-left: 3px;\n`;\n// const SmallSecondTitle = styled(SmallTitle)` 제거\n//   margin-top: 10px;\n// `;\n// 추가하기\nconst SpaceWrapper = styled_components__WEBPACK_IMPORTED_MODULE_2___default()(antd__WEBPACK_IMPORTED_MODULE_3__.Space)`\n  .ant-picker {\n    width: 132px;\n    border-radius: 5px !important;\n  }\n\n  .ant-select-single {\n    width: 125px;\n    border-radius: 5px;\n    // color: rgba(0, 0, 0, 0.4);\n  }\n\n  .ant-select-selector {\n    border-radius: 5px !important;\n  }\n`;\nconst FormWrapper = (styled_components__WEBPACK_IMPORTED_MODULE_2___default().div)`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  height: 470px;\n  // vertical-align:middle;\n  text-align: center;\n  // max-width: 500px;\n  padding: 16px;\n\n  // & Button { 제거\n  //   width: 100%;\n  //   background: #1890ff;\n  //   color: #fff;\n  //   height: 40px;\n  //   margin-top: 5px;\n  // }\n\n  Button {\n    width: 100%;\n    background: #1890ff;\n    color: #fff;\n    height: 48px;\n    margin-top: 5px;\n    font-weight: bold;\n    border-radius: 7px;\n    margin-top: 20px;\n  }\n\n  Button:hover {\n    background: #1683e8;\n    border-color: #1683e8;\n    color: #fff;\n  }\n\n  Button:focus {\n    background: #1890ff;\n    color: #fff;\n  }\n\n  .ant-input,\n  .ant-input-lg {\n    border: 1px solid #ccd0d5;\n    border-radius: 5px;\n  }\n\n  .ant-form-item {\n    margin-bottom: 10px;\n  }\n\n  .ant-form {\n    width: 400px;\n  }\n\n  .ant-form-item-control-input-content {\n    display: inline-block;\n    width: 100%;\n    height: 40.14px;\n  }\n`;\nconst FirstName = styled_components__WEBPACK_IMPORTED_MODULE_2___default()(antd__WEBPACK_IMPORTED_MODULE_3__.Form.Item)`\n  display: inline-block;\n  width: 154px;\n`;\nconst SecondName = styled_components__WEBPACK_IMPORTED_MODULE_2___default()(FirstName)`\n  margin-left: 8px;\n`;\nconst MaleFemale = styled_components__WEBPACK_IMPORTED_MODULE_2___default()(SecondName)`\n  width: 74px;\n\n  .ant-select-single {\n    width: 75px;\n    border-radius: 5px;\n    // color: rgba(0, 0, 0, 0.4);\n  }\n\n  .ant-select-selector {\n    border-radius: 5px !important;\n  }\n`;\nconst TitleDiv = (styled_components__WEBPACK_IMPORTED_MODULE_2___default().div)`\n  display: block;\n  text-align: center;\n  border-bottom: solid 1px #dadde1;\n  padding: 10px 15px 9px 15px;\n\n  div {\n    margin-bottom: 0;\n    font-size: 25px;\n    font-weight: 700;\n  }\n\n  span {\n    font-size: 15px;\n    color: #606770;\n  }\n`;\nconst ModalWrapper = styled_components__WEBPACK_IMPORTED_MODULE_2___default()(antd__WEBPACK_IMPORTED_MODULE_3__.Modal)`\n  top: 130px;\n\n  .ant-modal-content {\n    width: 432px;\n    margin: 0 auto;\n    border-radius: 15px;\n    box-shadow: 0 1px 2px -2px rgb(0 0 0 / 16%), 0 3px 6px 0 rgb(0 0 0 / 12%);\n  }\n  .ant-modal-header {\n    border-radius: 15px;\n  }\n\n  .ant-modal-body {\n    padding: 0;\n  }\n\n  .ant-input-affix-wrapper {\n    // 추가하기\n    border-radius: 5px;\n  }\n`;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/purposeModal.js\n");

/***/ }),

/***/ "./reducers/index.js":
/*!***************************!*\
  !*** ./reducers/index.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! redux */ \"redux\");\n/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(redux__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _user__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./user */ \"./reducers/user.js\");\n/* harmony import */ var _post__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./post */ \"./reducers/post.js\");\n/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./map */ \"./reducers/map.js\");\n/* harmony import */ var next_redux_wrapper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next-redux-wrapper */ \"next-redux-wrapper\");\n/* harmony import */ var next_redux_wrapper__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_redux_wrapper__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\nconst rootReducer = (state, action)=>{\n    switch(action.type){\n        case next_redux_wrapper__WEBPACK_IMPORTED_MODULE_4__.HYDRATE:\n            console.log(\"HYDRATE\", action);\n            return action.payload;\n        default:\n            {\n                const combineReducer = (0,redux__WEBPACK_IMPORTED_MODULE_0__.combineReducers)({\n                    user: _user__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n                    post: _post__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n                    map: _map__WEBPACK_IMPORTED_MODULE_3__[\"default\"]\n                });\n                return combineReducer(state, action);\n            }\n    }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (rootReducer);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZWR1Y2Vycy9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUF1QztBQUNkO0FBQ0E7QUFDRjtBQUNxQjtBQUU1QyxNQUFNSyxXQUFXLEdBQUMsQ0FBQ0MsS0FBSyxFQUFDQyxNQUFNLEdBQUc7SUFDOUIsT0FBT0EsTUFBTSxDQUFDQyxJQUFJO1FBQ2QsS0FBS0osdURBQU87WUFDUkssT0FBTyxDQUFDQyxHQUFHLENBQUMsU0FBUyxFQUFDSCxNQUFNLENBQUMsQ0FBQztZQUM5QixPQUFPQSxNQUFNLENBQUNJLE9BQU8sQ0FBQztRQUMxQjtZQUFTO2dCQUNMLE1BQU1DLGNBQWMsR0FBQ1osc0RBQWUsQ0FBQztvQkFDakNDLElBQUk7b0JBQ0pDLElBQUk7b0JBQ0pDLEdBQUc7aUJBQ04sQ0FBQztnQkFDRixPQUFPUyxjQUFjLENBQUNOLEtBQUssRUFBQ0MsTUFBTSxDQUFDO2FBQ3RDO0tBQ0o7Q0FDSjtBQUVELGlFQUFlRixXQUFXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG9uZ2p1bmUvLi9yZWR1Y2Vycy9pbmRleC5qcz9iOWI2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbWJpbmVSZWR1Y2VycyB9IGZyb20gJ3JlZHV4J1xuaW1wb3J0IHVzZXIgZnJvbSAnLi91c2VyJ1xuaW1wb3J0IHBvc3QgZnJvbSAnLi9wb3N0J1xuaW1wb3J0IG1hcCBmcm9tICcuL21hcCdcbmltcG9ydCB7IEhZRFJBVEUgfSBmcm9tICduZXh0LXJlZHV4LXdyYXBwZXInXG5cbmNvbnN0IHJvb3RSZWR1Y2VyPShzdGF0ZSxhY3Rpb24pPT57XG4gICAgc3dpdGNoKGFjdGlvbi50eXBlKXtcbiAgICAgICAgY2FzZSBIWURSQVRFOlxuICAgICAgICAgICAgY29uc29sZS5sb2coJ0hZRFJBVEUnLGFjdGlvbik7XG4gICAgICAgICAgICByZXR1cm4gYWN0aW9uLnBheWxvYWQ7XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbWJpbmVSZWR1Y2VyPWNvbWJpbmVSZWR1Y2Vycyh7XG4gICAgICAgICAgICAgICAgdXNlcixcbiAgICAgICAgICAgICAgICBwb3N0LFxuICAgICAgICAgICAgICAgIG1hcFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHJldHVybiBjb21iaW5lUmVkdWNlcihzdGF0ZSxhY3Rpb24pXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJvb3RSZWR1Y2VyIl0sIm5hbWVzIjpbImNvbWJpbmVSZWR1Y2VycyIsInVzZXIiLCJwb3N0IiwibWFwIiwiSFlEUkFURSIsInJvb3RSZWR1Y2VyIiwic3RhdGUiLCJhY3Rpb24iLCJ0eXBlIiwiY29uc29sZSIsImxvZyIsInBheWxvYWQiLCJjb21iaW5lUmVkdWNlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./reducers/index.js\n");

/***/ }),

/***/ "./reducers/map.js":
/*!*************************!*\
  !*** ./reducers/map.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"initialStates\": () => (/* binding */ initialStates),\n/* harmony export */   \"ADD_TRACK_REQUEST\": () => (/* binding */ ADD_TRACK_REQUEST),\n/* harmony export */   \"ADD_TRACK_SUCCESS\": () => (/* binding */ ADD_TRACK_SUCCESS),\n/* harmony export */   \"ADD_TRACK_FAILURE\": () => (/* binding */ ADD_TRACK_FAILURE),\n/* harmony export */   \"SEARCH_MAP_REQUEST\": () => (/* binding */ SEARCH_MAP_REQUEST),\n/* harmony export */   \"SEARCH_MAP_SUCCESS\": () => (/* binding */ SEARCH_MAP_SUCCESS),\n/* harmony export */   \"SEARCH_MAP_FAILURE\": () => (/* binding */ SEARCH_MAP_FAILURE),\n/* harmony export */   \"LOAD_MAP_REQUEST\": () => (/* binding */ LOAD_MAP_REQUEST),\n/* harmony export */   \"LOAD_MAP_SUCCESS\": () => (/* binding */ LOAD_MAP_SUCCESS),\n/* harmony export */   \"LOAD_MAP_FAILURE\": () => (/* binding */ LOAD_MAP_FAILURE),\n/* harmony export */   \"ADD_MYMAP_REQUEST\": () => (/* binding */ ADD_MYMAP_REQUEST),\n/* harmony export */   \"ADD_MYMAP_SUCCESS\": () => (/* binding */ ADD_MYMAP_SUCCESS),\n/* harmony export */   \"ADD_MYMAP_FAILURE\": () => (/* binding */ ADD_MYMAP_FAILURE),\n/* harmony export */   \"MOVING_MAP_REQUEST\": () => (/* binding */ MOVING_MAP_REQUEST),\n/* harmony export */   \"MOVING_MAP_SUCCESS\": () => (/* binding */ MOVING_MAP_SUCCESS),\n/* harmony export */   \"MOVING_MAP_FAILURE\": () => (/* binding */ MOVING_MAP_FAILURE),\n/* harmony export */   \"BIKE_MAP_REQUEST\": () => (/* binding */ BIKE_MAP_REQUEST),\n/* harmony export */   \"BIKE_MAP_SUCCESS\": () => (/* binding */ BIKE_MAP_SUCCESS),\n/* harmony export */   \"BIKE_MAP_FAILURE\": () => (/* binding */ BIKE_MAP_FAILURE),\n/* harmony export */   \"RUNNING_MAP_REQUEST\": () => (/* binding */ RUNNING_MAP_REQUEST),\n/* harmony export */   \"RUNNING_MAP_SUCCESS\": () => (/* binding */ RUNNING_MAP_SUCCESS),\n/* harmony export */   \"RUNNING_MAP_FAILURE\": () => (/* binding */ RUNNING_MAP_FAILURE),\n/* harmony export */   \"LOAD_CREATEMAP_REQUEST\": () => (/* binding */ LOAD_CREATEMAP_REQUEST),\n/* harmony export */   \"LOAD_CREATEMAP_SUCCESS\": () => (/* binding */ LOAD_CREATEMAP_SUCCESS),\n/* harmony export */   \"LOAD_CREATEMAP_FAILURE\": () => (/* binding */ LOAD_CREATEMAP_FAILURE),\n/* harmony export */   \"LOAD_MY_LOCATION_REQUEST\": () => (/* binding */ LOAD_MY_LOCATION_REQUEST),\n/* harmony export */   \"LOAD_MY_LOCATION_SUCCESS\": () => (/* binding */ LOAD_MY_LOCATION_SUCCESS),\n/* harmony export */   \"LOAD_MY_LOCATION_FAILURE\": () => (/* binding */ LOAD_MY_LOCATION_FAILURE),\n/* harmony export */   \"LOAD_TRACK_RANK_REQUEST\": () => (/* binding */ LOAD_TRACK_RANK_REQUEST),\n/* harmony export */   \"LOAD_TRACK_RANK_SUCCESS\": () => (/* binding */ LOAD_TRACK_RANK_SUCCESS),\n/* harmony export */   \"LOAD_TRACK_RANK_FAILURE\": () => (/* binding */ LOAD_TRACK_RANK_FAILURE),\n/* harmony export */   \"LOAD_TRACK_MYRANK_REQUEST\": () => (/* binding */ LOAD_TRACK_MYRANK_REQUEST),\n/* harmony export */   \"LOAD_TRACK_MYRANK_SUCCESS\": () => (/* binding */ LOAD_TRACK_MYRANK_SUCCESS),\n/* harmony export */   \"LOAD_TRACK_MYRANK_FAILURE\": () => (/* binding */ LOAD_TRACK_MYRANK_FAILURE),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var shortid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shortid */ \"shortid\");\n/* harmony import */ var shortid__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(shortid__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var immer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! immer */ \"immer\");\n/* harmony import */ var immer__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(immer__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var faker__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! faker */ \"faker\");\n/* harmony import */ var faker__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(faker__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nconst initialStates = {\n    searchMap: [],\n    createMap: [],\n    mapRank: [\n        0\n    ],\n    myMapRank: [\n        0\n    ],\n    loadMap: null,\n    myMap: null,\n    Rankloading: false,\n    RankDone: false,\n    RankError: null,\n    myRankloading: false,\n    myRankDone: false,\n    myRankError: null,\n    movingmapLoading: false,\n    movingmapDone: false,\n    movingmapError: null,\n    runningmapLoading: false,\n    runningmapDone: false,\n    runningmapError: null,\n    bikemapLoading: false,\n    bikemapDone: false,\n    bikemapError: null,\n    searchmapLoading: false,\n    searchmapDone: false,\n    searchmapError: null,\n    loadMyLocationLoading: false,\n    loadMyLocationDone: false,\n    loadMyLocationError: null,\n    loadmapLoading: false,\n    loadmapDone: false,\n    loadmapError: null,\n    loadCreatemapLoading: false,\n    loadCreatemapDone: false,\n    loadCreatemapError: null,\n    addmapLoading: false,\n    addmapDone: false,\n    addmapError: null,\n    addTrackLoading: false,\n    addTrackDone: false,\n    addTrackError: null\n};\nconst ADD_TRACK_REQUEST = \"ADD_TRACK_REQUEST\";\nconst ADD_TRACK_SUCCESS = \"ADD_TRACK_SUCCESS\";\nconst ADD_TRACK_FAILURE = \"ADD_TRACK_FAILURE\";\nconst SEARCH_MAP_REQUEST = \"SEARCH_MAP_REQUEST\";\nconst SEARCH_MAP_SUCCESS = \"SEARCH_MAP_SUCCESS\";\nconst SEARCH_MAP_FAILURE = \"SEARCH_MAP_FAILURE\";\nconst LOAD_MAP_REQUEST = \"LOAD_MAP_REQUEST\";\nconst LOAD_MAP_SUCCESS = \"LOAD_MAP_SUCCESS\";\nconst LOAD_MAP_FAILURE = \"LOAD_MAP_FAILURE\";\nconst ADD_MYMAP_REQUEST = \"ADD_MYMAP_REQUEST\";\nconst ADD_MYMAP_SUCCESS = \"ADD_MYMAP_SUCCESS\";\nconst ADD_MYMAP_FAILURE = \"ADD_MYMAP_FAILURE\";\nconst MOVING_MAP_REQUEST = \"MOVING_MAP_REQUEST\";\nconst MOVING_MAP_SUCCESS = \"MOVING_MAP_SUCCESS\";\nconst MOVING_MAP_FAILURE = \"MOVING_MAP_FAILURE\";\nconst BIKE_MAP_REQUEST = \"BIKE_MAP_REQUEST\";\nconst BIKE_MAP_SUCCESS = \"BIKE_MAP_SUCCESS\";\nconst BIKE_MAP_FAILURE = \"BIKE_MAP_FAILURE\";\nconst RUNNING_MAP_REQUEST = \"RUNNING_MAP_REQUEST\";\nconst RUNNING_MAP_SUCCESS = \"RUNNING_MAP_SUCCESS\";\nconst RUNNING_MAP_FAILURE = \"RUNNING_MAP_FAILURE\";\nconst LOAD_CREATEMAP_REQUEST = \"LOAD_CREATEMAP_REQUEST\";\nconst LOAD_CREATEMAP_SUCCESS = \"LOAD_CREATEMAP_SUCCESS\";\nconst LOAD_CREATEMAP_FAILURE = \"LOAD_CREATEMAP_FAILURE\";\nconst LOAD_MY_LOCATION_REQUEST = \"LOAD_MY_LOCATION_REQUEST\";\nconst LOAD_MY_LOCATION_SUCCESS = \"LOAD_MY_LOCATION_SUCCESS\";\nconst LOAD_MY_LOCATION_FAILURE = \"LOAD_MY_LOCATION_FAILURE\";\nconst LOAD_TRACK_RANK_REQUEST = \"LOAD_TRACK_RANK_REQUEST\";\nconst LOAD_TRACK_RANK_SUCCESS = \"LOAD_TRACK_RANK_SUCCESS\";\nconst LOAD_TRACK_RANK_FAILURE = \"LOAD_TRACK_RANK_FAILURE\";\nconst LOAD_TRACK_MYRANK_REQUEST = \"LOAD_TRACK_MYRANK_REQUEST\";\nconst LOAD_TRACK_MYRANK_SUCCESS = \"LOAD_TRACK_MYRANK_SUCCESS\";\nconst LOAD_TRACK_MYRANK_FAILURE = \"LOAD_TRACK_MYRANK_FAILURE\";\nconst reducer = (state = initialStates, action)=>{\n    return immer__WEBPACK_IMPORTED_MODULE_1___default()(state, (draft)=>{\n        switch(action.type){\n            case LOAD_TRACK_MYRANK_REQUEST:\n                draft.myRankloading = true;\n                draft.myRankDone = false;\n                draft.myRankError = null;\n            case LOAD_TRACK_MYRANK_SUCCESS:\n                draft.myRankloading = false;\n                draft.myRankDone = true;\n                draft.myMapRank = [];\n                draft.myMapRank.push(action.data);\n            case LOAD_TRACK_MYRANK_FAILURE:\n                draft.myRankloading = false, draft.myRankError = \"a\";\n            case LOAD_TRACK_RANK_REQUEST:\n                draft.Rankloading = true;\n                draft.RankDone = false;\n                draft.RankError = null;\n            case LOAD_TRACK_RANK_SUCCESS:\n                draft.Rankloading = false;\n                draft.RankDone = true;\n                draft.mapRank = [];\n                draft.mapRank.push(action.data);\n            // draft.mapRank=action.data\n            case LOAD_TRACK_RANK_FAILURE:\n                draft.Rankloading = false, draft.RankError = \"a\";\n            case SEARCH_MAP_REQUEST:\n                draft.searchmapLoading = true;\n                draft.searchmapDone = false;\n                draft.searchmapError = null;\n                break;\n            case SEARCH_MAP_SUCCESS:\n                draft.searchmapLoading = false;\n                draft.searchmapDone = true;\n                console.log(\"sss\", action.data);\n                draft.searchMap = [];\n                // dummyMap().map((m)=>[\n                //     draft.searchMap.push(m)\n                // ])\n                action.data.result.map((m)=>[\n                        draft.searchMap.push(m)\n                    ]\n                );\n                console.log(\"qqqqq\", draft.searchMap);\n                break;\n            case SEARCH_MAP_FAILURE:\n                draft.searchmapLoading = false;\n                draft.searchmapError = action.error;\n                break;\n            case MOVING_MAP_REQUEST:\n                draft.movingmapLoading = true;\n                draft.movingmapDone = false;\n                break;\n            case MOVING_MAP_SUCCESS:\n                draft.movingmapLoading = false;\n                draft.movingmapDone = true;\n                draft.searchMap = [];\n                action.data.result.map((m)=>[\n                        draft.searchMap.push(m)\n                    ]\n                );\n                break;\n            case MOVING_MAP_FAILURE:\n                draft.movingmapLoading = false;\n                draft.movingmapError = action.error;\n                break;\n            case BIKE_MAP_REQUEST:\n                draft.bikemapLoading = true;\n                draft.bikemapDone = false;\n                break;\n            case BIKE_MAP_SUCCESS:\n                draft.bikemapLoading = false;\n                draft.bikemapDone = true;\n                draft.searchMap = [];\n                action.data.result.map((m)=>[\n                        draft.searchMap.push(m)\n                    ]\n                );\n                break;\n            case BIKE_MAP_FAILURE:\n                draft.bikemapLoading = false;\n                draft.bikemapError = action.error;\n                break;\n            case RUNNING_MAP_REQUEST:\n                draft.runningmapLoading = true;\n                draft.runningmapDone = false;\n                break;\n            case RUNNING_MAP_SUCCESS:\n                draft.runningmapLoading = false;\n                draft.runningmapDone = true;\n                draft.searchMap = [];\n                action.data.result.map((m)=>[\n                        draft.searchMap.push(m)\n                    ]\n                );\n                break;\n            case RUNNING_MAP_FAILURE:\n                draft.runningmapLoading = false;\n                draft.runninmgmapError = action.error;\n                break;\n            case ADD_TRACK_REQUEST:\n                draft.addTrackLoading = true;\n                draft.addTrackDone = false;\n                break;\n            case ADD_TRACK_SUCCESS:\n                draft.addTrackLoading = false;\n                draft.addTrackDone = true;\n                break;\n            case ADD_TRACK_FAILURE:\n                draft.addTrackLoading = false;\n                draft.addTrackError = action.error;\n                break;\n            case LOAD_MAP_REQUEST:\n                draft.loadmapLoading = true;\n                draft.loadmapDone = false;\n                draft.loadmapError = null;\n                break;\n            case LOAD_MAP_SUCCESS:\n                draft.loadmapLoading = false;\n                draft.loadmapDone = true;\n                console.log(\"qwzxc\", action.data);\n                draft.loadMap = action.data;\n                draft.loadMap.altitude = draft.loadMap.altitude.map((a, index)=>({\n                        x: index,\n                        y: a\n                    })\n                );\n                break;\n            case LOAD_MAP_FAILURE:\n                draft.loadmapLoading = false;\n                draft.loadmapError = action.error;\n                break;\n            //\n            case LOAD_MY_LOCATION_REQUEST:\n                draft.loadMyLocationLoading = true;\n                draft.loadMyLocationDone = false;\n                draft.loadMyLocationError = null;\n                break;\n            case LOAD_MY_LOCATION_SUCCESS:\n                draft.loadMyLocationLoading = false;\n                draft.loadMyLocationDone = true;\n                action.data.result.map((m)=>[\n                        draft.searchMap.push(m)\n                    ]\n                );\n                break;\n            case LOAD_MY_LOCATION_FAILURE:\n                draft.loadMyLocationLoading = false;\n                draft.loadMyLocationError = action.error;\n                break;\n            //\n            case LOAD_CREATEMAP_REQUEST:\n                draft.loadCreatemapLoading = true;\n                draft.loadCreatemapDone = false;\n                draft.loadCreatemapError = null;\n                break;\n            case LOAD_CREATEMAP_SUCCESS:\n                draft.loadCreatemapLoading = false;\n                draft.loadCreatemapDone = true;\n                draft.createMap = action.data;\n                draft.createMap.gpsData.altitude = draft.createMap.gpsData.altitude.map((a, index)=>({\n                        x: index,\n                        y: a\n                    })\n                );\n                break;\n            case LOAD_CREATEMAP_FAILURE:\n                draft.loadCreatemapLoading = false;\n                draft.loadCreatemapError = action.error;\n                break;\n            case ADD_MYMAP_REQUEST:\n                draft.addmapLoading = true;\n                draft.addmapDone = false;\n                draft.addmapError = null;\n                break;\n            case ADD_MYMAP_SUCCESS:\n                draft.addmapLoading = false;\n                draft.addmapDone = true;\n                break;\n            case ADD_MYMAP_FAILURE:\n                draft.addmapLoading = false;\n                draft.addmapError = action.error;\n                break;\n            default:\n                return state;\n        }\n    });\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (reducer);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./reducers/map.js\n");

/***/ }),

/***/ "./reducers/post.js":
/*!**************************!*\
  !*** ./reducers/post.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"initialState\": () => (/* binding */ initialState),\n/* harmony export */   \"LOAD_MORE_POST_SUCCESS\": () => (/* binding */ LOAD_MORE_POST_SUCCESS),\n/* harmony export */   \"LOAD_MORE_POST_REQUEST\": () => (/* binding */ LOAD_MORE_POST_REQUEST),\n/* harmony export */   \"LOAD_MORE_POST_FAILURE\": () => (/* binding */ LOAD_MORE_POST_FAILURE),\n/* harmony export */   \"LOADS_POSTS_REQUEST\": () => (/* binding */ LOADS_POSTS_REQUEST),\n/* harmony export */   \"LOADS_POSTS_SUCCESS\": () => (/* binding */ LOADS_POSTS_SUCCESS),\n/* harmony export */   \"LOADS_POSTS_FAILURE\": () => (/* binding */ LOADS_POSTS_FAILURE),\n/* harmony export */   \"LOAD_POSTS_REQUEST\": () => (/* binding */ LOAD_POSTS_REQUEST),\n/* harmony export */   \"LOAD_POSTS_SUCCESS\": () => (/* binding */ LOAD_POSTS_SUCCESS),\n/* harmony export */   \"LOAD_POSTS_FAILURE\": () => (/* binding */ LOAD_POSTS_FAILURE),\n/* harmony export */   \"ADD_COMMENT_REQUEST\": () => (/* binding */ ADD_COMMENT_REQUEST),\n/* harmony export */   \"ADD_COMMENT_SUCCESS\": () => (/* binding */ ADD_COMMENT_SUCCESS),\n/* harmony export */   \"ADD_COMMENT_FAILURE\": () => (/* binding */ ADD_COMMENT_FAILURE),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var shortid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shortid */ \"shortid\");\n/* harmony import */ var shortid__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(shortid__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var immer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! immer */ \"immer\");\n/* harmony import */ var immer__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(immer__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var faker__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! faker */ \"faker\");\n/* harmony import */ var faker__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(faker__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react_icons_fa__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-icons/fa */ \"react-icons/fa\");\n/* harmony import */ var react_icons_fa__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_icons_fa__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\nconst initialState = {\n    mainPosts: [],\n    addCommentDone: false,\n    addCommentLoading: false,\n    addCommentError: false,\n    loadPostsLoading: false,\n    loadPostsDone: false,\n    loadPostsError: null,\n    loadsPostsLoading: false,\n    loadsPostsDone: false,\n    loadsPostsError: null,\n    hasMorePosts: true,\n    loadMorePostLoading: false,\n    loadMorePostDone: false,\n    loadMorePostError: null\n};\nconst LOAD_MORE_POST_SUCCESS = \"LOAD_MORE_POST_SUCCESS\";\nconst LOAD_MORE_POST_REQUEST = \"LOAD_MORE_POST_REQUEST\";\nconst LOAD_MORE_POST_FAILURE = \"LOAD_MORE_POST_FAILURE\";\nconst LOADS_POSTS_REQUEST = \"LOADS_POSTS_REQUEST\";\nconst LOADS_POSTS_SUCCESS = \"LOADS_POSTS_SUCCESS\";\nconst LOADS_POSTS_FAILURE = \"LOADS_POSTS_FAILURE\";\nconst LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nconst LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nconst LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nconst ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nconst ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nconst ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nconst reducer = (state = initialState, action)=>{\n    return immer__WEBPACK_IMPORTED_MODULE_1___default()(state, (draft)=>{\n        switch(action.type){\n            case LOAD_POSTS_REQUEST:\n                draft.loadPostsLoading = true;\n                draft.loadPostsDone = false;\n                draft.loadPostsError = null;\n                break;\n            case LOAD_POSTS_SUCCESS:\n                draft.loadPostsLoading = false;\n                draft.loadPostsDone = true;\n                // draft.hasMorePosts = draft.mainPosts.length < 50;\n                // draft.mainPosts = action.data.concat(draft.mainPosts);\n                //  백만들어지면 포스트 불러올것\n                console.log(\"nexq\", action.data.nextPage);\n                draft.mainPosts = action.data;\n                break;\n            case LOAD_POSTS_FAILURE:\n                draft.loadPostsLoading = false;\n                draft.loadPostsError = \"\\u3147\\u3147\\u3147\";\n                break;\n            case LOAD_MORE_POST_REQUEST:\n                draft.loadMorePostLoading = true;\n                draft.loadMorePostDone = false;\n                draft.loadMorePostError = null;\n                break;\n            case LOAD_MORE_POST_SUCCESS:\n                draft.loadMorePostLoading = false;\n                draft.loadMorePostDone = true;\n                draft.hasMorePosts = draft.mainPosts.data.length < 30;\n                // draft.mainPosts = action.data.concat(draft.mainPosts);\n                //  백만들어지면 포스트 불러올것\n                draft.mainPosts.nextPage = action.data.nextPage;\n                draft.mainPosts.data.push(...action.data.data);\n                break;\n            case LOAD_MORE_POST_FAILURE:\n                draft.loadMorePostLoading = false;\n                draft.loadMorePostError = \"\\u3147\\u3147\\u3147\";\n                break;\n            case LOADS_POSTS_REQUEST:\n                draft.loadsPostsLoading = true;\n                draft.loadsPostsDone = false;\n                draft.loadsPostsError = null;\n                break;\n            case LOADS_POSTS_SUCCESS:\n                draft.loadsPostsLoading = false;\n                draft.loadsPostsDone = true;\n                draft.mainPosts = action.data;\n                break;\n            case LOADS_POSTS_FAILURE:\n                draft.loadsPostsLoading = false;\n                draft.loadsPostsError = \"\\u3147\\u3147\\u3147\";\n                break;\n            case ADD_COMMENT_REQUEST:\n                draft.addCommentLoading = true;\n                draft.addCommentDone = false;\n                break;\n            case ADD_COMMENT_SUCCESS:\n                draft.addCommentLoading = false;\n                draft.addCommentDone = true;\n                const commentpost = draft.mainPosts.find((v)=>v.id === action.data.id\n                );\n                commentpost.comment.unshift(action.data.result.comment);\n                // draft.mainPosts.find((v)=>v.id===action.data.id)\n                draft.mainPosts = draft.mainPosts;\n                break;\n            case ADD_COMMENT_FAILURE:\n                draft.addCommentLoading = false;\n                draft.addCommentError = \"ss\";\n                break;\n            default:\n                return state;\n        }\n    });\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (reducer);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./reducers/post.js\n");

/***/ }),

/***/ "./reducers/user.js":
/*!**************************!*\
  !*** ./reducers/user.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"initialState\": () => (/* binding */ initialState),\n/* harmony export */   \"PROGRESS_REQUEST\": () => (/* binding */ PROGRESS_REQUEST),\n/* harmony export */   \"PROGRESS_SUCCESS\": () => (/* binding */ PROGRESS_SUCCESS),\n/* harmony export */   \"PROGRESS_FAILURE\": () => (/* binding */ PROGRESS_FAILURE),\n/* harmony export */   \"ALL_GOAL_REQUEST\": () => (/* binding */ ALL_GOAL_REQUEST),\n/* harmony export */   \"ALL_GOAL_SUCCESS\": () => (/* binding */ ALL_GOAL_SUCCESS),\n/* harmony export */   \"ALL_GOAL_FAILURE\": () => (/* binding */ ALL_GOAL_FAILURE),\n/* harmony export */   \"GOAL_REQUEST\": () => (/* binding */ GOAL_REQUEST),\n/* harmony export */   \"GOAL_SUCCESS\": () => (/* binding */ GOAL_SUCCESS),\n/* harmony export */   \"GOAL_FAILURE\": () => (/* binding */ GOAL_FAILURE),\n/* harmony export */   \"DELETE_GOAL_REQUEST\": () => (/* binding */ DELETE_GOAL_REQUEST),\n/* harmony export */   \"DELETE_GOAL_SUCCESS\": () => (/* binding */ DELETE_GOAL_SUCCESS),\n/* harmony export */   \"DELETE_GOAL_FAILURE\": () => (/* binding */ DELETE_GOAL_FAILURE),\n/* harmony export */   \"WEATHER_REQUEST\": () => (/* binding */ WEATHER_REQUEST),\n/* harmony export */   \"WEATHER_SUCCESS\": () => (/* binding */ WEATHER_SUCCESS),\n/* harmony export */   \"WEATHER_FAILURE\": () => (/* binding */ WEATHER_FAILURE),\n/* harmony export */   \"USER_RATE_REQUEST\": () => (/* binding */ USER_RATE_REQUEST),\n/* harmony export */   \"USER_RATE_SUCCESS\": () => (/* binding */ USER_RATE_SUCCESS),\n/* harmony export */   \"USER_RATE_FAILURE\": () => (/* binding */ USER_RATE_FAILURE),\n/* harmony export */   \"USER_SEARCH_REQUEST\": () => (/* binding */ USER_SEARCH_REQUEST),\n/* harmony export */   \"USER_SEARCH_SUCCESS\": () => (/* binding */ USER_SEARCH_SUCCESS),\n/* harmony export */   \"USER_SEARCH_FAILURE\": () => (/* binding */ USER_SEARCH_FAILURE),\n/* harmony export */   \"LOAD_MY_INFO_REQUEST\": () => (/* binding */ LOAD_MY_INFO_REQUEST),\n/* harmony export */   \"LOAD_MY_INFO_SUCCESS\": () => (/* binding */ LOAD_MY_INFO_SUCCESS),\n/* harmony export */   \"LOAD_MY_INFO_FAILURE\": () => (/* binding */ LOAD_MY_INFO_FAILURE),\n/* harmony export */   \"LOAD_LOGIN_REQUEST\": () => (/* binding */ LOAD_LOGIN_REQUEST),\n/* harmony export */   \"LOAD_LOGIN_SUCCESS\": () => (/* binding */ LOAD_LOGIN_SUCCESS),\n/* harmony export */   \"LOAD_LOGIN_FAILURE\": () => (/* binding */ LOAD_LOGIN_FAILURE),\n/* harmony export */   \"SIGNUP_SUCCESS\": () => (/* binding */ SIGNUP_SUCCESS),\n/* harmony export */   \"SIGNUP_REQUEST\": () => (/* binding */ SIGNUP_REQUEST),\n/* harmony export */   \"SIGNUP_FAIL\": () => (/* binding */ SIGNUP_FAIL),\n/* harmony export */   \"LOGOUT_REQUEST\": () => (/* binding */ LOGOUT_REQUEST),\n/* harmony export */   \"LOGOUT_SUCCESS\": () => (/* binding */ LOGOUT_SUCCESS),\n/* harmony export */   \"LOGOUT_FAIL\": () => (/* binding */ LOGOUT_FAIL),\n/* harmony export */   \"LOGIN_REQUEST\": () => (/* binding */ LOGIN_REQUEST),\n/* harmony export */   \"LOGIN_SUCCESS\": () => (/* binding */ LOGIN_SUCCESS),\n/* harmony export */   \"LOGIN_FAIL\": () => (/* binding */ LOGIN_FAIL),\n/* harmony export */   \"FOLLOWING_REQUEST\": () => (/* binding */ FOLLOWING_REQUEST),\n/* harmony export */   \"FOLLOWING_SUCCESS\": () => (/* binding */ FOLLOWING_SUCCESS),\n/* harmony export */   \"FOLLOWING_FAIL\": () => (/* binding */ FOLLOWING_FAIL),\n/* harmony export */   \"UNFOLLOWING_REQUEST\": () => (/* binding */ UNFOLLOWING_REQUEST),\n/* harmony export */   \"UNFOLLOWING_SUCCESS\": () => (/* binding */ UNFOLLOWING_SUCCESS),\n/* harmony export */   \"UNFOLLOWING_FAIL\": () => (/* binding */ UNFOLLOWING_FAIL),\n/* harmony export */   \"WEEKRECORD_REQUEST\": () => (/* binding */ WEEKRECORD_REQUEST),\n/* harmony export */   \"WEEKRECORD_SUCCESS\": () => (/* binding */ WEEKRECORD_SUCCESS),\n/* harmony export */   \"WEEKRECORD_FAILURE\": () => (/* binding */ WEEKRECORD_FAILURE),\n/* harmony export */   \"WEEKRECORD_BIKE_REQUEST\": () => (/* binding */ WEEKRECORD_BIKE_REQUEST),\n/* harmony export */   \"WEEKRECORD_BIKE_SUCCESS\": () => (/* binding */ WEEKRECORD_BIKE_SUCCESS),\n/* harmony export */   \"WEEKRECORD_BIKE_FAILURE\": () => (/* binding */ WEEKRECORD_BIKE_FAILURE),\n/* harmony export */   \"DELETE_MYPOST_REQUEST\": () => (/* binding */ DELETE_MYPOST_REQUEST),\n/* harmony export */   \"DELETE_MYPOST_SUCCESS\": () => (/* binding */ DELETE_MYPOST_SUCCESS),\n/* harmony export */   \"DELETE_MYPOST_FAILURE\": () => (/* binding */ DELETE_MYPOST_FAILURE),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var immer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! immer */ \"immer\");\n/* harmony import */ var immer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(immer__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./map */ \"./reducers/map.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/router */ \"next/router\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nconst initialState = {\n    weathers: null,\n    goalpurpose: null,\n    allPurpose: null,\n    purposeProgress: null,\n    me: null,\n    searchUsers: [],\n    weekRecord: null,\n    userRate: null,\n    weekBikeRecord: null,\n    loadLogInLoading: false,\n    loadLogInDone: false,\n    loadLogInError: null,\n    logInLoading: false,\n    LogInDone: false,\n    logInError: null,\n    logOutLoading: false,\n    logOutDone: false,\n    logOutError: null,\n    followLoading: false,\n    followDone: false,\n    followError: null,\n    unfollowLoading: false,\n    unfollowDone: false,\n    unfollowError: null,\n    signUpLoading: false,\n    signUpDone: false,\n    signUpError: null,\n    myInfoLoading: false,\n    myInfoDone: false,\n    myInfoError: null,\n    userSearchDone: false,\n    userSearchError: null,\n    userSearchLoading: false,\n    weekRecordLoading: false,\n    weekRecordDone: false,\n    weekRecordError: null,\n    deleteMyPostLoading: false,\n    deleteMyPostDone: false,\n    deleteMyPostError: null,\n    userRateLoading: false,\n    userRateDone: false,\n    userRateError: null\n};\nconst PROGRESS_REQUEST = \"PROGRESS_REQUEST\";\nconst PROGRESS_SUCCESS = \"PROGRESS_SUCCESS\";\nconst PROGRESS_FAILURE = \"PROGRESS_FAILURE\";\nconst ALL_GOAL_REQUEST = \"ALL_GOAL_REQUEST\";\nconst ALL_GOAL_SUCCESS = \"ALL_GOAL_SUCCESS\";\nconst ALL_GOAL_FAILURE = \"ALL_GOAL_FAILURE\";\nconst GOAL_REQUEST = \"GOAL_REQUEST\";\nconst GOAL_SUCCESS = \"GOAL_SUCCESS\";\nconst GOAL_FAILURE = \"GOAL_FAILURE\";\nconst DELETE_GOAL_REQUEST = \"DELETE_GOAL_REQUEST\";\nconst DELETE_GOAL_SUCCESS = \"DELETE_GOAL_SUCCESS\";\nconst DELETE_GOAL_FAILURE = \"DELETE_GOAL_FAILURE\";\nconst WEATHER_REQUEST = \"WEATHER_REQUEST\";\nconst WEATHER_SUCCESS = \"WEATHER_SUCCESS\";\nconst WEATHER_FAILURE = \"WEATHER_FAILURE\";\nconst USER_RATE_REQUEST = \"USER_RATE_REQUEST\";\nconst USER_RATE_SUCCESS = \"USER_RATE_SUCCESS\";\nconst USER_RATE_FAILURE = \"USER_RATE_FAILURE\";\nconst USER_SEARCH_REQUEST = \"USER_SEARCH_REQUEST\";\nconst USER_SEARCH_SUCCESS = \"USER_SEARCH_SUCCESS\";\nconst USER_SEARCH_FAILURE = \"USER_SEARCH_FAILURE\";\nconst LOAD_MY_INFO_REQUEST = \"LOAD_MY_INFO_REQUEST\";\nconst LOAD_MY_INFO_SUCCESS = \"LOAD_MY_INFO_SUCCESS\";\nconst LOAD_MY_INFO_FAILURE = \"LOAD_MY_INFO_FAILURE\";\nconst LOAD_LOGIN_REQUEST = \"LOAD_LOGIN_REQUEST\";\nconst LOAD_LOGIN_SUCCESS = \"LOAD_LOGIN_SUCCESS\";\nconst LOAD_LOGIN_FAILURE = \"LOAD_LOGIN_FAILURE\";\nconst SIGNUP_SUCCESS = \"SIGNUP_SUCCESS\";\nconst SIGNUP_REQUEST = \"SIGNUP_REQUEST\";\nconst SIGNUP_FAIL = \"SIGNUP_FAIL\";\nconst LOGOUT_REQUEST = \"LOGOUT_REQUEST\";\nconst LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\nconst LOGOUT_FAIL = \"LOGOUT_FAIL\";\nconst LOGIN_REQUEST = \"LOGIN_REQUEST\";\nconst LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nconst LOGIN_FAIL = \"LOGIN_FAIL\";\nconst FOLLOWING_REQUEST = \"FOLLOWING_REQUEST\";\nconst FOLLOWING_SUCCESS = \"FOLLOWING_SUCCESS\";\nconst FOLLOWING_FAIL = \"FOLLOWING_FAIL\";\nconst UNFOLLOWING_REQUEST = \"UNFOLLOWING_REQUEST\";\nconst UNFOLLOWING_SUCCESS = \"UNFOLLOWING_SUCCESS\";\nconst UNFOLLOWING_FAIL = \"UNFOLLOWING_FAIL\";\nconst WEEKRECORD_REQUEST = \"WEEKRECORD_REQUEST\";\nconst WEEKRECORD_SUCCESS = \"WEEKRECORD_SUCCESS\";\nconst WEEKRECORD_FAILURE = \"WEEKRECORD_FAILURE\";\nconst WEEKRECORD_BIKE_REQUEST = \"WEEKRECORD_BIKE_REQUEST\";\nconst WEEKRECORD_BIKE_SUCCESS = \"WEEKRECORD_BIKE_SUCCESS\";\nconst WEEKRECORD_BIKE_FAILURE = \"WEEKRECORD_BIKE_FAILURE\";\nconst DELETE_MYPOST_REQUEST = \"DELETE_MYPOST_REQUEST\";\nconst DELETE_MYPOST_SUCCESS = \"DELETE_MYPOST_SUCCESS\";\nconst DELETE_MYPOST_FAILURE = \"DELETE_MYPOST_FAILURE\";\nconst reducer = (state = initialState, action)=>{\n    return immer__WEBPACK_IMPORTED_MODULE_0___default()(state, (draft)=>{\n        switch(action.type){\n            case DELETE_GOAL_REQUEST:\n                break;\n            case DELETE_GOAL_SUCCESS:\n                break;\n            case DELETE_GOAL_FAILURE:\n                break;\n            case PROGRESS_REQUEST:\n                break;\n            case PROGRESS_SUCCESS:\n                draft.purposeProgress = action.data;\n                break;\n            case PROGRESS_FAILURE:\n                break;\n            case ALL_GOAL_REQUEST:\n                break;\n            case ALL_GOAL_SUCCESS:\n                draft.allPurpose = action.data;\n                break;\n            case ALL_GOAL_FAILURE:\n                break;\n            case GOAL_REQUEST:\n                break;\n            case GOAL_SUCCESS:\n                if (action.data.title) {\n                    draft.goalpurpose = action.data;\n                }\n                break;\n            case GOAL_FAILURE:\n                break;\n            case WEATHER_REQUEST:\n                break;\n            case WEATHER_SUCCESS:\n                draft.weathers = action.data;\n                break;\n            case WEATHER_FAILURE:\n                break;\n            case WEEKRECORD_BIKE_REQUEST:\n                draft.weekRecordLoading = true;\n                draft.weekRecordDone = false;\n                break;\n            case WEEKRECORD_BIKE_SUCCESS:\n                draft.weekRecordLoading = false;\n                draft.weekRecordDone = true;\n                // console.log('ghjka',action.data)\n                draft.weekBikeRecord = action.data;\n                break;\n            case WEEKRECORD_BIKE_FAILURE:\n                draft.weekRecordDone = false;\n                draft.weekRecordLoading = false;\n                draft.weekRecordError = \"error\";\n                break;\n            case WEEKRECORD_REQUEST:\n                draft.weekRecordLoading = true;\n                draft.weekRecordDone = false;\n                break;\n            case WEEKRECORD_SUCCESS:\n                draft.weekRecordLoading = false;\n                draft.weekRecordDone = true;\n                console.log(\"ghjka\", action.data);\n                draft.weekRecord = action.data;\n                break;\n            case WEEKRECORD_FAILURE:\n                draft.weekRecordDone = false;\n                draft.weekRecordLoading = false;\n                draft.weekRecordError = \"error\";\n                break;\n            case USER_RATE_REQUEST:\n                draft.userRateLoading = true;\n                draft.userRateDone = false;\n                break;\n            case USER_RATE_SUCCESS:\n                draft.userRateLoading = false;\n                draft.userRateDone = true;\n                console.log(\"ghjka\", action.data);\n                draft.userRate = action.data;\n                break;\n            case USER_RATE_FAILURE:\n                draft.userRateDone = false;\n                draft.userRateLoading = false;\n                draft.userRateError = \"error\";\n                break;\n            case LOGIN_REQUEST:\n                draft.logInLoading = true;\n                break;\n            case LOGIN_SUCCESS:\n                draft.logInLoading = false;\n                // draft.me=dummyUser(action.data)  \n                draft.me = null;\n                draft.me = action.data;\n                break;\n            case LOGIN_FAIL:\n                draft.logInLoading = false;\n                break;\n            case LOAD_LOGIN_REQUEST:\n                draft.loadLogInLoading = true;\n                break;\n            case LOAD_LOGIN_SUCCESS:\n                draft.loadLogInLoading = false;\n                draft.me = action.data;\n                break;\n            case LOAD_LOGIN_FAILURE:\n                draft.loadLogInLoading = false;\n                break;\n            case LOGOUT_REQUEST:\n                draft.logOutLoading = true;\n                break;\n            case LOGOUT_SUCCESS:\n                draft.logOutLoading = false;\n                draft.me = null;\n                window.location.href = \"/LoginTest\";\n                break;\n            case LOGOUT_FAIL:\n                draft.logOutLoading = false;\n                break;\n            case FOLLOWING_REQUEST:\n                draft.followLoading = true;\n                draft.followError = null;\n                draft.followDone = false;\n                break;\n            case FOLLOWING_SUCCESS:\n                draft.followLoading = false;\n                draft.me.followings.push({\n                    id: action.data.id,\n                    name: action.data.name,\n                    sex: action.data.sex,\n                    profile: action.data.profile,\n                    mmr: action.data.mmr\n                });\n                draft.followDone = true;\n                break;\n            case FOLLOWING_FAIL:\n                draft.followLoading = false;\n                draft.followError = action.error;\n                break;\n            case UNFOLLOWING_REQUEST:\n                draft.unfollowLoading = true;\n                draft.unfollowError = null;\n                draft.unfollowDone = false;\n                break;\n            case UNFOLLOWING_SUCCESS:\n                draft.unfollowLoading = false;\n                draft.me.followings = draft.me.followings.filter((v)=>v.id !== action.data\n                );\n                draft.unfollowDone = true;\n                break;\n            case UNFOLLOWING_FAIL:\n                draft.unfollowLoading = false;\n                draft.unfollowError = action.error;\n                break;\n            case SIGNUP_REQUEST:\n                draft.signUpLoading = true;\n                draft.signUpError = null;\n                draft.signUpDone = false;\n                break;\n            case SIGNUP_SUCCESS:\n                draft.signUpLoading = false;\n                draft.signUpDone = true;\n                break;\n            case SIGNUP_FAIL:\n                draft.signUpLoading = false;\n                draft.signUpError = action.error;\n                break;\n            case USER_SEARCH_REQUEST:\n                draft.userSearchLoading = true;\n                draft.userSearchError = null;\n                draft.userSearchDone = false;\n                break;\n            case USER_SEARCH_SUCCESS:\n                draft.userSearchLoading = false;\n                draft.userSearchDone = true;\n                draft.searchUsers = action.data.data;\n                break;\n            case USER_SEARCH_FAILURE:\n                draft.userSearchLoading = false;\n                draft.userSearchError = action.error;\n                break;\n            case LOAD_MY_INFO_REQUEST:\n                draft.myInfoLoading = true;\n                draft.myInfoError = null;\n                draft.myInfoDone = false;\n                break;\n            case LOAD_MY_INFO_SUCCESS:\n                draft.myInfoLoading = false;\n                draft.myInfoDone = false;\n                // draft.me=null\n                console.log(\"\\uB370\\uC774\\uD130\\uC815\\uBCF4\", action.data);\n                draft.me = action.data;\n                break;\n            case LOAD_MY_INFO_FAILURE:\n                draft.myInfoLoading = false;\n                draft.myInfoError = action.error;\n                break;\n            case DELETE_MYPOST_REQUEST:\n                draft.deleteMyPostLoading = true;\n                draft.deleteMyPostDone = false;\n                break;\n            case DELETE_MYPOST_SUCCESS:\n                draft.deleteMyPostLoading = false;\n                draft.deleteMyPostDone = true;\n                // draft.me.followings = draft.me.followings.filter((v) => v.id !== action.data);\n                draft.me.posts = draft.me.posts.filter((v)=>v.id !== action.data\n                );\n                break;\n            case DELETE_MYPOST_FAILURE:\n                draft.deleteMyPostLoading = false;\n                draft.deleteMyPostDone = false;\n                draft.deleteMyPostError = \"error\";\n                break;\n            default:\n                return state;\n        }\n    });\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (reducer);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./reducers/user.js\n");

/***/ }),

/***/ "./sagas/index.js":
/*!************************!*\
  !*** ./sagas/index.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ rootSaga)\n/* harmony export */ });\n/* harmony import */ var redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! redux-saga/effects */ \"redux-saga/effects\");\n/* harmony import */ var redux_saga_effects__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _post__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./post */ \"./sagas/post.js\");\n/* harmony import */ var _user__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./user */ \"./sagas/user.js\");\n/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./map */ \"./sagas/map.js\");\n\n\n\n\n// import axios from 'axios'\n// axios.defaults.baseURL=\"http://localhost:3065\"\n// axios.defaults.withCredentials=true\nfunction* rootSaga() {\n    yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.all)([\n        (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.fork)(_post__WEBPACK_IMPORTED_MODULE_1__[\"default\"]),\n        (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.fork)(_user__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n        (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.fork)(_map__WEBPACK_IMPORTED_MODULE_3__[\"default\"])\n    ]);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zYWdhcy9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBc0Y7QUFFekQ7QUFDQTtBQUNGO0FBRTNCLDRCQUE0QjtBQUU1QixpREFBaUQ7QUFDakQsc0NBQXNDO0FBRXZCLFVBQVVXLFFBQVEsR0FBRTtJQUM5QixNQUFNWCx1REFBRyxDQUFDO1FBQ1BFLHdEQUFJLENBQUNNLDZDQUFRLENBQUM7UUFDZE4sd0RBQUksQ0FBQ08sNkNBQVEsQ0FBQztRQUNkUCx3REFBSSxDQUFDUSw0Q0FBTyxDQUFDO0tBQ2YsQ0FBQztDQUNOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG9uZ2p1bmUvLi9zYWdhcy9pbmRleC5qcz9kMDY3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7YWxsLGNhbGwsZm9yayxwdXQsdGFrZSwgdGFrZUV2ZXJ5LCB0YWtlTGF0ZXN0LGRlbGF5fSBmcm9tICdyZWR1eC1zYWdhL2VmZmVjdHMnXG5cbmltcG9ydCBwb3N0U2FnYSBmcm9tICcuL3Bvc3QnXG5pbXBvcnQgdXNlclNhZ2EgZnJvbSAnLi91c2VyJ1xuaW1wb3J0IG1hcFNhZ2EgZnJvbSAnLi9tYXAnXG5cbi8vIGltcG9ydCBheGlvcyBmcm9tICdheGlvcydcblxuLy8gYXhpb3MuZGVmYXVsdHMuYmFzZVVSTD1cImh0dHA6Ly9sb2NhbGhvc3Q6MzA2NVwiXG4vLyBheGlvcy5kZWZhdWx0cy53aXRoQ3JlZGVudGlhbHM9dHJ1ZVxuIFxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24qIHJvb3RTYWdhKCl7XG4gICAgIHlpZWxkIGFsbChbXG4gICAgICAgIGZvcmsocG9zdFNhZ2EpLFxuICAgICAgICBmb3JrKHVzZXJTYWdhKSxcbiAgICAgICAgZm9yayhtYXBTYWdhKVxuICAgICBdKVxufVxuXG5cblxuXG5cbiJdLCJuYW1lcyI6WyJhbGwiLCJjYWxsIiwiZm9yayIsInB1dCIsInRha2UiLCJ0YWtlRXZlcnkiLCJ0YWtlTGF0ZXN0IiwiZGVsYXkiLCJwb3N0U2FnYSIsInVzZXJTYWdhIiwibWFwU2FnYSIsInJvb3RTYWdhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./sagas/index.js\n");

/***/ }),

/***/ "./sagas/map.js":
/*!**********************!*\
  !*** ./sagas/map.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ rootSaga)\n/* harmony export */ });\n/* harmony import */ var redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! redux-saga/effects */ \"redux-saga/effects\");\n/* harmony import */ var redux_saga_effects__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _reducers_map__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../reducers/map */ \"./reducers/map.js\");\n/* harmony import */ var _reducers_user__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../reducers/user */ \"./reducers/user.js\");\n\n\n\n\nconst searchMapAPI = async (datas)=>{\n    try {\n        const res = await fetch(`https://2yubi.shop/api/tracks/search?bound1=${datas.north.lng}&bound2=${datas.north.lat}&bound3=${datas.south.lng}&bound4=${datas.south.lat}&event=${datas.event}`, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\"\n            },\n            credentials: \"include\"\n        });\n        const data = await res.json();\n        return data;\n    } catch (err) {\n        console.log(err);\n    }\n};\nfunction* searchMap(action) {\n    try {\n        const result = yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.call)(searchMapAPI, action.data);\n        // console.log('search',result)\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_map__WEBPACK_IMPORTED_MODULE_2__.SEARCH_MAP_SUCCESS,\n            data: result\n        });\n    } catch (err) {\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_map__WEBPACK_IMPORTED_MODULE_2__.SEARCH_MAP_FAILURE,\n            error: err.response.data\n        });\n    }\n}\nconst loadMapAPI = async (datas)=>{\n    const { data  } = await axios__WEBPACK_IMPORTED_MODULE_1___default().get(`https://2yubi.shop/api/tracks?track_id=${datas}`);\n    return data;\n};\nfunction* loadMap(action) {\n    try {\n        const result = yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.call)(loadMapAPI, action.data);\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_map__WEBPACK_IMPORTED_MODULE_2__.LOAD_MAP_SUCCESS,\n            data: result\n        });\n    } catch (err) {\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_map__WEBPACK_IMPORTED_MODULE_2__.LOAD_MAP_FAILURE,\n            error: \"ss\"\n        });\n    }\n}\nconst movingMapAPI = async (datas)=>{\n    try {\n        const res = await fetch(`https://2yubi.shop/api/tracks/search?bound1=${datas.north.lng}&bound2=${datas.north.lat}&bound3=${datas.south.lng}&bound4=${datas.south.lat}&event=${datas.event}`, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\"\n            },\n            credentials: \"include\"\n        });\n        const data = await res.json();\n        return data;\n    } catch (err) {\n        console.log(err);\n    }\n};\nfunction* movingMap(action) {\n    try {\n        const result = yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.call)(movingMapAPI, action.data);\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_map__WEBPACK_IMPORTED_MODULE_2__.MOVING_MAP_SUCCESS,\n            data: result\n        });\n    } catch (err) {\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_map__WEBPACK_IMPORTED_MODULE_2__.MOVING_MAP_FAILURE,\n            error: err.response.data\n        });\n    }\n}\nconst runningMapAPI = async (datas)=>{\n    try {\n        const res = await fetch(`https://2yubi.shop/api/tracks/search?bound1=${datas.north.lng}&bound2=${datas.north.lat}&bound3=${datas.south.lng}&bound4=${datas.south.lat}&event=${datas.event}`, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\"\n            },\n            credentials: \"include\"\n        });\n        const data = await res.json();\n        return data;\n    } catch (err) {\n        console.log(err);\n    }\n};\nfunction* runningMap(action) {\n    try {\n        const result = yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.call)(runningMapAPI, action.data);\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_map__WEBPACK_IMPORTED_MODULE_2__.RUNNING_MAP_SUCCESS,\n            data: result\n        });\n    } catch (err) {\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_map__WEBPACK_IMPORTED_MODULE_2__.RUNNING_MAP_FAILURE,\n            error: err.response.data\n        });\n    }\n}\nconst bikeMapAPI = async (datas)=>{\n    try {\n        const res = await fetch(`https://2yubi.shop/api/tracks/search?bound1=${datas.north.lng}&bound2=${datas.north.lat}&bound3=${datas.south.lng}&bound4=${datas.south.lat}&event=${datas.event}`, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\"\n            },\n            credentials: \"include\"\n        });\n        const data = await res.json();\n        return data;\n    } catch (err) {\n        console.log(err);\n    }\n};\nfunction* bikeMap(action) {\n    try {\n        const result = yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.call)(bikeMapAPI, action.data);\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_map__WEBPACK_IMPORTED_MODULE_2__.BIKE_MAP_SUCCESS,\n            data: result\n        });\n    } catch (err) {\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_map__WEBPACK_IMPORTED_MODULE_2__.BIKE_MAP_FAILURE,\n            error: err.response.data\n        });\n    }\n}\nconst createmapLoadAPI = async (datas)=>{\n    try {\n        // https://2yubi.shop/api/gpsData/check?gpsId=62556bf05f21e60fb3e47d09\n        const res = await fetch(`https://2yubi.shop/api/gpsData/check?gpsId=${datas}`, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\"\n            },\n            credentials: \"include\"\n        });\n        const data = await res.json();\n        console.log(\"sdkmflkvmdfkoj\", data);\n        return data;\n    } catch (err) {\n        console.log(\"dongerr\", err);\n    }\n};\nfunction* createmapLoad(action) {\n    try {\n        const result = yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.call)(createmapLoadAPI, action.data);\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_map__WEBPACK_IMPORTED_MODULE_2__.LOAD_CREATEMAP_SUCCESS,\n            data: result\n        });\n    } catch (err) {\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_map__WEBPACK_IMPORTED_MODULE_2__.LOAD_CREATEMAP_FAILURE,\n            error: \"as\"\n        });\n    }\n}\nconst addTrackAPI = async (datas)=>{\n    try {\n        const res = await fetch(`https://2yubi.shop/api/tracks`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\"\n            },\n            credentials: \"include\",\n            body: JSON.stringify({\n                gpsData: datas\n            })\n        });\n        const data = await res.json();\n        return data;\n    } catch (err) {\n        console.log(err);\n    }\n};\nfunction* addTrack(action) {\n    try {\n        const result = yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.call)(addTrackAPI, action.data);\n        console.log(\"dsss\", result);\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_map__WEBPACK_IMPORTED_MODULE_2__.ADD_TRACK_SUCCESS\n        });\n    } catch (err) {\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_map__WEBPACK_IMPORTED_MODULE_2__.ADD_TRACK_FAILURE,\n            error: err.response.data\n        });\n    }\n}\nconst myLocationAPI = async (datas)=>{\n    try {\n        const res = await fetch(`https://2yubi.shop/api/tracks/search?bound1=${datas.north.lng}&bound2=${datas.north.lat}&bound3=${datas.south.lng}&bound4=${datas.south.lat}&event=${datas.event}`, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\"\n            },\n            credentials: \"include\"\n        });\n        const data = await res.json();\n        return data;\n    } catch (err) {\n        console.log(err);\n    }\n};\nfunction* myLocation(action) {\n    try {\n        const result = yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.call)(myLocationAPI, action.data);\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_map__WEBPACK_IMPORTED_MODULE_2__.LOAD_MY_LOCATION_SUCCESS,\n            data: result\n        });\n    } catch (err) {\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_map__WEBPACK_IMPORTED_MODULE_2__.LOAD_MY_LOCATION_FAILURE,\n            error: err.response.data\n        });\n    }\n}\nconst trackRankAPI = async (datas)=>{\n    // try{\n    //     const res= await fetch(`https://2yubi.shop/api/ranking/track?track_id=${datas}`, {\n    //         method: \"GET\",\n    //         headers: {\n    //           \"Content-Type\": \"application/json\",\n    //           Accept: \"application/json\",\n    //         },\n    //         credentials: \"include\",\n    //       });\n    //       const data= await res.json()\n    //       return data\n    // }catch(err){\n    //     console.log(err)\n    // }\n    const res = await axios__WEBPACK_IMPORTED_MODULE_1___default().get(`https://2yubi.shop/api/ranking/track?track_id=${datas}`);\n    const data = await res;\n    console.log(\"qwertyuiop\", data);\n    // console.log('',data)\n    return data;\n};\nfunction* trackRank(action) {\n    try {\n        const result = yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.call)(trackRankAPI, action.data);\n        console.log(\"osdghjdj\", result.data.data);\n        if (result.status == 200) {\n            yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n                type: _reducers_map__WEBPACK_IMPORTED_MODULE_2__.LOAD_TRACK_RANK_SUCCESS,\n                data: result.data.data\n            });\n        } else if (result.status == 204) {\n            yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n                type: _reducers_map__WEBPACK_IMPORTED_MODULE_2__.LOAD_TRACK_RANK_SUCCESS,\n                data: 0\n            });\n        }\n    } catch (err) {\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_map__WEBPACK_IMPORTED_MODULE_2__.LOAD_TRACK_RANK_FAILURE,\n            error: \"aa\"\n        });\n    }\n}\nconst trackMyRankAPI = async (datas)=>{\n    // try{\n    //     const res= await fetch(`https://2yubi.shop/api/ranking/myRank?track_id=${datas}`, {\n    //         method: \"GET\",\n    //         headers: {\n    //           \"Content-Type\": \"application/json\",\n    //           Accept: \"application/json\",\n    //         },\n    //         credentials: \"include\",\n    //       });\n    //       const data= await res.json()\n    //       console.log('myrankkkdnate',data)\n    //       return data\n    // }catch(err){\n    //     console.log(err)\n    // }\n    const res = await axios__WEBPACK_IMPORTED_MODULE_1___default().get(`https://2yubi.shop/api/ranking/myRank?track_id=${datas}`);\n    const data = await res;\n    console.log(\"zxcvbnm\", data);\n    return data;\n};\nfunction* trackMyRank(action) {\n    try {\n        console.log(\"action\", action.data);\n        const result = yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.call)(trackMyRankAPI, action.data);\n        console.log(\"myTrack\", result);\n        if (result.status == 200) {\n            yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n                type: _reducers_map__WEBPACK_IMPORTED_MODULE_2__.LOAD_TRACK_MYRANK_SUCCESS,\n                data: result.data\n            });\n        } else if (result.status == 204) {\n            yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n                type: _reducers_map__WEBPACK_IMPORTED_MODULE_2__.LOAD_TRACK_MYRANK_SUCCESS,\n                data: 0\n            });\n        }\n    } catch (err) {\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_map__WEBPACK_IMPORTED_MODULE_2__.LOAD_TRACK_MYRANK_FAILURE,\n            error: \"aa\"\n        });\n    }\n}\nfunction* watchSearchMap() {\n    yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.takeLatest)(_reducers_map__WEBPACK_IMPORTED_MODULE_2__.SEARCH_MAP_REQUEST, searchMap);\n}\nfunction* wahchLoadMap() {\n    yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.takeLatest)(_reducers_map__WEBPACK_IMPORTED_MODULE_2__.LOAD_MAP_REQUEST, loadMap);\n}\nfunction* watchMovingMap() {\n    yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.takeLatest)(_reducers_map__WEBPACK_IMPORTED_MODULE_2__.MOVING_MAP_REQUEST, movingMap);\n}\nfunction* watchBikeMap() {\n    yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.takeLatest)(_reducers_map__WEBPACK_IMPORTED_MODULE_2__.BIKE_MAP_REQUEST, bikeMap);\n}\nfunction* watchRunningMap() {\n    yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.takeLatest)(_reducers_map__WEBPACK_IMPORTED_MODULE_2__.RUNNING_MAP_REQUEST, runningMap);\n}\nfunction* watchCreateMapLoad() {\n    yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.takeLatest)(_reducers_map__WEBPACK_IMPORTED_MODULE_2__.LOAD_CREATEMAP_REQUEST, createmapLoad);\n}\nfunction* watchAddTrack() {\n    yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.takeLatest)(_reducers_map__WEBPACK_IMPORTED_MODULE_2__.ADD_TRACK_REQUEST, addTrack);\n}\nfunction* watchMyLocation() {\n    yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.takeLatest)(_reducers_map__WEBPACK_IMPORTED_MODULE_2__.LOAD_MY_LOCATION_REQUEST, myLocation);\n}\nfunction* watchMapRank() {\n    yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.takeLatest)(_reducers_map__WEBPACK_IMPORTED_MODULE_2__.LOAD_TRACK_RANK_REQUEST, trackRank);\n}\nfunction* watchMapMyrank() {\n    yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.takeLatest)(_reducers_map__WEBPACK_IMPORTED_MODULE_2__.LOAD_TRACK_MYRANK_REQUEST, trackMyRank);\n}\nfunction* rootSaga() {\n    yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.all)([\n        (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.fork)(watchSearchMap),\n        (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.fork)(wahchLoadMap),\n        (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.fork)(watchMovingMap),\n        (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.fork)(watchBikeMap),\n        (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.fork)(watchRunningMap),\n        (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.fork)(watchCreateMapLoad),\n        (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.fork)(watchAddTrack),\n        (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.fork)(watchMyLocation),\n        (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.fork)(watchMapRank),\n        (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.fork)(watchMapMyrank), \n    ]);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./sagas/map.js\n");

/***/ }),

/***/ "./sagas/post.js":
/*!***********************!*\
  !*** ./sagas/post.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ rootSaga)\n/* harmony export */ });\n/* harmony import */ var redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! redux-saga/effects */ \"redux-saga/effects\");\n/* harmony import */ var redux_saga_effects__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _reducers_post__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../reducers/post */ \"./reducers/post.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nconst loadPostsAPI = async ()=>{\n    console.log(\"1111\");\n    const res = await axios__WEBPACK_IMPORTED_MODULE_2___default().get(\"https://2yubi.shop/api/post/index\");\n    const data = await res.data;\n    console.log(\"jjjjjj\", data);\n    return data;\n};\nfunction* loadPosts(action) {\n    try {\n        const result = yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.call)(loadPostsAPI);\n        console.log(\"dongresultss\", result);\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_post__WEBPACK_IMPORTED_MODULE_1__.LOAD_POSTS_SUCCESS,\n            data: {\n                data: result.data,\n                nextPage: result.next_page_url\n            }\n        });\n    } catch (err) {\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_post__WEBPACK_IMPORTED_MODULE_1__.LOAD_POSTS_FAILURE,\n            error: \"xx\"\n        });\n    }\n}\nconst morePostAPI = async (datas)=>{\n    const res = await fetch(`${datas}`, {\n        method: \"GET\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\"\n        },\n        credentials: \"include\"\n    });\n    const data = await res.json();\n    console.log(\"pageResult\", data);\n    return data;\n};\nfunction* morePost(action) {\n    try {\n        const result = yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.call)(morePostAPI, action.data);\n        console.log(\"dongresultss\", result);\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_post__WEBPACK_IMPORTED_MODULE_1__.LOAD_MORE_POST_SUCCESS,\n            data: {\n                data: result.data,\n                nextPage: result.next_page_url\n            }\n        });\n    } catch (err) {\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_post__WEBPACK_IMPORTED_MODULE_1__.LOAD_MORE_POST_FAILURE,\n            error: \"xx\"\n        });\n    }\n}\nconst loadsPostsAPI = async ()=>{\n    try {\n        const res = await fetch(\"https://2yubi.shop/api/post/index\", {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\"\n            },\n            credentials: \"include\"\n        });\n        const data = await res.json();\n        return data;\n    } catch (err) {\n        console.log(err);\n    }\n};\nfunction* loadsPosts(action) {\n    try {\n        const result = yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.call)(loadsPostsAPI);\n        console.log(\"dongresultss\", result);\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_post__WEBPACK_IMPORTED_MODULE_1__.LOADS_POSTS_SUCCESS,\n            data: {\n                data: result.data,\n                nextPage: result.next_page_url\n            }\n        });\n    } catch (err) {\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_post__WEBPACK_IMPORTED_MODULE_1__.LOADS_POSTS_FAILURE,\n            error: \"xx\"\n        });\n    }\n}\nconst addCommentAPI = async (datas)=>{\n    try {\n        const res = await fetch(`https://2yubi.shop/api/comment/store/${datas.postId}`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\"\n            },\n            credentials: \"include\",\n            body: JSON.stringify({\n                content: datas.contents.content\n            })\n        });\n        const data = await res.json();\n        return data;\n    } catch (err) {\n        console.log(err);\n    }\n};\nfunction* addComment(action) {\n    try {\n        const result = yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.call)(addCommentAPI, action.data);\n        console.log(\"commentresult\", result);\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_post__WEBPACK_IMPORTED_MODULE_1__.ADD_COMMENT_SUCCESS,\n            data: {\n                id: action.data.postId,\n                result\n            }\n        });\n    } catch (err) {\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_post__WEBPACK_IMPORTED_MODULE_1__.ADD_COMMENT_FAILURE,\n            error: \"err.response.data\"\n        });\n    }\n}\nfunction* watchLoadPosts() {\n    yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.takeLatest)(_reducers_post__WEBPACK_IMPORTED_MODULE_1__.LOAD_POSTS_REQUEST, loadPosts);\n}\nfunction* watchAddComment() {\n    yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.takeLatest)(_reducers_post__WEBPACK_IMPORTED_MODULE_1__.ADD_COMMENT_REQUEST, addComment);\n}\nfunction* watchLoadsPosts() {\n    yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.takeLatest)(_reducers_post__WEBPACK_IMPORTED_MODULE_1__.LOADS_POSTS_REQUEST, loadsPosts);\n}\nfunction* watchLoadMorePost() {\n    yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.takeLatest)(_reducers_post__WEBPACK_IMPORTED_MODULE_1__.LOAD_MORE_POST_REQUEST, morePost);\n}\nfunction* rootSaga() {\n    yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.all)([\n        (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.fork)(watchLoadPosts),\n        (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.fork)(watchAddComment),\n        (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.fork)(watchLoadsPosts),\n        (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.fork)(watchLoadMorePost), \n    ]);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./sagas/post.js\n");

/***/ }),

/***/ "./sagas/user.js":
/*!***********************!*\
  !*** ./sagas/user.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ rootSaga)\n/* harmony export */ });\n/* harmony import */ var redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! redux-saga/effects */ \"redux-saga/effects\");\n/* harmony import */ var redux_saga_effects__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _reducers_user__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../reducers/user */ \"./reducers/user.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react_cookies__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-cookies */ \"react-cookies\");\n/* harmony import */ var react_cookies__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_cookies__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var react_cookie__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-cookie */ \"react-cookie\");\n/* harmony import */ var react_cookie__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_cookie__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\nvar cookies = new react_cookie__WEBPACK_IMPORTED_MODULE_4__.Cookies();\nconst logInAPI = async (datas)=>{\n    try {\n        const res = await fetch(\"https://2yubi.shop/api/login\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\"\n            },\n            credentials: \"include\",\n            body: JSON.stringify({\n                email: datas.email,\n                password: datas.password\n            })\n        });\n        const data = await res.json();\n        react_cookies__WEBPACK_IMPORTED_MODULE_3___default().save(\"login_token\", data.access_token, {\n            path: \"/\"\n        });\n        return data;\n    } catch (err) {\n        console.log(err);\n    }\n};\nfunction* login(action) {\n    try {\n        const result = yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.call)(logInAPI, action.data);\n        console.log(\"userResult\", result);\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_user__WEBPACK_IMPORTED_MODULE_1__.LOGIN_SUCCESS,\n            data: result\n        });\n    } catch (err) {\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_user__WEBPACK_IMPORTED_MODULE_1__.LOGIN_FAIL,\n            data: err.response.data\n        });\n    }\n}\nconst logOutAPI = async (data)=>{\n    // return axios.post('https://2yubi.shop/api/logout')\n    try {\n        const res = await fetch(\"https://2yubi.shop/api/logout\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\"\n            },\n            credentials: \"include\"\n        });\n        const data = await res.json();\n        react_cookies__WEBPACK_IMPORTED_MODULE_3___default().remove(\"login_token\", {\n            path: \"/\"\n        });\n        return data;\n    } catch (err) {\n        console.log(err);\n    }\n};\nfunction* logout() {\n    try {\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.call)(logOutAPI);\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_user__WEBPACK_IMPORTED_MODULE_1__.LOGOUT_SUCCESS\n        });\n    } catch (err) {\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_user__WEBPACK_IMPORTED_MODULE_1__.LOGOUT_FAIL,\n            error: \"error\"\n        });\n    }\n}\nfunction signupAPI(data) {\n    return axios__WEBPACK_IMPORTED_MODULE_2___default().post(\"http://3.35.239.14/api/register\", data);\n}\nfunction* signup(action) {\n    try {\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.call)(signupAPI, action.data);\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_user__WEBPACK_IMPORTED_MODULE_1__.SIGNUP_SUCCESS\n        });\n    } catch (err) {\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_user__WEBPACK_IMPORTED_MODULE_1__.SIGNUP_FAIL,\n            error: err.response.data\n        });\n    }\n}\nconst followAPI = async (datas)=>{\n    try {\n        const res = await fetch(`https://2yubi.shop/api/follow/${datas.id}`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\"\n            },\n            credentials: \"include\"\n        });\n        const data = await res.json();\n        return data;\n    } catch (err) {\n        console.log(err);\n    }\n};\nfunction* following(action) {\n    try {\n        const result = yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.call)(followAPI, action.data);\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_user__WEBPACK_IMPORTED_MODULE_1__.FOLLOWING_SUCCESS,\n            data: action.data\n        });\n    } catch (err) {\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_user__WEBPACK_IMPORTED_MODULE_1__.FOLLOWING_FAIL,\n            error: err.response.data\n        });\n    }\n}\nconst unfollowAPI = async (datas)=>{\n    try {\n        const res = await fetch(`https://2yubi.shop/api/follow/${datas}`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\"\n            },\n            credentials: \"include\"\n        });\n        const data = await res.json();\n        return data;\n    } catch (err) {\n        console.log(err);\n    }\n};\nfunction* unfollowing(action) {\n    try {\n        const result = yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.call)(unfollowAPI, action.data);\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_user__WEBPACK_IMPORTED_MODULE_1__.UNFOLLOWING_SUCCESS,\n            data: action.data\n        });\n    } catch (err) {\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_user__WEBPACK_IMPORTED_MODULE_1__.UNFOLLOWING_FAIL,\n            error: err.response.data\n        });\n    }\n}\nconst loadLoginAPI = async ()=>{\n    try {\n        const res = await fetch(\"https://2yubi.shop/api/user\", {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\"\n            },\n            credentials: \"include\"\n        });\n        const data = await res.json();\n        return data;\n    } catch (err) {\n        console.log(err);\n    }\n};\nfunction* loadLogin(action) {\n    try {\n        const result = yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.call)(loadLoginAPI);\n        console.log(\"asdacsadasasf\", result);\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_user__WEBPACK_IMPORTED_MODULE_1__.LOAD_LOGIN_SUCCESS,\n            data: result\n        });\n    } catch (err) {\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_user__WEBPACK_IMPORTED_MODULE_1__.LOAD_LOGIN_FAILURE,\n            error: err.response.data\n        });\n    }\n}\nconst loadUserInfoAPI = async ()=>{\n    const res = await axios__WEBPACK_IMPORTED_MODULE_2___default().get(\"https://2yubi.shop/api/user\");\n    const data = await res.data;\n    return data;\n};\nfunction* loadUserInfo(action) {\n    try {\n        const result = yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.call)(loadUserInfoAPI);\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_user__WEBPACK_IMPORTED_MODULE_1__.LOAD_MY_INFO_SUCCESS,\n            data: result\n        });\n    } catch (err) {\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_user__WEBPACK_IMPORTED_MODULE_1__.LOAD_MY_INFO_FAILURE,\n            error: err.response.data\n        });\n    }\n}\n////////\nconst userSearchAPI = async (datas)=>{\n    try {\n        const res = await fetch(\"https://2yubi.shop/api/userSearch\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\"\n            },\n            credentials: \"include\",\n            body: JSON.stringify({\n                keyword: datas\n            })\n        });\n        const data = await res.json();\n        return data;\n    } catch (err) {\n        console.log(err);\n    }\n};\nfunction* userSearch(action) {\n    try {\n        const result = yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.call)(userSearchAPI, action.data);\n        console.log(\"userSearchresult\", result);\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_user__WEBPACK_IMPORTED_MODULE_1__.USER_SEARCH_SUCCESS,\n            data: result\n        });\n    } catch (err) {\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_user__WEBPACK_IMPORTED_MODULE_1__.USER_SEARCH_FAILURE,\n            error: err.response.data\n        });\n    }\n}\nconst weekRecordAPI = async ()=>{\n    const res = await axios__WEBPACK_IMPORTED_MODULE_2___default().get(\"https://2yubi.shop/api/post/weekRecord\", {\n        \"event\": \"R\"\n    });\n    const data = await res.data;\n    console.log(\"akdajsfkdjas\", data);\n    return data;\n};\nfunction* weekRecord(action) {\n    try {\n        const result = yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.call)(weekRecordAPI);\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_user__WEBPACK_IMPORTED_MODULE_1__.WEEKRECORD_SUCCESS,\n            data: result\n        });\n    } catch (err) {\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_user__WEBPACK_IMPORTED_MODULE_1__.WEEKRECORD_FAILURE,\n            error: err.response.data\n        });\n    }\n}\nconst weekBikeRecordAPI = async ()=>{\n    const res = await axios__WEBPACK_IMPORTED_MODULE_2___default().get(\"https://2yubi.shop/api/post/weekRecord\", {\n        \"event\": \"B\"\n    });\n    const data = await res.data;\n    console.log(\"weeeeeee\", data);\n    return data;\n};\nfunction* weekBikeRecord(action) {\n    try {\n        const result = yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.call)(weekBikeRecordAPI);\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_user__WEBPACK_IMPORTED_MODULE_1__.WEEKRECORD_BIKE_SUCCESS,\n            data: result\n        });\n    } catch (err) {\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_user__WEBPACK_IMPORTED_MODULE_1__.WEEKRECORD_BIKE_FAILURE,\n            error: err.response.data\n        });\n    }\n}\nconst deleteMyPostAPI = async (datas)=>{\n    const res = await fetch(`https://2yubi.shop/api/post/${datas}`, {\n        method: \"DELETE\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\"\n        },\n        credentials: \"include\"\n    });\n    const data = await res;\n    console.log(\"dongdongqwe\", data);\n    return data;\n};\nfunction* deleteMyPost(action) {\n    try {\n        const result = yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.call)(deleteMyPostAPI, action.data);\n        console.log(\"qwedongss\");\n        console.log(\"zxcvt\", result);\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_user__WEBPACK_IMPORTED_MODULE_1__.DELETE_MYPOST_SUCCESS,\n            data: action.data\n        });\n    } catch (err) {\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_user__WEBPACK_IMPORTED_MODULE_1__.DELETE_MYPOST_FAILURE,\n            error: \"xx\"\n        });\n    }\n}\nconst userRateAPI = async ()=>{\n    const res = await axios__WEBPACK_IMPORTED_MODULE_2___default().get(\"https://2yubi.shop/api/record/type\");\n    const data = await res.data;\n    return data;\n};\nfunction* userRate(action) {\n    try {\n        console.log(\"action\", action.data);\n        const result = yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.call)(userRateAPI, action.data);\n        console.log(\"userRate\", result);\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_user__WEBPACK_IMPORTED_MODULE_1__.USER_RATE_SUCCESS,\n            data: result\n        });\n    } catch (err) {\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_user__WEBPACK_IMPORTED_MODULE_1__.USER_RATE_FAILURE,\n            error: \"aa\"\n        });\n    }\n}\nconst watchWeatherAPI = async ()=>{\n    var apikey = \"407c340ad45b9019b9732c3bf8018bc9\";\n    var cityName = \"daegu\";\n    console.log(\"donsdmfsdfndsjh\");\n    const res = await axios__WEBPACK_IMPORTED_MODULE_2___default().get(`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${apikey}`);\n    const data = await res.data;\n    console.log(\"asdqsdsadasdasdsaasdwe\", data);\n    return data;\n};\nfunction* Weather(action) {\n    try {\n        console.log(\"action\", action.data);\n        const result = yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.call)(watchWeatherAPI);\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_user__WEBPACK_IMPORTED_MODULE_1__.WEATHER_SUCCESS,\n            data: result\n        });\n    } catch (err) {\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_user__WEBPACK_IMPORTED_MODULE_1__.WEATHER_FAILURE,\n            error: \"aa\"\n        });\n    }\n}\nconst GoalAPI = async (datas)=>{\n    try {\n        const res = await fetch(\"https://2yubi.shop/api/goal\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\"\n            },\n            credentials: \"include\",\n            body: JSON.stringify({\n                title: datas.title,\n                goal: parseInt(datas.purpose),\n                firstDate: datas.start,\n                lastDate: datas.end,\n                event: datas.event\n            })\n        });\n        const data = await res.json();\n        console.log(\"asdsdgsdcvxcv\", data);\n        return data;\n    } catch (err) {\n        console.log(err);\n    }\n};\nfunction* Goal(action) {\n    try {\n        console.log(\"action\", action.data);\n        const result = yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.call)(GoalAPI, action.data);\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_user__WEBPACK_IMPORTED_MODULE_1__.GOAL_SUCCESS,\n            data: result\n        });\n    } catch (err) {\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_user__WEBPACK_IMPORTED_MODULE_1__.GOAL_FAILURE,\n            error: \"aa\"\n        });\n    }\n}\nconst AllGoalAPI = async ()=>{\n    const res = await axios__WEBPACK_IMPORTED_MODULE_2___default().get(\"https://2yubi.shop/api/goal/all\");\n    const data = await res.data;\n    return data;\n};\nfunction* AllGoal(action) {\n    try {\n        console.log(\"action\", action.data);\n        const result = yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.call)(AllGoalAPI);\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_user__WEBPACK_IMPORTED_MODULE_1__.ALL_GOAL_SUCCESS,\n            data: result\n        });\n    } catch (err) {\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_user__WEBPACK_IMPORTED_MODULE_1__.ALL_GOAL_FAILURE,\n            error: \"aa\"\n        });\n    }\n}\nconst progressAPI = async ()=>{\n    const res = await axios__WEBPACK_IMPORTED_MODULE_2___default().get(\"https://2yubi.shop/api/goal/check\");\n    const data = await res.data;\n    return data;\n};\nfunction* progress(action) {\n    try {\n        console.log(\"action\", action.data);\n        const result = yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.call)(progressAPI);\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_user__WEBPACK_IMPORTED_MODULE_1__.PROGRESS_SUCCESS,\n            data: result\n        });\n    } catch (err) {\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_user__WEBPACK_IMPORTED_MODULE_1__.PROGRESS_FAILURE,\n            error: \"aa\"\n        });\n    }\n}\nconst deleteGoalAPI = async (datas)=>{\n    try {\n        const res = await fetch(`https://2yubi.shop/api/goal/delete/${datas}`, {\n            method: \"DELETE\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\"\n            },\n            credentials: \"include\"\n        });\n        const data = await res.json();\n        console.log(\"asdsdgsdcvxcv\", data);\n        return data;\n    } catch (err) {\n        console.log(err);\n    }\n};\nfunction* deleteGoal(action) {\n    try {\n        console.log(\"action\", action.data);\n        const result = yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.call)(deleteGoalAPI, action.data);\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_user__WEBPACK_IMPORTED_MODULE_1__.DELETE_GOAL_SUCCESS,\n            data: result\n        });\n    } catch (err) {\n        yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.put)({\n            type: _reducers_user__WEBPACK_IMPORTED_MODULE_1__.DELETE_GOAL_FAILURE,\n            error: \"aa\"\n        });\n    }\n}\nfunction* watchLogin() {\n    yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.takeLatest)(_reducers_user__WEBPACK_IMPORTED_MODULE_1__.LOGIN_REQUEST, login);\n}\nfunction* watchLogout() {\n    yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.takeLatest)(_reducers_user__WEBPACK_IMPORTED_MODULE_1__.LOGOUT_REQUEST, logout);\n}\nfunction* watchSignup() {\n    yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.takeLatest)(_reducers_user__WEBPACK_IMPORTED_MODULE_1__.SIGNUP_REQUEST, signup);\n}\nfunction* watchFollowing() {\n    yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.takeLatest)(_reducers_user__WEBPACK_IMPORTED_MODULE_1__.FOLLOWING_REQUEST, following);\n}\nfunction* watchUnFollowing() {\n    yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.takeLatest)(_reducers_user__WEBPACK_IMPORTED_MODULE_1__.UNFOLLOWING_REQUEST, unfollowing);\n}\nfunction* watchLoadLogin() {\n    yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.takeLatest)(_reducers_user__WEBPACK_IMPORTED_MODULE_1__.LOAD_LOGIN_REQUEST, loadLogin);\n}\nfunction* watchUserInfo() {\n    yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.takeLatest)(_reducers_user__WEBPACK_IMPORTED_MODULE_1__.LOAD_MY_INFO_REQUEST, loadUserInfo);\n}\nfunction* watchUserSearch() {\n    yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.takeLatest)(_reducers_user__WEBPACK_IMPORTED_MODULE_1__.USER_SEARCH_REQUEST, userSearch);\n}\nfunction* watchWeekRecord() {\n    yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.takeLatest)(_reducers_user__WEBPACK_IMPORTED_MODULE_1__.WEEKRECORD_REQUEST, weekRecord);\n}\nfunction* watchDeleteMyPost() {\n    yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.takeLatest)(_reducers_user__WEBPACK_IMPORTED_MODULE_1__.DELETE_MYPOST_REQUEST, deleteMyPost);\n}\nfunction* watchUserRate() {\n    yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.takeLatest)(_reducers_user__WEBPACK_IMPORTED_MODULE_1__.USER_RATE_REQUEST, userRate);\n}\nfunction* watchWeekBikeRecord() {\n    yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.takeLatest)(_reducers_user__WEBPACK_IMPORTED_MODULE_1__.WEEKRECORD_BIKE_REQUEST, weekBikeRecord);\n}\nfunction* watchWeather() {\n    yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.takeLatest)(_reducers_user__WEBPACK_IMPORTED_MODULE_1__.WEATHER_REQUEST, Weather);\n}\nfunction* watchGoal() {\n    yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.takeLatest)(_reducers_user__WEBPACK_IMPORTED_MODULE_1__.GOAL_REQUEST, Goal);\n}\nfunction* watchAllGoal() {\n    yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.takeLatest)(_reducers_user__WEBPACK_IMPORTED_MODULE_1__.ALL_GOAL_REQUEST, AllGoal);\n}\nfunction* watchProgress() {\n    yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.takeLatest)(_reducers_user__WEBPACK_IMPORTED_MODULE_1__.PROGRESS_REQUEST, progress);\n}\nfunction* watchDeleteGoal() {\n    yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.takeLatest)(_reducers_user__WEBPACK_IMPORTED_MODULE_1__.DELETE_GOAL_REQUEST, deleteGoal);\n}\nfunction* rootSaga() {\n    yield (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.all)([\n        (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.fork)(watchLoadLogin),\n        (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.fork)(watchLogin),\n        (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.fork)(watchLogout),\n        (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.fork)(watchSignup),\n        (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.fork)(watchFollowing),\n        (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.fork)(watchUnFollowing),\n        (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.fork)(watchUserInfo),\n        (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.fork)(watchUserSearch),\n        (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.fork)(watchWeekRecord),\n        (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.fork)(watchDeleteMyPost),\n        (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.fork)(watchUserRate),\n        (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.fork)(watchWeekBikeRecord),\n        (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.fork)(watchWeather),\n        (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.fork)(watchGoal),\n        (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.fork)(watchAllGoal),\n        (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.fork)(watchProgress),\n        (0,redux_saga_effects__WEBPACK_IMPORTED_MODULE_0__.fork)(watchDeleteGoal)\n    ]);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./sagas/user.js\n");

/***/ }),

/***/ "./store/configureStore.js":
/*!*********************************!*\
  !*** ./store/configureStore.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! redux */ \"redux\");\n/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(redux__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var redux_saga__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! redux-saga */ \"redux-saga\");\n/* harmony import */ var redux_saga__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(redux_saga__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_redux_wrapper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next-redux-wrapper */ \"next-redux-wrapper\");\n/* harmony import */ var next_redux_wrapper__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_redux_wrapper__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var redux_devtools_extension__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! redux-devtools-extension */ \"redux-devtools-extension\");\n/* harmony import */ var redux_devtools_extension__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(redux_devtools_extension__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../reducers */ \"./reducers/index.js\");\n/* harmony import */ var _sagas__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../sagas */ \"./sagas/index.js\");\n\n\n\n\n\n\nconst configureStore = (context)=>{\n    console.log(context);\n    const sagaMiddleware = redux_saga__WEBPACK_IMPORTED_MODULE_1___default()();\n    const middlewares = [\n        sagaMiddleware\n    ];\n    const enhancer =  false ? 0 : (0,redux_devtools_extension__WEBPACK_IMPORTED_MODULE_3__.composeWithDevTools)((0,redux__WEBPACK_IMPORTED_MODULE_0__.applyMiddleware)(...middlewares));\n    const store = (0,redux__WEBPACK_IMPORTED_MODULE_0__.createStore)(_reducers__WEBPACK_IMPORTED_MODULE_4__[\"default\"], enhancer);\n    store.sagaTask = sagaMiddleware.run(_sagas__WEBPACK_IMPORTED_MODULE_5__[\"default\"]);\n    return store;\n};\nconst wrapper = (0,next_redux_wrapper__WEBPACK_IMPORTED_MODULE_2__.createWrapper)(configureStore, {\n    debug: \"development\" === \"development\"\n});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (wrapper);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zdG9yZS9jb25maWd1cmVTdG9yZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUE4RDtBQUNoQjtBQUNLO0FBQ1k7QUFFN0I7QUFDRjtBQUVoQyxNQUFNUSxjQUFjLEdBQUcsQ0FBQ0MsT0FBTyxHQUFLO0lBQ2xDQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0YsT0FBTyxDQUFDLENBQUM7SUFDckIsTUFBTUcsY0FBYyxHQUFHVCxpREFBb0IsRUFBRTtJQUM3QyxNQUFNVSxXQUFXLEdBQUc7UUFBQ0QsY0FBYztLQUFDO0lBQ3BDLE1BQU1FLFFBQVEsR0FBR0MsTUFBcUMsR0FDbERiLENBQXdDLEdBQ3hDRyw2RUFBbUIsQ0FDbkJMLHNEQUFlLElBQUlhLFdBQVcsQ0FBQyxDQUNoQztJQUNILE1BQU1HLEtBQUssR0FBR2Ysa0RBQVcsQ0FBQ0ssaURBQU8sRUFBRVEsUUFBUSxDQUFDO0lBQzVDRSxLQUFLLENBQUNDLFFBQVEsR0FBR0wsY0FBYyxDQUFDTSxHQUFHLENBQUNYLDhDQUFRLENBQUMsQ0FBQztJQUM5QyxPQUFPUyxLQUFLLENBQUM7Q0FDZDtBQUVELE1BQU1HLE9BQU8sR0FBR2YsaUVBQWEsQ0FBQ0ksY0FBYyxFQUFFO0lBQUVZLEtBQUssRUFBRUwsYUF0QjFDLEtBc0JtRSxhQUFhO0NBQUUsQ0FBQztBQUVoRyxpRUFBZUksT0FBTyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG9uZ2p1bmUvLi9zdG9yZS9jb25maWd1cmVTdG9yZS5qcz9mMjAwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFwcGx5TWlkZGxld2FyZSwgY3JlYXRlU3RvcmUsIGNvbXBvc2UgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgY3JlYXRlU2FnYU1pZGRsZXdhcmUgZnJvbSAncmVkdXgtc2FnYSc7XG5pbXBvcnQgeyBjcmVhdGVXcmFwcGVyIH0gZnJvbSAnbmV4dC1yZWR1eC13cmFwcGVyJztcbmltcG9ydCB7IGNvbXBvc2VXaXRoRGV2VG9vbHMgfSBmcm9tICdyZWR1eC1kZXZ0b29scy1leHRlbnNpb24nO1xuXG5pbXBvcnQgcmVkdWNlciBmcm9tICcuLi9yZWR1Y2Vycyc7XG5pbXBvcnQgcm9vdFNhZ2EgZnJvbSAnLi4vc2FnYXMnO1xuXG5jb25zdCBjb25maWd1cmVTdG9yZSA9IChjb250ZXh0KSA9PiB7XG4gIGNvbnNvbGUubG9nKGNvbnRleHQpO1xuICBjb25zdCBzYWdhTWlkZGxld2FyZSA9IGNyZWF0ZVNhZ2FNaWRkbGV3YXJlKCk7XG4gIGNvbnN0IG1pZGRsZXdhcmVzID0gW3NhZ2FNaWRkbGV3YXJlXTtcbiAgY29uc3QgZW5oYW5jZXIgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nXG4gICAgPyBjb21wb3NlKGFwcGx5TWlkZGxld2FyZSguLi5taWRkbGV3YXJlcykpXG4gICAgOiBjb21wb3NlV2l0aERldlRvb2xzKFxuICAgICAgYXBwbHlNaWRkbGV3YXJlKC4uLm1pZGRsZXdhcmVzKSxcbiAgICApO1xuICBjb25zdCBzdG9yZSA9IGNyZWF0ZVN0b3JlKHJlZHVjZXIsIGVuaGFuY2VyKTtcbiAgc3RvcmUuc2FnYVRhc2sgPSBzYWdhTWlkZGxld2FyZS5ydW4ocm9vdFNhZ2EpO1xuICByZXR1cm4gc3RvcmU7XG59O1xuXG5jb25zdCB3cmFwcGVyID0gY3JlYXRlV3JhcHBlcihjb25maWd1cmVTdG9yZSwgeyBkZWJ1ZzogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgfSk7XG5cbmV4cG9ydCBkZWZhdWx0IHdyYXBwZXI7Il0sIm5hbWVzIjpbImFwcGx5TWlkZGxld2FyZSIsImNyZWF0ZVN0b3JlIiwiY29tcG9zZSIsImNyZWF0ZVNhZ2FNaWRkbGV3YXJlIiwiY3JlYXRlV3JhcHBlciIsImNvbXBvc2VXaXRoRGV2VG9vbHMiLCJyZWR1Y2VyIiwicm9vdFNhZ2EiLCJjb25maWd1cmVTdG9yZSIsImNvbnRleHQiLCJjb25zb2xlIiwibG9nIiwic2FnYU1pZGRsZXdhcmUiLCJtaWRkbGV3YXJlcyIsImVuaGFuY2VyIiwicHJvY2VzcyIsInN0b3JlIiwic2FnYVRhc2siLCJydW4iLCJ3cmFwcGVyIiwiZGVidWciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./store/configureStore.js\n");

/***/ }),

/***/ "./node_modules/@fullcalendar/common/main.cjs.js":
/*!*******************************************************!*\
  !*** ./node_modules/@fullcalendar/common/main.cjs.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*!\nFullCalendar v5.10.2\nDocs & License: https://fullcalendar.io/\n(c) 2021 Adam Shaw\n*/ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n;\nvar tslib = __webpack_require__(/*! tslib */ \"tslib\");\nvar vdom_cjs = __webpack_require__(/*! ./vdom.cjs */ \"./node_modules/@fullcalendar/common/vdom.cjs.js\");\n// no public types yet. when there are, export from:\n// import {} from './api-type-deps'\nvar EventSourceApi = /** @class */ function() {\n    function EventSourceApi1(context, internalEventSource) {\n        this.context = context;\n        this.internalEventSource = internalEventSource;\n    }\n    EventSourceApi1.prototype.remove = function() {\n        this.context.dispatch({\n            type: \"REMOVE_EVENT_SOURCE\",\n            sourceId: this.internalEventSource.sourceId\n        });\n    };\n    EventSourceApi1.prototype.refetch = function() {\n        this.context.dispatch({\n            type: \"FETCH_EVENT_SOURCES\",\n            sourceIds: [\n                this.internalEventSource.sourceId\n            ],\n            isRefetch: true\n        });\n    };\n    Object.defineProperty(EventSourceApi1.prototype, \"id\", {\n        get: function() {\n            return this.internalEventSource.publicId;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventSourceApi1.prototype, \"url\", {\n        get: function() {\n            return this.internalEventSource.meta.url;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventSourceApi1.prototype, \"format\", {\n        get: function() {\n            return this.internalEventSource.meta.format; // TODO: bad. not guaranteed\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return EventSourceApi1;\n}();\nfunction removeElement(el) {\n    if (el.parentNode) {\n        el.parentNode.removeChild(el);\n    }\n}\n// Querying\n// ----------------------------------------------------------------------------------------------------------------\nfunction elementClosest(el, selector) {\n    if (el.closest) {\n        return el.closest(selector);\n    // really bad fallback for IE\n    // from https://developer.mozilla.org/en-US/docs/Web/API/Element/closest\n    }\n    if (!document.documentElement.contains(el)) {\n        return null;\n    }\n    do {\n        if (elementMatches(el, selector)) {\n            return el;\n        }\n        el = el.parentElement || el.parentNode;\n    }while (el !== null && el.nodeType === 1);\n    return null;\n}\nfunction elementMatches(el, selector) {\n    var method = el.matches || el.matchesSelector || el.msMatchesSelector;\n    return method.call(el, selector);\n}\n// accepts multiple subject els\n// returns a real array. good for methods like forEach\n// TODO: accept the document\nfunction findElements(container, selector) {\n    var containers = container instanceof HTMLElement ? [\n        container\n    ] : container;\n    var allMatches = [];\n    for(var i = 0; i < containers.length; i += 1){\n        var matches = containers[i].querySelectorAll(selector);\n        for(var j = 0; j < matches.length; j += 1){\n            allMatches.push(matches[j]);\n        }\n    }\n    return allMatches;\n}\n// accepts multiple subject els\n// only queries direct child elements // TODO: rename to findDirectChildren!\nfunction findDirectChildren(parent, selector) {\n    var parents = parent instanceof HTMLElement ? [\n        parent\n    ] : parent;\n    var allMatches = [];\n    for(var i = 0; i < parents.length; i += 1){\n        var childNodes = parents[i].children; // only ever elements\n        for(var j = 0; j < childNodes.length; j += 1){\n            var childNode = childNodes[j];\n            if (!selector || elementMatches(childNode, selector)) {\n                allMatches.push(childNode);\n            }\n        }\n    }\n    return allMatches;\n}\n// Style\n// ----------------------------------------------------------------------------------------------------------------\nvar PIXEL_PROP_RE = /(top|left|right|bottom|width|height)$/i;\nfunction applyStyle(el, props) {\n    for(var propName in props){\n        applyStyleProp(el, propName, props[propName]);\n    }\n}\nfunction applyStyleProp(el, name, val) {\n    if (val == null) {\n        el.style[name] = \"\";\n    } else if (typeof val === \"number\" && PIXEL_PROP_RE.test(name)) {\n        el.style[name] = val + \"px\";\n    } else {\n        el.style[name] = val;\n    }\n}\n// Event Handling\n// ----------------------------------------------------------------------------------------------------------------\n// if intercepting bubbled events at the document/window/body level,\n// and want to see originating element (the 'target'), use this util instead\n// of `ev.target` because it goes within web-component boundaries.\nfunction getEventTargetViaRoot(ev) {\n    var _a, _b;\n    return (_b = (_a = ev.composedPath) === null || _a === void 0 ? void 0 : _a.call(ev)[0]) !== null && _b !== void 0 ? _b : ev.target;\n}\n// Shadow DOM consuderations\n// ----------------------------------------------------------------------------------------------------------------\nfunction getElRoot(el) {\n    return el.getRootNode ? el.getRootNode() : document;\n}\n// Unique ID for DOM attribute\nvar guid$1 = 0;\nfunction getUniqueDomId() {\n    guid$1 += 1;\n    return \"fc-dom-\" + guid$1;\n}\n// Stops a mouse/touch event from doing it's native browser action\nfunction preventDefault(ev) {\n    ev.preventDefault();\n}\n// Event Delegation\n// ----------------------------------------------------------------------------------------------------------------\nfunction buildDelegationHandler(selector, handler) {\n    return function(ev) {\n        var matchedChild = elementClosest(ev.target, selector);\n        if (matchedChild) {\n            handler.call(matchedChild, ev, matchedChild);\n        }\n    };\n}\nfunction listenBySelector(container, eventType, selector, handler) {\n    var attachedHandler = buildDelegationHandler(selector, handler);\n    container.addEventListener(eventType, attachedHandler);\n    return function() {\n        container.removeEventListener(eventType, attachedHandler);\n    };\n}\nfunction listenToHoverBySelector(container, selector, onMouseEnter, onMouseLeave) {\n    var currentMatchedChild;\n    return listenBySelector(container, \"mouseover\", selector, function(mouseOverEv, matchedChild) {\n        if (matchedChild !== currentMatchedChild) {\n            currentMatchedChild = matchedChild;\n            onMouseEnter(mouseOverEv, matchedChild);\n            var realOnMouseLeave_1 = function(mouseLeaveEv) {\n                currentMatchedChild = null;\n                onMouseLeave(mouseLeaveEv, matchedChild);\n                matchedChild.removeEventListener(\"mouseleave\", realOnMouseLeave_1);\n            };\n            // listen to the next mouseleave, and then unattach\n            matchedChild.addEventListener(\"mouseleave\", realOnMouseLeave_1);\n        }\n    });\n}\n// Animation\n// ----------------------------------------------------------------------------------------------------------------\nvar transitionEventNames = [\n    \"webkitTransitionEnd\",\n    \"otransitionend\",\n    \"oTransitionEnd\",\n    \"msTransitionEnd\",\n    \"transitionend\", \n];\n// triggered only when the next single subsequent transition finishes\nfunction whenTransitionDone(el, callback) {\n    var realCallback = function(ev) {\n        callback(ev);\n        transitionEventNames.forEach(function(eventName) {\n            el.removeEventListener(eventName, realCallback);\n        });\n    };\n    transitionEventNames.forEach(function(eventName) {\n        el.addEventListener(eventName, realCallback); // cross-browser way to determine when the transition finishes\n    });\n}\n// ARIA workarounds\n// ----------------------------------------------------------------------------------------------------------------\nfunction createAriaClickAttrs(handler) {\n    return tslib.__assign({\n        onClick: handler\n    }, createAriaKeyboardAttrs(handler));\n}\nfunction createAriaKeyboardAttrs(handler) {\n    return {\n        tabIndex: 0,\n        onKeyDown: function(ev) {\n            if (ev.key === \"Enter\" || ev.key === \" \") {\n                handler(ev);\n                ev.preventDefault(); // if space, don't scroll down page\n            }\n        }\n    };\n}\nvar guidNumber = 0;\nfunction guid() {\n    guidNumber += 1;\n    return String(guidNumber);\n}\n/* FullCalendar-specific DOM Utilities\n----------------------------------------------------------------------------------------------------------------------*/ // Make the mouse cursor express that an event is not allowed in the current area\nfunction disableCursor() {\n    document.body.classList.add(\"fc-not-allowed\");\n}\n// Returns the mouse cursor to its original look\nfunction enableCursor() {\n    document.body.classList.remove(\"fc-not-allowed\");\n}\n/* Selection\n----------------------------------------------------------------------------------------------------------------------*/ function preventSelection(el) {\n    el.classList.add(\"fc-unselectable\");\n    el.addEventListener(\"selectstart\", preventDefault);\n}\nfunction allowSelection(el) {\n    el.classList.remove(\"fc-unselectable\");\n    el.removeEventListener(\"selectstart\", preventDefault);\n}\n/* Context Menu\n----------------------------------------------------------------------------------------------------------------------*/ function preventContextMenu(el) {\n    el.addEventListener(\"contextmenu\", preventDefault);\n}\nfunction allowContextMenu(el) {\n    el.removeEventListener(\"contextmenu\", preventDefault);\n}\nfunction parseFieldSpecs(input) {\n    var specs = [];\n    var tokens = [];\n    var i;\n    var token;\n    if (typeof input === \"string\") {\n        tokens = input.split(/\\s*,\\s*/);\n    } else if (typeof input === \"function\") {\n        tokens = [\n            input\n        ];\n    } else if (Array.isArray(input)) {\n        tokens = input;\n    }\n    for(i = 0; i < tokens.length; i += 1){\n        token = tokens[i];\n        if (typeof token === \"string\") {\n            specs.push(token.charAt(0) === \"-\" ? {\n                field: token.substring(1),\n                order: -1\n            } : {\n                field: token,\n                order: 1\n            });\n        } else if (typeof token === \"function\") {\n            specs.push({\n                func: token\n            });\n        }\n    }\n    return specs;\n}\nfunction compareByFieldSpecs(obj0, obj1, fieldSpecs) {\n    var i;\n    var cmp;\n    for(i = 0; i < fieldSpecs.length; i += 1){\n        cmp = compareByFieldSpec(obj0, obj1, fieldSpecs[i]);\n        if (cmp) {\n            return cmp;\n        }\n    }\n    return 0;\n}\nfunction compareByFieldSpec(obj0, obj1, fieldSpec) {\n    if (fieldSpec.func) {\n        return fieldSpec.func(obj0, obj1);\n    }\n    return flexibleCompare(obj0[fieldSpec.field], obj1[fieldSpec.field]) * (fieldSpec.order || 1);\n}\nfunction flexibleCompare(a, b) {\n    if (!a && !b) {\n        return 0;\n    }\n    if (b == null) {\n        return -1;\n    }\n    if (a == null) {\n        return 1;\n    }\n    if (typeof a === \"string\" || typeof b === \"string\") {\n        return String(a).localeCompare(String(b));\n    }\n    return a - b;\n}\n/* String Utilities\n----------------------------------------------------------------------------------------------------------------------*/ function padStart(val, len) {\n    var s = String(val);\n    return \"000\".substr(0, len - s.length) + s;\n}\nfunction formatWithOrdinals(formatter, args, fallbackText) {\n    if (typeof formatter === \"function\") {\n        return formatter.apply(void 0, args);\n    }\n    if (typeof formatter === \"string\") {\n        return args.reduce(function(str, arg, index) {\n            return str.replace(\"$\" + index, arg || \"\");\n        }, formatter);\n    }\n    return fallbackText;\n}\n/* Number Utilities\n----------------------------------------------------------------------------------------------------------------------*/ function compareNumbers(a, b) {\n    return a - b;\n}\nfunction isInt(n) {\n    return n % 1 === 0;\n}\n/* FC-specific DOM dimension stuff\n----------------------------------------------------------------------------------------------------------------------*/ function computeSmallestCellWidth(cellEl) {\n    var allWidthEl = cellEl.querySelector(\".fc-scrollgrid-shrink-frame\");\n    var contentWidthEl = cellEl.querySelector(\".fc-scrollgrid-shrink-cushion\");\n    if (!allWidthEl) {\n        throw new Error(\"needs fc-scrollgrid-shrink-frame className\"); // TODO: use const\n    }\n    if (!contentWidthEl) {\n        throw new Error(\"needs fc-scrollgrid-shrink-cushion className\");\n    }\n    return cellEl.getBoundingClientRect().width - allWidthEl.getBoundingClientRect().width + contentWidthEl.getBoundingClientRect().width;\n}\nvar DAY_IDS = [\n    \"sun\",\n    \"mon\",\n    \"tue\",\n    \"wed\",\n    \"thu\",\n    \"fri\",\n    \"sat\"\n];\n// Adding\nfunction addWeeks(m, n) {\n    var a = dateToUtcArray(m);\n    a[2] += n * 7;\n    return arrayToUtcDate(a);\n}\nfunction addDays(m, n) {\n    var a = dateToUtcArray(m);\n    a[2] += n;\n    return arrayToUtcDate(a);\n}\nfunction addMs(m, n) {\n    var a = dateToUtcArray(m);\n    a[6] += n;\n    return arrayToUtcDate(a);\n}\n// Diffing (all return floats)\n// TODO: why not use ranges?\nfunction diffWeeks(m0, m1) {\n    return diffDays(m0, m1) / 7;\n}\nfunction diffDays(m0, m1) {\n    return (m1.valueOf() - m0.valueOf()) / (1000 * 60 * 60 * 24);\n}\nfunction diffHours(m0, m1) {\n    return (m1.valueOf() - m0.valueOf()) / (1000 * 60 * 60);\n}\nfunction diffMinutes(m0, m1) {\n    return (m1.valueOf() - m0.valueOf()) / (1000 * 60);\n}\nfunction diffSeconds(m0, m1) {\n    return (m1.valueOf() - m0.valueOf()) / 1000;\n}\nfunction diffDayAndTime(m0, m1) {\n    var m0day = startOfDay(m0);\n    var m1day = startOfDay(m1);\n    return {\n        years: 0,\n        months: 0,\n        days: Math.round(diffDays(m0day, m1day)),\n        milliseconds: m1.valueOf() - m1day.valueOf() - (m0.valueOf() - m0day.valueOf())\n    };\n}\n// Diffing Whole Units\nfunction diffWholeWeeks(m0, m1) {\n    var d = diffWholeDays(m0, m1);\n    if (d !== null && d % 7 === 0) {\n        return d / 7;\n    }\n    return null;\n}\nfunction diffWholeDays(m0, m1) {\n    if (timeAsMs(m0) === timeAsMs(m1)) {\n        return Math.round(diffDays(m0, m1));\n    }\n    return null;\n}\n// Start-Of\nfunction startOfDay(m) {\n    return arrayToUtcDate([\n        m.getUTCFullYear(),\n        m.getUTCMonth(),\n        m.getUTCDate(), \n    ]);\n}\nfunction startOfHour(m) {\n    return arrayToUtcDate([\n        m.getUTCFullYear(),\n        m.getUTCMonth(),\n        m.getUTCDate(),\n        m.getUTCHours(), \n    ]);\n}\nfunction startOfMinute(m) {\n    return arrayToUtcDate([\n        m.getUTCFullYear(),\n        m.getUTCMonth(),\n        m.getUTCDate(),\n        m.getUTCHours(),\n        m.getUTCMinutes(), \n    ]);\n}\nfunction startOfSecond(m) {\n    return arrayToUtcDate([\n        m.getUTCFullYear(),\n        m.getUTCMonth(),\n        m.getUTCDate(),\n        m.getUTCHours(),\n        m.getUTCMinutes(),\n        m.getUTCSeconds(), \n    ]);\n}\n// Week Computation\nfunction weekOfYear(marker, dow, doy) {\n    var y = marker.getUTCFullYear();\n    var w = weekOfGivenYear(marker, y, dow, doy);\n    if (w < 1) {\n        return weekOfGivenYear(marker, y - 1, dow, doy);\n    }\n    var nextW = weekOfGivenYear(marker, y + 1, dow, doy);\n    if (nextW >= 1) {\n        return Math.min(w, nextW);\n    }\n    return w;\n}\nfunction weekOfGivenYear(marker, year, dow, doy) {\n    var firstWeekStart = arrayToUtcDate([\n        year,\n        0,\n        1 + firstWeekOffset(year, dow, doy)\n    ]);\n    var dayStart = startOfDay(marker);\n    var days = Math.round(diffDays(firstWeekStart, dayStart));\n    return Math.floor(days / 7) + 1; // zero-indexed\n}\n// start-of-first-week - start-of-year\nfunction firstWeekOffset(year, dow, doy) {\n    // first-week day -- which january is always in the first week (4 for iso, 1 for other)\n    var fwd = 7 + dow - doy;\n    // first-week day local weekday -- which local weekday is fwd\n    var fwdlw = (7 + arrayToUtcDate([\n        year,\n        0,\n        fwd\n    ]).getUTCDay() - dow) % 7;\n    return -fwdlw + fwd - 1;\n}\n// Array Conversion\nfunction dateToLocalArray(date) {\n    return [\n        date.getFullYear(),\n        date.getMonth(),\n        date.getDate(),\n        date.getHours(),\n        date.getMinutes(),\n        date.getSeconds(),\n        date.getMilliseconds(), \n    ];\n}\nfunction arrayToLocalDate(a) {\n    return new Date(a[0], a[1] || 0, a[2] == null ? 1 : a[2], a[3] || 0, a[4] || 0, a[5] || 0);\n}\nfunction dateToUtcArray(date) {\n    return [\n        date.getUTCFullYear(),\n        date.getUTCMonth(),\n        date.getUTCDate(),\n        date.getUTCHours(),\n        date.getUTCMinutes(),\n        date.getUTCSeconds(),\n        date.getUTCMilliseconds(), \n    ];\n}\nfunction arrayToUtcDate(a) {\n    // according to web standards (and Safari), a month index is required.\n    // massage if only given a year.\n    if (a.length === 1) {\n        a = a.concat([\n            0\n        ]);\n    }\n    return new Date(Date.UTC.apply(Date, a));\n}\n// Other Utils\nfunction isValidDate(m) {\n    return !isNaN(m.valueOf());\n}\nfunction timeAsMs(m) {\n    return m.getUTCHours() * 1000 * 60 * 60 + m.getUTCMinutes() * 1000 * 60 + m.getUTCSeconds() * 1000 + m.getUTCMilliseconds();\n}\nfunction createEventInstance(defId, range, forcedStartTzo, forcedEndTzo) {\n    return {\n        instanceId: guid(),\n        defId: defId,\n        range: range,\n        forcedStartTzo: forcedStartTzo == null ? null : forcedStartTzo,\n        forcedEndTzo: forcedEndTzo == null ? null : forcedEndTzo\n    };\n}\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n// Merges an array of objects into a single object.\n// The second argument allows for an array of property names who's object values will be merged together.\nfunction mergeProps(propObjs, complexPropsMap) {\n    var dest = {};\n    if (complexPropsMap) {\n        for(var name_1 in complexPropsMap){\n            var complexObjs = [];\n            // collect the trailing object values, stopping when a non-object is discovered\n            for(var i = propObjs.length - 1; i >= 0; i -= 1){\n                var val = propObjs[i][name_1];\n                if (typeof val === \"object\" && val) {\n                    complexObjs.unshift(val);\n                } else if (val !== undefined) {\n                    dest[name_1] = val; // if there were no objects, this value will be used\n                    break;\n                }\n            }\n            // if the trailing values were objects, use the merged value\n            if (complexObjs.length) {\n                dest[name_1] = mergeProps(complexObjs);\n            }\n        }\n    }\n    // copy values into the destination, going from last to first\n    for(var i = propObjs.length - 1; i >= 0; i -= 1){\n        var props = propObjs[i];\n        for(var name_2 in props){\n            if (!(name_2 in dest)) {\n                dest[name_2] = props[name_2];\n            }\n        }\n    }\n    return dest;\n}\nfunction filterHash(hash, func) {\n    var filtered = {};\n    for(var key in hash){\n        if (func(hash[key], key)) {\n            filtered[key] = hash[key];\n        }\n    }\n    return filtered;\n}\nfunction mapHash(hash, func) {\n    var newHash = {};\n    for(var key in hash){\n        newHash[key] = func(hash[key], key);\n    }\n    return newHash;\n}\nfunction arrayToHash(a) {\n    var hash = {};\n    for(var _i = 0, a_1 = a; _i < a_1.length; _i++){\n        var item = a_1[_i];\n        hash[item] = true;\n    }\n    return hash;\n}\nfunction buildHashFromArray(a, func) {\n    var hash = {};\n    for(var i = 0; i < a.length; i += 1){\n        var tuple = func(a[i], i);\n        hash[tuple[0]] = tuple[1];\n    }\n    return hash;\n}\nfunction hashValuesToArray(obj) {\n    var a = [];\n    for(var key in obj){\n        a.push(obj[key]);\n    }\n    return a;\n}\nfunction isPropsEqual(obj0, obj1) {\n    if (obj0 === obj1) {\n        return true;\n    }\n    for(var key in obj0){\n        if (hasOwnProperty.call(obj0, key)) {\n            if (!(key in obj1)) {\n                return false;\n            }\n        }\n    }\n    for(var key in obj1){\n        if (hasOwnProperty.call(obj1, key)) {\n            if (obj0[key] !== obj1[key]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nfunction getUnequalProps(obj0, obj1) {\n    var keys = [];\n    for(var key in obj0){\n        if (hasOwnProperty.call(obj0, key)) {\n            if (!(key in obj1)) {\n                keys.push(key);\n            }\n        }\n    }\n    for(var key in obj1){\n        if (hasOwnProperty.call(obj1, key)) {\n            if (obj0[key] !== obj1[key]) {\n                keys.push(key);\n            }\n        }\n    }\n    return keys;\n}\nfunction compareObjs(oldProps, newProps, equalityFuncs) {\n    if (equalityFuncs === void 0) {\n        equalityFuncs = {};\n    }\n    if (oldProps === newProps) {\n        return true;\n    }\n    for(var key in newProps){\n        if (key in oldProps && isObjValsEqual(oldProps[key], newProps[key], equalityFuncs[key])) ;\n        else {\n            return false;\n        }\n    }\n    // check for props that were omitted in the new\n    for(var key in oldProps){\n        if (!(key in newProps)) {\n            return false;\n        }\n    }\n    return true;\n}\n/*\nassumed \"true\" equality for handler names like \"onReceiveSomething\"\n*/ function isObjValsEqual(val0, val1, comparator) {\n    if (val0 === val1 || comparator === true) {\n        return true;\n    }\n    if (comparator) {\n        return comparator(val0, val1);\n    }\n    return false;\n}\nfunction collectFromHash(hash, startIndex, endIndex, step) {\n    if (startIndex === void 0) {\n        startIndex = 0;\n    }\n    if (step === void 0) {\n        step = 1;\n    }\n    var res = [];\n    if (endIndex == null) {\n        endIndex = Object.keys(hash).length;\n    }\n    for(var i = startIndex; i < endIndex; i += step){\n        var val = hash[i];\n        if (val !== undefined) {\n            res.push(val);\n        }\n    }\n    return res;\n}\nfunction parseRecurring(refined, defaultAllDay, dateEnv, recurringTypes) {\n    for(var i = 0; i < recurringTypes.length; i += 1){\n        var parsed = recurringTypes[i].parse(refined, dateEnv);\n        if (parsed) {\n            var allDay = refined.allDay;\n            if (allDay == null) {\n                allDay = defaultAllDay;\n                if (allDay == null) {\n                    allDay = parsed.allDayGuess;\n                    if (allDay == null) {\n                        allDay = false;\n                    }\n                }\n            }\n            return {\n                allDay: allDay,\n                duration: parsed.duration,\n                typeData: parsed.typeData,\n                typeId: i\n            };\n        }\n    }\n    return null;\n}\nfunction expandRecurring(eventStore, framingRange, context) {\n    var dateEnv = context.dateEnv, pluginHooks = context.pluginHooks, options = context.options;\n    var defs = eventStore.defs, instances = eventStore.instances;\n    // remove existing recurring instances\n    // TODO: bad. always expand events as a second step\n    instances = filterHash(instances, function(instance) {\n        return !defs[instance.defId].recurringDef;\n    });\n    for(var defId in defs){\n        var def = defs[defId];\n        if (def.recurringDef) {\n            var duration = def.recurringDef.duration;\n            if (!duration) {\n                duration = def.allDay ? options.defaultAllDayEventDuration : options.defaultTimedEventDuration;\n            }\n            var starts = expandRecurringRanges(def, duration, framingRange, dateEnv, pluginHooks.recurringTypes);\n            for(var _i = 0, starts_1 = starts; _i < starts_1.length; _i++){\n                var start = starts_1[_i];\n                var instance1 = createEventInstance(defId, {\n                    start: start,\n                    end: dateEnv.add(start, duration)\n                });\n                instances[instance1.instanceId] = instance1;\n            }\n        }\n    }\n    return {\n        defs: defs,\n        instances: instances\n    };\n}\n/*\nEvent MUST have a recurringDef\n*/ function expandRecurringRanges(eventDef, duration, framingRange, dateEnv, recurringTypes) {\n    var typeDef = recurringTypes[eventDef.recurringDef.typeId];\n    var markers = typeDef.expand(eventDef.recurringDef.typeData, {\n        start: dateEnv.subtract(framingRange.start, duration),\n        end: framingRange.end\n    }, dateEnv);\n    // the recurrence plugins don't guarantee that all-day events are start-of-day, so we have to\n    if (eventDef.allDay) {\n        markers = markers.map(startOfDay);\n    }\n    return markers;\n}\nvar INTERNAL_UNITS = [\n    \"years\",\n    \"months\",\n    \"days\",\n    \"milliseconds\"\n];\nvar PARSE_RE = /^(-?)(?:(\\d+)\\.)?(\\d+):(\\d\\d)(?::(\\d\\d)(?:\\.(\\d\\d\\d))?)?/;\n// Parsing and Creation\nfunction createDuration(input, unit) {\n    var _a;\n    if (typeof input === \"string\") {\n        return parseString(input);\n    }\n    if (typeof input === \"object\" && input) {\n        return parseObject(input);\n    }\n    if (typeof input === \"number\") {\n        return parseObject((_a = {}, _a[unit || \"milliseconds\"] = input, _a));\n    }\n    return null;\n}\nfunction parseString(s) {\n    var m = PARSE_RE.exec(s);\n    if (m) {\n        var sign = m[1] ? -1 : 1;\n        return {\n            years: 0,\n            months: 0,\n            days: sign * (m[2] ? parseInt(m[2], 10) : 0),\n            milliseconds: sign * ((m[3] ? parseInt(m[3], 10) : 0) * 60 * 60 * 1000 + (m[4] ? parseInt(m[4], 10) : 0) * 60 * 1000 + (m[5] ? parseInt(m[5], 10) : 0) * 1000 + (m[6] ? parseInt(m[6], 10) : 0) // ms\n            )\n        };\n    }\n    return null;\n}\nfunction parseObject(obj) {\n    var duration = {\n        years: obj.years || obj.year || 0,\n        months: obj.months || obj.month || 0,\n        days: obj.days || obj.day || 0,\n        milliseconds: (obj.hours || obj.hour || 0) * 60 * 60 * 1000 + (obj.minutes || obj.minute || 0) * 60 * 1000 + (obj.seconds || obj.second || 0) * 1000 + (obj.milliseconds || obj.millisecond || obj.ms || 0)\n    };\n    var weeks = obj.weeks || obj.week;\n    if (weeks) {\n        duration.days += weeks * 7;\n        duration.specifiedWeeks = true;\n    }\n    return duration;\n}\n// Equality\nfunction durationsEqual(d0, d1) {\n    return d0.years === d1.years && d0.months === d1.months && d0.days === d1.days && d0.milliseconds === d1.milliseconds;\n}\nfunction asCleanDays(dur) {\n    if (!dur.years && !dur.months && !dur.milliseconds) {\n        return dur.days;\n    }\n    return 0;\n}\n// Simple Math\nfunction addDurations(d0, d1) {\n    return {\n        years: d0.years + d1.years,\n        months: d0.months + d1.months,\n        days: d0.days + d1.days,\n        milliseconds: d0.milliseconds + d1.milliseconds\n    };\n}\nfunction subtractDurations(d1, d0) {\n    return {\n        years: d1.years - d0.years,\n        months: d1.months - d0.months,\n        days: d1.days - d0.days,\n        milliseconds: d1.milliseconds - d0.milliseconds\n    };\n}\nfunction multiplyDuration(d, n) {\n    return {\n        years: d.years * n,\n        months: d.months * n,\n        days: d.days * n,\n        milliseconds: d.milliseconds * n\n    };\n}\n// Conversions\n// \"Rough\" because they are based on average-case Gregorian months/years\nfunction asRoughYears(dur) {\n    return asRoughDays(dur) / 365;\n}\nfunction asRoughMonths(dur) {\n    return asRoughDays(dur) / 30;\n}\nfunction asRoughDays(dur) {\n    return asRoughMs(dur) / 86400000;\n}\nfunction asRoughMinutes(dur) {\n    return asRoughMs(dur) / (1000 * 60);\n}\nfunction asRoughSeconds(dur) {\n    return asRoughMs(dur) / 1000;\n}\nfunction asRoughMs(dur) {\n    return dur.years * (365 * 86400000) + dur.months * (30 * 86400000) + dur.days * 86400000 + dur.milliseconds;\n}\n// Advanced Math\nfunction wholeDivideDurations(numerator, denominator) {\n    var res = null;\n    for(var i = 0; i < INTERNAL_UNITS.length; i += 1){\n        var unit = INTERNAL_UNITS[i];\n        if (denominator[unit]) {\n            var localRes = numerator[unit] / denominator[unit];\n            if (!isInt(localRes) || res !== null && res !== localRes) {\n                return null;\n            }\n            res = localRes;\n        } else if (numerator[unit]) {\n            // needs to divide by something but can't!\n            return null;\n        }\n    }\n    return res;\n}\nfunction greatestDurationDenominator(dur) {\n    var ms = dur.milliseconds;\n    if (ms) {\n        if (ms % 1000 !== 0) {\n            return {\n                unit: \"millisecond\",\n                value: ms\n            };\n        }\n        if (ms % (1000 * 60) !== 0) {\n            return {\n                unit: \"second\",\n                value: ms / 1000\n            };\n        }\n        if (ms % (1000 * 60 * 60) !== 0) {\n            return {\n                unit: \"minute\",\n                value: ms / (1000 * 60)\n            };\n        }\n        if (ms) {\n            return {\n                unit: \"hour\",\n                value: ms / (1000 * 60 * 60)\n            };\n        }\n    }\n    if (dur.days) {\n        if (dur.specifiedWeeks && dur.days % 7 === 0) {\n            return {\n                unit: \"week\",\n                value: dur.days / 7\n            };\n        }\n        return {\n            unit: \"day\",\n            value: dur.days\n        };\n    }\n    if (dur.months) {\n        return {\n            unit: \"month\",\n            value: dur.months\n        };\n    }\n    if (dur.years) {\n        return {\n            unit: \"year\",\n            value: dur.years\n        };\n    }\n    return {\n        unit: \"millisecond\",\n        value: 0\n    };\n}\n// timeZoneOffset is in minutes\nfunction buildIsoString(marker, timeZoneOffset, stripZeroTime) {\n    if (stripZeroTime === void 0) {\n        stripZeroTime = false;\n    }\n    var s = marker.toISOString();\n    s = s.replace(\".000\", \"\");\n    if (stripZeroTime) {\n        s = s.replace(\"T00:00:00Z\", \"\");\n    }\n    if (s.length > 10) {\n        if (timeZoneOffset == null) {\n            s = s.replace(\"Z\", \"\");\n        } else if (timeZoneOffset !== 0) {\n            s = s.replace(\"Z\", formatTimeZoneOffset(timeZoneOffset, true));\n        }\n    // otherwise, its UTC-0 and we want to keep the Z\n    }\n    return s;\n}\n// formats the date, but with no time part\n// TODO: somehow merge with buildIsoString and stripZeroTime\n// TODO: rename. omit \"string\"\nfunction formatDayString(marker) {\n    return marker.toISOString().replace(/T.*$/, \"\");\n}\n// TODO: use Date::toISOString and use everything after the T?\nfunction formatIsoTimeString(marker) {\n    return padStart(marker.getUTCHours(), 2) + \":\" + padStart(marker.getUTCMinutes(), 2) + \":\" + padStart(marker.getUTCSeconds(), 2);\n}\nfunction formatTimeZoneOffset(minutes, doIso) {\n    if (doIso === void 0) {\n        doIso = false;\n    }\n    var sign = minutes < 0 ? \"-\" : \"+\";\n    var abs = Math.abs(minutes);\n    var hours = Math.floor(abs / 60);\n    var mins = Math.round(abs % 60);\n    if (doIso) {\n        return sign + padStart(hours, 2) + \":\" + padStart(mins, 2);\n    }\n    return \"GMT\" + sign + hours + (mins ? \":\" + padStart(mins, 2) : \"\");\n}\n// TODO: new util arrayify?\nfunction removeExact(array, exactVal) {\n    var removeCnt = 0;\n    var i = 0;\n    while(i < array.length){\n        if (array[i] === exactVal) {\n            array.splice(i, 1);\n            removeCnt += 1;\n        } else {\n            i += 1;\n        }\n    }\n    return removeCnt;\n}\nfunction isArraysEqual(a0, a1, equalityFunc) {\n    if (a0 === a1) {\n        return true;\n    }\n    var len = a0.length;\n    var i;\n    if (len !== a1.length) {\n        return false;\n    }\n    for(i = 0; i < len; i += 1){\n        if (!(equalityFunc ? equalityFunc(a0[i], a1[i]) : a0[i] === a1[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction memoize(workerFunc, resEquality, teardownFunc) {\n    var currentArgs;\n    var currentRes;\n    return function() {\n        var newArgs = [];\n        for(var _i = 0; _i < arguments.length; _i++){\n            newArgs[_i] = arguments[_i];\n        }\n        if (!currentArgs) {\n            currentRes = workerFunc.apply(this, newArgs);\n        } else if (!isArraysEqual(currentArgs, newArgs)) {\n            if (teardownFunc) {\n                teardownFunc(currentRes);\n            }\n            var res = workerFunc.apply(this, newArgs);\n            if (!resEquality || !resEquality(res, currentRes)) {\n                currentRes = res;\n            }\n        }\n        currentArgs = newArgs;\n        return currentRes;\n    };\n}\nfunction memoizeObjArg(workerFunc, resEquality, teardownFunc) {\n    var _this = this;\n    var currentArg;\n    var currentRes;\n    return function(newArg) {\n        if (!currentArg) {\n            currentRes = workerFunc.call(_this, newArg);\n        } else if (!isPropsEqual(currentArg, newArg)) {\n            if (teardownFunc) {\n                teardownFunc(currentRes);\n            }\n            var res = workerFunc.call(_this, newArg);\n            if (!resEquality || !resEquality(res, currentRes)) {\n                currentRes = res;\n            }\n        }\n        currentArg = newArg;\n        return currentRes;\n    };\n}\nfunction memoizeArraylike(workerFunc, resEquality, teardownFunc) {\n    var _this = this;\n    var currentArgSets = [];\n    var currentResults = [];\n    return function(newArgSets) {\n        var currentLen = currentArgSets.length;\n        var newLen = newArgSets.length;\n        var i = 0;\n        for(; i < currentLen; i += 1){\n            if (!newArgSets[i]) {\n                if (teardownFunc) {\n                    teardownFunc(currentResults[i]);\n                }\n            } else if (!isArraysEqual(currentArgSets[i], newArgSets[i])) {\n                if (teardownFunc) {\n                    teardownFunc(currentResults[i]);\n                }\n                var res = workerFunc.apply(_this, newArgSets[i]);\n                if (!resEquality || !resEquality(res, currentResults[i])) {\n                    currentResults[i] = res;\n                }\n            }\n        }\n        for(; i < newLen; i += 1){\n            currentResults[i] = workerFunc.apply(_this, newArgSets[i]);\n        }\n        currentArgSets = newArgSets;\n        currentResults.splice(newLen); // remove excess\n        return currentResults;\n    };\n}\nfunction memoizeHashlike(workerFunc, resEquality, teardownFunc) {\n    var _this = this;\n    var currentArgHash = {};\n    var currentResHash = {};\n    return function(newArgHash) {\n        var newResHash = {};\n        for(var key in newArgHash){\n            if (!currentResHash[key]) {\n                newResHash[key] = workerFunc.apply(_this, newArgHash[key]);\n            } else if (!isArraysEqual(currentArgHash[key], newArgHash[key])) {\n                if (teardownFunc) {\n                    teardownFunc(currentResHash[key]);\n                }\n                var res = workerFunc.apply(_this, newArgHash[key]);\n                newResHash[key] = resEquality && resEquality(res, currentResHash[key]) ? currentResHash[key] : res;\n            } else {\n                newResHash[key] = currentResHash[key];\n            }\n        }\n        currentArgHash = newArgHash;\n        currentResHash = newResHash;\n        return newResHash;\n    };\n}\nvar EXTENDED_SETTINGS_AND_SEVERITIES = {\n    week: 3,\n    separator: 0,\n    omitZeroMinute: 0,\n    meridiem: 0,\n    omitCommas: 0\n};\nvar STANDARD_DATE_PROP_SEVERITIES = {\n    timeZoneName: 7,\n    era: 6,\n    year: 5,\n    month: 4,\n    day: 2,\n    weekday: 2,\n    hour: 1,\n    minute: 1,\n    second: 1\n};\nvar MERIDIEM_RE = /\\s*([ap])\\.?m\\.?/i; // eats up leading spaces too\nvar COMMA_RE = /,/g; // we need re for globalness\nvar MULTI_SPACE_RE = /\\s+/g;\nvar LTR_RE = /\\u200e/g; // control character\nvar UTC_RE = /UTC|GMT/;\nvar NativeFormatter = /** @class */ function() {\n    function NativeFormatter1(formatSettings) {\n        var standardDateProps = {};\n        var extendedSettings = {};\n        var severity = 0;\n        for(var name_1 in formatSettings){\n            if (name_1 in EXTENDED_SETTINGS_AND_SEVERITIES) {\n                extendedSettings[name_1] = formatSettings[name_1];\n                severity = Math.max(EXTENDED_SETTINGS_AND_SEVERITIES[name_1], severity);\n            } else {\n                standardDateProps[name_1] = formatSettings[name_1];\n                if (name_1 in STANDARD_DATE_PROP_SEVERITIES) {\n                    severity = Math.max(STANDARD_DATE_PROP_SEVERITIES[name_1], severity);\n                }\n            }\n        }\n        this.standardDateProps = standardDateProps;\n        this.extendedSettings = extendedSettings;\n        this.severity = severity;\n        this.buildFormattingFunc = memoize(buildFormattingFunc);\n    }\n    NativeFormatter1.prototype.format = function(date, context) {\n        return this.buildFormattingFunc(this.standardDateProps, this.extendedSettings, context)(date);\n    };\n    NativeFormatter1.prototype.formatRange = function(start, end, context, betterDefaultSeparator) {\n        var _a = this, standardDateProps = _a.standardDateProps, extendedSettings = _a.extendedSettings;\n        var diffSeverity = computeMarkerDiffSeverity(start.marker, end.marker, context.calendarSystem);\n        if (!diffSeverity) {\n            return this.format(start, context);\n        }\n        var biggestUnitForPartial = diffSeverity;\n        if (biggestUnitForPartial > 1 && (standardDateProps.year === \"numeric\" || standardDateProps.year === \"2-digit\") && (standardDateProps.month === \"numeric\" || standardDateProps.month === \"2-digit\") && (standardDateProps.day === \"numeric\" || standardDateProps.day === \"2-digit\")) {\n            biggestUnitForPartial = 1; // make it look like the dates are only different in terms of time\n        }\n        var full0 = this.format(start, context);\n        var full1 = this.format(end, context);\n        if (full0 === full1) {\n            return full0;\n        }\n        var partialDateProps = computePartialFormattingOptions(standardDateProps, biggestUnitForPartial);\n        var partialFormattingFunc = buildFormattingFunc(partialDateProps, extendedSettings, context);\n        var partial0 = partialFormattingFunc(start);\n        var partial1 = partialFormattingFunc(end);\n        var insertion = findCommonInsertion(full0, partial0, full1, partial1);\n        var separator = extendedSettings.separator || betterDefaultSeparator || context.defaultSeparator || \"\";\n        if (insertion) {\n            return insertion.before + partial0 + separator + partial1 + insertion.after;\n        }\n        return full0 + separator + full1;\n    };\n    NativeFormatter1.prototype.getLargestUnit = function() {\n        switch(this.severity){\n            case 7:\n            case 6:\n            case 5:\n                return \"year\";\n            case 4:\n                return \"month\";\n            case 3:\n                return \"week\";\n            case 2:\n                return \"day\";\n            default:\n                return \"time\"; // really?\n        }\n    };\n    return NativeFormatter1;\n}();\nfunction buildFormattingFunc(standardDateProps, extendedSettings, context) {\n    var standardDatePropCnt = Object.keys(standardDateProps).length;\n    if (standardDatePropCnt === 1 && standardDateProps.timeZoneName === \"short\") {\n        return function(date) {\n            return formatTimeZoneOffset(date.timeZoneOffset);\n        };\n    }\n    if (standardDatePropCnt === 0 && extendedSettings.week) {\n        return function(date) {\n            return formatWeekNumber(context.computeWeekNumber(date.marker), context.weekText, context.weekTextLong, context.locale, extendedSettings.week);\n        };\n    }\n    return buildNativeFormattingFunc(standardDateProps, extendedSettings, context);\n}\nfunction buildNativeFormattingFunc(standardDateProps, extendedSettings, context) {\n    standardDateProps = tslib.__assign({}, standardDateProps); // copy\n    extendedSettings = tslib.__assign({}, extendedSettings); // copy\n    sanitizeSettings(standardDateProps, extendedSettings);\n    standardDateProps.timeZone = \"UTC\"; // we leverage the only guaranteed timeZone for our UTC markers\n    var normalFormat = new Intl.DateTimeFormat(context.locale.codes, standardDateProps);\n    var zeroFormat; // needed?\n    if (extendedSettings.omitZeroMinute) {\n        var zeroProps = tslib.__assign({}, standardDateProps);\n        delete zeroProps.minute; // seconds and ms were already considered in sanitizeSettings\n        zeroFormat = new Intl.DateTimeFormat(context.locale.codes, zeroProps);\n    }\n    return function(date) {\n        var marker = date.marker;\n        var format;\n        if (zeroFormat && !marker.getUTCMinutes()) {\n            format = zeroFormat;\n        } else {\n            format = normalFormat;\n        }\n        var s = format.format(marker);\n        return postProcess(s, date, standardDateProps, extendedSettings, context);\n    };\n}\nfunction sanitizeSettings(standardDateProps, extendedSettings) {\n    // deal with a browser inconsistency where formatting the timezone\n    // requires that the hour/minute be present.\n    if (standardDateProps.timeZoneName) {\n        if (!standardDateProps.hour) {\n            standardDateProps.hour = \"2-digit\";\n        }\n        if (!standardDateProps.minute) {\n            standardDateProps.minute = \"2-digit\";\n        }\n    }\n    // only support short timezone names\n    if (standardDateProps.timeZoneName === \"long\") {\n        standardDateProps.timeZoneName = \"short\";\n    }\n    // if requesting to display seconds, MUST display minutes\n    if (extendedSettings.omitZeroMinute && (standardDateProps.second || standardDateProps.millisecond)) {\n        delete extendedSettings.omitZeroMinute;\n    }\n}\nfunction postProcess(s, date, standardDateProps, extendedSettings, context) {\n    s = s.replace(LTR_RE, \"\"); // remove left-to-right control chars. do first. good for other regexes\n    if (standardDateProps.timeZoneName === \"short\") {\n        s = injectTzoStr(s, context.timeZone === \"UTC\" || date.timeZoneOffset == null ? \"UTC\" : formatTimeZoneOffset(date.timeZoneOffset));\n    }\n    if (extendedSettings.omitCommas) {\n        s = s.replace(COMMA_RE, \"\").trim();\n    }\n    if (extendedSettings.omitZeroMinute) {\n        s = s.replace(\":00\", \"\"); // zeroFormat doesn't always achieve this\n    }\n    // ^ do anything that might create adjacent spaces before this point,\n    // because MERIDIEM_RE likes to eat up loading spaces\n    if (extendedSettings.meridiem === false) {\n        s = s.replace(MERIDIEM_RE, \"\").trim();\n    } else if (extendedSettings.meridiem === \"narrow\") {\n        s = s.replace(MERIDIEM_RE, function(m0, m1) {\n            return m1.toLocaleLowerCase();\n        });\n    } else if (extendedSettings.meridiem === \"short\") {\n        s = s.replace(MERIDIEM_RE, function(m0, m1) {\n            return m1.toLocaleLowerCase() + \"m\";\n        });\n    } else if (extendedSettings.meridiem === \"lowercase\") {\n        s = s.replace(MERIDIEM_RE, function(m0) {\n            return m0.toLocaleLowerCase();\n        });\n    }\n    s = s.replace(MULTI_SPACE_RE, \" \");\n    s = s.trim();\n    return s;\n}\nfunction injectTzoStr(s, tzoStr) {\n    var replaced = false;\n    s = s.replace(UTC_RE, function() {\n        replaced = true;\n        return tzoStr;\n    });\n    // IE11 doesn't include UTC/GMT in the original string, so append to end\n    if (!replaced) {\n        s += \" \" + tzoStr;\n    }\n    return s;\n}\nfunction formatWeekNumber(num, weekText, weekTextLong, locale, display) {\n    var parts = [];\n    if (display === \"long\") {\n        parts.push(weekTextLong);\n    } else if (display === \"short\" || display === \"narrow\") {\n        parts.push(weekText);\n    }\n    if (display === \"long\" || display === \"short\") {\n        parts.push(\" \");\n    }\n    parts.push(locale.simpleNumberFormat.format(num));\n    if (locale.options.direction === \"rtl\") {\n        parts.reverse();\n    }\n    return parts.join(\"\");\n}\n// Range Formatting Utils\n// 0 = exactly the same\n// 1 = different by time\n// and bigger\nfunction computeMarkerDiffSeverity(d0, d1, ca) {\n    if (ca.getMarkerYear(d0) !== ca.getMarkerYear(d1)) {\n        return 5;\n    }\n    if (ca.getMarkerMonth(d0) !== ca.getMarkerMonth(d1)) {\n        return 4;\n    }\n    if (ca.getMarkerDay(d0) !== ca.getMarkerDay(d1)) {\n        return 2;\n    }\n    if (timeAsMs(d0) !== timeAsMs(d1)) {\n        return 1;\n    }\n    return 0;\n}\nfunction computePartialFormattingOptions(options, biggestUnit) {\n    var partialOptions = {};\n    for(var name_2 in options){\n        if (!(name_2 in STANDARD_DATE_PROP_SEVERITIES) || STANDARD_DATE_PROP_SEVERITIES[name_2] <= biggestUnit) {\n            partialOptions[name_2] = options[name_2];\n        }\n    }\n    return partialOptions;\n}\nfunction findCommonInsertion(full0, partial0, full1, partial1) {\n    var i0 = 0;\n    while(i0 < full0.length){\n        var found0 = full0.indexOf(partial0, i0);\n        if (found0 === -1) {\n            break;\n        }\n        var before0 = full0.substr(0, found0);\n        i0 = found0 + partial0.length;\n        var after0 = full0.substr(i0);\n        var i1 = 0;\n        while(i1 < full1.length){\n            var found1 = full1.indexOf(partial1, i1);\n            if (found1 === -1) {\n                break;\n            }\n            var before1 = full1.substr(0, found1);\n            i1 = found1 + partial1.length;\n            var after1 = full1.substr(i1);\n            if (before0 === before1 && after0 === after1) {\n                return {\n                    before: before0,\n                    after: after0\n                };\n            }\n        }\n    }\n    return null;\n}\nfunction expandZonedMarker(dateInfo, calendarSystem) {\n    var a = calendarSystem.markerToArray(dateInfo.marker);\n    return {\n        marker: dateInfo.marker,\n        timeZoneOffset: dateInfo.timeZoneOffset,\n        array: a,\n        year: a[0],\n        month: a[1],\n        day: a[2],\n        hour: a[3],\n        minute: a[4],\n        second: a[5],\n        millisecond: a[6]\n    };\n}\nfunction createVerboseFormattingArg(start, end, context, betterDefaultSeparator) {\n    var startInfo = expandZonedMarker(start, context.calendarSystem);\n    var endInfo = end ? expandZonedMarker(end, context.calendarSystem) : null;\n    return {\n        date: startInfo,\n        start: startInfo,\n        end: endInfo,\n        timeZone: context.timeZone,\n        localeCodes: context.locale.codes,\n        defaultSeparator: betterDefaultSeparator || context.defaultSeparator\n    };\n}\n/*\nTODO: fix the terminology of \"formatter\" vs \"formatting func\"\n*/ /*\nAt the time of instantiation, this object does not know which cmd-formatting system it will use.\nIt receives this at the time of formatting, as a setting.\n*/ var CmdFormatter = /** @class */ function() {\n    function CmdFormatter1(cmdStr) {\n        this.cmdStr = cmdStr;\n    }\n    CmdFormatter1.prototype.format = function(date, context, betterDefaultSeparator) {\n        return context.cmdFormatter(this.cmdStr, createVerboseFormattingArg(date, null, context, betterDefaultSeparator));\n    };\n    CmdFormatter1.prototype.formatRange = function(start, end, context, betterDefaultSeparator) {\n        return context.cmdFormatter(this.cmdStr, createVerboseFormattingArg(start, end, context, betterDefaultSeparator));\n    };\n    return CmdFormatter1;\n}();\nvar FuncFormatter = /** @class */ function() {\n    function FuncFormatter1(func) {\n        this.func = func;\n    }\n    FuncFormatter1.prototype.format = function(date, context, betterDefaultSeparator) {\n        return this.func(createVerboseFormattingArg(date, null, context, betterDefaultSeparator));\n    };\n    FuncFormatter1.prototype.formatRange = function(start, end, context, betterDefaultSeparator) {\n        return this.func(createVerboseFormattingArg(start, end, context, betterDefaultSeparator));\n    };\n    return FuncFormatter1;\n}();\nfunction createFormatter(input) {\n    if (typeof input === \"object\" && input) {\n        return new NativeFormatter(input);\n    }\n    if (typeof input === \"string\") {\n        return new CmdFormatter(input);\n    }\n    if (typeof input === \"function\") {\n        return new FuncFormatter(input);\n    }\n    return null;\n}\n// base options\n// ------------\nvar BASE_OPTION_REFINERS = {\n    navLinkDayClick: identity,\n    navLinkWeekClick: identity,\n    duration: createDuration,\n    bootstrapFontAwesome: identity,\n    buttonIcons: identity,\n    customButtons: identity,\n    defaultAllDayEventDuration: createDuration,\n    defaultTimedEventDuration: createDuration,\n    nextDayThreshold: createDuration,\n    scrollTime: createDuration,\n    scrollTimeReset: Boolean,\n    slotMinTime: createDuration,\n    slotMaxTime: createDuration,\n    dayPopoverFormat: createFormatter,\n    slotDuration: createDuration,\n    snapDuration: createDuration,\n    headerToolbar: identity,\n    footerToolbar: identity,\n    defaultRangeSeparator: String,\n    titleRangeSeparator: String,\n    forceEventDuration: Boolean,\n    dayHeaders: Boolean,\n    dayHeaderFormat: createFormatter,\n    dayHeaderClassNames: identity,\n    dayHeaderContent: identity,\n    dayHeaderDidMount: identity,\n    dayHeaderWillUnmount: identity,\n    dayCellClassNames: identity,\n    dayCellContent: identity,\n    dayCellDidMount: identity,\n    dayCellWillUnmount: identity,\n    initialView: String,\n    aspectRatio: Number,\n    weekends: Boolean,\n    weekNumberCalculation: identity,\n    weekNumbers: Boolean,\n    weekNumberClassNames: identity,\n    weekNumberContent: identity,\n    weekNumberDidMount: identity,\n    weekNumberWillUnmount: identity,\n    editable: Boolean,\n    viewClassNames: identity,\n    viewDidMount: identity,\n    viewWillUnmount: identity,\n    nowIndicator: Boolean,\n    nowIndicatorClassNames: identity,\n    nowIndicatorContent: identity,\n    nowIndicatorDidMount: identity,\n    nowIndicatorWillUnmount: identity,\n    showNonCurrentDates: Boolean,\n    lazyFetching: Boolean,\n    startParam: String,\n    endParam: String,\n    timeZoneParam: String,\n    timeZone: String,\n    locales: identity,\n    locale: identity,\n    themeSystem: String,\n    dragRevertDuration: Number,\n    dragScroll: Boolean,\n    allDayMaintainDuration: Boolean,\n    unselectAuto: Boolean,\n    dropAccept: identity,\n    eventOrder: parseFieldSpecs,\n    eventOrderStrict: Boolean,\n    handleWindowResize: Boolean,\n    windowResizeDelay: Number,\n    longPressDelay: Number,\n    eventDragMinDistance: Number,\n    expandRows: Boolean,\n    height: identity,\n    contentHeight: identity,\n    direction: String,\n    weekNumberFormat: createFormatter,\n    eventResizableFromStart: Boolean,\n    displayEventTime: Boolean,\n    displayEventEnd: Boolean,\n    weekText: String,\n    weekTextLong: String,\n    progressiveEventRendering: Boolean,\n    businessHours: identity,\n    initialDate: identity,\n    now: identity,\n    eventDataTransform: identity,\n    stickyHeaderDates: identity,\n    stickyFooterScrollbar: identity,\n    viewHeight: identity,\n    defaultAllDay: Boolean,\n    eventSourceFailure: identity,\n    eventSourceSuccess: identity,\n    eventDisplay: String,\n    eventStartEditable: Boolean,\n    eventDurationEditable: Boolean,\n    eventOverlap: identity,\n    eventConstraint: identity,\n    eventAllow: identity,\n    eventBackgroundColor: String,\n    eventBorderColor: String,\n    eventTextColor: String,\n    eventColor: String,\n    eventClassNames: identity,\n    eventContent: identity,\n    eventDidMount: identity,\n    eventWillUnmount: identity,\n    selectConstraint: identity,\n    selectOverlap: identity,\n    selectAllow: identity,\n    droppable: Boolean,\n    unselectCancel: String,\n    slotLabelFormat: identity,\n    slotLaneClassNames: identity,\n    slotLaneContent: identity,\n    slotLaneDidMount: identity,\n    slotLaneWillUnmount: identity,\n    slotLabelClassNames: identity,\n    slotLabelContent: identity,\n    slotLabelDidMount: identity,\n    slotLabelWillUnmount: identity,\n    dayMaxEvents: identity,\n    dayMaxEventRows: identity,\n    dayMinWidth: Number,\n    slotLabelInterval: createDuration,\n    allDayText: String,\n    allDayClassNames: identity,\n    allDayContent: identity,\n    allDayDidMount: identity,\n    allDayWillUnmount: identity,\n    slotMinWidth: Number,\n    navLinks: Boolean,\n    eventTimeFormat: createFormatter,\n    rerenderDelay: Number,\n    moreLinkText: identity,\n    moreLinkHint: identity,\n    selectMinDistance: Number,\n    selectable: Boolean,\n    selectLongPressDelay: Number,\n    eventLongPressDelay: Number,\n    selectMirror: Boolean,\n    eventMaxStack: Number,\n    eventMinHeight: Number,\n    eventMinWidth: Number,\n    eventShortHeight: Number,\n    slotEventOverlap: Boolean,\n    plugins: identity,\n    firstDay: Number,\n    dayCount: Number,\n    dateAlignment: String,\n    dateIncrement: createDuration,\n    hiddenDays: identity,\n    monthMode: Boolean,\n    fixedWeekCount: Boolean,\n    validRange: identity,\n    visibleRange: identity,\n    titleFormat: identity,\n    eventInteractive: Boolean,\n    // only used by list-view, but languages define the value, so we need it in base options\n    noEventsText: String,\n    viewHint: identity,\n    navLinkHint: identity,\n    closeHint: String,\n    timeHint: String,\n    eventHint: String,\n    moreLinkClick: identity,\n    moreLinkClassNames: identity,\n    moreLinkContent: identity,\n    moreLinkDidMount: identity,\n    moreLinkWillUnmount: identity\n};\n// do NOT give a type here. need `typeof BASE_OPTION_DEFAULTS` to give real results.\n// raw values.\nvar BASE_OPTION_DEFAULTS = {\n    eventDisplay: \"auto\",\n    defaultRangeSeparator: \" - \",\n    titleRangeSeparator: \" \\u2013 \",\n    defaultTimedEventDuration: \"01:00:00\",\n    defaultAllDayEventDuration: {\n        day: 1\n    },\n    forceEventDuration: false,\n    nextDayThreshold: \"00:00:00\",\n    dayHeaders: true,\n    initialView: \"\",\n    aspectRatio: 1.35,\n    headerToolbar: {\n        start: \"title\",\n        center: \"\",\n        end: \"today prev,next\"\n    },\n    weekends: true,\n    weekNumbers: false,\n    weekNumberCalculation: \"local\",\n    editable: false,\n    nowIndicator: false,\n    scrollTime: \"06:00:00\",\n    scrollTimeReset: true,\n    slotMinTime: \"00:00:00\",\n    slotMaxTime: \"24:00:00\",\n    showNonCurrentDates: true,\n    lazyFetching: true,\n    startParam: \"start\",\n    endParam: \"end\",\n    timeZoneParam: \"timeZone\",\n    timeZone: \"local\",\n    locales: [],\n    locale: \"\",\n    themeSystem: \"standard\",\n    dragRevertDuration: 500,\n    dragScroll: true,\n    allDayMaintainDuration: false,\n    unselectAuto: true,\n    dropAccept: \"*\",\n    eventOrder: \"start,-duration,allDay,title\",\n    dayPopoverFormat: {\n        month: \"long\",\n        day: \"numeric\",\n        year: \"numeric\"\n    },\n    handleWindowResize: true,\n    windowResizeDelay: 100,\n    longPressDelay: 1000,\n    eventDragMinDistance: 5,\n    expandRows: false,\n    navLinks: false,\n    selectable: false,\n    eventMinHeight: 15,\n    eventMinWidth: 30,\n    eventShortHeight: 30\n};\n// calendar listeners\n// ------------------\nvar CALENDAR_LISTENER_REFINERS = {\n    datesSet: identity,\n    eventsSet: identity,\n    eventAdd: identity,\n    eventChange: identity,\n    eventRemove: identity,\n    windowResize: identity,\n    eventClick: identity,\n    eventMouseEnter: identity,\n    eventMouseLeave: identity,\n    select: identity,\n    unselect: identity,\n    loading: identity,\n    // internal\n    _unmount: identity,\n    _beforeprint: identity,\n    _afterprint: identity,\n    _noEventDrop: identity,\n    _noEventResize: identity,\n    _resize: identity,\n    _scrollRequest: identity\n};\n// calendar-specific options\n// -------------------------\nvar CALENDAR_OPTION_REFINERS = {\n    buttonText: identity,\n    buttonHints: identity,\n    views: identity,\n    plugins: identity,\n    initialEvents: identity,\n    events: identity,\n    eventSources: identity\n};\nvar COMPLEX_OPTION_COMPARATORS = {\n    headerToolbar: isBoolComplexEqual,\n    footerToolbar: isBoolComplexEqual,\n    buttonText: isBoolComplexEqual,\n    buttonHints: isBoolComplexEqual,\n    buttonIcons: isBoolComplexEqual\n};\nfunction isBoolComplexEqual(a, b) {\n    if (typeof a === \"object\" && typeof b === \"object\" && a && b) {\n        return isPropsEqual(a, b);\n    }\n    return a === b;\n}\n// view-specific options\n// ---------------------\nvar VIEW_OPTION_REFINERS = {\n    type: String,\n    component: identity,\n    buttonText: String,\n    buttonTextKey: String,\n    dateProfileGeneratorClass: identity,\n    usesMinMaxTime: Boolean,\n    classNames: identity,\n    content: identity,\n    didMount: identity,\n    willUnmount: identity\n};\n// util funcs\n// ----------------------------------------------------------------------------------------------------\nfunction mergeRawOptions(optionSets) {\n    return mergeProps(optionSets, COMPLEX_OPTION_COMPARATORS);\n}\nfunction refineProps(input, refiners) {\n    var refined = {};\n    var extra = {};\n    for(var propName in refiners){\n        if (propName in input) {\n            refined[propName] = refiners[propName](input[propName]);\n        }\n    }\n    for(var propName in input){\n        if (!(propName in refiners)) {\n            extra[propName] = input[propName];\n        }\n    }\n    return {\n        refined: refined,\n        extra: extra\n    };\n}\nfunction identity(raw) {\n    return raw;\n}\nfunction parseEvents(rawEvents, eventSource, context, allowOpenRange) {\n    var eventStore = createEmptyEventStore();\n    var eventRefiners = buildEventRefiners(context);\n    for(var _i = 0, rawEvents_1 = rawEvents; _i < rawEvents_1.length; _i++){\n        var rawEvent = rawEvents_1[_i];\n        var tuple = parseEvent(rawEvent, eventSource, context, allowOpenRange, eventRefiners);\n        if (tuple) {\n            eventTupleToStore(tuple, eventStore);\n        }\n    }\n    return eventStore;\n}\nfunction eventTupleToStore(tuple, eventStore) {\n    if (eventStore === void 0) {\n        eventStore = createEmptyEventStore();\n    }\n    eventStore.defs[tuple.def.defId] = tuple.def;\n    if (tuple.instance) {\n        eventStore.instances[tuple.instance.instanceId] = tuple.instance;\n    }\n    return eventStore;\n}\n// retrieves events that have the same groupId as the instance specified by `instanceId`\n// or they are the same as the instance.\n// why might instanceId not be in the store? an event from another calendar?\nfunction getRelevantEvents(eventStore, instanceId) {\n    var instance = eventStore.instances[instanceId];\n    if (instance) {\n        var def_1 = eventStore.defs[instance.defId];\n        // get events/instances with same group\n        var newStore = filterEventStoreDefs(eventStore, function(lookDef) {\n            return isEventDefsGrouped(def_1, lookDef);\n        });\n        // add the original\n        // TODO: wish we could use eventTupleToStore or something like it\n        newStore.defs[def_1.defId] = def_1;\n        newStore.instances[instance.instanceId] = instance;\n        return newStore;\n    }\n    return createEmptyEventStore();\n}\nfunction isEventDefsGrouped(def0, def1) {\n    return Boolean(def0.groupId && def0.groupId === def1.groupId);\n}\nfunction createEmptyEventStore() {\n    return {\n        defs: {},\n        instances: {}\n    };\n}\nfunction mergeEventStores(store0, store1) {\n    return {\n        defs: tslib.__assign(tslib.__assign({}, store0.defs), store1.defs),\n        instances: tslib.__assign(tslib.__assign({}, store0.instances), store1.instances)\n    };\n}\nfunction filterEventStoreDefs(eventStore, filterFunc) {\n    var defs = filterHash(eventStore.defs, filterFunc);\n    var instances = filterHash(eventStore.instances, function(instance) {\n        return defs[instance.defId] // still exists?\n        ;\n    });\n    return {\n        defs: defs,\n        instances: instances\n    };\n}\nfunction excludeSubEventStore(master, sub) {\n    var defs = master.defs, instances = master.instances;\n    var filteredDefs = {};\n    var filteredInstances = {};\n    for(var defId in defs){\n        if (!sub.defs[defId]) {\n            filteredDefs[defId] = defs[defId];\n        }\n    }\n    for(var instanceId in instances){\n        if (!sub.instances[instanceId] && filteredDefs[instances[instanceId].defId] // def wasn't filtered away\n        ) {\n            filteredInstances[instanceId] = instances[instanceId];\n        }\n    }\n    return {\n        defs: filteredDefs,\n        instances: filteredInstances\n    };\n}\nfunction normalizeConstraint(input, context) {\n    if (Array.isArray(input)) {\n        return parseEvents(input, null, context, true); // allowOpenRange=true\n    }\n    if (typeof input === \"object\" && input) {\n        return parseEvents([\n            input\n        ], null, context, true); // allowOpenRange=true\n    }\n    if (input != null) {\n        return String(input);\n    }\n    return null;\n}\nfunction parseClassNames(raw) {\n    if (Array.isArray(raw)) {\n        return raw;\n    }\n    if (typeof raw === \"string\") {\n        return raw.split(/\\s+/);\n    }\n    return [];\n}\n// TODO: better called \"EventSettings\" or \"EventConfig\"\n// TODO: move this file into structs\n// TODO: separate constraint/overlap/allow, because selection uses only that, not other props\nvar EVENT_UI_REFINERS = {\n    display: String,\n    editable: Boolean,\n    startEditable: Boolean,\n    durationEditable: Boolean,\n    constraint: identity,\n    overlap: identity,\n    allow: identity,\n    className: parseClassNames,\n    classNames: parseClassNames,\n    color: String,\n    backgroundColor: String,\n    borderColor: String,\n    textColor: String\n};\nvar EMPTY_EVENT_UI = {\n    display: null,\n    startEditable: null,\n    durationEditable: null,\n    constraints: [],\n    overlap: null,\n    allows: [],\n    backgroundColor: \"\",\n    borderColor: \"\",\n    textColor: \"\",\n    classNames: []\n};\nfunction createEventUi(refined, context) {\n    var constraint = normalizeConstraint(refined.constraint, context);\n    return {\n        display: refined.display || null,\n        startEditable: refined.startEditable != null ? refined.startEditable : refined.editable,\n        durationEditable: refined.durationEditable != null ? refined.durationEditable : refined.editable,\n        constraints: constraint != null ? [\n            constraint\n        ] : [],\n        overlap: refined.overlap != null ? refined.overlap : null,\n        allows: refined.allow != null ? [\n            refined.allow\n        ] : [],\n        backgroundColor: refined.backgroundColor || refined.color || \"\",\n        borderColor: refined.borderColor || refined.color || \"\",\n        textColor: refined.textColor || \"\",\n        classNames: (refined.className || []).concat(refined.classNames || [])\n    };\n}\n// TODO: prevent against problems with <2 args!\nfunction combineEventUis(uis) {\n    return uis.reduce(combineTwoEventUis, EMPTY_EVENT_UI);\n}\nfunction combineTwoEventUis(item0, item1) {\n    return {\n        display: item1.display != null ? item1.display : item0.display,\n        startEditable: item1.startEditable != null ? item1.startEditable : item0.startEditable,\n        durationEditable: item1.durationEditable != null ? item1.durationEditable : item0.durationEditable,\n        constraints: item0.constraints.concat(item1.constraints),\n        overlap: typeof item1.overlap === \"boolean\" ? item1.overlap : item0.overlap,\n        allows: item0.allows.concat(item1.allows),\n        backgroundColor: item1.backgroundColor || item0.backgroundColor,\n        borderColor: item1.borderColor || item0.borderColor,\n        textColor: item1.textColor || item0.textColor,\n        classNames: item0.classNames.concat(item1.classNames)\n    };\n}\nvar EVENT_NON_DATE_REFINERS = {\n    id: String,\n    groupId: String,\n    title: String,\n    url: String,\n    interactive: Boolean\n};\nvar EVENT_DATE_REFINERS = {\n    start: identity,\n    end: identity,\n    date: identity,\n    allDay: Boolean\n};\nvar EVENT_REFINERS = tslib.__assign(tslib.__assign(tslib.__assign({}, EVENT_NON_DATE_REFINERS), EVENT_DATE_REFINERS), {\n    extendedProps: identity\n});\nfunction parseEvent(raw, eventSource, context, allowOpenRange, refiners) {\n    if (refiners === void 0) {\n        refiners = buildEventRefiners(context);\n    }\n    var _a = refineEventDef(raw, context, refiners), refined = _a.refined, extra = _a.extra;\n    var defaultAllDay = computeIsDefaultAllDay(eventSource, context);\n    var recurringRes = parseRecurring(refined, defaultAllDay, context.dateEnv, context.pluginHooks.recurringTypes);\n    if (recurringRes) {\n        var def = parseEventDef(refined, extra, eventSource ? eventSource.sourceId : \"\", recurringRes.allDay, Boolean(recurringRes.duration), context);\n        def.recurringDef = {\n            typeId: recurringRes.typeId,\n            typeData: recurringRes.typeData,\n            duration: recurringRes.duration\n        };\n        return {\n            def: def,\n            instance: null\n        };\n    }\n    var singleRes = parseSingle(refined, defaultAllDay, context, allowOpenRange);\n    if (singleRes) {\n        var def = parseEventDef(refined, extra, eventSource ? eventSource.sourceId : \"\", singleRes.allDay, singleRes.hasEnd, context);\n        var instance = createEventInstance(def.defId, singleRes.range, singleRes.forcedStartTzo, singleRes.forcedEndTzo);\n        return {\n            def: def,\n            instance: instance\n        };\n    }\n    return null;\n}\nfunction refineEventDef(raw, context, refiners) {\n    if (refiners === void 0) {\n        refiners = buildEventRefiners(context);\n    }\n    return refineProps(raw, refiners);\n}\nfunction buildEventRefiners(context) {\n    return tslib.__assign(tslib.__assign(tslib.__assign({}, EVENT_UI_REFINERS), EVENT_REFINERS), context.pluginHooks.eventRefiners);\n}\n/*\nWill NOT populate extendedProps with the leftover properties.\nWill NOT populate date-related props.\n*/ function parseEventDef(refined, extra, sourceId, allDay, hasEnd, context) {\n    var def = {\n        title: refined.title || \"\",\n        groupId: refined.groupId || \"\",\n        publicId: refined.id || \"\",\n        url: refined.url || \"\",\n        recurringDef: null,\n        defId: guid(),\n        sourceId: sourceId,\n        allDay: allDay,\n        hasEnd: hasEnd,\n        interactive: refined.interactive,\n        ui: createEventUi(refined, context),\n        extendedProps: tslib.__assign(tslib.__assign({}, refined.extendedProps || {}), extra)\n    };\n    for(var _i = 0, _a = context.pluginHooks.eventDefMemberAdders; _i < _a.length; _i++){\n        var memberAdder = _a[_i];\n        tslib.__assign(def, memberAdder(refined));\n    }\n    // help out EventApi from having user modify props\n    Object.freeze(def.ui.classNames);\n    Object.freeze(def.extendedProps);\n    return def;\n}\nfunction parseSingle(refined, defaultAllDay, context, allowOpenRange) {\n    var allDay = refined.allDay;\n    var startMeta;\n    var startMarker = null;\n    var hasEnd = false;\n    var endMeta;\n    var endMarker = null;\n    var startInput = refined.start != null ? refined.start : refined.date;\n    startMeta = context.dateEnv.createMarkerMeta(startInput);\n    if (startMeta) {\n        startMarker = startMeta.marker;\n    } else if (!allowOpenRange) {\n        return null;\n    }\n    if (refined.end != null) {\n        endMeta = context.dateEnv.createMarkerMeta(refined.end);\n    }\n    if (allDay == null) {\n        if (defaultAllDay != null) {\n            allDay = defaultAllDay;\n        } else {\n            // fall back to the date props LAST\n            allDay = (!startMeta || startMeta.isTimeUnspecified) && (!endMeta || endMeta.isTimeUnspecified);\n        }\n    }\n    if (allDay && startMarker) {\n        startMarker = startOfDay(startMarker);\n    }\n    if (endMeta) {\n        endMarker = endMeta.marker;\n        if (allDay) {\n            endMarker = startOfDay(endMarker);\n        }\n        if (startMarker && endMarker <= startMarker) {\n            endMarker = null;\n        }\n    }\n    if (endMarker) {\n        hasEnd = true;\n    } else if (!allowOpenRange) {\n        hasEnd = context.options.forceEventDuration || false;\n        endMarker = context.dateEnv.add(startMarker, allDay ? context.options.defaultAllDayEventDuration : context.options.defaultTimedEventDuration);\n    }\n    return {\n        allDay: allDay,\n        hasEnd: hasEnd,\n        range: {\n            start: startMarker,\n            end: endMarker\n        },\n        forcedStartTzo: startMeta ? startMeta.forcedTzo : null,\n        forcedEndTzo: endMeta ? endMeta.forcedTzo : null\n    };\n}\nfunction computeIsDefaultAllDay(eventSource, context) {\n    var res = null;\n    if (eventSource) {\n        res = eventSource.defaultAllDay;\n    }\n    if (res == null) {\n        res = context.options.defaultAllDay;\n    }\n    return res;\n}\n/* Date stuff that doesn't belong in datelib core\n----------------------------------------------------------------------------------------------------------------------*/ // given a timed range, computes an all-day range that has the same exact duration,\n// but whose start time is aligned with the start of the day.\nfunction computeAlignedDayRange(timedRange) {\n    var dayCnt = Math.floor(diffDays(timedRange.start, timedRange.end)) || 1;\n    var start = startOfDay(timedRange.start);\n    var end = addDays(start, dayCnt);\n    return {\n        start: start,\n        end: end\n    };\n}\n// given a timed range, computes an all-day range based on how for the end date bleeds into the next day\n// TODO: give nextDayThreshold a default arg\nfunction computeVisibleDayRange(timedRange, nextDayThreshold) {\n    if (nextDayThreshold === void 0) {\n        nextDayThreshold = createDuration(0);\n    }\n    var startDay = null;\n    var endDay = null;\n    if (timedRange.end) {\n        endDay = startOfDay(timedRange.end);\n        var endTimeMS = timedRange.end.valueOf() - endDay.valueOf(); // # of milliseconds into `endDay`\n        // If the end time is actually inclusively part of the next day and is equal to or\n        // beyond the next day threshold, adjust the end to be the exclusive end of `endDay`.\n        // Otherwise, leaving it as inclusive will cause it to exclude `endDay`.\n        if (endTimeMS && endTimeMS >= asRoughMs(nextDayThreshold)) {\n            endDay = addDays(endDay, 1);\n        }\n    }\n    if (timedRange.start) {\n        startDay = startOfDay(timedRange.start); // the beginning of the day the range starts\n        // If end is within `startDay` but not past nextDayThreshold, assign the default duration of one day.\n        if (endDay && endDay <= startDay) {\n            endDay = addDays(startDay, 1);\n        }\n    }\n    return {\n        start: startDay,\n        end: endDay\n    };\n}\n// spans from one day into another?\nfunction isMultiDayRange(range) {\n    var visibleRange = computeVisibleDayRange(range);\n    return diffDays(visibleRange.start, visibleRange.end) > 1;\n}\nfunction diffDates(date0, date1, dateEnv, largeUnit) {\n    if (largeUnit === \"year\") {\n        return createDuration(dateEnv.diffWholeYears(date0, date1), \"year\");\n    }\n    if (largeUnit === \"month\") {\n        return createDuration(dateEnv.diffWholeMonths(date0, date1), \"month\");\n    }\n    return diffDayAndTime(date0, date1); // returns a duration\n}\nfunction parseRange(input, dateEnv) {\n    var start = null;\n    var end = null;\n    if (input.start) {\n        start = dateEnv.createMarker(input.start);\n    }\n    if (input.end) {\n        end = dateEnv.createMarker(input.end);\n    }\n    if (!start && !end) {\n        return null;\n    }\n    if (start && end && end < start) {\n        return null;\n    }\n    return {\n        start: start,\n        end: end\n    };\n}\n// SIDE-EFFECT: will mutate ranges.\n// Will return a new array result.\nfunction invertRanges(ranges, constraintRange) {\n    var invertedRanges = [];\n    var start = constraintRange.start; // the end of the previous range. the start of the new range\n    var i;\n    var dateRange;\n    // ranges need to be in order. required for our date-walking algorithm\n    ranges.sort(compareRanges);\n    for(i = 0; i < ranges.length; i += 1){\n        dateRange = ranges[i];\n        // add the span of time before the event (if there is any)\n        if (dateRange.start > start) {\n            invertedRanges.push({\n                start: start,\n                end: dateRange.start\n            });\n        }\n        if (dateRange.end > start) {\n            start = dateRange.end;\n        }\n    }\n    // add the span of time after the last event (if there is any)\n    if (start < constraintRange.end) {\n        invertedRanges.push({\n            start: start,\n            end: constraintRange.end\n        });\n    }\n    return invertedRanges;\n}\nfunction compareRanges(range0, range1) {\n    return range0.start.valueOf() - range1.start.valueOf(); // earlier ranges go first\n}\nfunction intersectRanges(range0, range1) {\n    var start = range0.start, end = range0.end;\n    var newRange = null;\n    if (range1.start !== null) {\n        if (start === null) {\n            start = range1.start;\n        } else {\n            start = new Date(Math.max(start.valueOf(), range1.start.valueOf()));\n        }\n    }\n    if (range1.end != null) {\n        if (end === null) {\n            end = range1.end;\n        } else {\n            end = new Date(Math.min(end.valueOf(), range1.end.valueOf()));\n        }\n    }\n    if (start === null || end === null || start < end) {\n        newRange = {\n            start: start,\n            end: end\n        };\n    }\n    return newRange;\n}\nfunction rangesEqual(range0, range1) {\n    return (range0.start === null ? null : range0.start.valueOf()) === (range1.start === null ? null : range1.start.valueOf()) && (range0.end === null ? null : range0.end.valueOf()) === (range1.end === null ? null : range1.end.valueOf());\n}\nfunction rangesIntersect(range0, range1) {\n    return (range0.end === null || range1.start === null || range0.end > range1.start) && (range0.start === null || range1.end === null || range0.start < range1.end);\n}\nfunction rangeContainsRange(outerRange, innerRange) {\n    return (outerRange.start === null || innerRange.start !== null && innerRange.start >= outerRange.start) && (outerRange.end === null || innerRange.end !== null && innerRange.end <= outerRange.end);\n}\nfunction rangeContainsMarker(range, date) {\n    return (range.start === null || date >= range.start) && (range.end === null || date < range.end);\n}\n// If the given date is not within the given range, move it inside.\n// (If it's past the end, make it one millisecond before the end).\nfunction constrainMarkerToRange(date, range) {\n    if (range.start != null && date < range.start) {\n        return range.start;\n    }\n    if (range.end != null && date >= range.end) {\n        return new Date(range.end.valueOf() - 1);\n    }\n    return date;\n}\n/*\nSpecifying nextDayThreshold signals that all-day ranges should be sliced.\n*/ function sliceEventStore(eventStore, eventUiBases, framingRange, nextDayThreshold) {\n    var inverseBgByGroupId = {};\n    var inverseBgByDefId = {};\n    var defByGroupId = {};\n    var bgRanges = [];\n    var fgRanges = [];\n    var eventUis = compileEventUis(eventStore.defs, eventUiBases);\n    for(var defId in eventStore.defs){\n        var def = eventStore.defs[defId];\n        var ui = eventUis[def.defId];\n        if (ui.display === \"inverse-background\") {\n            if (def.groupId) {\n                inverseBgByGroupId[def.groupId] = [];\n                if (!defByGroupId[def.groupId]) {\n                    defByGroupId[def.groupId] = def;\n                }\n            } else {\n                inverseBgByDefId[defId] = [];\n            }\n        }\n    }\n    for(var instanceId in eventStore.instances){\n        var instance = eventStore.instances[instanceId];\n        var def = eventStore.defs[instance.defId];\n        var ui = eventUis[def.defId];\n        var origRange = instance.range;\n        var normalRange = !def.allDay && nextDayThreshold ? computeVisibleDayRange(origRange, nextDayThreshold) : origRange;\n        var slicedRange = intersectRanges(normalRange, framingRange);\n        if (slicedRange) {\n            if (ui.display === \"inverse-background\") {\n                if (def.groupId) {\n                    inverseBgByGroupId[def.groupId].push(slicedRange);\n                } else {\n                    inverseBgByDefId[instance.defId].push(slicedRange);\n                }\n            } else if (ui.display !== \"none\") {\n                (ui.display === \"background\" ? bgRanges : fgRanges).push({\n                    def: def,\n                    ui: ui,\n                    instance: instance,\n                    range: slicedRange,\n                    isStart: normalRange.start && normalRange.start.valueOf() === slicedRange.start.valueOf(),\n                    isEnd: normalRange.end && normalRange.end.valueOf() === slicedRange.end.valueOf()\n                });\n            }\n        }\n    }\n    for(var groupId in inverseBgByGroupId){\n        var ranges = inverseBgByGroupId[groupId];\n        var invertedRanges = invertRanges(ranges, framingRange);\n        for(var _i = 0, invertedRanges_1 = invertedRanges; _i < invertedRanges_1.length; _i++){\n            var invertedRange = invertedRanges_1[_i];\n            var def = defByGroupId[groupId];\n            var ui = eventUis[def.defId];\n            bgRanges.push({\n                def: def,\n                ui: ui,\n                instance: null,\n                range: invertedRange,\n                isStart: false,\n                isEnd: false\n            });\n        }\n    }\n    for(var defId in inverseBgByDefId){\n        var ranges = inverseBgByDefId[defId];\n        var invertedRanges = invertRanges(ranges, framingRange);\n        for(var _a = 0, invertedRanges_2 = invertedRanges; _a < invertedRanges_2.length; _a++){\n            var invertedRange = invertedRanges_2[_a];\n            bgRanges.push({\n                def: eventStore.defs[defId],\n                ui: eventUis[defId],\n                instance: null,\n                range: invertedRange,\n                isStart: false,\n                isEnd: false\n            });\n        }\n    }\n    return {\n        bg: bgRanges,\n        fg: fgRanges\n    };\n}\nfunction hasBgRendering(def) {\n    return def.ui.display === \"background\" || def.ui.display === \"inverse-background\";\n}\nfunction setElSeg(el, seg) {\n    el.fcSeg = seg;\n}\nfunction getElSeg(el) {\n    return el.fcSeg || el.parentNode.fcSeg || null;\n}\n// event ui computation\nfunction compileEventUis(eventDefs, eventUiBases) {\n    return mapHash(eventDefs, function(eventDef) {\n        return compileEventUi(eventDef, eventUiBases);\n    });\n}\nfunction compileEventUi(eventDef, eventUiBases) {\n    var uis = [];\n    if (eventUiBases[\"\"]) {\n        uis.push(eventUiBases[\"\"]);\n    }\n    if (eventUiBases[eventDef.defId]) {\n        uis.push(eventUiBases[eventDef.defId]);\n    }\n    uis.push(eventDef.ui);\n    return combineEventUis(uis);\n}\nfunction sortEventSegs(segs, eventOrderSpecs) {\n    var objs = segs.map(buildSegCompareObj);\n    objs.sort(function(obj0, obj1) {\n        return compareByFieldSpecs(obj0, obj1, eventOrderSpecs);\n    });\n    return objs.map(function(c) {\n        return c._seg;\n    });\n}\n// returns a object with all primitive props that can be compared\nfunction buildSegCompareObj(seg) {\n    var eventRange = seg.eventRange;\n    var eventDef = eventRange.def;\n    var range = eventRange.instance ? eventRange.instance.range : eventRange.range;\n    var start = range.start ? range.start.valueOf() : 0; // TODO: better support for open-range events\n    var end = range.end ? range.end.valueOf() : 0; // \"\n    return tslib.__assign(tslib.__assign(tslib.__assign({}, eventDef.extendedProps), eventDef), {\n        id: eventDef.publicId,\n        start: start,\n        end: end,\n        duration: end - start,\n        allDay: Number(eventDef.allDay),\n        _seg: seg\n    });\n}\nfunction computeSegDraggable(seg, context) {\n    var pluginHooks = context.pluginHooks;\n    var transformers = pluginHooks.isDraggableTransformers;\n    var _a = seg.eventRange, def = _a.def, ui = _a.ui;\n    var val = ui.startEditable;\n    for(var _i = 0, transformers_1 = transformers; _i < transformers_1.length; _i++){\n        var transformer = transformers_1[_i];\n        val = transformer(val, def, ui, context);\n    }\n    return val;\n}\nfunction computeSegStartResizable(seg, context) {\n    return seg.isStart && seg.eventRange.ui.durationEditable && context.options.eventResizableFromStart;\n}\nfunction computeSegEndResizable(seg, context) {\n    return seg.isEnd && seg.eventRange.ui.durationEditable;\n}\nfunction buildSegTimeText(seg, timeFormat, context, defaultDisplayEventTime, defaultDisplayEventEnd, startOverride, endOverride) {\n    var dateEnv = context.dateEnv, options = context.options;\n    var displayEventTime = options.displayEventTime, displayEventEnd = options.displayEventEnd;\n    var eventDef = seg.eventRange.def;\n    var eventInstance = seg.eventRange.instance;\n    if (displayEventTime == null) {\n        displayEventTime = defaultDisplayEventTime !== false;\n    }\n    if (displayEventEnd == null) {\n        displayEventEnd = defaultDisplayEventEnd !== false;\n    }\n    var wholeEventStart = eventInstance.range.start;\n    var wholeEventEnd = eventInstance.range.end;\n    var segStart = startOverride || seg.start || seg.eventRange.range.start;\n    var segEnd = endOverride || seg.end || seg.eventRange.range.end;\n    var isStartDay = startOfDay(wholeEventStart).valueOf() === startOfDay(segStart).valueOf();\n    var isEndDay = startOfDay(addMs(wholeEventEnd, -1)).valueOf() === startOfDay(addMs(segEnd, -1)).valueOf();\n    if (displayEventTime && !eventDef.allDay && (isStartDay || isEndDay)) {\n        segStart = isStartDay ? wholeEventStart : segStart;\n        segEnd = isEndDay ? wholeEventEnd : segEnd;\n        if (displayEventEnd && eventDef.hasEnd) {\n            return dateEnv.formatRange(segStart, segEnd, timeFormat, {\n                forcedStartTzo: startOverride ? null : eventInstance.forcedStartTzo,\n                forcedEndTzo: endOverride ? null : eventInstance.forcedEndTzo\n            });\n        }\n        return dateEnv.format(segStart, timeFormat, {\n            forcedTzo: startOverride ? null : eventInstance.forcedStartTzo\n        });\n    }\n    return \"\";\n}\nfunction getSegMeta(seg, todayRange, nowDate) {\n    var segRange = seg.eventRange.range;\n    return {\n        isPast: segRange.end < (nowDate || todayRange.start),\n        isFuture: segRange.start >= (nowDate || todayRange.end),\n        isToday: todayRange && rangeContainsMarker(todayRange, segRange.start)\n    };\n}\nfunction getEventClassNames(props) {\n    var classNames = [\n        \"fc-event\"\n    ];\n    if (props.isMirror) {\n        classNames.push(\"fc-event-mirror\");\n    }\n    if (props.isDraggable) {\n        classNames.push(\"fc-event-draggable\");\n    }\n    if (props.isStartResizable || props.isEndResizable) {\n        classNames.push(\"fc-event-resizable\");\n    }\n    if (props.isDragging) {\n        classNames.push(\"fc-event-dragging\");\n    }\n    if (props.isResizing) {\n        classNames.push(\"fc-event-resizing\");\n    }\n    if (props.isSelected) {\n        classNames.push(\"fc-event-selected\");\n    }\n    if (props.isStart) {\n        classNames.push(\"fc-event-start\");\n    }\n    if (props.isEnd) {\n        classNames.push(\"fc-event-end\");\n    }\n    if (props.isPast) {\n        classNames.push(\"fc-event-past\");\n    }\n    if (props.isToday) {\n        classNames.push(\"fc-event-today\");\n    }\n    if (props.isFuture) {\n        classNames.push(\"fc-event-future\");\n    }\n    return classNames;\n}\nfunction buildEventRangeKey(eventRange) {\n    return eventRange.instance ? eventRange.instance.instanceId : eventRange.def.defId + \":\" + eventRange.range.start.toISOString();\n// inverse-background events don't have specific instances. TODO: better solution\n}\nfunction getSegAnchorAttrs(seg, context) {\n    var _a = seg.eventRange, def = _a.def, instance = _a.instance;\n    var url = def.url;\n    if (url) {\n        return {\n            href: url\n        };\n    }\n    var emitter = context.emitter, options = context.options;\n    var eventInteractive = options.eventInteractive;\n    if (eventInteractive == null) {\n        eventInteractive = def.interactive;\n        if (eventInteractive == null) {\n            eventInteractive = Boolean(emitter.hasHandlers(\"eventClick\"));\n        }\n    }\n    // mock what happens in EventClicking\n    if (eventInteractive) {\n        // only attach keyboard-related handlers because click handler is already done in EventClicking\n        return createAriaKeyboardAttrs(function(ev) {\n            emitter.trigger(\"eventClick\", {\n                el: ev.target,\n                event: new EventApi(context, def, instance),\n                jsEvent: ev,\n                view: context.viewApi\n            });\n        });\n    }\n    return {};\n}\nvar STANDARD_PROPS = {\n    start: identity,\n    end: identity,\n    allDay: Boolean\n};\nfunction parseDateSpan(raw, dateEnv, defaultDuration) {\n    var span = parseOpenDateSpan(raw, dateEnv);\n    var range = span.range;\n    if (!range.start) {\n        return null;\n    }\n    if (!range.end) {\n        if (defaultDuration == null) {\n            return null;\n        }\n        range.end = dateEnv.add(range.start, defaultDuration);\n    }\n    return span;\n}\n/*\nTODO: somehow combine with parseRange?\nWill return null if the start/end props were present but parsed invalidly.\n*/ function parseOpenDateSpan(raw, dateEnv) {\n    var _a = refineProps(raw, STANDARD_PROPS), standardProps = _a.refined, extra = _a.extra;\n    var startMeta = standardProps.start ? dateEnv.createMarkerMeta(standardProps.start) : null;\n    var endMeta = standardProps.end ? dateEnv.createMarkerMeta(standardProps.end) : null;\n    var allDay = standardProps.allDay;\n    if (allDay == null) {\n        allDay = startMeta && startMeta.isTimeUnspecified && (!endMeta || endMeta.isTimeUnspecified);\n    }\n    return tslib.__assign({\n        range: {\n            start: startMeta ? startMeta.marker : null,\n            end: endMeta ? endMeta.marker : null\n        },\n        allDay: allDay\n    }, extra);\n}\nfunction isDateSpansEqual(span0, span1) {\n    return rangesEqual(span0.range, span1.range) && span0.allDay === span1.allDay && isSpanPropsEqual(span0, span1);\n}\n// the NON-DATE-RELATED props\nfunction isSpanPropsEqual(span0, span1) {\n    for(var propName in span1){\n        if (propName !== \"range\" && propName !== \"allDay\") {\n            if (span0[propName] !== span1[propName]) {\n                return false;\n            }\n        }\n    }\n    // are there any props that span0 has that span1 DOESN'T have?\n    // both have range/allDay, so no need to special-case.\n    for(var propName in span0){\n        if (!(propName in span1)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction buildDateSpanApi(span, dateEnv) {\n    return tslib.__assign(tslib.__assign({}, buildRangeApi(span.range, dateEnv, span.allDay)), {\n        allDay: span.allDay\n    });\n}\nfunction buildRangeApiWithTimeZone(range, dateEnv, omitTime) {\n    return tslib.__assign(tslib.__assign({}, buildRangeApi(range, dateEnv, omitTime)), {\n        timeZone: dateEnv.timeZone\n    });\n}\nfunction buildRangeApi(range, dateEnv, omitTime) {\n    return {\n        start: dateEnv.toDate(range.start),\n        end: dateEnv.toDate(range.end),\n        startStr: dateEnv.formatIso(range.start, {\n            omitTime: omitTime\n        }),\n        endStr: dateEnv.formatIso(range.end, {\n            omitTime: omitTime\n        })\n    };\n}\nfunction fabricateEventRange(dateSpan, eventUiBases, context) {\n    var res = refineEventDef({\n        editable: false\n    }, context);\n    var def = parseEventDef(res.refined, res.extra, \"\", dateSpan.allDay, true, context);\n    return {\n        def: def,\n        ui: compileEventUi(def, eventUiBases),\n        instance: createEventInstance(def.defId, dateSpan.range),\n        range: dateSpan.range,\n        isStart: true,\n        isEnd: true\n    };\n}\nfunction triggerDateSelect(selection, pev, context) {\n    context.emitter.trigger(\"select\", tslib.__assign(tslib.__assign({}, buildDateSpanApiWithContext(selection, context)), {\n        jsEvent: pev ? pev.origEvent : null,\n        view: context.viewApi || context.calendarApi.view\n    }));\n}\nfunction triggerDateUnselect(pev, context) {\n    context.emitter.trigger(\"unselect\", {\n        jsEvent: pev ? pev.origEvent : null,\n        view: context.viewApi || context.calendarApi.view\n    });\n}\nfunction buildDateSpanApiWithContext(dateSpan, context) {\n    var props = {};\n    for(var _i = 0, _a = context.pluginHooks.dateSpanTransforms; _i < _a.length; _i++){\n        var transform = _a[_i];\n        tslib.__assign(props, transform(dateSpan, context));\n    }\n    tslib.__assign(props, buildDateSpanApi(dateSpan, context.dateEnv));\n    return props;\n}\n// Given an event's allDay status and start date, return what its fallback end date should be.\n// TODO: rename to computeDefaultEventEnd\nfunction getDefaultEventEnd(allDay, marker, context) {\n    var dateEnv = context.dateEnv, options = context.options;\n    var end = marker;\n    if (allDay) {\n        end = startOfDay(end);\n        end = dateEnv.add(end, options.defaultAllDayEventDuration);\n    } else {\n        end = dateEnv.add(end, options.defaultTimedEventDuration);\n    }\n    return end;\n}\n// applies the mutation to ALL defs/instances within the event store\nfunction applyMutationToEventStore(eventStore, eventConfigBase, mutation, context) {\n    var eventConfigs = compileEventUis(eventStore.defs, eventConfigBase);\n    var dest = createEmptyEventStore();\n    for(var defId in eventStore.defs){\n        var def = eventStore.defs[defId];\n        dest.defs[defId] = applyMutationToEventDef(def, eventConfigs[defId], mutation, context);\n    }\n    for(var instanceId in eventStore.instances){\n        var instance = eventStore.instances[instanceId];\n        var def = dest.defs[instance.defId]; // important to grab the newly modified def\n        dest.instances[instanceId] = applyMutationToEventInstance(instance, def, eventConfigs[instance.defId], mutation, context);\n    }\n    return dest;\n}\nfunction applyMutationToEventDef(eventDef, eventConfig, mutation, context) {\n    var standardProps = mutation.standardProps || {};\n    // if hasEnd has not been specified, guess a good value based on deltas.\n    // if duration will change, there's no way the default duration will persist,\n    // and thus, we need to mark the event as having a real end\n    if (standardProps.hasEnd == null && eventConfig.durationEditable && (mutation.startDelta || mutation.endDelta)) {\n        standardProps.hasEnd = true; // TODO: is this mutation okay?\n    }\n    var copy = tslib.__assign(tslib.__assign(tslib.__assign({}, eventDef), standardProps), {\n        ui: tslib.__assign(tslib.__assign({}, eventDef.ui), standardProps.ui)\n    });\n    if (mutation.extendedProps) {\n        copy.extendedProps = tslib.__assign(tslib.__assign({}, copy.extendedProps), mutation.extendedProps);\n    }\n    for(var _i = 0, _a = context.pluginHooks.eventDefMutationAppliers; _i < _a.length; _i++){\n        var applier = _a[_i];\n        applier(copy, mutation, context);\n    }\n    if (!copy.hasEnd && context.options.forceEventDuration) {\n        copy.hasEnd = true;\n    }\n    return copy;\n}\nfunction applyMutationToEventInstance(eventInstance, eventDef, eventConfig, mutation, context) {\n    var dateEnv = context.dateEnv;\n    var forceAllDay = mutation.standardProps && mutation.standardProps.allDay === true;\n    var clearEnd = mutation.standardProps && mutation.standardProps.hasEnd === false;\n    var copy = tslib.__assign({}, eventInstance);\n    if (forceAllDay) {\n        copy.range = computeAlignedDayRange(copy.range);\n    }\n    if (mutation.datesDelta && eventConfig.startEditable) {\n        copy.range = {\n            start: dateEnv.add(copy.range.start, mutation.datesDelta),\n            end: dateEnv.add(copy.range.end, mutation.datesDelta)\n        };\n    }\n    if (mutation.startDelta && eventConfig.durationEditable) {\n        copy.range = {\n            start: dateEnv.add(copy.range.start, mutation.startDelta),\n            end: copy.range.end\n        };\n    }\n    if (mutation.endDelta && eventConfig.durationEditable) {\n        copy.range = {\n            start: copy.range.start,\n            end: dateEnv.add(copy.range.end, mutation.endDelta)\n        };\n    }\n    if (clearEnd) {\n        copy.range = {\n            start: copy.range.start,\n            end: getDefaultEventEnd(eventDef.allDay, copy.range.start, context)\n        };\n    }\n    // in case event was all-day but the supplied deltas were not\n    // better util for this?\n    if (eventDef.allDay) {\n        copy.range = {\n            start: startOfDay(copy.range.start),\n            end: startOfDay(copy.range.end)\n        };\n    }\n    // handle invalid durations\n    if (copy.range.end < copy.range.start) {\n        copy.range.end = getDefaultEventEnd(eventDef.allDay, copy.range.start, context);\n    }\n    return copy;\n}\n// no public types yet. when there are, export from:\n// import {} from './api-type-deps'\nvar ViewApi = /** @class */ function() {\n    function ViewApi1(type, getCurrentData, dateEnv) {\n        this.type = type;\n        this.getCurrentData = getCurrentData;\n        this.dateEnv = dateEnv;\n    }\n    Object.defineProperty(ViewApi1.prototype, \"calendar\", {\n        get: function() {\n            return this.getCurrentData().calendarApi;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ViewApi1.prototype, \"title\", {\n        get: function() {\n            return this.getCurrentData().viewTitle;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ViewApi1.prototype, \"activeStart\", {\n        get: function() {\n            return this.dateEnv.toDate(this.getCurrentData().dateProfile.activeRange.start);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ViewApi1.prototype, \"activeEnd\", {\n        get: function() {\n            return this.dateEnv.toDate(this.getCurrentData().dateProfile.activeRange.end);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ViewApi1.prototype, \"currentStart\", {\n        get: function() {\n            return this.dateEnv.toDate(this.getCurrentData().dateProfile.currentRange.start);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ViewApi1.prototype, \"currentEnd\", {\n        get: function() {\n            return this.dateEnv.toDate(this.getCurrentData().dateProfile.currentRange.end);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ViewApi1.prototype.getOption = function(name) {\n        return this.getCurrentData().options[name]; // are the view-specific options\n    };\n    return ViewApi1;\n}();\nvar EVENT_SOURCE_REFINERS = {\n    id: String,\n    defaultAllDay: Boolean,\n    url: String,\n    format: String,\n    events: identity,\n    eventDataTransform: identity,\n    // for any network-related sources\n    success: identity,\n    failure: identity\n};\nfunction parseEventSource(raw, context, refiners) {\n    if (refiners === void 0) {\n        refiners = buildEventSourceRefiners(context);\n    }\n    var rawObj;\n    if (typeof raw === \"string\") {\n        rawObj = {\n            url: raw\n        };\n    } else if (typeof raw === \"function\" || Array.isArray(raw)) {\n        rawObj = {\n            events: raw\n        };\n    } else if (typeof raw === \"object\" && raw) {\n        rawObj = raw;\n    }\n    if (rawObj) {\n        var _a = refineProps(rawObj, refiners), refined = _a.refined, extra = _a.extra;\n        var metaRes = buildEventSourceMeta(refined, context);\n        if (metaRes) {\n            return {\n                _raw: raw,\n                isFetching: false,\n                latestFetchId: \"\",\n                fetchRange: null,\n                defaultAllDay: refined.defaultAllDay,\n                eventDataTransform: refined.eventDataTransform,\n                success: refined.success,\n                failure: refined.failure,\n                publicId: refined.id || \"\",\n                sourceId: guid(),\n                sourceDefId: metaRes.sourceDefId,\n                meta: metaRes.meta,\n                ui: createEventUi(refined, context),\n                extendedProps: extra\n            };\n        }\n    }\n    return null;\n}\nfunction buildEventSourceRefiners(context) {\n    return tslib.__assign(tslib.__assign(tslib.__assign({}, EVENT_UI_REFINERS), EVENT_SOURCE_REFINERS), context.pluginHooks.eventSourceRefiners);\n}\nfunction buildEventSourceMeta(raw, context) {\n    var defs = context.pluginHooks.eventSourceDefs;\n    for(var i = defs.length - 1; i >= 0; i -= 1){\n        var def = defs[i];\n        var meta = def.parseMeta(raw);\n        if (meta) {\n            return {\n                sourceDefId: i,\n                meta: meta\n            };\n        }\n    }\n    return null;\n}\nfunction reduceCurrentDate(currentDate, action) {\n    switch(action.type){\n        case \"CHANGE_DATE\":\n            return action.dateMarker;\n        default:\n            return currentDate;\n    }\n}\nfunction getInitialDate(options, dateEnv) {\n    var initialDateInput = options.initialDate;\n    // compute the initial ambig-timezone date\n    if (initialDateInput != null) {\n        return dateEnv.createMarker(initialDateInput);\n    }\n    return getNow(options.now, dateEnv); // getNow already returns unzoned\n}\nfunction getNow(nowInput, dateEnv) {\n    if (typeof nowInput === \"function\") {\n        nowInput = nowInput();\n    }\n    if (nowInput == null) {\n        return dateEnv.createNowMarker();\n    }\n    return dateEnv.createMarker(nowInput);\n}\nvar CalendarApi = /** @class */ function() {\n    function CalendarApi1() {}\n    CalendarApi1.prototype.getCurrentData = function() {\n        return this.currentDataManager.getCurrentData();\n    };\n    CalendarApi1.prototype.dispatch = function(action) {\n        return this.currentDataManager.dispatch(action);\n    };\n    Object.defineProperty(CalendarApi1.prototype, \"view\", {\n        get: function() {\n            return this.getCurrentData().viewApi;\n        } // for public API\n        ,\n        enumerable: false,\n        configurable: true\n    });\n    CalendarApi1.prototype.batchRendering = function(callback) {\n        callback();\n    };\n    CalendarApi1.prototype.updateSize = function() {\n        this.trigger(\"_resize\", true);\n    };\n    // Options\n    // -----------------------------------------------------------------------------------------------------------------\n    CalendarApi1.prototype.setOption = function(name, val) {\n        this.dispatch({\n            type: \"SET_OPTION\",\n            optionName: name,\n            rawOptionValue: val\n        });\n    };\n    CalendarApi1.prototype.getOption = function(name) {\n        return this.currentDataManager.currentCalendarOptionsInput[name];\n    };\n    CalendarApi1.prototype.getAvailableLocaleCodes = function() {\n        return Object.keys(this.getCurrentData().availableRawLocales);\n    };\n    // Trigger\n    // -----------------------------------------------------------------------------------------------------------------\n    CalendarApi1.prototype.on = function(handlerName, handler) {\n        var currentDataManager = this.currentDataManager;\n        if (currentDataManager.currentCalendarOptionsRefiners[handlerName]) {\n            currentDataManager.emitter.on(handlerName, handler);\n        } else {\n            console.warn(\"Unknown listener name '\" + handlerName + \"'\");\n        }\n    };\n    CalendarApi1.prototype.off = function(handlerName, handler) {\n        this.currentDataManager.emitter.off(handlerName, handler);\n    };\n    // not meant for public use\n    CalendarApi1.prototype.trigger = function(handlerName) {\n        var _a;\n        var args = [];\n        for(var _i = 1; _i < arguments.length; _i++){\n            args[_i - 1] = arguments[_i];\n        }\n        (_a = this.currentDataManager.emitter).trigger.apply(_a, tslib.__spreadArray([\n            handlerName\n        ], args));\n    };\n    // View\n    // -----------------------------------------------------------------------------------------------------------------\n    CalendarApi1.prototype.changeView = function(viewType, dateOrRange) {\n        var _this = this;\n        this.batchRendering(function() {\n            _this.unselect();\n            if (dateOrRange) {\n                if (dateOrRange.start && dateOrRange.end) {\n                    _this.dispatch({\n                        type: \"CHANGE_VIEW_TYPE\",\n                        viewType: viewType\n                    });\n                    _this.dispatch({\n                        type: \"SET_OPTION\",\n                        optionName: \"visibleRange\",\n                        rawOptionValue: dateOrRange\n                    });\n                } else {\n                    var dateEnv = _this.getCurrentData().dateEnv;\n                    _this.dispatch({\n                        type: \"CHANGE_VIEW_TYPE\",\n                        viewType: viewType,\n                        dateMarker: dateEnv.createMarker(dateOrRange)\n                    });\n                }\n            } else {\n                _this.dispatch({\n                    type: \"CHANGE_VIEW_TYPE\",\n                    viewType: viewType\n                });\n            }\n        });\n    };\n    // Forces navigation to a view for the given date.\n    // `viewType` can be a specific view name or a generic one like \"week\" or \"day\".\n    // needs to change\n    CalendarApi1.prototype.zoomTo = function(dateMarker, viewType) {\n        var state = this.getCurrentData();\n        var spec;\n        viewType = viewType || \"day\"; // day is default zoom\n        spec = state.viewSpecs[viewType] || this.getUnitViewSpec(viewType);\n        this.unselect();\n        if (spec) {\n            this.dispatch({\n                type: \"CHANGE_VIEW_TYPE\",\n                viewType: spec.type,\n                dateMarker: dateMarker\n            });\n        } else {\n            this.dispatch({\n                type: \"CHANGE_DATE\",\n                dateMarker: dateMarker\n            });\n        }\n    };\n    // Given a duration singular unit, like \"week\" or \"day\", finds a matching view spec.\n    // Preference is given to views that have corresponding buttons.\n    CalendarApi1.prototype.getUnitViewSpec = function(unit) {\n        var _a = this.getCurrentData(), viewSpecs = _a.viewSpecs, toolbarConfig = _a.toolbarConfig;\n        var viewTypes = [].concat(toolbarConfig.header ? toolbarConfig.header.viewsWithButtons : [], toolbarConfig.footer ? toolbarConfig.footer.viewsWithButtons : []);\n        var i;\n        var spec;\n        for(var viewType in viewSpecs){\n            viewTypes.push(viewType);\n        }\n        for(i = 0; i < viewTypes.length; i += 1){\n            spec = viewSpecs[viewTypes[i]];\n            if (spec) {\n                if (spec.singleUnit === unit) {\n                    return spec;\n                }\n            }\n        }\n        return null;\n    };\n    // Current Date\n    // -----------------------------------------------------------------------------------------------------------------\n    CalendarApi1.prototype.prev = function() {\n        this.unselect();\n        this.dispatch({\n            type: \"PREV\"\n        });\n    };\n    CalendarApi1.prototype.next = function() {\n        this.unselect();\n        this.dispatch({\n            type: \"NEXT\"\n        });\n    };\n    CalendarApi1.prototype.prevYear = function() {\n        var state = this.getCurrentData();\n        this.unselect();\n        this.dispatch({\n            type: \"CHANGE_DATE\",\n            dateMarker: state.dateEnv.addYears(state.currentDate, -1)\n        });\n    };\n    CalendarApi1.prototype.nextYear = function() {\n        var state = this.getCurrentData();\n        this.unselect();\n        this.dispatch({\n            type: \"CHANGE_DATE\",\n            dateMarker: state.dateEnv.addYears(state.currentDate, 1)\n        });\n    };\n    CalendarApi1.prototype.today = function() {\n        var state = this.getCurrentData();\n        this.unselect();\n        this.dispatch({\n            type: \"CHANGE_DATE\",\n            dateMarker: getNow(state.calendarOptions.now, state.dateEnv)\n        });\n    };\n    CalendarApi1.prototype.gotoDate = function(zonedDateInput) {\n        var state = this.getCurrentData();\n        this.unselect();\n        this.dispatch({\n            type: \"CHANGE_DATE\",\n            dateMarker: state.dateEnv.createMarker(zonedDateInput)\n        });\n    };\n    CalendarApi1.prototype.incrementDate = function(deltaInput) {\n        var state = this.getCurrentData();\n        var delta = createDuration(deltaInput);\n        if (delta) {\n            this.unselect();\n            this.dispatch({\n                type: \"CHANGE_DATE\",\n                dateMarker: state.dateEnv.add(state.currentDate, delta)\n            });\n        }\n    };\n    // for external API\n    CalendarApi1.prototype.getDate = function() {\n        var state = this.getCurrentData();\n        return state.dateEnv.toDate(state.currentDate);\n    };\n    // Date Formatting Utils\n    // -----------------------------------------------------------------------------------------------------------------\n    CalendarApi1.prototype.formatDate = function(d, formatter) {\n        var dateEnv = this.getCurrentData().dateEnv;\n        return dateEnv.format(dateEnv.createMarker(d), createFormatter(formatter));\n    };\n    // `settings` is for formatter AND isEndExclusive\n    CalendarApi1.prototype.formatRange = function(d0, d1, settings) {\n        var dateEnv = this.getCurrentData().dateEnv;\n        return dateEnv.formatRange(dateEnv.createMarker(d0), dateEnv.createMarker(d1), createFormatter(settings), settings);\n    };\n    CalendarApi1.prototype.formatIso = function(d, omitTime) {\n        var dateEnv = this.getCurrentData().dateEnv;\n        return dateEnv.formatIso(dateEnv.createMarker(d), {\n            omitTime: omitTime\n        });\n    };\n    // Date Selection / Event Selection / DayClick\n    // -----------------------------------------------------------------------------------------------------------------\n    // this public method receives start/end dates in any format, with any timezone\n    // NOTE: args were changed from v3\n    CalendarApi1.prototype.select = function(dateOrObj, endDate) {\n        var selectionInput;\n        if (endDate == null) {\n            if (dateOrObj.start != null) {\n                selectionInput = dateOrObj;\n            } else {\n                selectionInput = {\n                    start: dateOrObj,\n                    end: null\n                };\n            }\n        } else {\n            selectionInput = {\n                start: dateOrObj,\n                end: endDate\n            };\n        }\n        var state = this.getCurrentData();\n        var selection = parseDateSpan(selectionInput, state.dateEnv, createDuration({\n            days: 1\n        }));\n        if (selection) {\n            this.dispatch({\n                type: \"SELECT_DATES\",\n                selection: selection\n            });\n            triggerDateSelect(selection, null, state);\n        }\n    };\n    // public method\n    CalendarApi1.prototype.unselect = function(pev) {\n        var state = this.getCurrentData();\n        if (state.dateSelection) {\n            this.dispatch({\n                type: \"UNSELECT_DATES\"\n            });\n            triggerDateUnselect(pev, state);\n        }\n    };\n    // Public Events API\n    // -----------------------------------------------------------------------------------------------------------------\n    CalendarApi1.prototype.addEvent = function(eventInput, sourceInput) {\n        if (eventInput instanceof EventApi) {\n            var def = eventInput._def;\n            var instance = eventInput._instance;\n            var currentData = this.getCurrentData();\n            // not already present? don't want to add an old snapshot\n            if (!currentData.eventStore.defs[def.defId]) {\n                this.dispatch({\n                    type: \"ADD_EVENTS\",\n                    eventStore: eventTupleToStore({\n                        def: def,\n                        instance: instance\n                    })\n                });\n                this.triggerEventAdd(eventInput);\n            }\n            return eventInput;\n        }\n        var state = this.getCurrentData();\n        var eventSource;\n        if (sourceInput instanceof EventSourceApi) {\n            eventSource = sourceInput.internalEventSource;\n        } else if (typeof sourceInput === \"boolean\") {\n            if (sourceInput) {\n                eventSource = hashValuesToArray(state.eventSources)[0];\n            }\n        } else if (sourceInput != null) {\n            var sourceApi = this.getEventSourceById(sourceInput); // TODO: use an internal function\n            if (!sourceApi) {\n                console.warn('Could not find an event source with ID \"' + sourceInput + '\"'); // TODO: test\n                return null;\n            }\n            eventSource = sourceApi.internalEventSource;\n        }\n        var tuple = parseEvent(eventInput, eventSource, state, false);\n        if (tuple) {\n            var newEventApi = new EventApi(state, tuple.def, tuple.def.recurringDef ? null : tuple.instance);\n            this.dispatch({\n                type: \"ADD_EVENTS\",\n                eventStore: eventTupleToStore(tuple)\n            });\n            this.triggerEventAdd(newEventApi);\n            return newEventApi;\n        }\n        return null;\n    };\n    CalendarApi1.prototype.triggerEventAdd = function(eventApi) {\n        var _this = this;\n        var emitter = this.getCurrentData().emitter;\n        emitter.trigger(\"eventAdd\", {\n            event: eventApi,\n            relatedEvents: [],\n            revert: function() {\n                _this.dispatch({\n                    type: \"REMOVE_EVENTS\",\n                    eventStore: eventApiToStore(eventApi)\n                });\n            }\n        });\n    };\n    // TODO: optimize\n    CalendarApi1.prototype.getEventById = function(id) {\n        var state = this.getCurrentData();\n        var _a = state.eventStore, defs = _a.defs, instances = _a.instances;\n        id = String(id);\n        for(var defId in defs){\n            var def = defs[defId];\n            if (def.publicId === id) {\n                if (def.recurringDef) {\n                    return new EventApi(state, def, null);\n                }\n                for(var instanceId in instances){\n                    var instance = instances[instanceId];\n                    if (instance.defId === def.defId) {\n                        return new EventApi(state, def, instance);\n                    }\n                }\n            }\n        }\n        return null;\n    };\n    CalendarApi1.prototype.getEvents = function() {\n        var currentData = this.getCurrentData();\n        return buildEventApis(currentData.eventStore, currentData);\n    };\n    CalendarApi1.prototype.removeAllEvents = function() {\n        this.dispatch({\n            type: \"REMOVE_ALL_EVENTS\"\n        });\n    };\n    // Public Event Sources API\n    // -----------------------------------------------------------------------------------------------------------------\n    CalendarApi1.prototype.getEventSources = function() {\n        var state = this.getCurrentData();\n        var sourceHash = state.eventSources;\n        var sourceApis = [];\n        for(var internalId in sourceHash){\n            sourceApis.push(new EventSourceApi(state, sourceHash[internalId]));\n        }\n        return sourceApis;\n    };\n    CalendarApi1.prototype.getEventSourceById = function(id) {\n        var state = this.getCurrentData();\n        var sourceHash = state.eventSources;\n        id = String(id);\n        for(var sourceId in sourceHash){\n            if (sourceHash[sourceId].publicId === id) {\n                return new EventSourceApi(state, sourceHash[sourceId]);\n            }\n        }\n        return null;\n    };\n    CalendarApi1.prototype.addEventSource = function(sourceInput) {\n        var state = this.getCurrentData();\n        if (sourceInput instanceof EventSourceApi) {\n            // not already present? don't want to add an old snapshot\n            if (!state.eventSources[sourceInput.internalEventSource.sourceId]) {\n                this.dispatch({\n                    type: \"ADD_EVENT_SOURCES\",\n                    sources: [\n                        sourceInput.internalEventSource\n                    ]\n                });\n            }\n            return sourceInput;\n        }\n        var eventSource = parseEventSource(sourceInput, state);\n        if (eventSource) {\n            this.dispatch({\n                type: \"ADD_EVENT_SOURCES\",\n                sources: [\n                    eventSource\n                ]\n            });\n            return new EventSourceApi(state, eventSource);\n        }\n        return null;\n    };\n    CalendarApi1.prototype.removeAllEventSources = function() {\n        this.dispatch({\n            type: \"REMOVE_ALL_EVENT_SOURCES\"\n        });\n    };\n    CalendarApi1.prototype.refetchEvents = function() {\n        this.dispatch({\n            type: \"FETCH_EVENT_SOURCES\",\n            isRefetch: true\n        });\n    };\n    // Scroll\n    // -----------------------------------------------------------------------------------------------------------------\n    CalendarApi1.prototype.scrollToTime = function(timeInput) {\n        var time = createDuration(timeInput);\n        if (time) {\n            this.trigger(\"_scrollRequest\", {\n                time: time\n            });\n        }\n    };\n    return CalendarApi1;\n}();\nvar EventApi = /** @class */ function() {\n    // instance will be null if expressing a recurring event that has no current instances,\n    // OR if trying to validate an incoming external event that has no dates assigned\n    function EventApi1(context, def, instance) {\n        this._context = context;\n        this._def = def;\n        this._instance = instance || null;\n    }\n    /*\n    TODO: make event struct more responsible for this\n    */ EventApi1.prototype.setProp = function(name, val) {\n        var _a, _b;\n        if (name in EVENT_DATE_REFINERS) {\n            console.warn(\"Could not set date-related prop 'name'. Use one of the date-related methods instead.\");\n        // TODO: make proper aliasing system?\n        } else if (name === \"id\") {\n            val = EVENT_NON_DATE_REFINERS[name](val);\n            this.mutate({\n                standardProps: {\n                    publicId: val\n                }\n            });\n        } else if (name in EVENT_NON_DATE_REFINERS) {\n            val = EVENT_NON_DATE_REFINERS[name](val);\n            this.mutate({\n                standardProps: (_a = {}, _a[name] = val, _a)\n            });\n        } else if (name in EVENT_UI_REFINERS) {\n            var ui = EVENT_UI_REFINERS[name](val);\n            if (name === \"color\") {\n                ui = {\n                    backgroundColor: val,\n                    borderColor: val\n                };\n            } else if (name === \"editable\") {\n                ui = {\n                    startEditable: val,\n                    durationEditable: val\n                };\n            } else {\n                ui = (_b = {}, _b[name] = val, _b);\n            }\n            this.mutate({\n                standardProps: {\n                    ui: ui\n                }\n            });\n        } else {\n            console.warn(\"Could not set prop '\" + name + \"'. Use setExtendedProp instead.\");\n        }\n    };\n    EventApi1.prototype.setExtendedProp = function(name, val) {\n        var _a;\n        this.mutate({\n            extendedProps: (_a = {}, _a[name] = val, _a)\n        });\n    };\n    EventApi1.prototype.setStart = function(startInput, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        var dateEnv = this._context.dateEnv;\n        var start = dateEnv.createMarker(startInput);\n        if (start && this._instance) {\n            var instanceRange = this._instance.range;\n            var startDelta = diffDates(instanceRange.start, start, dateEnv, options.granularity); // what if parsed bad!?\n            if (options.maintainDuration) {\n                this.mutate({\n                    datesDelta: startDelta\n                });\n            } else {\n                this.mutate({\n                    startDelta: startDelta\n                });\n            }\n        }\n    };\n    EventApi1.prototype.setEnd = function(endInput, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        var dateEnv = this._context.dateEnv;\n        var end;\n        if (endInput != null) {\n            end = dateEnv.createMarker(endInput);\n            if (!end) {\n                return; // TODO: warning if parsed bad\n            }\n        }\n        if (this._instance) {\n            if (end) {\n                var endDelta = diffDates(this._instance.range.end, end, dateEnv, options.granularity);\n                this.mutate({\n                    endDelta: endDelta\n                });\n            } else {\n                this.mutate({\n                    standardProps: {\n                        hasEnd: false\n                    }\n                });\n            }\n        }\n    };\n    EventApi1.prototype.setDates = function(startInput, endInput, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        var dateEnv = this._context.dateEnv;\n        var standardProps = {\n            allDay: options.allDay\n        };\n        var start = dateEnv.createMarker(startInput);\n        var end;\n        if (!start) {\n            return; // TODO: warning if parsed bad\n        }\n        if (endInput != null) {\n            end = dateEnv.createMarker(endInput);\n            if (!end) {\n                return;\n            }\n        }\n        if (this._instance) {\n            var instanceRange = this._instance.range;\n            // when computing the diff for an event being converted to all-day,\n            // compute diff off of the all-day values the way event-mutation does.\n            if (options.allDay === true) {\n                instanceRange = computeAlignedDayRange(instanceRange);\n            }\n            var startDelta = diffDates(instanceRange.start, start, dateEnv, options.granularity);\n            if (end) {\n                var endDelta = diffDates(instanceRange.end, end, dateEnv, options.granularity);\n                if (durationsEqual(startDelta, endDelta)) {\n                    this.mutate({\n                        datesDelta: startDelta,\n                        standardProps: standardProps\n                    });\n                } else {\n                    this.mutate({\n                        startDelta: startDelta,\n                        endDelta: endDelta,\n                        standardProps: standardProps\n                    });\n                }\n            } else {\n                standardProps.hasEnd = false;\n                this.mutate({\n                    datesDelta: startDelta,\n                    standardProps: standardProps\n                });\n            }\n        }\n    };\n    EventApi1.prototype.moveStart = function(deltaInput) {\n        var delta = createDuration(deltaInput);\n        if (delta) {\n            this.mutate({\n                startDelta: delta\n            });\n        }\n    };\n    EventApi1.prototype.moveEnd = function(deltaInput) {\n        var delta = createDuration(deltaInput);\n        if (delta) {\n            this.mutate({\n                endDelta: delta\n            });\n        }\n    };\n    EventApi1.prototype.moveDates = function(deltaInput) {\n        var delta = createDuration(deltaInput);\n        if (delta) {\n            this.mutate({\n                datesDelta: delta\n            });\n        }\n    };\n    EventApi1.prototype.setAllDay = function(allDay, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        var standardProps = {\n            allDay: allDay\n        };\n        var maintainDuration = options.maintainDuration;\n        if (maintainDuration == null) {\n            maintainDuration = this._context.options.allDayMaintainDuration;\n        }\n        if (this._def.allDay !== allDay) {\n            standardProps.hasEnd = maintainDuration;\n        }\n        this.mutate({\n            standardProps: standardProps\n        });\n    };\n    EventApi1.prototype.formatRange = function(formatInput) {\n        var dateEnv = this._context.dateEnv;\n        var instance = this._instance;\n        var formatter = createFormatter(formatInput);\n        if (this._def.hasEnd) {\n            return dateEnv.formatRange(instance.range.start, instance.range.end, formatter, {\n                forcedStartTzo: instance.forcedStartTzo,\n                forcedEndTzo: instance.forcedEndTzo\n            });\n        }\n        return dateEnv.format(instance.range.start, formatter, {\n            forcedTzo: instance.forcedStartTzo\n        });\n    };\n    EventApi1.prototype.mutate = function(mutation) {\n        var instance = this._instance;\n        if (instance) {\n            var def = this._def;\n            var context_1 = this._context;\n            var eventStore_1 = context_1.getCurrentData().eventStore;\n            var relevantEvents = getRelevantEvents(eventStore_1, instance.instanceId);\n            var eventConfigBase = {\n                \"\": {\n                    display: \"\",\n                    startEditable: true,\n                    durationEditable: true,\n                    constraints: [],\n                    overlap: null,\n                    allows: [],\n                    backgroundColor: \"\",\n                    borderColor: \"\",\n                    textColor: \"\",\n                    classNames: []\n                }\n            };\n            relevantEvents = applyMutationToEventStore(relevantEvents, eventConfigBase, mutation, context_1);\n            var oldEvent = new EventApi1(context_1, def, instance); // snapshot\n            this._def = relevantEvents.defs[def.defId];\n            this._instance = relevantEvents.instances[instance.instanceId];\n            context_1.dispatch({\n                type: \"MERGE_EVENTS\",\n                eventStore: relevantEvents\n            });\n            context_1.emitter.trigger(\"eventChange\", {\n                oldEvent: oldEvent,\n                event: this,\n                relatedEvents: buildEventApis(relevantEvents, context_1, instance),\n                revert: function() {\n                    context_1.dispatch({\n                        type: \"RESET_EVENTS\",\n                        eventStore: eventStore_1\n                    });\n                }\n            });\n        }\n    };\n    EventApi1.prototype.remove = function() {\n        var context = this._context;\n        var asStore = eventApiToStore(this);\n        context.dispatch({\n            type: \"REMOVE_EVENTS\",\n            eventStore: asStore\n        });\n        context.emitter.trigger(\"eventRemove\", {\n            event: this,\n            relatedEvents: [],\n            revert: function() {\n                context.dispatch({\n                    type: \"MERGE_EVENTS\",\n                    eventStore: asStore\n                });\n            }\n        });\n    };\n    Object.defineProperty(EventApi1.prototype, \"source\", {\n        get: function() {\n            var sourceId = this._def.sourceId;\n            if (sourceId) {\n                return new EventSourceApi(this._context, this._context.getCurrentData().eventSources[sourceId]);\n            }\n            return null;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi1.prototype, \"start\", {\n        get: function() {\n            return this._instance ? this._context.dateEnv.toDate(this._instance.range.start) : null;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi1.prototype, \"end\", {\n        get: function() {\n            return this._instance && this._def.hasEnd ? this._context.dateEnv.toDate(this._instance.range.end) : null;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi1.prototype, \"startStr\", {\n        get: function() {\n            var instance = this._instance;\n            if (instance) {\n                return this._context.dateEnv.formatIso(instance.range.start, {\n                    omitTime: this._def.allDay,\n                    forcedTzo: instance.forcedStartTzo\n                });\n            }\n            return \"\";\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi1.prototype, \"endStr\", {\n        get: function() {\n            var instance = this._instance;\n            if (instance && this._def.hasEnd) {\n                return this._context.dateEnv.formatIso(instance.range.end, {\n                    omitTime: this._def.allDay,\n                    forcedTzo: instance.forcedEndTzo\n                });\n            }\n            return \"\";\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi1.prototype, \"id\", {\n        // computable props that all access the def\n        // TODO: find a TypeScript-compatible way to do this at scale\n        get: function() {\n            return this._def.publicId;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi1.prototype, \"groupId\", {\n        get: function() {\n            return this._def.groupId;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi1.prototype, \"allDay\", {\n        get: function() {\n            return this._def.allDay;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi1.prototype, \"title\", {\n        get: function() {\n            return this._def.title;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi1.prototype, \"url\", {\n        get: function() {\n            return this._def.url;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi1.prototype, \"display\", {\n        get: function() {\n            return this._def.ui.display || \"auto\";\n        } // bad. just normalize the type earlier\n        ,\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi1.prototype, \"startEditable\", {\n        get: function() {\n            return this._def.ui.startEditable;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi1.prototype, \"durationEditable\", {\n        get: function() {\n            return this._def.ui.durationEditable;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi1.prototype, \"constraint\", {\n        get: function() {\n            return this._def.ui.constraints[0] || null;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi1.prototype, \"overlap\", {\n        get: function() {\n            return this._def.ui.overlap;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi1.prototype, \"allow\", {\n        get: function() {\n            return this._def.ui.allows[0] || null;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi1.prototype, \"backgroundColor\", {\n        get: function() {\n            return this._def.ui.backgroundColor;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi1.prototype, \"borderColor\", {\n        get: function() {\n            return this._def.ui.borderColor;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi1.prototype, \"textColor\", {\n        get: function() {\n            return this._def.ui.textColor;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi1.prototype, \"classNames\", {\n        // NOTE: user can't modify these because Object.freeze was called in event-def parsing\n        get: function() {\n            return this._def.ui.classNames;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi1.prototype, \"extendedProps\", {\n        get: function() {\n            return this._def.extendedProps;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    EventApi1.prototype.toPlainObject = function(settings) {\n        if (settings === void 0) {\n            settings = {};\n        }\n        var def = this._def;\n        var ui = def.ui;\n        var _a = this, startStr = _a.startStr, endStr = _a.endStr;\n        var res = {};\n        if (def.title) {\n            res.title = def.title;\n        }\n        if (startStr) {\n            res.start = startStr;\n        }\n        if (endStr) {\n            res.end = endStr;\n        }\n        if (def.publicId) {\n            res.id = def.publicId;\n        }\n        if (def.groupId) {\n            res.groupId = def.groupId;\n        }\n        if (def.url) {\n            res.url = def.url;\n        }\n        if (ui.display && ui.display !== \"auto\") {\n            res.display = ui.display;\n        }\n        // TODO: what about recurring-event properties???\n        // TODO: include startEditable/durationEditable/constraint/overlap/allow\n        if (settings.collapseColor && ui.backgroundColor && ui.backgroundColor === ui.borderColor) {\n            res.color = ui.backgroundColor;\n        } else {\n            if (ui.backgroundColor) {\n                res.backgroundColor = ui.backgroundColor;\n            }\n            if (ui.borderColor) {\n                res.borderColor = ui.borderColor;\n            }\n        }\n        if (ui.textColor) {\n            res.textColor = ui.textColor;\n        }\n        if (ui.classNames.length) {\n            res.classNames = ui.classNames;\n        }\n        if (Object.keys(def.extendedProps).length) {\n            if (settings.collapseExtendedProps) {\n                tslib.__assign(res, def.extendedProps);\n            } else {\n                res.extendedProps = def.extendedProps;\n            }\n        }\n        return res;\n    };\n    EventApi1.prototype.toJSON = function() {\n        return this.toPlainObject();\n    };\n    return EventApi1;\n}();\nfunction eventApiToStore(eventApi) {\n    var _a, _b;\n    var def = eventApi._def;\n    var instance = eventApi._instance;\n    return {\n        defs: (_a = {}, _a[def.defId] = def, _a),\n        instances: instance ? (_b = {}, _b[instance.instanceId] = instance, _b) : {}\n    };\n}\nfunction buildEventApis(eventStore, context, excludeInstance) {\n    var defs = eventStore.defs, instances = eventStore.instances;\n    var eventApis = [];\n    var excludeInstanceId = excludeInstance ? excludeInstance.instanceId : \"\";\n    for(var id in instances){\n        var instance = instances[id];\n        var def = defs[instance.defId];\n        if (instance.instanceId !== excludeInstanceId) {\n            eventApis.push(new EventApi(context, def, instance));\n        }\n    }\n    return eventApis;\n}\nvar calendarSystemClassMap = {};\nfunction registerCalendarSystem(name, theClass) {\n    calendarSystemClassMap[name] = theClass;\n}\nfunction createCalendarSystem(name) {\n    return new calendarSystemClassMap[name]();\n}\nvar GregorianCalendarSystem = /** @class */ function() {\n    function GregorianCalendarSystem1() {}\n    GregorianCalendarSystem1.prototype.getMarkerYear = function(d) {\n        return d.getUTCFullYear();\n    };\n    GregorianCalendarSystem1.prototype.getMarkerMonth = function(d) {\n        return d.getUTCMonth();\n    };\n    GregorianCalendarSystem1.prototype.getMarkerDay = function(d) {\n        return d.getUTCDate();\n    };\n    GregorianCalendarSystem1.prototype.arrayToMarker = function(arr) {\n        return arrayToUtcDate(arr);\n    };\n    GregorianCalendarSystem1.prototype.markerToArray = function(marker) {\n        return dateToUtcArray(marker);\n    };\n    return GregorianCalendarSystem1;\n}();\nregisterCalendarSystem(\"gregory\", GregorianCalendarSystem);\nvar ISO_RE = /^\\s*(\\d{4})(-?(\\d{2})(-?(\\d{2})([T ](\\d{2}):?(\\d{2})(:?(\\d{2})(\\.(\\d+))?)?(Z|(([-+])(\\d{2})(:?(\\d{2}))?))?)?)?)?$/;\nfunction parse(str) {\n    var m = ISO_RE.exec(str);\n    if (m) {\n        var marker = new Date(Date.UTC(Number(m[1]), m[3] ? Number(m[3]) - 1 : 0, Number(m[5] || 1), Number(m[7] || 0), Number(m[8] || 0), Number(m[10] || 0), m[12] ? Number(\"0.\" + m[12]) * 1000 : 0));\n        if (isValidDate(marker)) {\n            var timeZoneOffset = null;\n            if (m[13]) {\n                timeZoneOffset = (m[15] === \"-\" ? -1 : 1) * (Number(m[16] || 0) * 60 + Number(m[18] || 0));\n            }\n            return {\n                marker: marker,\n                isTimeUnspecified: !m[6],\n                timeZoneOffset: timeZoneOffset\n            };\n        }\n    }\n    return null;\n}\nvar DateEnv = /** @class */ function() {\n    function DateEnv1(settings) {\n        var timeZone = this.timeZone = settings.timeZone;\n        var isNamedTimeZone = timeZone !== \"local\" && timeZone !== \"UTC\";\n        if (settings.namedTimeZoneImpl && isNamedTimeZone) {\n            this.namedTimeZoneImpl = new settings.namedTimeZoneImpl(timeZone);\n        }\n        this.canComputeOffset = Boolean(!isNamedTimeZone || this.namedTimeZoneImpl);\n        this.calendarSystem = createCalendarSystem(settings.calendarSystem);\n        this.locale = settings.locale;\n        this.weekDow = settings.locale.week.dow;\n        this.weekDoy = settings.locale.week.doy;\n        if (settings.weekNumberCalculation === \"ISO\") {\n            this.weekDow = 1;\n            this.weekDoy = 4;\n        }\n        if (typeof settings.firstDay === \"number\") {\n            this.weekDow = settings.firstDay;\n        }\n        if (typeof settings.weekNumberCalculation === \"function\") {\n            this.weekNumberFunc = settings.weekNumberCalculation;\n        }\n        this.weekText = settings.weekText != null ? settings.weekText : settings.locale.options.weekText;\n        this.weekTextLong = (settings.weekTextLong != null ? settings.weekTextLong : settings.locale.options.weekTextLong) || this.weekText;\n        this.cmdFormatter = settings.cmdFormatter;\n        this.defaultSeparator = settings.defaultSeparator;\n    }\n    // Creating / Parsing\n    DateEnv1.prototype.createMarker = function(input) {\n        var meta = this.createMarkerMeta(input);\n        if (meta === null) {\n            return null;\n        }\n        return meta.marker;\n    };\n    DateEnv1.prototype.createNowMarker = function() {\n        if (this.canComputeOffset) {\n            return this.timestampToMarker(new Date().valueOf());\n        }\n        // if we can't compute the current date val for a timezone,\n        // better to give the current local date vals than UTC\n        return arrayToUtcDate(dateToLocalArray(new Date()));\n    };\n    DateEnv1.prototype.createMarkerMeta = function(input) {\n        if (typeof input === \"string\") {\n            return this.parse(input);\n        }\n        var marker = null;\n        if (typeof input === \"number\") {\n            marker = this.timestampToMarker(input);\n        } else if (input instanceof Date) {\n            input = input.valueOf();\n            if (!isNaN(input)) {\n                marker = this.timestampToMarker(input);\n            }\n        } else if (Array.isArray(input)) {\n            marker = arrayToUtcDate(input);\n        }\n        if (marker === null || !isValidDate(marker)) {\n            return null;\n        }\n        return {\n            marker: marker,\n            isTimeUnspecified: false,\n            forcedTzo: null\n        };\n    };\n    DateEnv1.prototype.parse = function(s) {\n        var parts = parse(s);\n        if (parts === null) {\n            return null;\n        }\n        var marker = parts.marker;\n        var forcedTzo = null;\n        if (parts.timeZoneOffset !== null) {\n            if (this.canComputeOffset) {\n                marker = this.timestampToMarker(marker.valueOf() - parts.timeZoneOffset * 60 * 1000);\n            } else {\n                forcedTzo = parts.timeZoneOffset;\n            }\n        }\n        return {\n            marker: marker,\n            isTimeUnspecified: parts.isTimeUnspecified,\n            forcedTzo: forcedTzo\n        };\n    };\n    // Accessors\n    DateEnv1.prototype.getYear = function(marker) {\n        return this.calendarSystem.getMarkerYear(marker);\n    };\n    DateEnv1.prototype.getMonth = function(marker) {\n        return this.calendarSystem.getMarkerMonth(marker);\n    };\n    // Adding / Subtracting\n    DateEnv1.prototype.add = function(marker, dur) {\n        var a = this.calendarSystem.markerToArray(marker);\n        a[0] += dur.years;\n        a[1] += dur.months;\n        a[2] += dur.days;\n        a[6] += dur.milliseconds;\n        return this.calendarSystem.arrayToMarker(a);\n    };\n    DateEnv1.prototype.subtract = function(marker, dur) {\n        var a = this.calendarSystem.markerToArray(marker);\n        a[0] -= dur.years;\n        a[1] -= dur.months;\n        a[2] -= dur.days;\n        a[6] -= dur.milliseconds;\n        return this.calendarSystem.arrayToMarker(a);\n    };\n    DateEnv1.prototype.addYears = function(marker, n) {\n        var a = this.calendarSystem.markerToArray(marker);\n        a[0] += n;\n        return this.calendarSystem.arrayToMarker(a);\n    };\n    DateEnv1.prototype.addMonths = function(marker, n) {\n        var a = this.calendarSystem.markerToArray(marker);\n        a[1] += n;\n        return this.calendarSystem.arrayToMarker(a);\n    };\n    // Diffing Whole Units\n    DateEnv1.prototype.diffWholeYears = function(m0, m1) {\n        var calendarSystem = this.calendarSystem;\n        if (timeAsMs(m0) === timeAsMs(m1) && calendarSystem.getMarkerDay(m0) === calendarSystem.getMarkerDay(m1) && calendarSystem.getMarkerMonth(m0) === calendarSystem.getMarkerMonth(m1)) {\n            return calendarSystem.getMarkerYear(m1) - calendarSystem.getMarkerYear(m0);\n        }\n        return null;\n    };\n    DateEnv1.prototype.diffWholeMonths = function(m0, m1) {\n        var calendarSystem = this.calendarSystem;\n        if (timeAsMs(m0) === timeAsMs(m1) && calendarSystem.getMarkerDay(m0) === calendarSystem.getMarkerDay(m1)) {\n            return calendarSystem.getMarkerMonth(m1) - calendarSystem.getMarkerMonth(m0) + (calendarSystem.getMarkerYear(m1) - calendarSystem.getMarkerYear(m0)) * 12;\n        }\n        return null;\n    };\n    // Range / Duration\n    DateEnv1.prototype.greatestWholeUnit = function(m0, m1) {\n        var n = this.diffWholeYears(m0, m1);\n        if (n !== null) {\n            return {\n                unit: \"year\",\n                value: n\n            };\n        }\n        n = this.diffWholeMonths(m0, m1);\n        if (n !== null) {\n            return {\n                unit: \"month\",\n                value: n\n            };\n        }\n        n = diffWholeWeeks(m0, m1);\n        if (n !== null) {\n            return {\n                unit: \"week\",\n                value: n\n            };\n        }\n        n = diffWholeDays(m0, m1);\n        if (n !== null) {\n            return {\n                unit: \"day\",\n                value: n\n            };\n        }\n        n = diffHours(m0, m1);\n        if (isInt(n)) {\n            return {\n                unit: \"hour\",\n                value: n\n            };\n        }\n        n = diffMinutes(m0, m1);\n        if (isInt(n)) {\n            return {\n                unit: \"minute\",\n                value: n\n            };\n        }\n        n = diffSeconds(m0, m1);\n        if (isInt(n)) {\n            return {\n                unit: \"second\",\n                value: n\n            };\n        }\n        return {\n            unit: \"millisecond\",\n            value: m1.valueOf() - m0.valueOf()\n        };\n    };\n    DateEnv1.prototype.countDurationsBetween = function(m0, m1, d) {\n        // TODO: can use greatestWholeUnit\n        var diff;\n        if (d.years) {\n            diff = this.diffWholeYears(m0, m1);\n            if (diff !== null) {\n                return diff / asRoughYears(d);\n            }\n        }\n        if (d.months) {\n            diff = this.diffWholeMonths(m0, m1);\n            if (diff !== null) {\n                return diff / asRoughMonths(d);\n            }\n        }\n        if (d.days) {\n            diff = diffWholeDays(m0, m1);\n            if (diff !== null) {\n                return diff / asRoughDays(d);\n            }\n        }\n        return (m1.valueOf() - m0.valueOf()) / asRoughMs(d);\n    };\n    // Start-Of\n    // these DON'T return zoned-dates. only UTC start-of dates\n    DateEnv1.prototype.startOf = function(m, unit) {\n        if (unit === \"year\") {\n            return this.startOfYear(m);\n        }\n        if (unit === \"month\") {\n            return this.startOfMonth(m);\n        }\n        if (unit === \"week\") {\n            return this.startOfWeek(m);\n        }\n        if (unit === \"day\") {\n            return startOfDay(m);\n        }\n        if (unit === \"hour\") {\n            return startOfHour(m);\n        }\n        if (unit === \"minute\") {\n            return startOfMinute(m);\n        }\n        if (unit === \"second\") {\n            return startOfSecond(m);\n        }\n        return null;\n    };\n    DateEnv1.prototype.startOfYear = function(m) {\n        return this.calendarSystem.arrayToMarker([\n            this.calendarSystem.getMarkerYear(m), \n        ]);\n    };\n    DateEnv1.prototype.startOfMonth = function(m) {\n        return this.calendarSystem.arrayToMarker([\n            this.calendarSystem.getMarkerYear(m),\n            this.calendarSystem.getMarkerMonth(m), \n        ]);\n    };\n    DateEnv1.prototype.startOfWeek = function(m) {\n        return this.calendarSystem.arrayToMarker([\n            this.calendarSystem.getMarkerYear(m),\n            this.calendarSystem.getMarkerMonth(m),\n            m.getUTCDate() - (m.getUTCDay() - this.weekDow + 7) % 7, \n        ]);\n    };\n    // Week Number\n    DateEnv1.prototype.computeWeekNumber = function(marker) {\n        if (this.weekNumberFunc) {\n            return this.weekNumberFunc(this.toDate(marker));\n        }\n        return weekOfYear(marker, this.weekDow, this.weekDoy);\n    };\n    // TODO: choke on timeZoneName: long\n    DateEnv1.prototype.format = function(marker, formatter, dateOptions) {\n        if (dateOptions === void 0) {\n            dateOptions = {};\n        }\n        return formatter.format({\n            marker: marker,\n            timeZoneOffset: dateOptions.forcedTzo != null ? dateOptions.forcedTzo : this.offsetForMarker(marker)\n        }, this);\n    };\n    DateEnv1.prototype.formatRange = function(start, end, formatter, dateOptions) {\n        if (dateOptions === void 0) {\n            dateOptions = {};\n        }\n        if (dateOptions.isEndExclusive) {\n            end = addMs(end, -1);\n        }\n        return formatter.formatRange({\n            marker: start,\n            timeZoneOffset: dateOptions.forcedStartTzo != null ? dateOptions.forcedStartTzo : this.offsetForMarker(start)\n        }, {\n            marker: end,\n            timeZoneOffset: dateOptions.forcedEndTzo != null ? dateOptions.forcedEndTzo : this.offsetForMarker(end)\n        }, this, dateOptions.defaultSeparator);\n    };\n    /*\n    DUMB: the omitTime arg is dumb. if we omit the time, we want to omit the timezone offset. and if we do that,\n    might as well use buildIsoString or some other util directly\n    */ DateEnv1.prototype.formatIso = function(marker, extraOptions) {\n        if (extraOptions === void 0) {\n            extraOptions = {};\n        }\n        var timeZoneOffset = null;\n        if (!extraOptions.omitTimeZoneOffset) {\n            if (extraOptions.forcedTzo != null) {\n                timeZoneOffset = extraOptions.forcedTzo;\n            } else {\n                timeZoneOffset = this.offsetForMarker(marker);\n            }\n        }\n        return buildIsoString(marker, timeZoneOffset, extraOptions.omitTime);\n    };\n    // TimeZone\n    DateEnv1.prototype.timestampToMarker = function(ms) {\n        if (this.timeZone === \"local\") {\n            return arrayToUtcDate(dateToLocalArray(new Date(ms)));\n        }\n        if (this.timeZone === \"UTC\" || !this.namedTimeZoneImpl) {\n            return new Date(ms);\n        }\n        return arrayToUtcDate(this.namedTimeZoneImpl.timestampToArray(ms));\n    };\n    DateEnv1.prototype.offsetForMarker = function(m) {\n        if (this.timeZone === \"local\") {\n            return -arrayToLocalDate(dateToUtcArray(m)).getTimezoneOffset(); // convert \"inverse\" offset to \"normal\" offset\n        }\n        if (this.timeZone === \"UTC\") {\n            return 0;\n        }\n        if (this.namedTimeZoneImpl) {\n            return this.namedTimeZoneImpl.offsetForArray(dateToUtcArray(m));\n        }\n        return null;\n    };\n    // Conversion\n    DateEnv1.prototype.toDate = function(m, forcedTzo) {\n        if (this.timeZone === \"local\") {\n            return arrayToLocalDate(dateToUtcArray(m));\n        }\n        if (this.timeZone === \"UTC\") {\n            return new Date(m.valueOf()); // make sure it's a copy\n        }\n        if (!this.namedTimeZoneImpl) {\n            return new Date(m.valueOf() - (forcedTzo || 0));\n        }\n        return new Date(m.valueOf() - this.namedTimeZoneImpl.offsetForArray(dateToUtcArray(m)) * 1000 * 60);\n    };\n    return DateEnv1;\n}();\nvar globalLocales = [];\nvar MINIMAL_RAW_EN_LOCALE = {\n    code: \"en\",\n    week: {\n        dow: 0,\n        doy: 4\n    },\n    direction: \"ltr\",\n    buttonText: {\n        prev: \"prev\",\n        next: \"next\",\n        prevYear: \"prev year\",\n        nextYear: \"next year\",\n        year: \"year\",\n        today: \"today\",\n        month: \"month\",\n        week: \"week\",\n        day: \"day\",\n        list: \"list\"\n    },\n    weekText: \"W\",\n    weekTextLong: \"Week\",\n    closeHint: \"Close\",\n    timeHint: \"Time\",\n    eventHint: \"Event\",\n    allDayText: \"all-day\",\n    moreLinkText: \"more\",\n    noEventsText: \"No events to display\"\n};\nvar RAW_EN_LOCALE = tslib.__assign(tslib.__assign({}, MINIMAL_RAW_EN_LOCALE), {\n    // Includes things we don't want other locales to inherit,\n    // things that derive from other translatable strings.\n    buttonHints: {\n        prev: \"Previous $0\",\n        next: \"Next $0\",\n        today: function(buttonText, unit) {\n            return unit === \"day\" ? \"Today\" : \"This \" + buttonText;\n        }\n    },\n    viewHint: \"$0 view\",\n    navLinkHint: \"Go to $0\",\n    moreLinkHint: function(eventCnt) {\n        return \"Show \" + eventCnt + \" more event\" + (eventCnt === 1 ? \"\" : \"s\");\n    }\n});\nfunction organizeRawLocales(explicitRawLocales) {\n    var defaultCode = explicitRawLocales.length > 0 ? explicitRawLocales[0].code : \"en\";\n    var allRawLocales = globalLocales.concat(explicitRawLocales);\n    var rawLocaleMap = {\n        en: RAW_EN_LOCALE\n    };\n    for(var _i = 0, allRawLocales_1 = allRawLocales; _i < allRawLocales_1.length; _i++){\n        var rawLocale = allRawLocales_1[_i];\n        rawLocaleMap[rawLocale.code] = rawLocale;\n    }\n    return {\n        map: rawLocaleMap,\n        defaultCode: defaultCode\n    };\n}\nfunction buildLocale(inputSingular, available) {\n    if (typeof inputSingular === \"object\" && !Array.isArray(inputSingular)) {\n        return parseLocale(inputSingular.code, [\n            inputSingular.code\n        ], inputSingular);\n    }\n    return queryLocale(inputSingular, available);\n}\nfunction queryLocale(codeArg, available) {\n    var codes = [].concat(codeArg || []); // will convert to array\n    var raw = queryRawLocale(codes, available) || RAW_EN_LOCALE;\n    return parseLocale(codeArg, codes, raw);\n}\nfunction queryRawLocale(codes, available) {\n    for(var i = 0; i < codes.length; i += 1){\n        var parts = codes[i].toLocaleLowerCase().split(\"-\");\n        for(var j = parts.length; j > 0; j -= 1){\n            var simpleId = parts.slice(0, j).join(\"-\");\n            if (available[simpleId]) {\n                return available[simpleId];\n            }\n        }\n    }\n    return null;\n}\nfunction parseLocale(codeArg, codes, raw) {\n    var merged = mergeProps([\n        MINIMAL_RAW_EN_LOCALE,\n        raw\n    ], [\n        \"buttonText\"\n    ]);\n    delete merged.code; // don't want this part of the options\n    var week = merged.week;\n    delete merged.week;\n    return {\n        codeArg: codeArg,\n        codes: codes,\n        week: week,\n        simpleNumberFormat: new Intl.NumberFormat(codeArg),\n        options: merged\n    };\n}\nfunction formatDate(dateInput, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    var dateEnv = buildDateEnv$1(options);\n    var formatter = createFormatter(options);\n    var dateMeta = dateEnv.createMarkerMeta(dateInput);\n    if (!dateMeta) {\n        return \"\";\n    }\n    return dateEnv.format(dateMeta.marker, formatter, {\n        forcedTzo: dateMeta.forcedTzo\n    });\n}\nfunction formatRange(startInput, endInput, options) {\n    var dateEnv = buildDateEnv$1(typeof options === \"object\" && options ? options : {}); // pass in if non-null object\n    var formatter = createFormatter(options);\n    var startMeta = dateEnv.createMarkerMeta(startInput);\n    var endMeta = dateEnv.createMarkerMeta(endInput);\n    if (!startMeta || !endMeta) {\n        return \"\";\n    }\n    return dateEnv.formatRange(startMeta.marker, endMeta.marker, formatter, {\n        forcedStartTzo: startMeta.forcedTzo,\n        forcedEndTzo: endMeta.forcedTzo,\n        isEndExclusive: options.isEndExclusive,\n        defaultSeparator: BASE_OPTION_DEFAULTS.defaultRangeSeparator\n    });\n}\n// TODO: more DRY and optimized\nfunction buildDateEnv$1(settings) {\n    var locale = buildLocale(settings.locale || \"en\", organizeRawLocales([]).map); // TODO: don't hardcode 'en' everywhere\n    return new DateEnv(tslib.__assign(tslib.__assign({\n        timeZone: BASE_OPTION_DEFAULTS.timeZone,\n        calendarSystem: \"gregory\"\n    }, settings), {\n        locale: locale\n    }));\n}\nvar DEF_DEFAULTS = {\n    startTime: \"09:00\",\n    endTime: \"17:00\",\n    daysOfWeek: [\n        1,\n        2,\n        3,\n        4,\n        5\n    ],\n    display: \"inverse-background\",\n    classNames: \"fc-non-business\",\n    groupId: \"_businessHours\"\n};\n/*\nTODO: pass around as EventDefHash!!!\n*/ function parseBusinessHours(input, context) {\n    return parseEvents(refineInputs(input), null, context);\n}\nfunction refineInputs(input) {\n    var rawDefs;\n    if (input === true) {\n        rawDefs = [\n            {}\n        ]; // will get DEF_DEFAULTS verbatim\n    } else if (Array.isArray(input)) {\n        // if specifying an array, every sub-definition NEEDS a day-of-week\n        rawDefs = input.filter(function(rawDef) {\n            return rawDef.daysOfWeek;\n        });\n    } else if (typeof input === \"object\" && input) {\n        rawDefs = [\n            input\n        ];\n    } else {\n        rawDefs = [];\n    }\n    rawDefs = rawDefs.map(function(rawDef) {\n        return tslib.__assign(tslib.__assign({}, DEF_DEFAULTS), rawDef);\n    });\n    return rawDefs;\n}\nfunction pointInsideRect(point, rect) {\n    return point.left >= rect.left && point.left < rect.right && point.top >= rect.top && point.top < rect.bottom;\n}\n// Returns a new rectangle that is the intersection of the two rectangles. If they don't intersect, returns false\nfunction intersectRects(rect1, rect2) {\n    var res = {\n        left: Math.max(rect1.left, rect2.left),\n        right: Math.min(rect1.right, rect2.right),\n        top: Math.max(rect1.top, rect2.top),\n        bottom: Math.min(rect1.bottom, rect2.bottom)\n    };\n    if (res.left < res.right && res.top < res.bottom) {\n        return res;\n    }\n    return false;\n}\nfunction translateRect(rect, deltaX, deltaY) {\n    return {\n        left: rect.left + deltaX,\n        right: rect.right + deltaX,\n        top: rect.top + deltaY,\n        bottom: rect.bottom + deltaY\n    };\n}\n// Returns a new point that will have been moved to reside within the given rectangle\nfunction constrainPoint(point, rect) {\n    return {\n        left: Math.min(Math.max(point.left, rect.left), rect.right),\n        top: Math.min(Math.max(point.top, rect.top), rect.bottom)\n    };\n}\n// Returns a point that is the center of the given rectangle\nfunction getRectCenter(rect) {\n    return {\n        left: (rect.left + rect.right) / 2,\n        top: (rect.top + rect.bottom) / 2\n    };\n}\n// Subtracts point2's coordinates from point1's coordinates, returning a delta\nfunction diffPoints(point1, point2) {\n    return {\n        left: point1.left - point2.left,\n        top: point1.top - point2.top\n    };\n}\nvar canVGrowWithinCell;\nfunction getCanVGrowWithinCell() {\n    if (canVGrowWithinCell == null) {\n        canVGrowWithinCell = computeCanVGrowWithinCell();\n    }\n    return canVGrowWithinCell;\n}\nfunction computeCanVGrowWithinCell() {\n    // for SSR, because this function is call immediately at top-level\n    // TODO: just make this logic execute top-level, immediately, instead of doing lazily\n    if (typeof document === \"undefined\") {\n        return true;\n    }\n    var el = document.createElement(\"div\");\n    el.style.position = \"absolute\";\n    el.style.top = \"0px\";\n    el.style.left = \"0px\";\n    el.innerHTML = \"<table><tr><td><div></div></td></tr></table>\";\n    el.querySelector(\"table\").style.height = \"100px\";\n    el.querySelector(\"div\").style.height = \"100%\";\n    document.body.appendChild(el);\n    var div = el.querySelector(\"div\");\n    var possible = div.offsetHeight > 0;\n    document.body.removeChild(el);\n    return possible;\n}\nvar EMPTY_EVENT_STORE = createEmptyEventStore(); // for purecomponents. TODO: keep elsewhere\nvar Splitter = /** @class */ function() {\n    function Splitter1() {\n        this.getKeysForEventDefs = memoize(this._getKeysForEventDefs);\n        this.splitDateSelection = memoize(this._splitDateSpan);\n        this.splitEventStore = memoize(this._splitEventStore);\n        this.splitIndividualUi = memoize(this._splitIndividualUi);\n        this.splitEventDrag = memoize(this._splitInteraction);\n        this.splitEventResize = memoize(this._splitInteraction);\n        this.eventUiBuilders = {}; // TODO: typescript protection\n    }\n    Splitter1.prototype.splitProps = function(props) {\n        var _this = this;\n        var keyInfos = this.getKeyInfo(props);\n        var defKeys = this.getKeysForEventDefs(props.eventStore);\n        var dateSelections = this.splitDateSelection(props.dateSelection);\n        var individualUi = this.splitIndividualUi(props.eventUiBases, defKeys); // the individual *bases*\n        var eventStores = this.splitEventStore(props.eventStore, defKeys);\n        var eventDrags = this.splitEventDrag(props.eventDrag);\n        var eventResizes = this.splitEventResize(props.eventResize);\n        var splitProps = {};\n        this.eventUiBuilders = mapHash(keyInfos, function(info, key) {\n            return _this.eventUiBuilders[key] || memoize(buildEventUiForKey);\n        });\n        for(var key1 in keyInfos){\n            var keyInfo = keyInfos[key1];\n            var eventStore = eventStores[key1] || EMPTY_EVENT_STORE;\n            var buildEventUi = this.eventUiBuilders[key1];\n            splitProps[key1] = {\n                businessHours: keyInfo.businessHours || props.businessHours,\n                dateSelection: dateSelections[key1] || null,\n                eventStore: eventStore,\n                eventUiBases: buildEventUi(props.eventUiBases[\"\"], keyInfo.ui, individualUi[key1]),\n                eventSelection: eventStore.instances[props.eventSelection] ? props.eventSelection : \"\",\n                eventDrag: eventDrags[key1] || null,\n                eventResize: eventResizes[key1] || null\n            };\n        }\n        return splitProps;\n    };\n    Splitter1.prototype._splitDateSpan = function(dateSpan) {\n        var dateSpans = {};\n        if (dateSpan) {\n            var keys = this.getKeysForDateSpan(dateSpan);\n            for(var _i = 0, keys_1 = keys; _i < keys_1.length; _i++){\n                var key = keys_1[_i];\n                dateSpans[key] = dateSpan;\n            }\n        }\n        return dateSpans;\n    };\n    Splitter1.prototype._getKeysForEventDefs = function(eventStore) {\n        var _this = this;\n        return mapHash(eventStore.defs, function(eventDef) {\n            return _this.getKeysForEventDef(eventDef);\n        });\n    };\n    Splitter1.prototype._splitEventStore = function(eventStore, defKeys) {\n        var defs = eventStore.defs, instances = eventStore.instances;\n        var splitStores = {};\n        for(var defId in defs){\n            for(var _i = 0, _a = defKeys[defId]; _i < _a.length; _i++){\n                var key = _a[_i];\n                if (!splitStores[key]) {\n                    splitStores[key] = createEmptyEventStore();\n                }\n                splitStores[key].defs[defId] = defs[defId];\n            }\n        }\n        for(var instanceId in instances){\n            var instance = instances[instanceId];\n            for(var _b = 0, _c = defKeys[instance.defId]; _b < _c.length; _b++){\n                var key = _c[_b];\n                if (splitStores[key]) {\n                    splitStores[key].instances[instanceId] = instance;\n                }\n            }\n        }\n        return splitStores;\n    };\n    Splitter1.prototype._splitIndividualUi = function(eventUiBases, defKeys) {\n        var splitHashes = {};\n        for(var defId in eventUiBases){\n            if (defId) {\n                for(var _i = 0, _a = defKeys[defId]; _i < _a.length; _i++){\n                    var key = _a[_i];\n                    if (!splitHashes[key]) {\n                        splitHashes[key] = {};\n                    }\n                    splitHashes[key][defId] = eventUiBases[defId];\n                }\n            }\n        }\n        return splitHashes;\n    };\n    Splitter1.prototype._splitInteraction = function(interaction) {\n        var splitStates = {};\n        if (interaction) {\n            var affectedStores_1 = this._splitEventStore(interaction.affectedEvents, this._getKeysForEventDefs(interaction.affectedEvents));\n            // can't rely on defKeys because event data is mutated\n            var mutatedKeysByDefId = this._getKeysForEventDefs(interaction.mutatedEvents);\n            var mutatedStores_1 = this._splitEventStore(interaction.mutatedEvents, mutatedKeysByDefId);\n            var populate = function(key) {\n                if (!splitStates[key]) {\n                    splitStates[key] = {\n                        affectedEvents: affectedStores_1[key] || EMPTY_EVENT_STORE,\n                        mutatedEvents: mutatedStores_1[key] || EMPTY_EVENT_STORE,\n                        isEvent: interaction.isEvent\n                    };\n                }\n            };\n            for(var key2 in affectedStores_1){\n                populate(key2);\n            }\n            for(var key2 in mutatedStores_1){\n                populate(key2);\n            }\n        }\n        return splitStates;\n    };\n    return Splitter1;\n}();\nfunction buildEventUiForKey(allUi, eventUiForKey, individualUi) {\n    var baseParts = [];\n    if (allUi) {\n        baseParts.push(allUi);\n    }\n    if (eventUiForKey) {\n        baseParts.push(eventUiForKey);\n    }\n    var stuff = {\n        \"\": combineEventUis(baseParts)\n    };\n    if (individualUi) {\n        tslib.__assign(stuff, individualUi);\n    }\n    return stuff;\n}\nfunction getDateMeta(date, todayRange, nowDate, dateProfile) {\n    return {\n        dow: date.getUTCDay(),\n        isDisabled: Boolean(dateProfile && !rangeContainsMarker(dateProfile.activeRange, date)),\n        isOther: Boolean(dateProfile && !rangeContainsMarker(dateProfile.currentRange, date)),\n        isToday: Boolean(todayRange && rangeContainsMarker(todayRange, date)),\n        isPast: Boolean(nowDate ? date < nowDate : todayRange ? date < todayRange.start : false),\n        isFuture: Boolean(nowDate ? date > nowDate : todayRange ? date >= todayRange.end : false)\n    };\n}\nfunction getDayClassNames(meta, theme) {\n    var classNames = [\n        \"fc-day\",\n        \"fc-day-\" + DAY_IDS[meta.dow], \n    ];\n    if (meta.isDisabled) {\n        classNames.push(\"fc-day-disabled\");\n    } else {\n        if (meta.isToday) {\n            classNames.push(\"fc-day-today\");\n            classNames.push(theme.getClass(\"today\"));\n        }\n        if (meta.isPast) {\n            classNames.push(\"fc-day-past\");\n        }\n        if (meta.isFuture) {\n            classNames.push(\"fc-day-future\");\n        }\n        if (meta.isOther) {\n            classNames.push(\"fc-day-other\");\n        }\n    }\n    return classNames;\n}\nfunction getSlotClassNames(meta, theme) {\n    var classNames = [\n        \"fc-slot\",\n        \"fc-slot-\" + DAY_IDS[meta.dow], \n    ];\n    if (meta.isDisabled) {\n        classNames.push(\"fc-slot-disabled\");\n    } else {\n        if (meta.isToday) {\n            classNames.push(\"fc-slot-today\");\n            classNames.push(theme.getClass(\"today\"));\n        }\n        if (meta.isPast) {\n            classNames.push(\"fc-slot-past\");\n        }\n        if (meta.isFuture) {\n            classNames.push(\"fc-slot-future\");\n        }\n    }\n    return classNames;\n}\nvar DAY_FORMAT = createFormatter({\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\"\n});\nvar WEEK_FORMAT = createFormatter({\n    week: \"long\"\n});\nfunction buildNavLinkAttrs(context, dateMarker, viewType, isTabbable) {\n    if (viewType === void 0) {\n        viewType = \"day\";\n    }\n    if (isTabbable === void 0) {\n        isTabbable = true;\n    }\n    var dateEnv = context.dateEnv, options = context.options, calendarApi = context.calendarApi;\n    var dateStr = dateEnv.format(dateMarker, viewType === \"week\" ? WEEK_FORMAT : DAY_FORMAT);\n    if (options.navLinks) {\n        var zonedDate = dateEnv.toDate(dateMarker);\n        var handleInteraction = function(ev) {\n            var customAction = viewType === \"day\" ? options.navLinkDayClick : viewType === \"week\" ? options.navLinkWeekClick : null;\n            if (typeof customAction === \"function\") {\n                customAction.call(calendarApi, dateEnv.toDate(dateMarker), ev);\n            } else {\n                if (typeof customAction === \"string\") {\n                    viewType = customAction;\n                }\n                calendarApi.zoomTo(dateMarker, viewType);\n            }\n        };\n        return tslib.__assign({\n            title: formatWithOrdinals(options.navLinkHint, [\n                dateStr,\n                zonedDate\n            ], dateStr),\n            \"data-navlink\": \"\"\n        }, isTabbable ? createAriaClickAttrs(handleInteraction) : {\n            onClick: handleInteraction\n        });\n    }\n    return {\n        \"aria-label\": dateStr\n    };\n}\nvar _isRtlScrollbarOnLeft = null;\nfunction getIsRtlScrollbarOnLeft() {\n    if (_isRtlScrollbarOnLeft === null) {\n        _isRtlScrollbarOnLeft = computeIsRtlScrollbarOnLeft();\n    }\n    return _isRtlScrollbarOnLeft;\n}\nfunction computeIsRtlScrollbarOnLeft() {\n    var outerEl = document.createElement(\"div\");\n    applyStyle(outerEl, {\n        position: \"absolute\",\n        top: -1000,\n        left: 0,\n        border: 0,\n        padding: 0,\n        overflow: \"scroll\",\n        direction: \"rtl\"\n    });\n    outerEl.innerHTML = \"<div></div>\";\n    document.body.appendChild(outerEl);\n    var innerEl = outerEl.firstChild;\n    var res = innerEl.getBoundingClientRect().left > outerEl.getBoundingClientRect().left;\n    removeElement(outerEl);\n    return res;\n}\nvar _scrollbarWidths;\nfunction getScrollbarWidths() {\n    if (!_scrollbarWidths) {\n        _scrollbarWidths = computeScrollbarWidths();\n    }\n    return _scrollbarWidths;\n}\nfunction computeScrollbarWidths() {\n    var el = document.createElement(\"div\");\n    el.style.overflow = \"scroll\";\n    el.style.position = \"absolute\";\n    el.style.top = \"-9999px\";\n    el.style.left = \"-9999px\";\n    document.body.appendChild(el);\n    var res = computeScrollbarWidthsForEl(el);\n    document.body.removeChild(el);\n    return res;\n}\n// WARNING: will include border\nfunction computeScrollbarWidthsForEl(el) {\n    return {\n        x: el.offsetHeight - el.clientHeight,\n        y: el.offsetWidth - el.clientWidth\n    };\n}\nfunction computeEdges(el, getPadding) {\n    if (getPadding === void 0) {\n        getPadding = false;\n    }\n    var computedStyle = window.getComputedStyle(el);\n    var borderLeft = parseInt(computedStyle.borderLeftWidth, 10) || 0;\n    var borderRight = parseInt(computedStyle.borderRightWidth, 10) || 0;\n    var borderTop = parseInt(computedStyle.borderTopWidth, 10) || 0;\n    var borderBottom = parseInt(computedStyle.borderBottomWidth, 10) || 0;\n    var badScrollbarWidths = computeScrollbarWidthsForEl(el); // includes border!\n    var scrollbarLeftRight = badScrollbarWidths.y - borderLeft - borderRight;\n    var scrollbarBottom = badScrollbarWidths.x - borderTop - borderBottom;\n    var res = {\n        borderLeft: borderLeft,\n        borderRight: borderRight,\n        borderTop: borderTop,\n        borderBottom: borderBottom,\n        scrollbarBottom: scrollbarBottom,\n        scrollbarLeft: 0,\n        scrollbarRight: 0\n    };\n    if (getIsRtlScrollbarOnLeft() && computedStyle.direction === \"rtl\") {\n        res.scrollbarLeft = scrollbarLeftRight;\n    } else {\n        res.scrollbarRight = scrollbarLeftRight;\n    }\n    if (getPadding) {\n        res.paddingLeft = parseInt(computedStyle.paddingLeft, 10) || 0;\n        res.paddingRight = parseInt(computedStyle.paddingRight, 10) || 0;\n        res.paddingTop = parseInt(computedStyle.paddingTop, 10) || 0;\n        res.paddingBottom = parseInt(computedStyle.paddingBottom, 10) || 0;\n    }\n    return res;\n}\nfunction computeInnerRect(el, goWithinPadding, doFromWindowViewport) {\n    if (goWithinPadding === void 0) {\n        goWithinPadding = false;\n    }\n    var outerRect = doFromWindowViewport ? el.getBoundingClientRect() : computeRect(el);\n    var edges = computeEdges(el, goWithinPadding);\n    var res = {\n        left: outerRect.left + edges.borderLeft + edges.scrollbarLeft,\n        right: outerRect.right - edges.borderRight - edges.scrollbarRight,\n        top: outerRect.top + edges.borderTop,\n        bottom: outerRect.bottom - edges.borderBottom - edges.scrollbarBottom\n    };\n    if (goWithinPadding) {\n        res.left += edges.paddingLeft;\n        res.right -= edges.paddingRight;\n        res.top += edges.paddingTop;\n        res.bottom -= edges.paddingBottom;\n    }\n    return res;\n}\nfunction computeRect(el) {\n    var rect = el.getBoundingClientRect();\n    return {\n        left: rect.left + window.pageXOffset,\n        top: rect.top + window.pageYOffset,\n        right: rect.right + window.pageXOffset,\n        bottom: rect.bottom + window.pageYOffset\n    };\n}\nfunction computeClippedClientRect(el) {\n    var clippingParents = getClippingParents(el);\n    var rect = el.getBoundingClientRect();\n    for(var _i = 0, clippingParents_1 = clippingParents; _i < clippingParents_1.length; _i++){\n        var clippingParent = clippingParents_1[_i];\n        var intersection = intersectRects(rect, clippingParent.getBoundingClientRect());\n        if (intersection) {\n            rect = intersection;\n        } else {\n            return null;\n        }\n    }\n    return rect;\n}\nfunction computeHeightAndMargins(el) {\n    return el.getBoundingClientRect().height + computeVMargins(el);\n}\nfunction computeVMargins(el) {\n    var computed = window.getComputedStyle(el);\n    return parseInt(computed.marginTop, 10) + parseInt(computed.marginBottom, 10);\n}\n// does not return window\nfunction getClippingParents(el) {\n    var parents = [];\n    while(el instanceof HTMLElement){\n        var computedStyle = window.getComputedStyle(el);\n        if (computedStyle.position === \"fixed\") {\n            break;\n        }\n        if (/(auto|scroll)/.test(computedStyle.overflow + computedStyle.overflowY + computedStyle.overflowX)) {\n            parents.push(el);\n        }\n        el = el.parentNode;\n    }\n    return parents;\n}\n// given a function that resolves a result asynchronously.\n// the function can either call passed-in success and failure callbacks,\n// or it can return a promise.\n// if you need to pass additional params to func, bind them first.\nfunction unpromisify(func, success, failure) {\n    // guard against success/failure callbacks being called more than once\n    // and guard against a promise AND callback being used together.\n    var isResolved = false;\n    var wrappedSuccess = function() {\n        if (!isResolved) {\n            isResolved = true;\n            success.apply(this, arguments); // eslint-disable-line prefer-rest-params\n        }\n    };\n    var wrappedFailure = function() {\n        if (!isResolved) {\n            isResolved = true;\n            if (failure) {\n                failure.apply(this, arguments); // eslint-disable-line prefer-rest-params\n            }\n        }\n    };\n    var res = func(wrappedSuccess, wrappedFailure);\n    if (res && typeof res.then === \"function\") {\n        res.then(wrappedSuccess, wrappedFailure);\n    }\n}\nvar Emitter = /** @class */ function() {\n    function Emitter1() {\n        this.handlers = {};\n        this.thisContext = null;\n    }\n    Emitter1.prototype.setThisContext = function(thisContext) {\n        this.thisContext = thisContext;\n    };\n    Emitter1.prototype.setOptions = function(options) {\n        this.options = options;\n    };\n    Emitter1.prototype.on = function(type, handler) {\n        addToHash(this.handlers, type, handler);\n    };\n    Emitter1.prototype.off = function(type, handler) {\n        removeFromHash(this.handlers, type, handler);\n    };\n    Emitter1.prototype.trigger = function(type) {\n        var args = [];\n        for(var _i = 1; _i < arguments.length; _i++){\n            args[_i - 1] = arguments[_i];\n        }\n        var attachedHandlers = this.handlers[type] || [];\n        var optionHandler = this.options && this.options[type];\n        var handlers = [].concat(optionHandler || [], attachedHandlers);\n        for(var _a = 0, handlers_1 = handlers; _a < handlers_1.length; _a++){\n            var handler = handlers_1[_a];\n            handler.apply(this.thisContext, args);\n        }\n    };\n    Emitter1.prototype.hasHandlers = function(type) {\n        return Boolean(this.handlers[type] && this.handlers[type].length || this.options && this.options[type]);\n    };\n    return Emitter1;\n}();\nfunction addToHash(hash, type, handler) {\n    (hash[type] || (hash[type] = [])).push(handler);\n}\nfunction removeFromHash(hash, type, handler) {\n    if (handler) {\n        if (hash[type]) {\n            hash[type] = hash[type].filter(function(func) {\n                return func !== handler;\n            });\n        }\n    } else {\n        delete hash[type]; // remove all handler funcs for this type\n    }\n}\n/*\nRecords offset information for a set of elements, relative to an origin element.\nCan record the left/right OR the top/bottom OR both.\nProvides methods for querying the cache by position.\n*/ var PositionCache = /** @class */ function() {\n    function PositionCache1(originEl, els, isHorizontal, isVertical) {\n        this.els = els;\n        var originClientRect = this.originClientRect = originEl.getBoundingClientRect(); // relative to viewport top-left\n        if (isHorizontal) {\n            this.buildElHorizontals(originClientRect.left);\n        }\n        if (isVertical) {\n            this.buildElVerticals(originClientRect.top);\n        }\n    }\n    // Populates the left/right internal coordinate arrays\n    PositionCache1.prototype.buildElHorizontals = function(originClientLeft) {\n        var lefts = [];\n        var rights = [];\n        for(var _i = 0, _a = this.els; _i < _a.length; _i++){\n            var el = _a[_i];\n            var rect = el.getBoundingClientRect();\n            lefts.push(rect.left - originClientLeft);\n            rights.push(rect.right - originClientLeft);\n        }\n        this.lefts = lefts;\n        this.rights = rights;\n    };\n    // Populates the top/bottom internal coordinate arrays\n    PositionCache1.prototype.buildElVerticals = function(originClientTop) {\n        var tops = [];\n        var bottoms = [];\n        for(var _i = 0, _a = this.els; _i < _a.length; _i++){\n            var el = _a[_i];\n            var rect = el.getBoundingClientRect();\n            tops.push(rect.top - originClientTop);\n            bottoms.push(rect.bottom - originClientTop);\n        }\n        this.tops = tops;\n        this.bottoms = bottoms;\n    };\n    // Given a left offset (from document left), returns the index of the el that it horizontally intersects.\n    // If no intersection is made, returns undefined.\n    PositionCache1.prototype.leftToIndex = function(leftPosition) {\n        var _a = this, lefts = _a.lefts, rights = _a.rights;\n        var len = lefts.length;\n        var i;\n        for(i = 0; i < len; i += 1){\n            if (leftPosition >= lefts[i] && leftPosition < rights[i]) {\n                return i;\n            }\n        }\n        return undefined; // TODO: better\n    };\n    // Given a top offset (from document top), returns the index of the el that it vertically intersects.\n    // If no intersection is made, returns undefined.\n    PositionCache1.prototype.topToIndex = function(topPosition) {\n        var _a = this, tops = _a.tops, bottoms = _a.bottoms;\n        var len = tops.length;\n        var i;\n        for(i = 0; i < len; i += 1){\n            if (topPosition >= tops[i] && topPosition < bottoms[i]) {\n                return i;\n            }\n        }\n        return undefined; // TODO: better\n    };\n    // Gets the width of the element at the given index\n    PositionCache1.prototype.getWidth = function(leftIndex) {\n        return this.rights[leftIndex] - this.lefts[leftIndex];\n    };\n    // Gets the height of the element at the given index\n    PositionCache1.prototype.getHeight = function(topIndex) {\n        return this.bottoms[topIndex] - this.tops[topIndex];\n    };\n    return PositionCache1;\n}();\n/* eslint max-classes-per-file: \"off\" */ /*\nAn object for getting/setting scroll-related information for an element.\nInternally, this is done very differently for window versus DOM element,\nso this object serves as a common interface.\n*/ var ScrollController = /** @class */ function() {\n    function ScrollController1() {}\n    ScrollController1.prototype.getMaxScrollTop = function() {\n        return this.getScrollHeight() - this.getClientHeight();\n    };\n    ScrollController1.prototype.getMaxScrollLeft = function() {\n        return this.getScrollWidth() - this.getClientWidth();\n    };\n    ScrollController1.prototype.canScrollVertically = function() {\n        return this.getMaxScrollTop() > 0;\n    };\n    ScrollController1.prototype.canScrollHorizontally = function() {\n        return this.getMaxScrollLeft() > 0;\n    };\n    ScrollController1.prototype.canScrollUp = function() {\n        return this.getScrollTop() > 0;\n    };\n    ScrollController1.prototype.canScrollDown = function() {\n        return this.getScrollTop() < this.getMaxScrollTop();\n    };\n    ScrollController1.prototype.canScrollLeft = function() {\n        return this.getScrollLeft() > 0;\n    };\n    ScrollController1.prototype.canScrollRight = function() {\n        return this.getScrollLeft() < this.getMaxScrollLeft();\n    };\n    return ScrollController1;\n}();\nvar ElementScrollController = /** @class */ function(_super) {\n    tslib.__extends(ElementScrollController1, _super);\n    function ElementScrollController1(el) {\n        var _this = _super.call(this) || this;\n        _this.el = el;\n        return _this;\n    }\n    ElementScrollController1.prototype.getScrollTop = function() {\n        return this.el.scrollTop;\n    };\n    ElementScrollController1.prototype.getScrollLeft = function() {\n        return this.el.scrollLeft;\n    };\n    ElementScrollController1.prototype.setScrollTop = function(top) {\n        this.el.scrollTop = top;\n    };\n    ElementScrollController1.prototype.setScrollLeft = function(left) {\n        this.el.scrollLeft = left;\n    };\n    ElementScrollController1.prototype.getScrollWidth = function() {\n        return this.el.scrollWidth;\n    };\n    ElementScrollController1.prototype.getScrollHeight = function() {\n        return this.el.scrollHeight;\n    };\n    ElementScrollController1.prototype.getClientHeight = function() {\n        return this.el.clientHeight;\n    };\n    ElementScrollController1.prototype.getClientWidth = function() {\n        return this.el.clientWidth;\n    };\n    return ElementScrollController1;\n}(ScrollController);\nvar WindowScrollController = /** @class */ function(_super) {\n    tslib.__extends(WindowScrollController1, _super);\n    function WindowScrollController1() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    WindowScrollController1.prototype.getScrollTop = function() {\n        return window.pageYOffset;\n    };\n    WindowScrollController1.prototype.getScrollLeft = function() {\n        return window.pageXOffset;\n    };\n    WindowScrollController1.prototype.setScrollTop = function(n) {\n        window.scroll(window.pageXOffset, n);\n    };\n    WindowScrollController1.prototype.setScrollLeft = function(n) {\n        window.scroll(n, window.pageYOffset);\n    };\n    WindowScrollController1.prototype.getScrollWidth = function() {\n        return document.documentElement.scrollWidth;\n    };\n    WindowScrollController1.prototype.getScrollHeight = function() {\n        return document.documentElement.scrollHeight;\n    };\n    WindowScrollController1.prototype.getClientHeight = function() {\n        return document.documentElement.clientHeight;\n    };\n    WindowScrollController1.prototype.getClientWidth = function() {\n        return document.documentElement.clientWidth;\n    };\n    return WindowScrollController1;\n}(ScrollController);\nvar Theme = /** @class */ function() {\n    function Theme1(calendarOptions) {\n        if (this.iconOverrideOption) {\n            this.setIconOverride(calendarOptions[this.iconOverrideOption]);\n        }\n    }\n    Theme1.prototype.setIconOverride = function(iconOverrideHash) {\n        var iconClassesCopy;\n        var buttonName;\n        if (typeof iconOverrideHash === \"object\" && iconOverrideHash) {\n            iconClassesCopy = tslib.__assign({}, this.iconClasses);\n            for(buttonName in iconOverrideHash){\n                iconClassesCopy[buttonName] = this.applyIconOverridePrefix(iconOverrideHash[buttonName]);\n            }\n            this.iconClasses = iconClassesCopy;\n        } else if (iconOverrideHash === false) {\n            this.iconClasses = {};\n        }\n    };\n    Theme1.prototype.applyIconOverridePrefix = function(className) {\n        var prefix = this.iconOverridePrefix;\n        if (prefix && className.indexOf(prefix) !== 0) {\n            className = prefix + className;\n        }\n        return className;\n    };\n    Theme1.prototype.getClass = function(key) {\n        return this.classes[key] || \"\";\n    };\n    Theme1.prototype.getIconClass = function(buttonName, isRtl) {\n        var className;\n        if (isRtl && this.rtlIconClasses) {\n            className = this.rtlIconClasses[buttonName] || this.iconClasses[buttonName];\n        } else {\n            className = this.iconClasses[buttonName];\n        }\n        if (className) {\n            return this.baseIconClass + \" \" + className;\n        }\n        return \"\";\n    };\n    Theme1.prototype.getCustomButtonIconClass = function(customButtonProps) {\n        var className;\n        if (this.iconOverrideCustomButtonOption) {\n            className = customButtonProps[this.iconOverrideCustomButtonOption];\n            if (className) {\n                return this.baseIconClass + \" \" + this.applyIconOverridePrefix(className);\n            }\n        }\n        return \"\";\n    };\n    return Theme1;\n}();\nTheme.prototype.classes = {};\nTheme.prototype.iconClasses = {};\nTheme.prototype.baseIconClass = \"\";\nTheme.prototype.iconOverridePrefix = \"\";\nvar ScrollResponder = /** @class */ function() {\n    function ScrollResponder1(execFunc, emitter, scrollTime, scrollTimeReset) {\n        var _this = this;\n        this.execFunc = execFunc;\n        this.emitter = emitter;\n        this.scrollTime = scrollTime;\n        this.scrollTimeReset = scrollTimeReset;\n        this.handleScrollRequest = function(request) {\n            _this.queuedRequest = tslib.__assign({}, _this.queuedRequest || {}, request);\n            _this.drain();\n        };\n        emitter.on(\"_scrollRequest\", this.handleScrollRequest);\n        this.fireInitialScroll();\n    }\n    ScrollResponder1.prototype.detach = function() {\n        this.emitter.off(\"_scrollRequest\", this.handleScrollRequest);\n    };\n    ScrollResponder1.prototype.update = function(isDatesNew) {\n        if (isDatesNew && this.scrollTimeReset) {\n            this.fireInitialScroll(); // will drain\n        } else {\n            this.drain();\n        }\n    };\n    ScrollResponder1.prototype.fireInitialScroll = function() {\n        this.handleScrollRequest({\n            time: this.scrollTime\n        });\n    };\n    ScrollResponder1.prototype.drain = function() {\n        if (this.queuedRequest && this.execFunc(this.queuedRequest)) {\n            this.queuedRequest = null;\n        }\n    };\n    return ScrollResponder1;\n}();\nvar ViewContextType = vdom_cjs.createContext({}); // for Components\nfunction buildViewContext(viewSpec, viewApi, viewOptions, dateProfileGenerator, dateEnv, theme, pluginHooks, dispatch, getCurrentData, emitter, calendarApi, registerInteractiveComponent, unregisterInteractiveComponent) {\n    return {\n        dateEnv: dateEnv,\n        options: viewOptions,\n        pluginHooks: pluginHooks,\n        emitter: emitter,\n        dispatch: dispatch,\n        getCurrentData: getCurrentData,\n        calendarApi: calendarApi,\n        viewSpec: viewSpec,\n        viewApi: viewApi,\n        dateProfileGenerator: dateProfileGenerator,\n        theme: theme,\n        isRtl: viewOptions.direction === \"rtl\",\n        addResizeHandler: function(handler) {\n            emitter.on(\"_resize\", handler);\n        },\n        removeResizeHandler: function(handler) {\n            emitter.off(\"_resize\", handler);\n        },\n        createScrollResponder: function(execFunc) {\n            return new ScrollResponder(execFunc, emitter, createDuration(viewOptions.scrollTime), viewOptions.scrollTimeReset);\n        },\n        registerInteractiveComponent: registerInteractiveComponent,\n        unregisterInteractiveComponent: unregisterInteractiveComponent\n    };\n}\n/* eslint max-classes-per-file: off */ var PureComponent = /** @class */ function(_super) {\n    tslib.__extends(PureComponent1, _super);\n    function PureComponent1() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    PureComponent1.prototype.shouldComponentUpdate = function(nextProps, nextState) {\n        if (this.debug) {\n            // eslint-disable-next-line no-console\n            console.log(getUnequalProps(nextProps, this.props), getUnequalProps(nextState, this.state));\n        }\n        return !compareObjs(this.props, nextProps, this.propEquality) || !compareObjs(this.state, nextState, this.stateEquality);\n    };\n    PureComponent1.addPropsEquality = addPropsEquality;\n    PureComponent1.addStateEquality = addStateEquality;\n    PureComponent1.contextType = ViewContextType;\n    return PureComponent1;\n}(vdom_cjs.Component);\nPureComponent.prototype.propEquality = {};\nPureComponent.prototype.stateEquality = {};\nvar BaseComponent = /** @class */ function(_super) {\n    tslib.__extends(BaseComponent1, _super);\n    function BaseComponent1() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    BaseComponent1.contextType = ViewContextType;\n    return BaseComponent1;\n}(PureComponent);\nfunction addPropsEquality(propEquality) {\n    var hash = Object.create(this.prototype.propEquality);\n    tslib.__assign(hash, propEquality);\n    this.prototype.propEquality = hash;\n}\nfunction addStateEquality(stateEquality) {\n    var hash = Object.create(this.prototype.stateEquality);\n    tslib.__assign(hash, stateEquality);\n    this.prototype.stateEquality = hash;\n}\n// use other one\nfunction setRef(ref, current) {\n    if (typeof ref === \"function\") {\n        ref(current);\n    } else if (ref) {\n        // see https://github.com/facebook/react/issues/13029\n        ref.current = current;\n    }\n}\n/*\nan INTERACTABLE date component\n\nPURPOSES:\n- hook up to fg, fill, and mirror renderers\n- interface for dragging and hits\n*/ var DateComponent = /** @class */ function(_super) {\n    tslib.__extends(DateComponent1, _super);\n    function DateComponent1() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.uid = guid();\n        return _this;\n    }\n    // Hit System\n    // -----------------------------------------------------------------------------------------------------------------\n    DateComponent1.prototype.prepareHits = function() {};\n    DateComponent1.prototype.queryHit = function(positionLeft, positionTop, elWidth, elHeight) {\n        return null; // this should be abstract\n    };\n    // Pointer Interaction Utils\n    // -----------------------------------------------------------------------------------------------------------------\n    DateComponent1.prototype.isValidSegDownEl = function(el) {\n        return !this.props.eventDrag && !this.props.eventResize && !elementClosest(el, \".fc-event-mirror\");\n    };\n    DateComponent1.prototype.isValidDateDownEl = function(el) {\n        return !elementClosest(el, \".fc-event:not(.fc-bg-event)\") && !elementClosest(el, \".fc-more-link\") && !elementClosest(el, \"a[data-navlink]\") && !elementClosest(el, \".fc-popover\"); // hack\n    };\n    return DateComponent1;\n}(BaseComponent);\n// TODO: easier way to add new hooks? need to update a million things\nfunction createPlugin(input) {\n    return {\n        id: guid(),\n        deps: input.deps || [],\n        reducers: input.reducers || [],\n        isLoadingFuncs: input.isLoadingFuncs || [],\n        contextInit: [].concat(input.contextInit || []),\n        eventRefiners: input.eventRefiners || {},\n        eventDefMemberAdders: input.eventDefMemberAdders || [],\n        eventSourceRefiners: input.eventSourceRefiners || {},\n        isDraggableTransformers: input.isDraggableTransformers || [],\n        eventDragMutationMassagers: input.eventDragMutationMassagers || [],\n        eventDefMutationAppliers: input.eventDefMutationAppliers || [],\n        dateSelectionTransformers: input.dateSelectionTransformers || [],\n        datePointTransforms: input.datePointTransforms || [],\n        dateSpanTransforms: input.dateSpanTransforms || [],\n        views: input.views || {},\n        viewPropsTransformers: input.viewPropsTransformers || [],\n        isPropsValid: input.isPropsValid || null,\n        externalDefTransforms: input.externalDefTransforms || [],\n        viewContainerAppends: input.viewContainerAppends || [],\n        eventDropTransformers: input.eventDropTransformers || [],\n        componentInteractions: input.componentInteractions || [],\n        calendarInteractions: input.calendarInteractions || [],\n        themeClasses: input.themeClasses || {},\n        eventSourceDefs: input.eventSourceDefs || [],\n        cmdFormatter: input.cmdFormatter,\n        recurringTypes: input.recurringTypes || [],\n        namedTimeZonedImpl: input.namedTimeZonedImpl,\n        initialView: input.initialView || \"\",\n        elementDraggingImpl: input.elementDraggingImpl,\n        optionChangeHandlers: input.optionChangeHandlers || {},\n        scrollGridImpl: input.scrollGridImpl || null,\n        contentTypeHandlers: input.contentTypeHandlers || {},\n        listenerRefiners: input.listenerRefiners || {},\n        optionRefiners: input.optionRefiners || {},\n        propSetHandlers: input.propSetHandlers || {}\n    };\n}\nfunction buildPluginHooks(pluginDefs, globalDefs) {\n    var isAdded = {};\n    var hooks = {\n        reducers: [],\n        isLoadingFuncs: [],\n        contextInit: [],\n        eventRefiners: {},\n        eventDefMemberAdders: [],\n        eventSourceRefiners: {},\n        isDraggableTransformers: [],\n        eventDragMutationMassagers: [],\n        eventDefMutationAppliers: [],\n        dateSelectionTransformers: [],\n        datePointTransforms: [],\n        dateSpanTransforms: [],\n        views: {},\n        viewPropsTransformers: [],\n        isPropsValid: null,\n        externalDefTransforms: [],\n        viewContainerAppends: [],\n        eventDropTransformers: [],\n        componentInteractions: [],\n        calendarInteractions: [],\n        themeClasses: {},\n        eventSourceDefs: [],\n        cmdFormatter: null,\n        recurringTypes: [],\n        namedTimeZonedImpl: null,\n        initialView: \"\",\n        elementDraggingImpl: null,\n        optionChangeHandlers: {},\n        scrollGridImpl: null,\n        contentTypeHandlers: {},\n        listenerRefiners: {},\n        optionRefiners: {},\n        propSetHandlers: {}\n    };\n    function addDefs(defs) {\n        for(var _i = 0, defs_1 = defs; _i < defs_1.length; _i++){\n            var def = defs_1[_i];\n            if (!isAdded[def.id]) {\n                isAdded[def.id] = true;\n                addDefs(def.deps);\n                hooks = combineHooks(hooks, def);\n            }\n        }\n    }\n    if (pluginDefs) {\n        addDefs(pluginDefs);\n    }\n    addDefs(globalDefs);\n    return hooks;\n}\nfunction buildBuildPluginHooks() {\n    var currentOverrideDefs = [];\n    var currentGlobalDefs = [];\n    var currentHooks;\n    return function(overrideDefs, globalDefs) {\n        if (!currentHooks || !isArraysEqual(overrideDefs, currentOverrideDefs) || !isArraysEqual(globalDefs, currentGlobalDefs)) {\n            currentHooks = buildPluginHooks(overrideDefs, globalDefs);\n        }\n        currentOverrideDefs = overrideDefs;\n        currentGlobalDefs = globalDefs;\n        return currentHooks;\n    };\n}\nfunction combineHooks(hooks0, hooks1) {\n    return {\n        reducers: hooks0.reducers.concat(hooks1.reducers),\n        isLoadingFuncs: hooks0.isLoadingFuncs.concat(hooks1.isLoadingFuncs),\n        contextInit: hooks0.contextInit.concat(hooks1.contextInit),\n        eventRefiners: tslib.__assign(tslib.__assign({}, hooks0.eventRefiners), hooks1.eventRefiners),\n        eventDefMemberAdders: hooks0.eventDefMemberAdders.concat(hooks1.eventDefMemberAdders),\n        eventSourceRefiners: tslib.__assign(tslib.__assign({}, hooks0.eventSourceRefiners), hooks1.eventSourceRefiners),\n        isDraggableTransformers: hooks0.isDraggableTransformers.concat(hooks1.isDraggableTransformers),\n        eventDragMutationMassagers: hooks0.eventDragMutationMassagers.concat(hooks1.eventDragMutationMassagers),\n        eventDefMutationAppliers: hooks0.eventDefMutationAppliers.concat(hooks1.eventDefMutationAppliers),\n        dateSelectionTransformers: hooks0.dateSelectionTransformers.concat(hooks1.dateSelectionTransformers),\n        datePointTransforms: hooks0.datePointTransforms.concat(hooks1.datePointTransforms),\n        dateSpanTransforms: hooks0.dateSpanTransforms.concat(hooks1.dateSpanTransforms),\n        views: tslib.__assign(tslib.__assign({}, hooks0.views), hooks1.views),\n        viewPropsTransformers: hooks0.viewPropsTransformers.concat(hooks1.viewPropsTransformers),\n        isPropsValid: hooks1.isPropsValid || hooks0.isPropsValid,\n        externalDefTransforms: hooks0.externalDefTransforms.concat(hooks1.externalDefTransforms),\n        viewContainerAppends: hooks0.viewContainerAppends.concat(hooks1.viewContainerAppends),\n        eventDropTransformers: hooks0.eventDropTransformers.concat(hooks1.eventDropTransformers),\n        calendarInteractions: hooks0.calendarInteractions.concat(hooks1.calendarInteractions),\n        componentInteractions: hooks0.componentInteractions.concat(hooks1.componentInteractions),\n        themeClasses: tslib.__assign(tslib.__assign({}, hooks0.themeClasses), hooks1.themeClasses),\n        eventSourceDefs: hooks0.eventSourceDefs.concat(hooks1.eventSourceDefs),\n        cmdFormatter: hooks1.cmdFormatter || hooks0.cmdFormatter,\n        recurringTypes: hooks0.recurringTypes.concat(hooks1.recurringTypes),\n        namedTimeZonedImpl: hooks1.namedTimeZonedImpl || hooks0.namedTimeZonedImpl,\n        initialView: hooks0.initialView || hooks1.initialView,\n        elementDraggingImpl: hooks0.elementDraggingImpl || hooks1.elementDraggingImpl,\n        optionChangeHandlers: tslib.__assign(tslib.__assign({}, hooks0.optionChangeHandlers), hooks1.optionChangeHandlers),\n        scrollGridImpl: hooks1.scrollGridImpl || hooks0.scrollGridImpl,\n        contentTypeHandlers: tslib.__assign(tslib.__assign({}, hooks0.contentTypeHandlers), hooks1.contentTypeHandlers),\n        listenerRefiners: tslib.__assign(tslib.__assign({}, hooks0.listenerRefiners), hooks1.listenerRefiners),\n        optionRefiners: tslib.__assign(tslib.__assign({}, hooks0.optionRefiners), hooks1.optionRefiners),\n        propSetHandlers: tslib.__assign(tslib.__assign({}, hooks0.propSetHandlers), hooks1.propSetHandlers)\n    };\n}\nvar StandardTheme = /** @class */ function(_super) {\n    tslib.__extends(StandardTheme1, _super);\n    function StandardTheme1() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return StandardTheme1;\n}(Theme);\nStandardTheme.prototype.classes = {\n    root: \"fc-theme-standard\",\n    tableCellShaded: \"fc-cell-shaded\",\n    buttonGroup: \"fc-button-group\",\n    button: \"fc-button fc-button-primary\",\n    buttonActive: \"fc-button-active\"\n};\nStandardTheme.prototype.baseIconClass = \"fc-icon\";\nStandardTheme.prototype.iconClasses = {\n    close: \"fc-icon-x\",\n    prev: \"fc-icon-chevron-left\",\n    next: \"fc-icon-chevron-right\",\n    prevYear: \"fc-icon-chevrons-left\",\n    nextYear: \"fc-icon-chevrons-right\"\n};\nStandardTheme.prototype.rtlIconClasses = {\n    prev: \"fc-icon-chevron-right\",\n    next: \"fc-icon-chevron-left\",\n    prevYear: \"fc-icon-chevrons-right\",\n    nextYear: \"fc-icon-chevrons-left\"\n};\nStandardTheme.prototype.iconOverrideOption = \"buttonIcons\"; // TODO: make TS-friendly\nStandardTheme.prototype.iconOverrideCustomButtonOption = \"icon\";\nStandardTheme.prototype.iconOverridePrefix = \"fc-icon-\";\nfunction compileViewDefs(defaultConfigs, overrideConfigs) {\n    var hash = {};\n    var viewType;\n    for(viewType in defaultConfigs){\n        ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs);\n    }\n    for(viewType in overrideConfigs){\n        ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs);\n    }\n    return hash;\n}\nfunction ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs) {\n    if (hash[viewType]) {\n        return hash[viewType];\n    }\n    var viewDef = buildViewDef(viewType, hash, defaultConfigs, overrideConfigs);\n    if (viewDef) {\n        hash[viewType] = viewDef;\n    }\n    return viewDef;\n}\nfunction buildViewDef(viewType, hash, defaultConfigs, overrideConfigs) {\n    var defaultConfig = defaultConfigs[viewType];\n    var overrideConfig = overrideConfigs[viewType];\n    var queryProp = function(name) {\n        return defaultConfig && defaultConfig[name] !== null ? defaultConfig[name] : overrideConfig && overrideConfig[name] !== null ? overrideConfig[name] : null;\n    };\n    var theComponent = queryProp(\"component\");\n    var superType = queryProp(\"superType\");\n    var superDef = null;\n    if (superType) {\n        if (superType === viewType) {\n            throw new Error(\"Can't have a custom view type that references itself\");\n        }\n        superDef = ensureViewDef(superType, hash, defaultConfigs, overrideConfigs);\n    }\n    if (!theComponent && superDef) {\n        theComponent = superDef.component;\n    }\n    if (!theComponent) {\n        return null; // don't throw a warning, might be settings for a single-unit view\n    }\n    return {\n        type: viewType,\n        component: theComponent,\n        defaults: tslib.__assign(tslib.__assign({}, superDef ? superDef.defaults : {}), defaultConfig ? defaultConfig.rawOptions : {}),\n        overrides: tslib.__assign(tslib.__assign({}, superDef ? superDef.overrides : {}), overrideConfig ? overrideConfig.rawOptions : {})\n    };\n}\n/* eslint max-classes-per-file: off */ // NOTE: in JSX, you should always use this class with <HookProps> arg. otherwise, will default to any???\nvar RenderHook = /** @class */ function(_super) {\n    tslib.__extends(RenderHook1, _super);\n    function RenderHook1() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.rootElRef = vdom_cjs.createRef();\n        _this.handleRootEl = function(el) {\n            setRef(_this.rootElRef, el);\n            if (_this.props.elRef) {\n                setRef(_this.props.elRef, el);\n            }\n        };\n        return _this;\n    }\n    RenderHook1.prototype.render = function() {\n        var _this = this;\n        var props = this.props;\n        var hookProps = props.hookProps;\n        return vdom_cjs.createElement(MountHook, {\n            hookProps: hookProps,\n            didMount: props.didMount,\n            willUnmount: props.willUnmount,\n            elRef: this.handleRootEl\n        }, function(rootElRef) {\n            return vdom_cjs.createElement(ContentHook, {\n                hookProps: hookProps,\n                content: props.content,\n                defaultContent: props.defaultContent,\n                backupElRef: _this.rootElRef\n            }, function(innerElRef, innerContent) {\n                return props.children(rootElRef, normalizeClassNames(props.classNames, hookProps), innerElRef, innerContent);\n            });\n        });\n    };\n    return RenderHook1;\n}(BaseComponent);\n// TODO: rename to be about function, not default. use in above type\n// for forcing rerender of components that use the ContentHook\nvar CustomContentRenderContext = vdom_cjs.createContext(0);\nfunction ContentHook(props) {\n    return vdom_cjs.createElement(CustomContentRenderContext.Consumer, null, function(renderId) {\n        return vdom_cjs.createElement(ContentHookInner, tslib.__assign({\n            renderId: renderId\n        }, props));\n    });\n}\nvar ContentHookInner = /** @class */ function(_super) {\n    tslib.__extends(ContentHookInner1, _super);\n    function ContentHookInner1() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.innerElRef = vdom_cjs.createRef();\n        return _this;\n    }\n    ContentHookInner1.prototype.render = function() {\n        return this.props.children(this.innerElRef, this.renderInnerContent());\n    };\n    ContentHookInner1.prototype.componentDidMount = function() {\n        this.updateCustomContent();\n    };\n    ContentHookInner1.prototype.componentDidUpdate = function() {\n        this.updateCustomContent();\n    };\n    ContentHookInner1.prototype.componentWillUnmount = function() {\n        if (this.customContentInfo && this.customContentInfo.destroy) {\n            this.customContentInfo.destroy();\n        }\n    };\n    ContentHookInner1.prototype.renderInnerContent = function() {\n        var customContentInfo = this.customContentInfo; // only populated if using non-[p]react node(s)\n        var innerContent = this.getInnerContent();\n        var meta = this.getContentMeta(innerContent);\n        // initial run, or content-type changing? (from vue -> react for example)\n        if (!customContentInfo || customContentInfo.contentKey !== meta.contentKey) {\n            // clearing old value\n            if (customContentInfo) {\n                if (customContentInfo.destroy) {\n                    customContentInfo.destroy();\n                }\n                customContentInfo = this.customContentInfo = null;\n            }\n            // assigning new value\n            if (meta.contentKey) {\n                customContentInfo = this.customContentInfo = tslib.__assign({\n                    contentKey: meta.contentKey,\n                    contentVal: innerContent[meta.contentKey]\n                }, meta.buildLifecycleFuncs());\n            }\n        // updating\n        } else if (customContentInfo) {\n            customContentInfo.contentVal = innerContent[meta.contentKey];\n        }\n        return customContentInfo ? [] // signal that something was specified\n         : innerContent; // assume a [p]react vdom node. use it\n    };\n    ContentHookInner1.prototype.getInnerContent = function() {\n        var props = this.props;\n        var innerContent = normalizeContent(props.content, props.hookProps);\n        if (innerContent === undefined) {\n            innerContent = normalizeContent(props.defaultContent, props.hookProps);\n        }\n        return innerContent == null ? null : innerContent; // convert undefined to null (better for React)\n    };\n    ContentHookInner1.prototype.getContentMeta = function(innerContent) {\n        var contentTypeHandlers = this.context.pluginHooks.contentTypeHandlers;\n        var contentKey = \"\";\n        var buildLifecycleFuncs = null;\n        if (innerContent) {\n            for(var searchKey in contentTypeHandlers){\n                if (innerContent[searchKey] !== undefined) {\n                    contentKey = searchKey;\n                    buildLifecycleFuncs = contentTypeHandlers[searchKey];\n                    break;\n                }\n            }\n        }\n        return {\n            contentKey: contentKey,\n            buildLifecycleFuncs: buildLifecycleFuncs\n        };\n    };\n    ContentHookInner1.prototype.updateCustomContent = function() {\n        if (this.customContentInfo) {\n            this.customContentInfo.render(this.innerElRef.current || this.props.backupElRef.current, this.customContentInfo.contentVal);\n        }\n    };\n    return ContentHookInner1;\n}(BaseComponent);\nvar MountHook = /** @class */ function(_super) {\n    tslib.__extends(MountHook1, _super);\n    function MountHook1() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.handleRootEl = function(rootEl) {\n            _this.rootEl = rootEl;\n            if (_this.props.elRef) {\n                setRef(_this.props.elRef, rootEl);\n            }\n        };\n        return _this;\n    }\n    MountHook1.prototype.render = function() {\n        return this.props.children(this.handleRootEl);\n    };\n    MountHook1.prototype.componentDidMount = function() {\n        var callback = this.props.didMount;\n        if (callback) {\n            callback(tslib.__assign(tslib.__assign({}, this.props.hookProps), {\n                el: this.rootEl\n            }));\n        }\n    };\n    MountHook1.prototype.componentWillUnmount = function() {\n        var callback = this.props.willUnmount;\n        if (callback) {\n            callback(tslib.__assign(tslib.__assign({}, this.props.hookProps), {\n                el: this.rootEl\n            }));\n        }\n    };\n    return MountHook1;\n}(BaseComponent);\nfunction buildClassNameNormalizer() {\n    var currentGenerator;\n    var currentHookProps;\n    var currentClassNames = [];\n    return function(generator, hookProps) {\n        if (!currentHookProps || !isPropsEqual(currentHookProps, hookProps) || generator !== currentGenerator) {\n            currentGenerator = generator;\n            currentHookProps = hookProps;\n            currentClassNames = normalizeClassNames(generator, hookProps);\n        }\n        return currentClassNames;\n    };\n}\nfunction normalizeClassNames(classNames, hookProps) {\n    if (typeof classNames === \"function\") {\n        classNames = classNames(hookProps);\n    }\n    return parseClassNames(classNames);\n}\nfunction normalizeContent(input, hookProps) {\n    if (typeof input === \"function\") {\n        return input(hookProps, vdom_cjs.createElement); // give the function the vdom-creation func\n    }\n    return input;\n}\nvar ViewRoot = /** @class */ function(_super) {\n    tslib.__extends(ViewRoot1, _super);\n    function ViewRoot1() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.normalizeClassNames = buildClassNameNormalizer();\n        return _this;\n    }\n    ViewRoot1.prototype.render = function() {\n        var _a = this, props = _a.props, context = _a.context;\n        var options = context.options;\n        var hookProps = {\n            view: context.viewApi\n        };\n        var customClassNames = this.normalizeClassNames(options.viewClassNames, hookProps);\n        return vdom_cjs.createElement(MountHook, {\n            hookProps: hookProps,\n            didMount: options.viewDidMount,\n            willUnmount: options.viewWillUnmount,\n            elRef: props.elRef\n        }, function(rootElRef) {\n            return props.children(rootElRef, [\n                \"fc-\" + props.viewSpec.type + \"-view\",\n                \"fc-view\"\n            ].concat(customClassNames));\n        });\n    };\n    return ViewRoot1;\n}(BaseComponent);\nfunction parseViewConfigs(inputs) {\n    return mapHash(inputs, parseViewConfig);\n}\nfunction parseViewConfig(input) {\n    var rawOptions = typeof input === \"function\" ? {\n        component: input\n    } : input;\n    var component = rawOptions.component;\n    if (rawOptions.content) {\n        component = createViewHookComponent(rawOptions);\n    // TODO: remove content/classNames/didMount/etc from options?\n    }\n    return {\n        superType: rawOptions.type,\n        component: component,\n        rawOptions: rawOptions\n    };\n}\nfunction createViewHookComponent(options) {\n    return function(viewProps) {\n        return vdom_cjs.createElement(ViewContextType.Consumer, null, function(context) {\n            return vdom_cjs.createElement(ViewRoot, {\n                viewSpec: context.viewSpec\n            }, function(viewElRef, viewClassNames) {\n                var hookProps = tslib.__assign(tslib.__assign({}, viewProps), {\n                    nextDayThreshold: context.options.nextDayThreshold\n                });\n                return vdom_cjs.createElement(RenderHook, {\n                    hookProps: hookProps,\n                    classNames: options.classNames,\n                    content: options.content,\n                    didMount: options.didMount,\n                    willUnmount: options.willUnmount,\n                    elRef: viewElRef\n                }, function(rootElRef, customClassNames, innerElRef, innerContent) {\n                    return vdom_cjs.createElement(\"div\", {\n                        className: viewClassNames.concat(customClassNames).join(\" \"),\n                        ref: rootElRef\n                    }, innerContent);\n                });\n            });\n        });\n    };\n}\nfunction buildViewSpecs(defaultInputs, optionOverrides, dynamicOptionOverrides, localeDefaults) {\n    var defaultConfigs = parseViewConfigs(defaultInputs);\n    var overrideConfigs = parseViewConfigs(optionOverrides.views);\n    var viewDefs = compileViewDefs(defaultConfigs, overrideConfigs);\n    return mapHash(viewDefs, function(viewDef) {\n        return buildViewSpec(viewDef, overrideConfigs, optionOverrides, dynamicOptionOverrides, localeDefaults);\n    });\n}\nfunction buildViewSpec(viewDef, overrideConfigs, optionOverrides, dynamicOptionOverrides, localeDefaults) {\n    var durationInput = viewDef.overrides.duration || viewDef.defaults.duration || dynamicOptionOverrides.duration || optionOverrides.duration;\n    var duration = null;\n    var durationUnit = \"\";\n    var singleUnit = \"\";\n    var singleUnitOverrides = {};\n    if (durationInput) {\n        duration = createDurationCached(durationInput);\n        if (duration) {\n            var denom = greatestDurationDenominator(duration);\n            durationUnit = denom.unit;\n            if (denom.value === 1) {\n                singleUnit = durationUnit;\n                singleUnitOverrides = overrideConfigs[durationUnit] ? overrideConfigs[durationUnit].rawOptions : {};\n            }\n        }\n    }\n    var queryButtonText = function(optionsSubset) {\n        var buttonTextMap = optionsSubset.buttonText || {};\n        var buttonTextKey = viewDef.defaults.buttonTextKey;\n        if (buttonTextKey != null && buttonTextMap[buttonTextKey] != null) {\n            return buttonTextMap[buttonTextKey];\n        }\n        if (buttonTextMap[viewDef.type] != null) {\n            return buttonTextMap[viewDef.type];\n        }\n        if (buttonTextMap[singleUnit] != null) {\n            return buttonTextMap[singleUnit];\n        }\n        return null;\n    };\n    var queryButtonTitle = function(optionsSubset) {\n        var buttonHints = optionsSubset.buttonHints || {};\n        var buttonKey = viewDef.defaults.buttonTextKey; // use same key as text\n        if (buttonKey != null && buttonHints[buttonKey] != null) {\n            return buttonHints[buttonKey];\n        }\n        if (buttonHints[viewDef.type] != null) {\n            return buttonHints[viewDef.type];\n        }\n        if (buttonHints[singleUnit] != null) {\n            return buttonHints[singleUnit];\n        }\n        return null;\n    };\n    return {\n        type: viewDef.type,\n        component: viewDef.component,\n        duration: duration,\n        durationUnit: durationUnit,\n        singleUnit: singleUnit,\n        optionDefaults: viewDef.defaults,\n        optionOverrides: tslib.__assign(tslib.__assign({}, singleUnitOverrides), viewDef.overrides),\n        buttonTextOverride: queryButtonText(dynamicOptionOverrides) || queryButtonText(optionOverrides) || viewDef.overrides.buttonText,\n        buttonTextDefault: queryButtonText(localeDefaults) || viewDef.defaults.buttonText || queryButtonText(BASE_OPTION_DEFAULTS) || viewDef.type,\n        // not DRY\n        buttonTitleOverride: queryButtonTitle(dynamicOptionOverrides) || queryButtonTitle(optionOverrides) || viewDef.overrides.buttonHint,\n        buttonTitleDefault: queryButtonTitle(localeDefaults) || viewDef.defaults.buttonHint || queryButtonTitle(BASE_OPTION_DEFAULTS)\n    };\n}\n// hack to get memoization working\nvar durationInputMap = {};\nfunction createDurationCached(durationInput) {\n    var json = JSON.stringify(durationInput);\n    var res = durationInputMap[json];\n    if (res === undefined) {\n        res = createDuration(durationInput);\n        durationInputMap[json] = res;\n    }\n    return res;\n}\nvar DateProfileGenerator = /** @class */ function() {\n    function DateProfileGenerator1(props) {\n        this.props = props;\n        this.nowDate = getNow(props.nowInput, props.dateEnv);\n        this.initHiddenDays();\n    }\n    /* Date Range Computation\n    ------------------------------------------------------------------------------------------------------------------*/ // Builds a structure with info about what the dates/ranges will be for the \"prev\" view.\n    DateProfileGenerator1.prototype.buildPrev = function(currentDateProfile, currentDate, forceToValid) {\n        var dateEnv = this.props.dateEnv;\n        var prevDate = dateEnv.subtract(dateEnv.startOf(currentDate, currentDateProfile.currentRangeUnit), currentDateProfile.dateIncrement);\n        return this.build(prevDate, -1, forceToValid);\n    };\n    // Builds a structure with info about what the dates/ranges will be for the \"next\" view.\n    DateProfileGenerator1.prototype.buildNext = function(currentDateProfile, currentDate, forceToValid) {\n        var dateEnv = this.props.dateEnv;\n        var nextDate = dateEnv.add(dateEnv.startOf(currentDate, currentDateProfile.currentRangeUnit), currentDateProfile.dateIncrement);\n        return this.build(nextDate, 1, forceToValid);\n    };\n    // Builds a structure holding dates/ranges for rendering around the given date.\n    // Optional direction param indicates whether the date is being incremented/decremented\n    // from its previous value. decremented = -1, incremented = 1 (default).\n    DateProfileGenerator1.prototype.build = function(currentDate, direction, forceToValid) {\n        if (forceToValid === void 0) {\n            forceToValid = true;\n        }\n        var props = this.props;\n        var validRange;\n        var currentInfo;\n        var isRangeAllDay;\n        var renderRange;\n        var activeRange;\n        var isValid;\n        validRange = this.buildValidRange();\n        validRange = this.trimHiddenDays(validRange);\n        if (forceToValid) {\n            currentDate = constrainMarkerToRange(currentDate, validRange);\n        }\n        currentInfo = this.buildCurrentRangeInfo(currentDate, direction);\n        isRangeAllDay = /^(year|month|week|day)$/.test(currentInfo.unit);\n        renderRange = this.buildRenderRange(this.trimHiddenDays(currentInfo.range), currentInfo.unit, isRangeAllDay);\n        renderRange = this.trimHiddenDays(renderRange);\n        activeRange = renderRange;\n        if (!props.showNonCurrentDates) {\n            activeRange = intersectRanges(activeRange, currentInfo.range);\n        }\n        activeRange = this.adjustActiveRange(activeRange);\n        activeRange = intersectRanges(activeRange, validRange); // might return null\n        // it's invalid if the originally requested date is not contained,\n        // or if the range is completely outside of the valid range.\n        isValid = rangesIntersect(currentInfo.range, validRange);\n        return {\n            // constraint for where prev/next operations can go and where events can be dragged/resized to.\n            // an object with optional start and end properties.\n            validRange: validRange,\n            // range the view is formally responsible for.\n            // for example, a month view might have 1st-31st, excluding padded dates\n            currentRange: currentInfo.range,\n            // name of largest unit being displayed, like \"month\" or \"week\"\n            currentRangeUnit: currentInfo.unit,\n            isRangeAllDay: isRangeAllDay,\n            // dates that display events and accept drag-n-drop\n            // will be `null` if no dates accept events\n            activeRange: activeRange,\n            // date range with a rendered skeleton\n            // includes not-active days that need some sort of DOM\n            renderRange: renderRange,\n            // Duration object that denotes the first visible time of any given day\n            slotMinTime: props.slotMinTime,\n            // Duration object that denotes the exclusive visible end time of any given day\n            slotMaxTime: props.slotMaxTime,\n            isValid: isValid,\n            // how far the current date will move for a prev/next operation\n            dateIncrement: this.buildDateIncrement(currentInfo.duration)\n        };\n    };\n    // Builds an object with optional start/end properties.\n    // Indicates the minimum/maximum dates to display.\n    // not responsible for trimming hidden days.\n    DateProfileGenerator1.prototype.buildValidRange = function() {\n        var input = this.props.validRangeInput;\n        var simpleInput = typeof input === \"function\" ? input.call(this.props.calendarApi, this.nowDate) : input;\n        return this.refineRange(simpleInput) || {\n            start: null,\n            end: null\n        }; // completely open-ended\n    };\n    // Builds a structure with info about the \"current\" range, the range that is\n    // highlighted as being the current month for example.\n    // See build() for a description of `direction`.\n    // Guaranteed to have `range` and `unit` properties. `duration` is optional.\n    DateProfileGenerator1.prototype.buildCurrentRangeInfo = function(date, direction) {\n        var props = this.props;\n        var duration = null;\n        var unit = null;\n        var range = null;\n        var dayCount;\n        if (props.duration) {\n            duration = props.duration;\n            unit = props.durationUnit;\n            range = this.buildRangeFromDuration(date, direction, duration, unit);\n        } else if (dayCount = this.props.dayCount) {\n            unit = \"day\";\n            range = this.buildRangeFromDayCount(date, direction, dayCount);\n        } else if (range = this.buildCustomVisibleRange(date)) {\n            unit = props.dateEnv.greatestWholeUnit(range.start, range.end).unit;\n        } else {\n            duration = this.getFallbackDuration();\n            unit = greatestDurationDenominator(duration).unit;\n            range = this.buildRangeFromDuration(date, direction, duration, unit);\n        }\n        return {\n            duration: duration,\n            unit: unit,\n            range: range\n        };\n    };\n    DateProfileGenerator1.prototype.getFallbackDuration = function() {\n        return createDuration({\n            day: 1\n        });\n    };\n    // Returns a new activeRange to have time values (un-ambiguate)\n    // slotMinTime or slotMaxTime causes the range to expand.\n    DateProfileGenerator1.prototype.adjustActiveRange = function(range) {\n        var _a = this.props, dateEnv = _a.dateEnv, usesMinMaxTime = _a.usesMinMaxTime, slotMinTime = _a.slotMinTime, slotMaxTime = _a.slotMaxTime;\n        var start = range.start, end = range.end;\n        if (usesMinMaxTime) {\n            // expand active range if slotMinTime is negative (why not when positive?)\n            if (asRoughDays(slotMinTime) < 0) {\n                start = startOfDay(start); // necessary?\n                start = dateEnv.add(start, slotMinTime);\n            }\n            // expand active range if slotMaxTime is beyond one day (why not when negative?)\n            if (asRoughDays(slotMaxTime) > 1) {\n                end = startOfDay(end); // necessary?\n                end = addDays(end, -1);\n                end = dateEnv.add(end, slotMaxTime);\n            }\n        }\n        return {\n            start: start,\n            end: end\n        };\n    };\n    // Builds the \"current\" range when it is specified as an explicit duration.\n    // `unit` is the already-computed greatestDurationDenominator unit of duration.\n    DateProfileGenerator1.prototype.buildRangeFromDuration = function(date, direction, duration, unit) {\n        var _a = this.props, dateEnv = _a.dateEnv, dateAlignment = _a.dateAlignment;\n        var start;\n        var end;\n        var res;\n        // compute what the alignment should be\n        if (!dateAlignment) {\n            var dateIncrement = this.props.dateIncrement;\n            if (dateIncrement) {\n                // use the smaller of the two units\n                if (asRoughMs(dateIncrement) < asRoughMs(duration)) {\n                    dateAlignment = greatestDurationDenominator(dateIncrement).unit;\n                } else {\n                    dateAlignment = unit;\n                }\n            } else {\n                dateAlignment = unit;\n            }\n        }\n        // if the view displays a single day or smaller\n        if (asRoughDays(duration) <= 1) {\n            if (this.isHiddenDay(start)) {\n                start = this.skipHiddenDays(start, direction);\n                start = startOfDay(start);\n            }\n        }\n        function computeRes() {\n            start = dateEnv.startOf(date, dateAlignment);\n            end = dateEnv.add(start, duration);\n            res = {\n                start: start,\n                end: end\n            };\n        }\n        computeRes();\n        // if range is completely enveloped by hidden days, go past the hidden days\n        if (!this.trimHiddenDays(res)) {\n            date = this.skipHiddenDays(date, direction);\n            computeRes();\n        }\n        return res;\n    };\n    // Builds the \"current\" range when a dayCount is specified.\n    DateProfileGenerator1.prototype.buildRangeFromDayCount = function(date, direction, dayCount) {\n        var _a = this.props, dateEnv = _a.dateEnv, dateAlignment = _a.dateAlignment;\n        var runningCount = 0;\n        var start = date;\n        var end;\n        if (dateAlignment) {\n            start = dateEnv.startOf(start, dateAlignment);\n        }\n        start = startOfDay(start);\n        start = this.skipHiddenDays(start, direction);\n        end = start;\n        do {\n            end = addDays(end, 1);\n            if (!this.isHiddenDay(end)) {\n                runningCount += 1;\n            }\n        }while (runningCount < dayCount);\n        return {\n            start: start,\n            end: end\n        };\n    };\n    // Builds a normalized range object for the \"visible\" range,\n    // which is a way to define the currentRange and activeRange at the same time.\n    DateProfileGenerator1.prototype.buildCustomVisibleRange = function(date) {\n        var props = this.props;\n        var input = props.visibleRangeInput;\n        var simpleInput = typeof input === \"function\" ? input.call(props.calendarApi, props.dateEnv.toDate(date)) : input;\n        var range = this.refineRange(simpleInput);\n        if (range && (range.start == null || range.end == null)) {\n            return null;\n        }\n        return range;\n    };\n    // Computes the range that will represent the element/cells for *rendering*,\n    // but which may have voided days/times.\n    // not responsible for trimming hidden days.\n    DateProfileGenerator1.prototype.buildRenderRange = function(currentRange, currentRangeUnit, isRangeAllDay) {\n        return currentRange;\n    };\n    // Compute the duration value that should be added/substracted to the current date\n    // when a prev/next operation happens.\n    DateProfileGenerator1.prototype.buildDateIncrement = function(fallback) {\n        var dateIncrement = this.props.dateIncrement;\n        var customAlignment;\n        if (dateIncrement) {\n            return dateIncrement;\n        }\n        if (customAlignment = this.props.dateAlignment) {\n            return createDuration(1, customAlignment);\n        }\n        if (fallback) {\n            return fallback;\n        }\n        return createDuration({\n            days: 1\n        });\n    };\n    DateProfileGenerator1.prototype.refineRange = function(rangeInput) {\n        if (rangeInput) {\n            var range = parseRange(rangeInput, this.props.dateEnv);\n            if (range) {\n                range = computeVisibleDayRange(range);\n            }\n            return range;\n        }\n        return null;\n    };\n    /* Hidden Days\n    ------------------------------------------------------------------------------------------------------------------*/ // Initializes internal variables related to calculating hidden days-of-week\n    DateProfileGenerator1.prototype.initHiddenDays = function() {\n        var hiddenDays = this.props.hiddenDays || []; // array of day-of-week indices that are hidden\n        var isHiddenDayHash = []; // is the day-of-week hidden? (hash with day-of-week-index -> bool)\n        var dayCnt = 0;\n        var i;\n        if (this.props.weekends === false) {\n            hiddenDays.push(0, 6); // 0=sunday, 6=saturday\n        }\n        for(i = 0; i < 7; i += 1){\n            if (!(isHiddenDayHash[i] = hiddenDays.indexOf(i) !== -1)) {\n                dayCnt += 1;\n            }\n        }\n        if (!dayCnt) {\n            throw new Error(\"invalid hiddenDays\"); // all days were hidden? bad.\n        }\n        this.isHiddenDayHash = isHiddenDayHash;\n    };\n    // Remove days from the beginning and end of the range that are computed as hidden.\n    // If the whole range is trimmed off, returns null\n    DateProfileGenerator1.prototype.trimHiddenDays = function(range) {\n        var start = range.start, end = range.end;\n        if (start) {\n            start = this.skipHiddenDays(start);\n        }\n        if (end) {\n            end = this.skipHiddenDays(end, -1, true);\n        }\n        if (start == null || end == null || start < end) {\n            return {\n                start: start,\n                end: end\n            };\n        }\n        return null;\n    };\n    // Is the current day hidden?\n    // `day` is a day-of-week index (0-6), or a Date (used for UTC)\n    DateProfileGenerator1.prototype.isHiddenDay = function(day) {\n        if (day instanceof Date) {\n            day = day.getUTCDay();\n        }\n        return this.isHiddenDayHash[day];\n    };\n    // Incrementing the current day until it is no longer a hidden day, returning a copy.\n    // DOES NOT CONSIDER validRange!\n    // If the initial value of `date` is not a hidden day, don't do anything.\n    // Pass `isExclusive` as `true` if you are dealing with an end date.\n    // `inc` defaults to `1` (increment one day forward each time)\n    DateProfileGenerator1.prototype.skipHiddenDays = function(date, inc, isExclusive) {\n        if (inc === void 0) {\n            inc = 1;\n        }\n        if (isExclusive === void 0) {\n            isExclusive = false;\n        }\n        while(this.isHiddenDayHash[(date.getUTCDay() + (isExclusive ? inc : 0) + 7) % 7]){\n            date = addDays(date, inc);\n        }\n        return date;\n    };\n    return DateProfileGenerator1;\n}();\nfunction reduceViewType(viewType, action) {\n    switch(action.type){\n        case \"CHANGE_VIEW_TYPE\":\n            viewType = action.viewType;\n    }\n    return viewType;\n}\nfunction reduceDynamicOptionOverrides(dynamicOptionOverrides, action) {\n    var _a;\n    switch(action.type){\n        case \"SET_OPTION\":\n            return tslib.__assign(tslib.__assign({}, dynamicOptionOverrides), (_a = {}, _a[action.optionName] = action.rawOptionValue, _a));\n        default:\n            return dynamicOptionOverrides;\n    }\n}\nfunction reduceDateProfile(currentDateProfile, action, currentDate, dateProfileGenerator) {\n    var dp;\n    switch(action.type){\n        case \"CHANGE_VIEW_TYPE\":\n            return dateProfileGenerator.build(action.dateMarker || currentDate);\n        case \"CHANGE_DATE\":\n            return dateProfileGenerator.build(action.dateMarker);\n        case \"PREV\":\n            dp = dateProfileGenerator.buildPrev(currentDateProfile, currentDate);\n            if (dp.isValid) {\n                return dp;\n            }\n            break;\n        case \"NEXT\":\n            dp = dateProfileGenerator.buildNext(currentDateProfile, currentDate);\n            if (dp.isValid) {\n                return dp;\n            }\n            break;\n    }\n    return currentDateProfile;\n}\nfunction initEventSources(calendarOptions, dateProfile, context) {\n    var activeRange = dateProfile ? dateProfile.activeRange : null;\n    return addSources({}, parseInitialSources(calendarOptions, context), activeRange, context);\n}\nfunction reduceEventSources(eventSources, action, dateProfile, context) {\n    var activeRange = dateProfile ? dateProfile.activeRange : null; // need this check?\n    switch(action.type){\n        case \"ADD_EVENT_SOURCES\":\n            return addSources(eventSources, action.sources, activeRange, context);\n        case \"REMOVE_EVENT_SOURCE\":\n            return removeSource(eventSources, action.sourceId);\n        case \"PREV\":\n        case \"NEXT\":\n        case \"CHANGE_DATE\":\n        case \"CHANGE_VIEW_TYPE\":\n            if (dateProfile) {\n                return fetchDirtySources(eventSources, activeRange, context);\n            }\n            return eventSources;\n        case \"FETCH_EVENT_SOURCES\":\n            return fetchSourcesByIds(eventSources, action.sourceIds ? arrayToHash(action.sourceIds) : excludeStaticSources(eventSources, context), activeRange, action.isRefetch || false, context);\n        case \"RECEIVE_EVENTS\":\n        case \"RECEIVE_EVENT_ERROR\":\n            return receiveResponse(eventSources, action.sourceId, action.fetchId, action.fetchRange);\n        case \"REMOVE_ALL_EVENT_SOURCES\":\n            return {};\n        default:\n            return eventSources;\n    }\n}\nfunction reduceEventSourcesNewTimeZone(eventSources, dateProfile, context) {\n    var activeRange = dateProfile ? dateProfile.activeRange : null; // need this check?\n    return fetchSourcesByIds(eventSources, excludeStaticSources(eventSources, context), activeRange, true, context);\n}\nfunction computeEventSourcesLoading(eventSources) {\n    for(var sourceId in eventSources){\n        if (eventSources[sourceId].isFetching) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction addSources(eventSourceHash, sources, fetchRange, context) {\n    var hash = {};\n    for(var _i = 0, sources_1 = sources; _i < sources_1.length; _i++){\n        var source = sources_1[_i];\n        hash[source.sourceId] = source;\n    }\n    if (fetchRange) {\n        hash = fetchDirtySources(hash, fetchRange, context);\n    }\n    return tslib.__assign(tslib.__assign({}, eventSourceHash), hash);\n}\nfunction removeSource(eventSourceHash, sourceId) {\n    return filterHash(eventSourceHash, function(eventSource) {\n        return eventSource.sourceId !== sourceId;\n    });\n}\nfunction fetchDirtySources(sourceHash, fetchRange, context) {\n    return fetchSourcesByIds(sourceHash, filterHash(sourceHash, function(eventSource) {\n        return isSourceDirty(eventSource, fetchRange, context);\n    }), fetchRange, false, context);\n}\nfunction isSourceDirty(eventSource, fetchRange, context) {\n    if (!doesSourceNeedRange(eventSource, context)) {\n        return !eventSource.latestFetchId;\n    }\n    return !context.options.lazyFetching || !eventSource.fetchRange || eventSource.isFetching || fetchRange.start < eventSource.fetchRange.start || fetchRange.end > eventSource.fetchRange.end;\n}\nfunction fetchSourcesByIds(prevSources, sourceIdHash, fetchRange, isRefetch, context) {\n    var nextSources = {};\n    for(var sourceId in prevSources){\n        var source = prevSources[sourceId];\n        if (sourceIdHash[sourceId]) {\n            nextSources[sourceId] = fetchSource(source, fetchRange, isRefetch, context);\n        } else {\n            nextSources[sourceId] = source;\n        }\n    }\n    return nextSources;\n}\nfunction fetchSource(eventSource, fetchRange, isRefetch, context) {\n    var options = context.options, calendarApi = context.calendarApi;\n    var sourceDef = context.pluginHooks.eventSourceDefs[eventSource.sourceDefId];\n    var fetchId = guid();\n    sourceDef.fetch({\n        eventSource: eventSource,\n        range: fetchRange,\n        isRefetch: isRefetch,\n        context: context\n    }, function(res) {\n        var rawEvents = res.rawEvents;\n        if (options.eventSourceSuccess) {\n            rawEvents = options.eventSourceSuccess.call(calendarApi, rawEvents, res.xhr) || rawEvents;\n        }\n        if (eventSource.success) {\n            rawEvents = eventSource.success.call(calendarApi, rawEvents, res.xhr) || rawEvents;\n        }\n        context.dispatch({\n            type: \"RECEIVE_EVENTS\",\n            sourceId: eventSource.sourceId,\n            fetchId: fetchId,\n            fetchRange: fetchRange,\n            rawEvents: rawEvents\n        });\n    }, function(error) {\n        console.warn(error.message, error);\n        if (options.eventSourceFailure) {\n            options.eventSourceFailure.call(calendarApi, error);\n        }\n        if (eventSource.failure) {\n            eventSource.failure(error);\n        }\n        context.dispatch({\n            type: \"RECEIVE_EVENT_ERROR\",\n            sourceId: eventSource.sourceId,\n            fetchId: fetchId,\n            fetchRange: fetchRange,\n            error: error\n        });\n    });\n    return tslib.__assign(tslib.__assign({}, eventSource), {\n        isFetching: true,\n        latestFetchId: fetchId\n    });\n}\nfunction receiveResponse(sourceHash, sourceId, fetchId, fetchRange) {\n    var _a;\n    var eventSource = sourceHash[sourceId];\n    if (eventSource && fetchId === eventSource.latestFetchId) {\n        return tslib.__assign(tslib.__assign({}, sourceHash), (_a = {}, _a[sourceId] = tslib.__assign(tslib.__assign({}, eventSource), {\n            isFetching: false,\n            fetchRange: fetchRange\n        }), _a));\n    }\n    return sourceHash;\n}\nfunction excludeStaticSources(eventSources, context) {\n    return filterHash(eventSources, function(eventSource) {\n        return doesSourceNeedRange(eventSource, context);\n    });\n}\nfunction parseInitialSources(rawOptions, context) {\n    var refiners = buildEventSourceRefiners(context);\n    var rawSources = [].concat(rawOptions.eventSources || []);\n    var sources = []; // parsed\n    if (rawOptions.initialEvents) {\n        rawSources.unshift(rawOptions.initialEvents);\n    }\n    if (rawOptions.events) {\n        rawSources.unshift(rawOptions.events);\n    }\n    for(var _i = 0, rawSources_1 = rawSources; _i < rawSources_1.length; _i++){\n        var rawSource = rawSources_1[_i];\n        var source = parseEventSource(rawSource, context, refiners);\n        if (source) {\n            sources.push(source);\n        }\n    }\n    return sources;\n}\nfunction doesSourceNeedRange(eventSource, context) {\n    var defs = context.pluginHooks.eventSourceDefs;\n    return !defs[eventSource.sourceDefId].ignoreRange;\n}\nfunction reduceEventStore(eventStore, action, eventSources, dateProfile, context) {\n    switch(action.type){\n        case \"RECEIVE_EVENTS\":\n            return receiveRawEvents(eventStore, eventSources[action.sourceId], action.fetchId, action.fetchRange, action.rawEvents, context);\n        case \"ADD_EVENTS\":\n            return addEvent(eventStore, action.eventStore, dateProfile ? dateProfile.activeRange : null, context);\n        case \"RESET_EVENTS\":\n            return action.eventStore;\n        case \"MERGE_EVENTS\":\n            return mergeEventStores(eventStore, action.eventStore);\n        case \"PREV\":\n        case \"NEXT\":\n        case \"CHANGE_DATE\":\n        case \"CHANGE_VIEW_TYPE\":\n            if (dateProfile) {\n                return expandRecurring(eventStore, dateProfile.activeRange, context);\n            }\n            return eventStore;\n        case \"REMOVE_EVENTS\":\n            return excludeSubEventStore(eventStore, action.eventStore);\n        case \"REMOVE_EVENT_SOURCE\":\n            return excludeEventsBySourceId(eventStore, action.sourceId);\n        case \"REMOVE_ALL_EVENT_SOURCES\":\n            return filterEventStoreDefs(eventStore, function(eventDef) {\n                return !eventDef.sourceId // only keep events with no source id\n                ;\n            });\n        case \"REMOVE_ALL_EVENTS\":\n            return createEmptyEventStore();\n        default:\n            return eventStore;\n    }\n}\nfunction receiveRawEvents(eventStore, eventSource, fetchId, fetchRange, rawEvents, context) {\n    if (eventSource && fetchId === eventSource.latestFetchId // TODO: wish this logic was always in event-sources\n    ) {\n        var subset = parseEvents(transformRawEvents(rawEvents, eventSource, context), eventSource, context);\n        if (fetchRange) {\n            subset = expandRecurring(subset, fetchRange, context);\n        }\n        return mergeEventStores(excludeEventsBySourceId(eventStore, eventSource.sourceId), subset);\n    }\n    return eventStore;\n}\nfunction transformRawEvents(rawEvents, eventSource, context) {\n    var calEachTransform = context.options.eventDataTransform;\n    var sourceEachTransform = eventSource ? eventSource.eventDataTransform : null;\n    if (sourceEachTransform) {\n        rawEvents = transformEachRawEvent(rawEvents, sourceEachTransform);\n    }\n    if (calEachTransform) {\n        rawEvents = transformEachRawEvent(rawEvents, calEachTransform);\n    }\n    return rawEvents;\n}\nfunction transformEachRawEvent(rawEvents, func) {\n    var refinedEvents;\n    if (!func) {\n        refinedEvents = rawEvents;\n    } else {\n        refinedEvents = [];\n        for(var _i = 0, rawEvents_1 = rawEvents; _i < rawEvents_1.length; _i++){\n            var rawEvent = rawEvents_1[_i];\n            var refinedEvent = func(rawEvent);\n            if (refinedEvent) {\n                refinedEvents.push(refinedEvent);\n            } else if (refinedEvent == null) {\n                refinedEvents.push(rawEvent);\n            } // if a different falsy value, do nothing\n        }\n    }\n    return refinedEvents;\n}\nfunction addEvent(eventStore, subset, expandRange, context) {\n    if (expandRange) {\n        subset = expandRecurring(subset, expandRange, context);\n    }\n    return mergeEventStores(eventStore, subset);\n}\nfunction rezoneEventStoreDates(eventStore, oldDateEnv, newDateEnv) {\n    var defs = eventStore.defs;\n    var instances = mapHash(eventStore.instances, function(instance) {\n        var def = defs[instance.defId];\n        if (def.allDay || def.recurringDef) {\n            return instance; // isn't dependent on timezone\n        }\n        return tslib.__assign(tslib.__assign({}, instance), {\n            range: {\n                start: newDateEnv.createMarker(oldDateEnv.toDate(instance.range.start, instance.forcedStartTzo)),\n                end: newDateEnv.createMarker(oldDateEnv.toDate(instance.range.end, instance.forcedEndTzo))\n            },\n            forcedStartTzo: newDateEnv.canComputeOffset ? null : instance.forcedStartTzo,\n            forcedEndTzo: newDateEnv.canComputeOffset ? null : instance.forcedEndTzo\n        });\n    });\n    return {\n        defs: defs,\n        instances: instances\n    };\n}\nfunction excludeEventsBySourceId(eventStore, sourceId) {\n    return filterEventStoreDefs(eventStore, function(eventDef) {\n        return eventDef.sourceId !== sourceId;\n    });\n}\n// QUESTION: why not just return instances? do a general object-property-exclusion util\nfunction excludeInstances(eventStore, removals) {\n    return {\n        defs: eventStore.defs,\n        instances: filterHash(eventStore.instances, function(instance) {\n            return !removals[instance.instanceId];\n        })\n    };\n}\nfunction reduceDateSelection(currentSelection, action) {\n    switch(action.type){\n        case \"UNSELECT_DATES\":\n            return null;\n        case \"SELECT_DATES\":\n            return action.selection;\n        default:\n            return currentSelection;\n    }\n}\nfunction reduceSelectedEvent(currentInstanceId, action) {\n    switch(action.type){\n        case \"UNSELECT_EVENT\":\n            return \"\";\n        case \"SELECT_EVENT\":\n            return action.eventInstanceId;\n        default:\n            return currentInstanceId;\n    }\n}\nfunction reduceEventDrag(currentDrag, action) {\n    var newDrag;\n    switch(action.type){\n        case \"UNSET_EVENT_DRAG\":\n            return null;\n        case \"SET_EVENT_DRAG\":\n            newDrag = action.state;\n            return {\n                affectedEvents: newDrag.affectedEvents,\n                mutatedEvents: newDrag.mutatedEvents,\n                isEvent: newDrag.isEvent\n            };\n        default:\n            return currentDrag;\n    }\n}\nfunction reduceEventResize(currentResize, action) {\n    var newResize;\n    switch(action.type){\n        case \"UNSET_EVENT_RESIZE\":\n            return null;\n        case \"SET_EVENT_RESIZE\":\n            newResize = action.state;\n            return {\n                affectedEvents: newResize.affectedEvents,\n                mutatedEvents: newResize.mutatedEvents,\n                isEvent: newResize.isEvent\n            };\n        default:\n            return currentResize;\n    }\n}\nfunction parseToolbars(calendarOptions, calendarOptionOverrides, theme, viewSpecs, calendarApi) {\n    var header = calendarOptions.headerToolbar ? parseToolbar(calendarOptions.headerToolbar, calendarOptions, calendarOptionOverrides, theme, viewSpecs, calendarApi) : null;\n    var footer = calendarOptions.footerToolbar ? parseToolbar(calendarOptions.footerToolbar, calendarOptions, calendarOptionOverrides, theme, viewSpecs, calendarApi) : null;\n    return {\n        header: header,\n        footer: footer\n    };\n}\nfunction parseToolbar(sectionStrHash, calendarOptions, calendarOptionOverrides, theme, viewSpecs, calendarApi) {\n    var sectionWidgets = {};\n    var viewsWithButtons = [];\n    var hasTitle = false;\n    for(var sectionName in sectionStrHash){\n        var sectionStr = sectionStrHash[sectionName];\n        var sectionRes = parseSection(sectionStr, calendarOptions, calendarOptionOverrides, theme, viewSpecs, calendarApi);\n        sectionWidgets[sectionName] = sectionRes.widgets;\n        viewsWithButtons.push.apply(viewsWithButtons, sectionRes.viewsWithButtons);\n        hasTitle = hasTitle || sectionRes.hasTitle;\n    }\n    return {\n        sectionWidgets: sectionWidgets,\n        viewsWithButtons: viewsWithButtons,\n        hasTitle: hasTitle\n    };\n}\n/*\nBAD: querying icons and text here. should be done at render time\n*/ function parseSection(sectionStr, calendarOptions, calendarOptionOverrides, theme, viewSpecs, calendarApi) {\n    var isRtl = calendarOptions.direction === \"rtl\";\n    var calendarCustomButtons = calendarOptions.customButtons || {};\n    var calendarButtonTextOverrides = calendarOptionOverrides.buttonText || {};\n    var calendarButtonText = calendarOptions.buttonText || {};\n    var calendarButtonHintOverrides = calendarOptionOverrides.buttonHints || {};\n    var calendarButtonHints = calendarOptions.buttonHints || {};\n    var sectionSubstrs = sectionStr ? sectionStr.split(\" \") : [];\n    var viewsWithButtons = [];\n    var hasTitle = false;\n    var widgets = sectionSubstrs.map(function(buttonGroupStr) {\n        return buttonGroupStr.split(\",\").map(function(buttonName) {\n            if (buttonName === \"title\") {\n                hasTitle = true;\n                return {\n                    buttonName: buttonName\n                };\n            }\n            var customButtonProps;\n            var viewSpec;\n            var buttonClick;\n            var buttonIcon; // only one of these will be set\n            var buttonText; // \"\n            var buttonHint;\n            // ^ for the title=\"\" attribute, for accessibility\n            if (customButtonProps = calendarCustomButtons[buttonName]) {\n                buttonClick = function(ev) {\n                    if (customButtonProps.click) {\n                        customButtonProps.click.call(ev.target, ev, ev.target); // TODO: use Calendar this context?\n                    }\n                };\n                (buttonIcon = theme.getCustomButtonIconClass(customButtonProps)) || (buttonIcon = theme.getIconClass(buttonName, isRtl)) || (buttonText = customButtonProps.text);\n                buttonHint = customButtonProps.hint || customButtonProps.text;\n            } else if (viewSpec = viewSpecs[buttonName]) {\n                viewsWithButtons.push(buttonName);\n                buttonClick = function() {\n                    calendarApi.changeView(buttonName);\n                };\n                (buttonText = viewSpec.buttonTextOverride) || (buttonIcon = theme.getIconClass(buttonName, isRtl)) || (buttonText = viewSpec.buttonTextDefault);\n                var textFallback = viewSpec.buttonTextOverride || viewSpec.buttonTextDefault;\n                buttonHint = formatWithOrdinals(viewSpec.buttonTitleOverride || viewSpec.buttonTitleDefault || calendarOptions.viewHint, [\n                    textFallback,\n                    buttonName\n                ], textFallback);\n            } else if (calendarApi[buttonName]) {\n                buttonClick = function() {\n                    calendarApi[buttonName]();\n                };\n                (buttonText = calendarButtonTextOverrides[buttonName]) || (buttonIcon = theme.getIconClass(buttonName, isRtl)) || (buttonText = calendarButtonText[buttonName]); // everything else is considered default\n                if (buttonName === \"prevYear\" || buttonName === \"nextYear\") {\n                    var prevOrNext = buttonName === \"prevYear\" ? \"prev\" : \"next\";\n                    buttonHint = formatWithOrdinals(calendarButtonHintOverrides[prevOrNext] || calendarButtonHints[prevOrNext], [\n                        calendarButtonText.year || \"year\",\n                        \"year\", \n                    ], calendarButtonText[buttonName]);\n                } else {\n                    buttonHint = function(navUnit) {\n                        return formatWithOrdinals(calendarButtonHintOverrides[buttonName] || calendarButtonHints[buttonName], [\n                            calendarButtonText[navUnit] || navUnit,\n                            navUnit, \n                        ], calendarButtonText[buttonName]);\n                    };\n                }\n            }\n            return {\n                buttonName: buttonName,\n                buttonClick: buttonClick,\n                buttonIcon: buttonIcon,\n                buttonText: buttonText,\n                buttonHint: buttonHint\n            };\n        });\n    });\n    return {\n        widgets: widgets,\n        viewsWithButtons: viewsWithButtons,\n        hasTitle: hasTitle\n    };\n}\nvar eventSourceDef$2 = {\n    ignoreRange: true,\n    parseMeta: function(refined) {\n        if (Array.isArray(refined.events)) {\n            return refined.events;\n        }\n        return null;\n    },\n    fetch: function(arg, success) {\n        success({\n            rawEvents: arg.eventSource.meta\n        });\n    }\n};\nvar arrayEventSourcePlugin = createPlugin({\n    eventSourceDefs: [\n        eventSourceDef$2\n    ]\n});\nvar eventSourceDef$1 = {\n    parseMeta: function(refined) {\n        if (typeof refined.events === \"function\") {\n            return refined.events;\n        }\n        return null;\n    },\n    fetch: function(arg, success, failure) {\n        var dateEnv = arg.context.dateEnv;\n        var func = arg.eventSource.meta;\n        unpromisify(func.bind(null, buildRangeApiWithTimeZone(arg.range, dateEnv)), function(rawEvents) {\n            success({\n                rawEvents: rawEvents\n            }); // needs an object response\n        }, failure);\n    }\n};\nvar funcEventSourcePlugin = createPlugin({\n    eventSourceDefs: [\n        eventSourceDef$1\n    ]\n});\nfunction requestJson(method, url, params, successCallback, failureCallback) {\n    method = method.toUpperCase();\n    var body = null;\n    if (method === \"GET\") {\n        url = injectQueryStringParams(url, params);\n    } else {\n        body = encodeParams(params);\n    }\n    var xhr = new XMLHttpRequest();\n    xhr.open(method, url, true);\n    if (method !== \"GET\") {\n        xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    }\n    xhr.onload = function() {\n        if (xhr.status >= 200 && xhr.status < 400) {\n            var parsed = false;\n            var res = void 0;\n            try {\n                res = JSON.parse(xhr.responseText);\n                parsed = true;\n            } catch (err) {\n            // will handle parsed=false\n            }\n            if (parsed) {\n                successCallback(res, xhr);\n            } else {\n                failureCallback(\"Failure parsing JSON\", xhr);\n            }\n        } else {\n            failureCallback(\"Request failed\", xhr);\n        }\n    };\n    xhr.onerror = function() {\n        failureCallback(\"Request failed\", xhr);\n    };\n    xhr.send(body);\n}\nfunction injectQueryStringParams(url, params) {\n    return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + encodeParams(params);\n}\nfunction encodeParams(params) {\n    var parts = [];\n    for(var key in params){\n        parts.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(params[key]));\n    }\n    return parts.join(\"&\");\n}\nvar JSON_FEED_EVENT_SOURCE_REFINERS = {\n    method: String,\n    extraParams: identity,\n    startParam: String,\n    endParam: String,\n    timeZoneParam: String\n};\nvar eventSourceDef = {\n    parseMeta: function(refined) {\n        if (refined.url && (refined.format === \"json\" || !refined.format)) {\n            return {\n                url: refined.url,\n                format: \"json\",\n                method: (refined.method || \"GET\").toUpperCase(),\n                extraParams: refined.extraParams,\n                startParam: refined.startParam,\n                endParam: refined.endParam,\n                timeZoneParam: refined.timeZoneParam\n            };\n        }\n        return null;\n    },\n    fetch: function(arg, success, failure) {\n        var meta = arg.eventSource.meta;\n        var requestParams = buildRequestParams(meta, arg.range, arg.context);\n        requestJson(meta.method, meta.url, requestParams, function(rawEvents, xhr) {\n            success({\n                rawEvents: rawEvents,\n                xhr: xhr\n            });\n        }, function(errorMessage, xhr) {\n            failure({\n                message: errorMessage,\n                xhr: xhr\n            });\n        });\n    }\n};\nvar jsonFeedEventSourcePlugin = createPlugin({\n    eventSourceRefiners: JSON_FEED_EVENT_SOURCE_REFINERS,\n    eventSourceDefs: [\n        eventSourceDef\n    ]\n});\nfunction buildRequestParams(meta, range, context) {\n    var dateEnv = context.dateEnv, options = context.options;\n    var startParam;\n    var endParam;\n    var timeZoneParam;\n    var customRequestParams;\n    var params = {};\n    startParam = meta.startParam;\n    if (startParam == null) {\n        startParam = options.startParam;\n    }\n    endParam = meta.endParam;\n    if (endParam == null) {\n        endParam = options.endParam;\n    }\n    timeZoneParam = meta.timeZoneParam;\n    if (timeZoneParam == null) {\n        timeZoneParam = options.timeZoneParam;\n    }\n    // retrieve any outbound GET/POST data from the options\n    if (typeof meta.extraParams === \"function\") {\n        // supplied as a function that returns a key/value object\n        customRequestParams = meta.extraParams();\n    } else {\n        // probably supplied as a straight key/value object\n        customRequestParams = meta.extraParams || {};\n    }\n    tslib.__assign(params, customRequestParams);\n    params[startParam] = dateEnv.formatIso(range.start);\n    params[endParam] = dateEnv.formatIso(range.end);\n    if (dateEnv.timeZone !== \"local\") {\n        params[timeZoneParam] = dateEnv.timeZone;\n    }\n    return params;\n}\nvar SIMPLE_RECURRING_REFINERS = {\n    daysOfWeek: identity,\n    startTime: createDuration,\n    endTime: createDuration,\n    duration: createDuration,\n    startRecur: identity,\n    endRecur: identity\n};\nvar recurring = {\n    parse: function(refined, dateEnv) {\n        if (refined.daysOfWeek || refined.startTime || refined.endTime || refined.startRecur || refined.endRecur) {\n            var recurringData = {\n                daysOfWeek: refined.daysOfWeek || null,\n                startTime: refined.startTime || null,\n                endTime: refined.endTime || null,\n                startRecur: refined.startRecur ? dateEnv.createMarker(refined.startRecur) : null,\n                endRecur: refined.endRecur ? dateEnv.createMarker(refined.endRecur) : null\n            };\n            var duration = void 0;\n            if (refined.duration) {\n                duration = refined.duration;\n            }\n            if (!duration && refined.startTime && refined.endTime) {\n                duration = subtractDurations(refined.endTime, refined.startTime);\n            }\n            return {\n                allDayGuess: Boolean(!refined.startTime && !refined.endTime),\n                duration: duration,\n                typeData: recurringData\n            };\n        }\n        return null;\n    },\n    expand: function(typeData, framingRange, dateEnv) {\n        var clippedFramingRange = intersectRanges(framingRange, {\n            start: typeData.startRecur,\n            end: typeData.endRecur\n        });\n        if (clippedFramingRange) {\n            return expandRanges(typeData.daysOfWeek, typeData.startTime, clippedFramingRange, dateEnv);\n        }\n        return [];\n    }\n};\nvar simpleRecurringEventsPlugin = createPlugin({\n    recurringTypes: [\n        recurring\n    ],\n    eventRefiners: SIMPLE_RECURRING_REFINERS\n});\nfunction expandRanges(daysOfWeek, startTime, framingRange, dateEnv) {\n    var dowHash = daysOfWeek ? arrayToHash(daysOfWeek) : null;\n    var dayMarker = startOfDay(framingRange.start);\n    var endMarker = framingRange.end;\n    var instanceStarts = [];\n    while(dayMarker < endMarker){\n        var instanceStart = void 0;\n        // if everyday, or this particular day-of-week\n        if (!dowHash || dowHash[dayMarker.getUTCDay()]) {\n            if (startTime) {\n                instanceStart = dateEnv.add(dayMarker, startTime);\n            } else {\n                instanceStart = dayMarker;\n            }\n            instanceStarts.push(instanceStart);\n        }\n        dayMarker = addDays(dayMarker, 1);\n    }\n    return instanceStarts;\n}\nvar changeHandlerPlugin = createPlugin({\n    optionChangeHandlers: {\n        events: function(events, context) {\n            handleEventSources([\n                events\n            ], context);\n        },\n        eventSources: handleEventSources\n    }\n});\n/*\nBUG: if `event` was supplied, all previously-given `eventSources` will be wiped out\n*/ function handleEventSources(inputs, context) {\n    var unfoundSources = hashValuesToArray(context.getCurrentData().eventSources);\n    var newInputs = [];\n    for(var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++){\n        var input = inputs_1[_i];\n        var inputFound = false;\n        for(var i = 0; i < unfoundSources.length; i += 1){\n            if (unfoundSources[i]._raw === input) {\n                unfoundSources.splice(i, 1); // delete\n                inputFound = true;\n                break;\n            }\n        }\n        if (!inputFound) {\n            newInputs.push(input);\n        }\n    }\n    for(var _a = 0, unfoundSources_1 = unfoundSources; _a < unfoundSources_1.length; _a++){\n        var unfoundSource = unfoundSources_1[_a];\n        context.dispatch({\n            type: \"REMOVE_EVENT_SOURCE\",\n            sourceId: unfoundSource.sourceId\n        });\n    }\n    for(var _b = 0, newInputs_1 = newInputs; _b < newInputs_1.length; _b++){\n        var newInput = newInputs_1[_b];\n        context.calendarApi.addEventSource(newInput);\n    }\n}\nfunction handleDateProfile(dateProfile, context) {\n    context.emitter.trigger(\"datesSet\", tslib.__assign(tslib.__assign({}, buildRangeApiWithTimeZone(dateProfile.activeRange, context.dateEnv)), {\n        view: context.viewApi\n    }));\n}\nfunction handleEventStore(eventStore, context) {\n    var emitter = context.emitter;\n    if (emitter.hasHandlers(\"eventsSet\")) {\n        emitter.trigger(\"eventsSet\", buildEventApis(eventStore, context));\n    }\n}\n/*\nthis array is exposed on the root namespace so that UMD plugins can add to it.\nsee the rollup-bundles script.\n*/ var globalPlugins = [\n    arrayEventSourcePlugin,\n    funcEventSourcePlugin,\n    jsonFeedEventSourcePlugin,\n    simpleRecurringEventsPlugin,\n    changeHandlerPlugin,\n    createPlugin({\n        isLoadingFuncs: [\n            function(state) {\n                return computeEventSourcesLoading(state.eventSources);\n            }, \n        ],\n        contentTypeHandlers: {\n            html: buildHtmlRenderer,\n            domNodes: buildDomNodeRenderer\n        },\n        propSetHandlers: {\n            dateProfile: handleDateProfile,\n            eventStore: handleEventStore\n        }\n    }), \n];\nfunction buildHtmlRenderer() {\n    var currentEl = null;\n    var currentHtml = \"\";\n    function render(el, html) {\n        if (el !== currentEl || html !== currentHtml) {\n            el.innerHTML = html;\n        }\n        currentEl = el;\n        currentHtml = html;\n    }\n    function destroy() {\n        currentEl.innerHTML = \"\";\n        currentEl = null;\n        currentHtml = \"\";\n    }\n    return {\n        render: render,\n        destroy: destroy\n    };\n}\nfunction buildDomNodeRenderer() {\n    var currentEl = null;\n    var currentDomNodes = [];\n    function render(el, domNodes) {\n        var newDomNodes = Array.prototype.slice.call(domNodes);\n        if (el !== currentEl || !isArraysEqual(currentDomNodes, newDomNodes)) {\n            // append first, remove second (for scroll resetting)\n            for(var _i = 0, newDomNodes_1 = newDomNodes; _i < newDomNodes_1.length; _i++){\n                var newNode = newDomNodes_1[_i];\n                el.appendChild(newNode);\n            }\n            destroy();\n        }\n        currentEl = el;\n        currentDomNodes = newDomNodes;\n    }\n    function destroy() {\n        currentDomNodes.forEach(removeElement);\n        currentDomNodes = [];\n        currentEl = null;\n    }\n    return {\n        render: render,\n        destroy: destroy\n    };\n}\nvar DelayedRunner = /** @class */ function() {\n    function DelayedRunner1(drainedOption) {\n        this.drainedOption = drainedOption;\n        this.isRunning = false;\n        this.isDirty = false;\n        this.pauseDepths = {};\n        this.timeoutId = 0;\n    }\n    DelayedRunner1.prototype.request = function(delay) {\n        this.isDirty = true;\n        if (!this.isPaused()) {\n            this.clearTimeout();\n            if (delay == null) {\n                this.tryDrain();\n            } else {\n                this.timeoutId = setTimeout(this.tryDrain.bind(this), delay);\n            }\n        }\n    };\n    DelayedRunner1.prototype.pause = function(scope) {\n        if (scope === void 0) {\n            scope = \"\";\n        }\n        var pauseDepths = this.pauseDepths;\n        pauseDepths[scope] = (pauseDepths[scope] || 0) + 1;\n        this.clearTimeout();\n    };\n    DelayedRunner1.prototype.resume = function(scope, force) {\n        if (scope === void 0) {\n            scope = \"\";\n        }\n        var pauseDepths = this.pauseDepths;\n        if (scope in pauseDepths) {\n            if (force) {\n                delete pauseDepths[scope];\n            } else {\n                pauseDepths[scope] -= 1;\n                var depth = pauseDepths[scope];\n                if (depth <= 0) {\n                    delete pauseDepths[scope];\n                }\n            }\n            this.tryDrain();\n        }\n    };\n    DelayedRunner1.prototype.isPaused = function() {\n        return Object.keys(this.pauseDepths).length;\n    };\n    DelayedRunner1.prototype.tryDrain = function() {\n        if (!this.isRunning && !this.isPaused()) {\n            this.isRunning = true;\n            while(this.isDirty){\n                this.isDirty = false;\n                this.drained(); // might set isDirty to true again\n            }\n            this.isRunning = false;\n        }\n    };\n    DelayedRunner1.prototype.clear = function() {\n        this.clearTimeout();\n        this.isDirty = false;\n        this.pauseDepths = {};\n    };\n    DelayedRunner1.prototype.clearTimeout = function() {\n        if (this.timeoutId) {\n            clearTimeout(this.timeoutId);\n            this.timeoutId = 0;\n        }\n    };\n    DelayedRunner1.prototype.drained = function() {\n        if (this.drainedOption) {\n            this.drainedOption();\n        }\n    };\n    return DelayedRunner1;\n}();\nvar TaskRunner = /** @class */ function() {\n    function TaskRunner1(runTaskOption, drainedOption) {\n        this.runTaskOption = runTaskOption;\n        this.drainedOption = drainedOption;\n        this.queue = [];\n        this.delayedRunner = new DelayedRunner(this.drain.bind(this));\n    }\n    TaskRunner1.prototype.request = function(task, delay) {\n        this.queue.push(task);\n        this.delayedRunner.request(delay);\n    };\n    TaskRunner1.prototype.pause = function(scope) {\n        this.delayedRunner.pause(scope);\n    };\n    TaskRunner1.prototype.resume = function(scope, force) {\n        this.delayedRunner.resume(scope, force);\n    };\n    TaskRunner1.prototype.drain = function() {\n        var queue = this.queue;\n        while(queue.length){\n            var completedTasks = [];\n            var task = void 0;\n            while(task = queue.shift()){\n                this.runTask(task);\n                completedTasks.push(task);\n            }\n            this.drained(completedTasks);\n        } // keep going, in case new tasks were added in the drained handler\n    };\n    TaskRunner1.prototype.runTask = function(task) {\n        if (this.runTaskOption) {\n            this.runTaskOption(task);\n        }\n    };\n    TaskRunner1.prototype.drained = function(completedTasks) {\n        if (this.drainedOption) {\n            this.drainedOption(completedTasks);\n        }\n    };\n    return TaskRunner1;\n}();\n// Computes what the title at the top of the calendarApi should be for this view\nfunction buildTitle(dateProfile, viewOptions, dateEnv) {\n    var range;\n    // for views that span a large unit of time, show the proper interval, ignoring stray days before and after\n    if (/^(year|month)$/.test(dateProfile.currentRangeUnit)) {\n        range = dateProfile.currentRange;\n    } else {\n        range = dateProfile.activeRange;\n    }\n    return dateEnv.formatRange(range.start, range.end, createFormatter(viewOptions.titleFormat || buildTitleFormat(dateProfile)), {\n        isEndExclusive: dateProfile.isRangeAllDay,\n        defaultSeparator: viewOptions.titleRangeSeparator\n    });\n}\n// Generates the format string that should be used to generate the title for the current date range.\n// Attempts to compute the most appropriate format if not explicitly specified with `titleFormat`.\nfunction buildTitleFormat(dateProfile) {\n    var currentRangeUnit = dateProfile.currentRangeUnit;\n    if (currentRangeUnit === \"year\") {\n        return {\n            year: \"numeric\"\n        };\n    }\n    if (currentRangeUnit === \"month\") {\n        return {\n            year: \"numeric\",\n            month: \"long\"\n        }; // like \"September 2014\"\n    }\n    var days = diffWholeDays(dateProfile.currentRange.start, dateProfile.currentRange.end);\n    if (days !== null && days > 1) {\n        // multi-day range. shorter, like \"Sep 9 - 10 2014\"\n        return {\n            year: \"numeric\",\n            month: \"short\",\n            day: \"numeric\"\n        };\n    }\n    // one day. longer, like \"September 9 2014\"\n    return {\n        year: \"numeric\",\n        month: \"long\",\n        day: \"numeric\"\n    };\n}\n// in future refactor, do the redux-style function(state=initial) for initial-state\n// also, whatever is happening in constructor, have it happen in action queue too\nvar CalendarDataManager = /** @class */ function() {\n    function CalendarDataManager1(props) {\n        var _this = this;\n        this.computeOptionsData = memoize(this._computeOptionsData);\n        this.computeCurrentViewData = memoize(this._computeCurrentViewData);\n        this.organizeRawLocales = memoize(organizeRawLocales);\n        this.buildLocale = memoize(buildLocale);\n        this.buildPluginHooks = buildBuildPluginHooks();\n        this.buildDateEnv = memoize(buildDateEnv);\n        this.buildTheme = memoize(buildTheme);\n        this.parseToolbars = memoize(parseToolbars);\n        this.buildViewSpecs = memoize(buildViewSpecs);\n        this.buildDateProfileGenerator = memoizeObjArg(buildDateProfileGenerator);\n        this.buildViewApi = memoize(buildViewApi);\n        this.buildViewUiProps = memoizeObjArg(buildViewUiProps);\n        this.buildEventUiBySource = memoize(buildEventUiBySource, isPropsEqual);\n        this.buildEventUiBases = memoize(buildEventUiBases);\n        this.parseContextBusinessHours = memoizeObjArg(parseContextBusinessHours);\n        this.buildTitle = memoize(buildTitle);\n        this.emitter = new Emitter();\n        this.actionRunner = new TaskRunner(this._handleAction.bind(this), this.updateData.bind(this));\n        this.currentCalendarOptionsInput = {};\n        this.currentCalendarOptionsRefined = {};\n        this.currentViewOptionsInput = {};\n        this.currentViewOptionsRefined = {};\n        this.currentCalendarOptionsRefiners = {};\n        this.getCurrentData = function() {\n            return _this.data;\n        };\n        this.dispatch = function(action) {\n            _this.actionRunner.request(action); // protects against recursive calls to _handleAction\n        };\n        this.props = props;\n        this.actionRunner.pause();\n        var dynamicOptionOverrides = {};\n        var optionsData = this.computeOptionsData(props.optionOverrides, dynamicOptionOverrides, props.calendarApi);\n        var currentViewType = optionsData.calendarOptions.initialView || optionsData.pluginHooks.initialView;\n        var currentViewData = this.computeCurrentViewData(currentViewType, optionsData, props.optionOverrides, dynamicOptionOverrides);\n        // wire things up\n        // TODO: not DRY\n        props.calendarApi.currentDataManager = this;\n        this.emitter.setThisContext(props.calendarApi);\n        this.emitter.setOptions(currentViewData.options);\n        var currentDate = getInitialDate(optionsData.calendarOptions, optionsData.dateEnv);\n        var dateProfile = currentViewData.dateProfileGenerator.build(currentDate);\n        if (!rangeContainsMarker(dateProfile.activeRange, currentDate)) {\n            currentDate = dateProfile.currentRange.start;\n        }\n        var calendarContext = {\n            dateEnv: optionsData.dateEnv,\n            options: optionsData.calendarOptions,\n            pluginHooks: optionsData.pluginHooks,\n            calendarApi: props.calendarApi,\n            dispatch: this.dispatch,\n            emitter: this.emitter,\n            getCurrentData: this.getCurrentData\n        };\n        // needs to be after setThisContext\n        for(var _i = 0, _a = optionsData.pluginHooks.contextInit; _i < _a.length; _i++){\n            var callback = _a[_i];\n            callback(calendarContext);\n        }\n        // NOT DRY\n        var eventSources = initEventSources(optionsData.calendarOptions, dateProfile, calendarContext);\n        var initialState = {\n            dynamicOptionOverrides: dynamicOptionOverrides,\n            currentViewType: currentViewType,\n            currentDate: currentDate,\n            dateProfile: dateProfile,\n            businessHours: this.parseContextBusinessHours(calendarContext),\n            eventSources: eventSources,\n            eventUiBases: {},\n            eventStore: createEmptyEventStore(),\n            renderableEventStore: createEmptyEventStore(),\n            dateSelection: null,\n            eventSelection: \"\",\n            eventDrag: null,\n            eventResize: null,\n            selectionConfig: this.buildViewUiProps(calendarContext).selectionConfig\n        };\n        var contextAndState = tslib.__assign(tslib.__assign({}, calendarContext), initialState);\n        for(var _b = 0, _c = optionsData.pluginHooks.reducers; _b < _c.length; _b++){\n            var reducer = _c[_b];\n            tslib.__assign(initialState, reducer(null, null, contextAndState));\n        }\n        if (computeIsLoading(initialState, calendarContext)) {\n            this.emitter.trigger(\"loading\", true); // NOT DRY\n        }\n        this.state = initialState;\n        this.updateData();\n        this.actionRunner.resume();\n    }\n    CalendarDataManager1.prototype.resetOptions = function(optionOverrides, append) {\n        var props = this.props;\n        props.optionOverrides = append ? tslib.__assign(tslib.__assign({}, props.optionOverrides), optionOverrides) : optionOverrides;\n        this.actionRunner.request({\n            type: \"NOTHING\"\n        });\n    };\n    CalendarDataManager1.prototype._handleAction = function(action) {\n        var _a = this, props = _a.props, state = _a.state, emitter = _a.emitter;\n        var dynamicOptionOverrides = reduceDynamicOptionOverrides(state.dynamicOptionOverrides, action);\n        var optionsData = this.computeOptionsData(props.optionOverrides, dynamicOptionOverrides, props.calendarApi);\n        var currentViewType = reduceViewType(state.currentViewType, action);\n        var currentViewData = this.computeCurrentViewData(currentViewType, optionsData, props.optionOverrides, dynamicOptionOverrides);\n        // wire things up\n        // TODO: not DRY\n        props.calendarApi.currentDataManager = this;\n        emitter.setThisContext(props.calendarApi);\n        emitter.setOptions(currentViewData.options);\n        var calendarContext = {\n            dateEnv: optionsData.dateEnv,\n            options: optionsData.calendarOptions,\n            pluginHooks: optionsData.pluginHooks,\n            calendarApi: props.calendarApi,\n            dispatch: this.dispatch,\n            emitter: emitter,\n            getCurrentData: this.getCurrentData\n        };\n        var currentDate = state.currentDate, dateProfile = state.dateProfile;\n        if (this.data && this.data.dateProfileGenerator !== currentViewData.dateProfileGenerator) {\n            dateProfile = currentViewData.dateProfileGenerator.build(currentDate);\n        }\n        currentDate = reduceCurrentDate(currentDate, action);\n        dateProfile = reduceDateProfile(dateProfile, action, currentDate, currentViewData.dateProfileGenerator);\n        if (action.type === \"PREV\" || action.type === \"NEXT\" || !rangeContainsMarker(dateProfile.currentRange, currentDate)) {\n            currentDate = dateProfile.currentRange.start;\n        }\n        var eventSources = reduceEventSources(state.eventSources, action, dateProfile, calendarContext);\n        var eventStore = reduceEventStore(state.eventStore, action, eventSources, dateProfile, calendarContext);\n        var isEventsLoading = computeEventSourcesLoading(eventSources); // BAD. also called in this func in computeIsLoading\n        var renderableEventStore = isEventsLoading && !currentViewData.options.progressiveEventRendering ? state.renderableEventStore || eventStore : eventStore;\n        var _b = this.buildViewUiProps(calendarContext), eventUiSingleBase = _b.eventUiSingleBase, selectionConfig = _b.selectionConfig; // will memoize obj\n        var eventUiBySource = this.buildEventUiBySource(eventSources);\n        var eventUiBases = this.buildEventUiBases(renderableEventStore.defs, eventUiSingleBase, eventUiBySource);\n        var newState = {\n            dynamicOptionOverrides: dynamicOptionOverrides,\n            currentViewType: currentViewType,\n            currentDate: currentDate,\n            dateProfile: dateProfile,\n            eventSources: eventSources,\n            eventStore: eventStore,\n            renderableEventStore: renderableEventStore,\n            selectionConfig: selectionConfig,\n            eventUiBases: eventUiBases,\n            businessHours: this.parseContextBusinessHours(calendarContext),\n            dateSelection: reduceDateSelection(state.dateSelection, action),\n            eventSelection: reduceSelectedEvent(state.eventSelection, action),\n            eventDrag: reduceEventDrag(state.eventDrag, action),\n            eventResize: reduceEventResize(state.eventResize, action)\n        };\n        var contextAndState = tslib.__assign(tslib.__assign({}, calendarContext), newState);\n        for(var _i = 0, _c = optionsData.pluginHooks.reducers; _i < _c.length; _i++){\n            var reducer = _c[_i];\n            tslib.__assign(newState, reducer(state, action, contextAndState)); // give the OLD state, for old value\n        }\n        var wasLoading = computeIsLoading(state, calendarContext);\n        var isLoading = computeIsLoading(newState, calendarContext);\n        // TODO: use propSetHandlers in plugin system\n        if (!wasLoading && isLoading) {\n            emitter.trigger(\"loading\", true);\n        } else if (wasLoading && !isLoading) {\n            emitter.trigger(\"loading\", false);\n        }\n        this.state = newState;\n        if (props.onAction) {\n            props.onAction(action);\n        }\n    };\n    CalendarDataManager1.prototype.updateData = function() {\n        var _a = this, props = _a.props, state = _a.state;\n        var oldData = this.data;\n        var optionsData = this.computeOptionsData(props.optionOverrides, state.dynamicOptionOverrides, props.calendarApi);\n        var currentViewData = this.computeCurrentViewData(state.currentViewType, optionsData, props.optionOverrides, state.dynamicOptionOverrides);\n        var data = this.data = tslib.__assign(tslib.__assign(tslib.__assign({\n            viewTitle: this.buildTitle(state.dateProfile, currentViewData.options, optionsData.dateEnv),\n            calendarApi: props.calendarApi,\n            dispatch: this.dispatch,\n            emitter: this.emitter,\n            getCurrentData: this.getCurrentData\n        }, optionsData), currentViewData), state);\n        var changeHandlers = optionsData.pluginHooks.optionChangeHandlers;\n        var oldCalendarOptions = oldData && oldData.calendarOptions;\n        var newCalendarOptions = optionsData.calendarOptions;\n        if (oldCalendarOptions && oldCalendarOptions !== newCalendarOptions) {\n            if (oldCalendarOptions.timeZone !== newCalendarOptions.timeZone) {\n                // hack\n                state.eventSources = data.eventSources = reduceEventSourcesNewTimeZone(data.eventSources, state.dateProfile, data);\n                state.eventStore = data.eventStore = rezoneEventStoreDates(data.eventStore, oldData.dateEnv, data.dateEnv);\n            }\n            for(var optionName in changeHandlers){\n                if (oldCalendarOptions[optionName] !== newCalendarOptions[optionName]) {\n                    changeHandlers[optionName](newCalendarOptions[optionName], data);\n                }\n            }\n        }\n        if (props.onData) {\n            props.onData(data);\n        }\n    };\n    CalendarDataManager1.prototype._computeOptionsData = function(optionOverrides, dynamicOptionOverrides, calendarApi) {\n        // TODO: blacklist options that are handled by optionChangeHandlers\n        var _a = this.processRawCalendarOptions(optionOverrides, dynamicOptionOverrides), refinedOptions = _a.refinedOptions, pluginHooks = _a.pluginHooks, localeDefaults = _a.localeDefaults, availableLocaleData = _a.availableLocaleData, extra = _a.extra;\n        warnUnknownOptions(extra);\n        var dateEnv = this.buildDateEnv(refinedOptions.timeZone, refinedOptions.locale, refinedOptions.weekNumberCalculation, refinedOptions.firstDay, refinedOptions.weekText, pluginHooks, availableLocaleData, refinedOptions.defaultRangeSeparator);\n        var viewSpecs = this.buildViewSpecs(pluginHooks.views, optionOverrides, dynamicOptionOverrides, localeDefaults);\n        var theme = this.buildTheme(refinedOptions, pluginHooks);\n        var toolbarConfig = this.parseToolbars(refinedOptions, optionOverrides, theme, viewSpecs, calendarApi);\n        return {\n            calendarOptions: refinedOptions,\n            pluginHooks: pluginHooks,\n            dateEnv: dateEnv,\n            viewSpecs: viewSpecs,\n            theme: theme,\n            toolbarConfig: toolbarConfig,\n            localeDefaults: localeDefaults,\n            availableRawLocales: availableLocaleData.map\n        };\n    };\n    // always called from behind a memoizer\n    CalendarDataManager1.prototype.processRawCalendarOptions = function(optionOverrides, dynamicOptionOverrides) {\n        var _a = mergeRawOptions([\n            BASE_OPTION_DEFAULTS,\n            optionOverrides,\n            dynamicOptionOverrides, \n        ]), locales = _a.locales, locale = _a.locale;\n        var availableLocaleData = this.organizeRawLocales(locales);\n        var availableRawLocales = availableLocaleData.map;\n        var localeDefaults = this.buildLocale(locale || availableLocaleData.defaultCode, availableRawLocales).options;\n        var pluginHooks = this.buildPluginHooks(optionOverrides.plugins || [], globalPlugins);\n        var refiners = this.currentCalendarOptionsRefiners = tslib.__assign(tslib.__assign(tslib.__assign(tslib.__assign(tslib.__assign({}, BASE_OPTION_REFINERS), CALENDAR_LISTENER_REFINERS), CALENDAR_OPTION_REFINERS), pluginHooks.listenerRefiners), pluginHooks.optionRefiners);\n        var extra = {};\n        var raw = mergeRawOptions([\n            BASE_OPTION_DEFAULTS,\n            localeDefaults,\n            optionOverrides,\n            dynamicOptionOverrides, \n        ]);\n        var refined = {};\n        var currentRaw = this.currentCalendarOptionsInput;\n        var currentRefined = this.currentCalendarOptionsRefined;\n        var anyChanges = false;\n        for(var optionName in raw){\n            if (optionName !== \"plugins\") {\n                if (raw[optionName] === currentRaw[optionName] || COMPLEX_OPTION_COMPARATORS[optionName] && optionName in currentRaw && COMPLEX_OPTION_COMPARATORS[optionName](currentRaw[optionName], raw[optionName])) {\n                    refined[optionName] = currentRefined[optionName];\n                } else if (refiners[optionName]) {\n                    refined[optionName] = refiners[optionName](raw[optionName]);\n                    anyChanges = true;\n                } else {\n                    extra[optionName] = currentRaw[optionName];\n                }\n            }\n        }\n        if (anyChanges) {\n            this.currentCalendarOptionsInput = raw;\n            this.currentCalendarOptionsRefined = refined;\n        }\n        return {\n            rawOptions: this.currentCalendarOptionsInput,\n            refinedOptions: this.currentCalendarOptionsRefined,\n            pluginHooks: pluginHooks,\n            availableLocaleData: availableLocaleData,\n            localeDefaults: localeDefaults,\n            extra: extra\n        };\n    };\n    CalendarDataManager1.prototype._computeCurrentViewData = function(viewType, optionsData, optionOverrides, dynamicOptionOverrides) {\n        var viewSpec = optionsData.viewSpecs[viewType];\n        if (!viewSpec) {\n            throw new Error('viewType \"' + viewType + \"\\\" is not available. Please make sure you've loaded all neccessary plugins\");\n        }\n        var _a = this.processRawViewOptions(viewSpec, optionsData.pluginHooks, optionsData.localeDefaults, optionOverrides, dynamicOptionOverrides), refinedOptions = _a.refinedOptions, extra = _a.extra;\n        warnUnknownOptions(extra);\n        var dateProfileGenerator = this.buildDateProfileGenerator({\n            dateProfileGeneratorClass: viewSpec.optionDefaults.dateProfileGeneratorClass,\n            duration: viewSpec.duration,\n            durationUnit: viewSpec.durationUnit,\n            usesMinMaxTime: viewSpec.optionDefaults.usesMinMaxTime,\n            dateEnv: optionsData.dateEnv,\n            calendarApi: this.props.calendarApi,\n            slotMinTime: refinedOptions.slotMinTime,\n            slotMaxTime: refinedOptions.slotMaxTime,\n            showNonCurrentDates: refinedOptions.showNonCurrentDates,\n            dayCount: refinedOptions.dayCount,\n            dateAlignment: refinedOptions.dateAlignment,\n            dateIncrement: refinedOptions.dateIncrement,\n            hiddenDays: refinedOptions.hiddenDays,\n            weekends: refinedOptions.weekends,\n            nowInput: refinedOptions.now,\n            validRangeInput: refinedOptions.validRange,\n            visibleRangeInput: refinedOptions.visibleRange,\n            monthMode: refinedOptions.monthMode,\n            fixedWeekCount: refinedOptions.fixedWeekCount\n        });\n        var viewApi = this.buildViewApi(viewType, this.getCurrentData, optionsData.dateEnv);\n        return {\n            viewSpec: viewSpec,\n            options: refinedOptions,\n            dateProfileGenerator: dateProfileGenerator,\n            viewApi: viewApi\n        };\n    };\n    CalendarDataManager1.prototype.processRawViewOptions = function(viewSpec, pluginHooks, localeDefaults, optionOverrides, dynamicOptionOverrides) {\n        var raw = mergeRawOptions([\n            BASE_OPTION_DEFAULTS,\n            viewSpec.optionDefaults,\n            localeDefaults,\n            optionOverrides,\n            viewSpec.optionOverrides,\n            dynamicOptionOverrides, \n        ]);\n        var refiners = tslib.__assign(tslib.__assign(tslib.__assign(tslib.__assign(tslib.__assign(tslib.__assign({}, BASE_OPTION_REFINERS), CALENDAR_LISTENER_REFINERS), CALENDAR_OPTION_REFINERS), VIEW_OPTION_REFINERS), pluginHooks.listenerRefiners), pluginHooks.optionRefiners);\n        var refined = {};\n        var currentRaw = this.currentViewOptionsInput;\n        var currentRefined = this.currentViewOptionsRefined;\n        var anyChanges = false;\n        var extra = {};\n        for(var optionName in raw){\n            if (raw[optionName] === currentRaw[optionName]) {\n                refined[optionName] = currentRefined[optionName];\n            } else {\n                if (raw[optionName] === this.currentCalendarOptionsInput[optionName]) {\n                    if (optionName in this.currentCalendarOptionsRefined) {\n                        refined[optionName] = this.currentCalendarOptionsRefined[optionName];\n                    }\n                } else if (refiners[optionName]) {\n                    refined[optionName] = refiners[optionName](raw[optionName]);\n                } else {\n                    extra[optionName] = raw[optionName];\n                }\n                anyChanges = true;\n            }\n        }\n        if (anyChanges) {\n            this.currentViewOptionsInput = raw;\n            this.currentViewOptionsRefined = refined;\n        }\n        return {\n            rawOptions: this.currentViewOptionsInput,\n            refinedOptions: this.currentViewOptionsRefined,\n            extra: extra\n        };\n    };\n    return CalendarDataManager1;\n}();\nfunction buildDateEnv(timeZone, explicitLocale, weekNumberCalculation, firstDay, weekText, pluginHooks, availableLocaleData, defaultSeparator) {\n    var locale = buildLocale(explicitLocale || availableLocaleData.defaultCode, availableLocaleData.map);\n    return new DateEnv({\n        calendarSystem: \"gregory\",\n        timeZone: timeZone,\n        namedTimeZoneImpl: pluginHooks.namedTimeZonedImpl,\n        locale: locale,\n        weekNumberCalculation: weekNumberCalculation,\n        firstDay: firstDay,\n        weekText: weekText,\n        cmdFormatter: pluginHooks.cmdFormatter,\n        defaultSeparator: defaultSeparator\n    });\n}\nfunction buildTheme(options, pluginHooks) {\n    var ThemeClass = pluginHooks.themeClasses[options.themeSystem] || StandardTheme;\n    return new ThemeClass(options);\n}\nfunction buildDateProfileGenerator(props) {\n    var DateProfileGeneratorClass = props.dateProfileGeneratorClass || DateProfileGenerator;\n    return new DateProfileGeneratorClass(props);\n}\nfunction buildViewApi(type, getCurrentData, dateEnv) {\n    return new ViewApi(type, getCurrentData, dateEnv);\n}\nfunction buildEventUiBySource(eventSources) {\n    return mapHash(eventSources, function(eventSource) {\n        return eventSource.ui;\n    });\n}\nfunction buildEventUiBases(eventDefs, eventUiSingleBase, eventUiBySource) {\n    var eventUiBases = {\n        \"\": eventUiSingleBase\n    };\n    for(var defId in eventDefs){\n        var def = eventDefs[defId];\n        if (def.sourceId && eventUiBySource[def.sourceId]) {\n            eventUiBases[defId] = eventUiBySource[def.sourceId];\n        }\n    }\n    return eventUiBases;\n}\nfunction buildViewUiProps(calendarContext) {\n    var options = calendarContext.options;\n    return {\n        eventUiSingleBase: createEventUi({\n            display: options.eventDisplay,\n            editable: options.editable,\n            startEditable: options.eventStartEditable,\n            durationEditable: options.eventDurationEditable,\n            constraint: options.eventConstraint,\n            overlap: typeof options.eventOverlap === \"boolean\" ? options.eventOverlap : undefined,\n            allow: options.eventAllow,\n            backgroundColor: options.eventBackgroundColor,\n            borderColor: options.eventBorderColor,\n            textColor: options.eventTextColor,\n            color: options.eventColor\n        }, calendarContext),\n        selectionConfig: createEventUi({\n            constraint: options.selectConstraint,\n            overlap: typeof options.selectOverlap === \"boolean\" ? options.selectOverlap : undefined,\n            allow: options.selectAllow\n        }, calendarContext)\n    };\n}\nfunction computeIsLoading(state, context) {\n    for(var _i = 0, _a = context.pluginHooks.isLoadingFuncs; _i < _a.length; _i++){\n        var isLoadingFunc = _a[_i];\n        if (isLoadingFunc(state)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction parseContextBusinessHours(calendarContext) {\n    return parseBusinessHours(calendarContext.options.businessHours, calendarContext);\n}\nfunction warnUnknownOptions(options, viewName) {\n    for(var optionName in options){\n        console.warn(\"Unknown option '\" + optionName + \"'\" + (viewName ? \" for view '\" + viewName + \"'\" : \"\"));\n    }\n}\n// TODO: move this to react plugin?\nvar CalendarDataProvider = /** @class */ function(_super) {\n    tslib.__extends(CalendarDataProvider1, _super);\n    function CalendarDataProvider1(props) {\n        var _this = _super.call(this, props) || this;\n        _this.handleData = function(data) {\n            if (!_this.dataManager) {\n                // eslint-disable-next-line react/no-direct-mutation-state\n                _this.state = data; // can't use setState yet\n            } else {\n                _this.setState(data);\n            }\n        };\n        _this.dataManager = new CalendarDataManager({\n            optionOverrides: props.optionOverrides,\n            calendarApi: props.calendarApi,\n            onData: _this.handleData\n        });\n        return _this;\n    }\n    CalendarDataProvider1.prototype.render = function() {\n        return this.props.children(this.state);\n    };\n    CalendarDataProvider1.prototype.componentDidUpdate = function(prevProps) {\n        var newOptionOverrides = this.props.optionOverrides;\n        if (newOptionOverrides !== prevProps.optionOverrides) {\n            this.dataManager.resetOptions(newOptionOverrides);\n        }\n    };\n    return CalendarDataProvider1;\n}(vdom_cjs.Component);\n// HELPERS\n/*\nif nextDayThreshold is specified, slicing is done in an all-day fashion.\nyou can get nextDayThreshold from context.nextDayThreshold\n*/ function sliceEvents(props, allDay) {\n    return sliceEventStore(props.eventStore, props.eventUiBases, props.dateProfile.activeRange, allDay ? props.nextDayThreshold : null).fg;\n}\nvar NamedTimeZoneImpl = /** @class */ function() {\n    function NamedTimeZoneImpl1(timeZoneName) {\n        this.timeZoneName = timeZoneName;\n    }\n    return NamedTimeZoneImpl1;\n}();\nvar SegHierarchy = /** @class */ function() {\n    function SegHierarchy1() {\n        // settings\n        this.strictOrder = false;\n        this.allowReslicing = false;\n        this.maxCoord = -1; // -1 means no max\n        this.maxStackCnt = -1; // -1 means no max\n        this.levelCoords = []; // ordered\n        this.entriesByLevel = []; // parallel with levelCoords\n        this.stackCnts = {}; // TODO: use better technique!?\n    }\n    SegHierarchy1.prototype.addSegs = function(inputs) {\n        var hiddenEntries = [];\n        for(var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++){\n            var input = inputs_1[_i];\n            this.insertEntry(input, hiddenEntries);\n        }\n        return hiddenEntries;\n    };\n    SegHierarchy1.prototype.insertEntry = function(entry, hiddenEntries) {\n        var insertion = this.findInsertion(entry);\n        if (this.isInsertionValid(insertion, entry)) {\n            this.insertEntryAt(entry, insertion);\n            return 1;\n        }\n        return this.handleInvalidInsertion(insertion, entry, hiddenEntries);\n    };\n    SegHierarchy1.prototype.isInsertionValid = function(insertion, entry) {\n        return (this.maxCoord === -1 || insertion.levelCoord + entry.thickness <= this.maxCoord) && (this.maxStackCnt === -1 || insertion.stackCnt < this.maxStackCnt);\n    };\n    // returns number of new entries inserted\n    SegHierarchy1.prototype.handleInvalidInsertion = function(insertion, entry, hiddenEntries) {\n        if (this.allowReslicing && insertion.touchingEntry) {\n            return this.splitEntry(entry, insertion.touchingEntry, hiddenEntries);\n        }\n        hiddenEntries.push(entry);\n        return 0;\n    };\n    SegHierarchy1.prototype.splitEntry = function(entry, barrier, hiddenEntries) {\n        var partCnt = 0;\n        var splitHiddenEntries = [];\n        var entrySpan = entry.span;\n        var barrierSpan = barrier.span;\n        if (entrySpan.start < barrierSpan.start) {\n            partCnt += this.insertEntry({\n                index: entry.index,\n                thickness: entry.thickness,\n                span: {\n                    start: entrySpan.start,\n                    end: barrierSpan.start\n                }\n            }, splitHiddenEntries);\n        }\n        if (entrySpan.end > barrierSpan.end) {\n            partCnt += this.insertEntry({\n                index: entry.index,\n                thickness: entry.thickness,\n                span: {\n                    start: barrierSpan.end,\n                    end: entrySpan.end\n                }\n            }, splitHiddenEntries);\n        }\n        if (partCnt) {\n            hiddenEntries.push.apply(hiddenEntries, tslib.__spreadArray([\n                {\n                    index: entry.index,\n                    thickness: entry.thickness,\n                    span: intersectSpans(barrierSpan, entrySpan)\n                }\n            ], splitHiddenEntries));\n            return partCnt;\n        }\n        hiddenEntries.push(entry);\n        return 0;\n    };\n    SegHierarchy1.prototype.insertEntryAt = function(entry, insertion) {\n        var _a = this, entriesByLevel = _a.entriesByLevel, levelCoords = _a.levelCoords;\n        if (insertion.lateral === -1) {\n            // create a new level\n            insertAt(levelCoords, insertion.level, insertion.levelCoord);\n            insertAt(entriesByLevel, insertion.level, [\n                entry\n            ]);\n        } else {\n            // insert into existing level\n            insertAt(entriesByLevel[insertion.level], insertion.lateral, entry);\n        }\n        this.stackCnts[buildEntryKey(entry)] = insertion.stackCnt;\n    };\n    SegHierarchy1.prototype.findInsertion = function(newEntry) {\n        var _a = this, levelCoords = _a.levelCoords, entriesByLevel = _a.entriesByLevel, strictOrder = _a.strictOrder, stackCnts = _a.stackCnts;\n        var levelCnt = levelCoords.length;\n        var candidateCoord = 0;\n        var touchingLevel = -1;\n        var touchingLateral = -1;\n        var touchingEntry = null;\n        var stackCnt = 0;\n        for(var trackingLevel = 0; trackingLevel < levelCnt; trackingLevel += 1){\n            var trackingCoord = levelCoords[trackingLevel];\n            // if the current level is past the placed entry, we have found a good empty space and can stop.\n            // if strictOrder, keep finding more lateral intersections.\n            if (!strictOrder && trackingCoord >= candidateCoord + newEntry.thickness) {\n                break;\n            }\n            var trackingEntries = entriesByLevel[trackingLevel];\n            var trackingEntry = void 0;\n            var searchRes = binarySearch(trackingEntries, newEntry.span.start, getEntrySpanEnd); // find first entry after newEntry's end\n            var lateralIndex = searchRes[0] + searchRes[1]; // if exact match (which doesn't collide), go to next one\n            while((trackingEntry = trackingEntries[lateralIndex]) && trackingEntry.span.start < newEntry.span.end // and not entirely past newEntry\n            ){\n                var trackingEntryBottom = trackingCoord + trackingEntry.thickness;\n                // intersects into the top of the candidate?\n                if (trackingEntryBottom > candidateCoord) {\n                    candidateCoord = trackingEntryBottom;\n                    touchingEntry = trackingEntry;\n                    touchingLevel = trackingLevel;\n                    touchingLateral = lateralIndex;\n                }\n                // butts up against top of candidate? (will happen if just intersected as well)\n                if (trackingEntryBottom === candidateCoord) {\n                    // accumulate the highest possible stackCnt of the trackingEntries that butt up\n                    stackCnt = Math.max(stackCnt, stackCnts[buildEntryKey(trackingEntry)] + 1);\n                }\n                lateralIndex += 1;\n            }\n        }\n        // the destination level will be after touchingEntry's level. find it\n        var destLevel = 0;\n        if (touchingEntry) {\n            destLevel = touchingLevel + 1;\n            while(destLevel < levelCnt && levelCoords[destLevel] < candidateCoord){\n                destLevel += 1;\n            }\n        }\n        // if adding to an existing level, find where to insert\n        var destLateral = -1;\n        if (destLevel < levelCnt && levelCoords[destLevel] === candidateCoord) {\n            destLateral = binarySearch(entriesByLevel[destLevel], newEntry.span.end, getEntrySpanEnd)[0];\n        }\n        return {\n            touchingLevel: touchingLevel,\n            touchingLateral: touchingLateral,\n            touchingEntry: touchingEntry,\n            stackCnt: stackCnt,\n            levelCoord: candidateCoord,\n            level: destLevel,\n            lateral: destLateral\n        };\n    };\n    // sorted by levelCoord (lowest to highest)\n    SegHierarchy1.prototype.toRects = function() {\n        var _a = this, entriesByLevel = _a.entriesByLevel, levelCoords = _a.levelCoords;\n        var levelCnt = entriesByLevel.length;\n        var rects = [];\n        for(var level = 0; level < levelCnt; level += 1){\n            var entries = entriesByLevel[level];\n            var levelCoord = levelCoords[level];\n            for(var _i = 0, entries_1 = entries; _i < entries_1.length; _i++){\n                var entry = entries_1[_i];\n                rects.push(tslib.__assign(tslib.__assign({}, entry), {\n                    levelCoord: levelCoord\n                }));\n            }\n        }\n        return rects;\n    };\n    return SegHierarchy1;\n}();\nfunction getEntrySpanEnd(entry) {\n    return entry.span.end;\n}\nfunction buildEntryKey(entry) {\n    return entry.index + \":\" + entry.span.start;\n}\n// returns groups with entries sorted by input order\nfunction groupIntersectingEntries(entries) {\n    var merges = [];\n    for(var _i = 0, entries_2 = entries; _i < entries_2.length; _i++){\n        var entry = entries_2[_i];\n        var filteredMerges = [];\n        var hungryMerge = {\n            span: entry.span,\n            entries: [\n                entry\n            ]\n        };\n        for(var _a = 0, merges_1 = merges; _a < merges_1.length; _a++){\n            var merge = merges_1[_a];\n            if (intersectSpans(merge.span, hungryMerge.span)) {\n                hungryMerge = {\n                    entries: merge.entries.concat(hungryMerge.entries),\n                    span: joinSpans(merge.span, hungryMerge.span)\n                };\n            } else {\n                filteredMerges.push(merge);\n            }\n        }\n        filteredMerges.push(hungryMerge);\n        merges = filteredMerges;\n    }\n    return merges;\n}\nfunction joinSpans(span0, span1) {\n    return {\n        start: Math.min(span0.start, span1.start),\n        end: Math.max(span0.end, span1.end)\n    };\n}\nfunction intersectSpans(span0, span1) {\n    var start = Math.max(span0.start, span1.start);\n    var end = Math.min(span0.end, span1.end);\n    if (start < end) {\n        return {\n            start: start,\n            end: end\n        };\n    }\n    return null;\n}\n// general util\n// ---------------------------------------------------------------------------------------------------------------------\nfunction insertAt(arr, index, item) {\n    arr.splice(index, 0, item);\n}\nfunction binarySearch(a, searchVal, getItemVal) {\n    var startIndex = 0;\n    var endIndex = a.length; // exclusive\n    if (!endIndex || searchVal < getItemVal(a[startIndex])) {\n        return [\n            0,\n            0\n        ];\n    }\n    if (searchVal > getItemVal(a[endIndex - 1])) {\n        return [\n            endIndex,\n            0\n        ];\n    }\n    while(startIndex < endIndex){\n        var middleIndex = Math.floor(startIndex + (endIndex - startIndex) / 2);\n        var middleVal = getItemVal(a[middleIndex]);\n        if (searchVal < middleVal) {\n            endIndex = middleIndex;\n        } else if (searchVal > middleVal) {\n            startIndex = middleIndex + 1;\n        } else {\n            return [\n                middleIndex,\n                1\n            ];\n        }\n    }\n    return [\n        startIndex,\n        0\n    ];\n}\nvar Interaction = /** @class */ function() {\n    function Interaction1(settings) {\n        this.component = settings.component;\n        this.isHitComboAllowed = settings.isHitComboAllowed || null;\n    }\n    Interaction1.prototype.destroy = function() {};\n    return Interaction1;\n}();\nfunction parseInteractionSettings(component, input) {\n    return {\n        component: component,\n        el: input.el,\n        useEventCenter: input.useEventCenter != null ? input.useEventCenter : true,\n        isHitComboAllowed: input.isHitComboAllowed || null\n    };\n}\nfunction interactionSettingsToStore(settings) {\n    var _a;\n    return _a = {}, _a[settings.component.uid] = settings, _a;\n}\n// global state\nvar interactionSettingsStore = {};\n/*\nAn abstraction for a dragging interaction originating on an event.\nDoes higher-level things than PointerDragger, such as possibly:\n- a \"mirror\" that moves with the pointer\n- a minimum number of pixels or other criteria for a true drag to begin\n\nsubclasses must emit:\n- pointerdown\n- dragstart\n- dragmove\n- pointerup\n- dragend\n*/ var ElementDragging = /** @class */ function() {\n    function ElementDragging1(el, selector) {\n        this.emitter = new Emitter();\n    }\n    ElementDragging1.prototype.destroy = function() {};\n    ElementDragging1.prototype.setMirrorIsVisible = function(bool) {\n    // optional if subclass doesn't want to support a mirror\n    };\n    ElementDragging1.prototype.setMirrorNeedsRevert = function(bool) {\n    // optional if subclass doesn't want to support a mirror\n    };\n    ElementDragging1.prototype.setAutoScrollEnabled = function(bool) {\n    // optional\n    };\n    return ElementDragging1;\n}();\n// TODO: get rid of this in favor of options system,\n// tho it's really easy to access this globally rather than pass thru options.\nvar config = {};\n/*\nInformation about what will happen when an external element is dragged-and-dropped\nonto a calendar. Contains information for creating an event.\n*/ var DRAG_META_REFINERS = {\n    startTime: createDuration,\n    duration: createDuration,\n    create: Boolean,\n    sourceId: String\n};\nfunction parseDragMeta(raw) {\n    var _a = refineProps(raw, DRAG_META_REFINERS), refined = _a.refined, extra = _a.extra;\n    return {\n        startTime: refined.startTime || null,\n        duration: refined.duration || null,\n        create: refined.create != null ? refined.create : true,\n        sourceId: refined.sourceId,\n        leftoverProps: extra\n    };\n}\nvar ToolbarSection = /** @class */ function(_super) {\n    tslib.__extends(ToolbarSection1, _super);\n    function ToolbarSection1() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ToolbarSection1.prototype.render = function() {\n        var _this = this;\n        var children = this.props.widgetGroups.map(function(widgetGroup) {\n            return _this.renderWidgetGroup(widgetGroup);\n        });\n        return vdom_cjs.createElement.apply(void 0, tslib.__spreadArray([\n            \"div\",\n            {\n                className: \"fc-toolbar-chunk\"\n            }\n        ], children));\n    };\n    ToolbarSection1.prototype.renderWidgetGroup = function(widgetGroup) {\n        var props = this.props;\n        var theme = this.context.theme;\n        var children = [];\n        var isOnlyButtons = true;\n        for(var _i = 0, widgetGroup_1 = widgetGroup; _i < widgetGroup_1.length; _i++){\n            var widget = widgetGroup_1[_i];\n            var buttonName = widget.buttonName, buttonClick = widget.buttonClick, buttonText = widget.buttonText, buttonIcon = widget.buttonIcon, buttonHint = widget.buttonHint;\n            if (buttonName === \"title\") {\n                isOnlyButtons = false;\n                children.push(vdom_cjs.createElement(\"h2\", {\n                    className: \"fc-toolbar-title\",\n                    id: props.titleId\n                }, props.title));\n            } else {\n                var isPressed = buttonName === props.activeButton;\n                var isDisabled = !props.isTodayEnabled && buttonName === \"today\" || !props.isPrevEnabled && buttonName === \"prev\" || !props.isNextEnabled && buttonName === \"next\";\n                var buttonClasses = [\n                    \"fc-\" + buttonName + \"-button\",\n                    theme.getClass(\"button\")\n                ];\n                if (isPressed) {\n                    buttonClasses.push(theme.getClass(\"buttonActive\"));\n                }\n                children.push(vdom_cjs.createElement(\"button\", {\n                    type: \"button\",\n                    title: typeof buttonHint === \"function\" ? buttonHint(props.navUnit) : buttonHint,\n                    disabled: isDisabled,\n                    \"aria-pressed\": isPressed,\n                    className: buttonClasses.join(\" \"),\n                    onClick: buttonClick\n                }, buttonText || (buttonIcon ? vdom_cjs.createElement(\"span\", {\n                    className: buttonIcon\n                }) : \"\")));\n            }\n        }\n        if (children.length > 1) {\n            var groupClassName = isOnlyButtons && theme.getClass(\"buttonGroup\") || \"\";\n            return vdom_cjs.createElement.apply(void 0, tslib.__spreadArray([\n                \"div\",\n                {\n                    className: groupClassName\n                }\n            ], children));\n        }\n        return children[0];\n    };\n    return ToolbarSection1;\n}(BaseComponent);\nvar Toolbar = /** @class */ function(_super) {\n    tslib.__extends(Toolbar1, _super);\n    function Toolbar1() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Toolbar1.prototype.render = function() {\n        var _a = this.props, model = _a.model, extraClassName = _a.extraClassName;\n        var forceLtr = false;\n        var startContent;\n        var endContent;\n        var sectionWidgets = model.sectionWidgets;\n        var centerContent = sectionWidgets.center;\n        if (sectionWidgets.left) {\n            forceLtr = true;\n            startContent = sectionWidgets.left;\n        } else {\n            startContent = sectionWidgets.start;\n        }\n        if (sectionWidgets.right) {\n            forceLtr = true;\n            endContent = sectionWidgets.right;\n        } else {\n            endContent = sectionWidgets.end;\n        }\n        var classNames = [\n            extraClassName || \"\",\n            \"fc-toolbar\",\n            forceLtr ? \"fc-toolbar-ltr\" : \"\", \n        ];\n        return vdom_cjs.createElement(\"div\", {\n            className: classNames.join(\" \")\n        }, this.renderSection(\"start\", startContent || []), this.renderSection(\"center\", centerContent || []), this.renderSection(\"end\", endContent || []));\n    };\n    Toolbar1.prototype.renderSection = function(key, widgetGroups) {\n        var props = this.props;\n        return vdom_cjs.createElement(ToolbarSection, {\n            key: key,\n            widgetGroups: widgetGroups,\n            title: props.title,\n            navUnit: props.navUnit,\n            activeButton: props.activeButton,\n            isTodayEnabled: props.isTodayEnabled,\n            isPrevEnabled: props.isPrevEnabled,\n            isNextEnabled: props.isNextEnabled,\n            titleId: props.titleId\n        });\n    };\n    return Toolbar1;\n}(BaseComponent);\n// TODO: do function component?\nvar ViewContainer = /** @class */ function(_super) {\n    tslib.__extends(ViewContainer1, _super);\n    function ViewContainer1() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            availableWidth: null\n        };\n        _this.handleEl = function(el) {\n            _this.el = el;\n            setRef(_this.props.elRef, el);\n            _this.updateAvailableWidth();\n        };\n        _this.handleResize = function() {\n            _this.updateAvailableWidth();\n        };\n        return _this;\n    }\n    ViewContainer1.prototype.render = function() {\n        var _a = this, props = _a.props, state = _a.state;\n        var aspectRatio = props.aspectRatio;\n        var classNames = [\n            \"fc-view-harness\",\n            aspectRatio || props.liquid || props.height ? \"fc-view-harness-active\" // harness controls the height\n             : \"fc-view-harness-passive\"\n        ];\n        var height = \"\";\n        var paddingBottom = \"\";\n        if (aspectRatio) {\n            if (state.availableWidth !== null) {\n                height = state.availableWidth / aspectRatio;\n            } else {\n                // while waiting to know availableWidth, we can't set height to *zero*\n                // because will cause lots of unnecessary scrollbars within scrollgrid.\n                // BETTER: don't start rendering ANYTHING yet until we know container width\n                // NOTE: why not always use paddingBottom? Causes height oscillation (issue 5606)\n                paddingBottom = 1 / aspectRatio * 100 + \"%\";\n            }\n        } else {\n            height = props.height || \"\";\n        }\n        return vdom_cjs.createElement(\"div\", {\n            \"aria-labelledby\": props.labeledById,\n            ref: this.handleEl,\n            className: classNames.join(\" \"),\n            style: {\n                height: height,\n                paddingBottom: paddingBottom\n            }\n        }, props.children);\n    };\n    ViewContainer1.prototype.componentDidMount = function() {\n        this.context.addResizeHandler(this.handleResize);\n    };\n    ViewContainer1.prototype.componentWillUnmount = function() {\n        this.context.removeResizeHandler(this.handleResize);\n    };\n    ViewContainer1.prototype.updateAvailableWidth = function() {\n        if (this.el && this.props.aspectRatio // aspectRatio is the only height setting that needs availableWidth\n        ) {\n            this.setState({\n                availableWidth: this.el.offsetWidth\n            });\n        }\n    };\n    return ViewContainer1;\n}(BaseComponent);\n/*\nDetects when the user clicks on an event within a DateComponent\n*/ var EventClicking = /** @class */ function(_super) {\n    tslib.__extends(EventClicking1, _super);\n    function EventClicking1(settings) {\n        var _this = _super.call(this, settings) || this;\n        _this.handleSegClick = function(ev, segEl) {\n            var component = _this.component;\n            var context = component.context;\n            var seg = getElSeg(segEl);\n            if (seg && component.isValidSegDownEl(ev.target)) {\n                // our way to simulate a link click for elements that can't be <a> tags\n                // grab before trigger fired in case trigger trashes DOM thru rerendering\n                var hasUrlContainer = elementClosest(ev.target, \".fc-event-forced-url\");\n                var url = hasUrlContainer ? hasUrlContainer.querySelector(\"a[href]\").href : \"\";\n                context.emitter.trigger(\"eventClick\", {\n                    el: segEl,\n                    event: new EventApi(component.context, seg.eventRange.def, seg.eventRange.instance),\n                    jsEvent: ev,\n                    view: context.viewApi\n                });\n                if (url && !ev.defaultPrevented) {\n                    window.location.href = url;\n                }\n            }\n        };\n        _this.destroy = listenBySelector(settings.el, \"click\", \".fc-event\", _this.handleSegClick);\n        return _this;\n    }\n    return EventClicking1;\n}(Interaction);\n/*\nTriggers events and adds/removes core classNames when the user's pointer\nenters/leaves event-elements of a component.\n*/ var EventHovering = /** @class */ function(_super) {\n    tslib.__extends(EventHovering1, _super);\n    function EventHovering1(settings) {\n        var _this = _super.call(this, settings) || this;\n        // for simulating an eventMouseLeave when the event el is destroyed while mouse is over it\n        _this.handleEventElRemove = function(el) {\n            if (el === _this.currentSegEl) {\n                _this.handleSegLeave(null, _this.currentSegEl);\n            }\n        };\n        _this.handleSegEnter = function(ev, segEl) {\n            if (getElSeg(segEl)) {\n                _this.currentSegEl = segEl;\n                _this.triggerEvent(\"eventMouseEnter\", ev, segEl);\n            }\n        };\n        _this.handleSegLeave = function(ev, segEl) {\n            if (_this.currentSegEl) {\n                _this.currentSegEl = null;\n                _this.triggerEvent(\"eventMouseLeave\", ev, segEl);\n            }\n        };\n        _this.removeHoverListeners = listenToHoverBySelector(settings.el, \".fc-event\", _this.handleSegEnter, _this.handleSegLeave);\n        return _this;\n    }\n    EventHovering1.prototype.destroy = function() {\n        this.removeHoverListeners();\n    };\n    EventHovering1.prototype.triggerEvent = function(publicEvName, ev, segEl) {\n        var component = this.component;\n        var context = component.context;\n        var seg = getElSeg(segEl);\n        if (!ev || component.isValidSegDownEl(ev.target)) {\n            context.emitter.trigger(publicEvName, {\n                el: segEl,\n                event: new EventApi(context, seg.eventRange.def, seg.eventRange.instance),\n                jsEvent: ev,\n                view: context.viewApi\n            });\n        }\n    };\n    return EventHovering1;\n}(Interaction);\nvar CalendarContent = /** @class */ function(_super) {\n    tslib.__extends(CalendarContent1, _super);\n    function CalendarContent1() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.buildViewContext = memoize(buildViewContext);\n        _this.buildViewPropTransformers = memoize(buildViewPropTransformers);\n        _this.buildToolbarProps = memoize(buildToolbarProps);\n        _this.headerRef = vdom_cjs.createRef();\n        _this.footerRef = vdom_cjs.createRef();\n        _this.interactionsStore = {};\n        // eslint-disable-next-line\n        _this.state = {\n            viewLabelId: getUniqueDomId()\n        };\n        // Component Registration\n        // -----------------------------------------------------------------------------------------------------------------\n        _this.registerInteractiveComponent = function(component, settingsInput) {\n            var settings = parseInteractionSettings(component, settingsInput);\n            var DEFAULT_INTERACTIONS = [\n                EventClicking,\n                EventHovering, \n            ];\n            var interactionClasses = DEFAULT_INTERACTIONS.concat(_this.props.pluginHooks.componentInteractions);\n            var interactions = interactionClasses.map(function(TheInteractionClass) {\n                return new TheInteractionClass(settings);\n            });\n            _this.interactionsStore[component.uid] = interactions;\n            interactionSettingsStore[component.uid] = settings;\n        };\n        _this.unregisterInteractiveComponent = function(component) {\n            var listeners = _this.interactionsStore[component.uid];\n            if (listeners) {\n                for(var _i = 0, listeners_1 = listeners; _i < listeners_1.length; _i++){\n                    var listener = listeners_1[_i];\n                    listener.destroy();\n                }\n                delete _this.interactionsStore[component.uid];\n            }\n            delete interactionSettingsStore[component.uid];\n        };\n        // Resizing\n        // -----------------------------------------------------------------------------------------------------------------\n        _this.resizeRunner = new DelayedRunner(function() {\n            _this.props.emitter.trigger(\"_resize\", true); // should window resizes be considered \"forced\" ?\n            _this.props.emitter.trigger(\"windowResize\", {\n                view: _this.props.viewApi\n            });\n        });\n        _this.handleWindowResize = function(ev) {\n            var options = _this.props.options;\n            if (options.handleWindowResize && ev.target === window // avoid jqui events\n            ) {\n                _this.resizeRunner.request(options.windowResizeDelay);\n            }\n        };\n        return _this;\n    }\n    /*\n    renders INSIDE of an outer div\n    */ CalendarContent1.prototype.render = function() {\n        var props = this.props;\n        var toolbarConfig = props.toolbarConfig, options = props.options;\n        var toolbarProps = this.buildToolbarProps(props.viewSpec, props.dateProfile, props.dateProfileGenerator, props.currentDate, getNow(props.options.now, props.dateEnv), props.viewTitle);\n        var viewVGrow = false;\n        var viewHeight = \"\";\n        var viewAspectRatio;\n        if (props.isHeightAuto || props.forPrint) {\n            viewHeight = \"\";\n        } else if (options.height != null) {\n            viewVGrow = true;\n        } else if (options.contentHeight != null) {\n            viewHeight = options.contentHeight;\n        } else {\n            viewAspectRatio = Math.max(options.aspectRatio, 0.5); // prevent from getting too tall\n        }\n        var viewContext = this.buildViewContext(props.viewSpec, props.viewApi, props.options, props.dateProfileGenerator, props.dateEnv, props.theme, props.pluginHooks, props.dispatch, props.getCurrentData, props.emitter, props.calendarApi, this.registerInteractiveComponent, this.unregisterInteractiveComponent);\n        var viewLabelId = toolbarConfig.header && toolbarConfig.header.hasTitle ? this.state.viewLabelId : \"\";\n        return vdom_cjs.createElement(ViewContextType.Provider, {\n            value: viewContext\n        }, toolbarConfig.header && vdom_cjs.createElement(Toolbar, tslib.__assign({\n            ref: this.headerRef,\n            extraClassName: \"fc-header-toolbar\",\n            model: toolbarConfig.header,\n            titleId: viewLabelId\n        }, toolbarProps)), vdom_cjs.createElement(ViewContainer, {\n            liquid: viewVGrow,\n            height: viewHeight,\n            aspectRatio: viewAspectRatio,\n            labeledById: viewLabelId\n        }, this.renderView(props), this.buildAppendContent()), toolbarConfig.footer && vdom_cjs.createElement(Toolbar, tslib.__assign({\n            ref: this.footerRef,\n            extraClassName: \"fc-footer-toolbar\",\n            model: toolbarConfig.footer,\n            titleId: \"\"\n        }, toolbarProps)));\n    };\n    CalendarContent1.prototype.componentDidMount = function() {\n        var props = this.props;\n        this.calendarInteractions = props.pluginHooks.calendarInteractions.map(function(CalendarInteractionClass) {\n            return new CalendarInteractionClass(props);\n        });\n        window.addEventListener(\"resize\", this.handleWindowResize);\n        var propSetHandlers = props.pluginHooks.propSetHandlers;\n        for(var propName in propSetHandlers){\n            propSetHandlers[propName](props[propName], props);\n        }\n    };\n    CalendarContent1.prototype.componentDidUpdate = function(prevProps) {\n        var props = this.props;\n        var propSetHandlers = props.pluginHooks.propSetHandlers;\n        for(var propName in propSetHandlers){\n            if (props[propName] !== prevProps[propName]) {\n                propSetHandlers[propName](props[propName], props);\n            }\n        }\n    };\n    CalendarContent1.prototype.componentWillUnmount = function() {\n        window.removeEventListener(\"resize\", this.handleWindowResize);\n        this.resizeRunner.clear();\n        for(var _i = 0, _a = this.calendarInteractions; _i < _a.length; _i++){\n            var interaction = _a[_i];\n            interaction.destroy();\n        }\n        this.props.emitter.trigger(\"_unmount\");\n    };\n    CalendarContent1.prototype.buildAppendContent = function() {\n        var props = this.props;\n        var children = props.pluginHooks.viewContainerAppends.map(function(buildAppendContent) {\n            return buildAppendContent(props);\n        });\n        return vdom_cjs.createElement.apply(void 0, tslib.__spreadArray([\n            vdom_cjs.Fragment,\n            {}\n        ], children));\n    };\n    CalendarContent1.prototype.renderView = function(props) {\n        var pluginHooks = props.pluginHooks;\n        var viewSpec = props.viewSpec;\n        var viewProps = {\n            dateProfile: props.dateProfile,\n            businessHours: props.businessHours,\n            eventStore: props.renderableEventStore,\n            eventUiBases: props.eventUiBases,\n            dateSelection: props.dateSelection,\n            eventSelection: props.eventSelection,\n            eventDrag: props.eventDrag,\n            eventResize: props.eventResize,\n            isHeightAuto: props.isHeightAuto,\n            forPrint: props.forPrint\n        };\n        var transformers = this.buildViewPropTransformers(pluginHooks.viewPropsTransformers);\n        for(var _i = 0, transformers_1 = transformers; _i < transformers_1.length; _i++){\n            var transformer = transformers_1[_i];\n            tslib.__assign(viewProps, transformer.transform(viewProps, props));\n        }\n        var ViewComponent = viewSpec.component;\n        return vdom_cjs.createElement(ViewComponent, tslib.__assign({}, viewProps));\n    };\n    return CalendarContent1;\n}(PureComponent);\nfunction buildToolbarProps(viewSpec, dateProfile, dateProfileGenerator, currentDate, now, title) {\n    // don't force any date-profiles to valid date profiles (the `false`) so that we can tell if it's invalid\n    var todayInfo = dateProfileGenerator.build(now, undefined, false); // TODO: need `undefined` or else INFINITE LOOP for some reason\n    var prevInfo = dateProfileGenerator.buildPrev(dateProfile, currentDate, false);\n    var nextInfo = dateProfileGenerator.buildNext(dateProfile, currentDate, false);\n    return {\n        title: title,\n        activeButton: viewSpec.type,\n        navUnit: viewSpec.singleUnit,\n        isTodayEnabled: todayInfo.isValid && !rangeContainsMarker(dateProfile.currentRange, now),\n        isPrevEnabled: prevInfo.isValid,\n        isNextEnabled: nextInfo.isValid\n    };\n}\n// Plugin\n// -----------------------------------------------------------------------------------------------------------------\nfunction buildViewPropTransformers(theClasses) {\n    return theClasses.map(function(TheClass) {\n        return new TheClass();\n    });\n}\nvar CalendarRoot = /** @class */ function(_super) {\n    tslib.__extends(CalendarRoot1, _super);\n    function CalendarRoot1() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            forPrint: false\n        };\n        _this.handleBeforePrint = function() {\n            _this.setState({\n                forPrint: true\n            });\n        };\n        _this.handleAfterPrint = function() {\n            _this.setState({\n                forPrint: false\n            });\n        };\n        return _this;\n    }\n    CalendarRoot1.prototype.render = function() {\n        var props = this.props;\n        var options = props.options;\n        var forPrint = this.state.forPrint;\n        var isHeightAuto = forPrint || options.height === \"auto\" || options.contentHeight === \"auto\";\n        var height = !isHeightAuto && options.height != null ? options.height : \"\";\n        var classNames = [\n            \"fc\",\n            forPrint ? \"fc-media-print\" : \"fc-media-screen\",\n            \"fc-direction-\" + options.direction,\n            props.theme.getClass(\"root\"), \n        ];\n        if (!getCanVGrowWithinCell()) {\n            classNames.push(\"fc-liquid-hack\");\n        }\n        return props.children(classNames, height, isHeightAuto, forPrint);\n    };\n    CalendarRoot1.prototype.componentDidMount = function() {\n        var emitter = this.props.emitter;\n        emitter.on(\"_beforeprint\", this.handleBeforePrint);\n        emitter.on(\"_afterprint\", this.handleAfterPrint);\n    };\n    CalendarRoot1.prototype.componentWillUnmount = function() {\n        var emitter = this.props.emitter;\n        emitter.off(\"_beforeprint\", this.handleBeforePrint);\n        emitter.off(\"_afterprint\", this.handleAfterPrint);\n    };\n    return CalendarRoot1;\n}(BaseComponent);\n// Computes a default column header formatting string if `colFormat` is not explicitly defined\nfunction computeFallbackHeaderFormat(datesRepDistinctDays, dayCnt) {\n    // if more than one week row, or if there are a lot of columns with not much space,\n    // put just the day numbers will be in each cell\n    if (!datesRepDistinctDays || dayCnt > 10) {\n        return createFormatter({\n            weekday: \"short\"\n        }); // \"Sat\"\n    }\n    if (dayCnt > 1) {\n        return createFormatter({\n            weekday: \"short\",\n            month: \"numeric\",\n            day: \"numeric\",\n            omitCommas: true\n        }); // \"Sat 11/12\"\n    }\n    return createFormatter({\n        weekday: \"long\"\n    }); // \"Saturday\"\n}\nvar CLASS_NAME = \"fc-col-header-cell\"; // do the cushion too? no\nfunction renderInner$1(hookProps) {\n    return hookProps.text;\n}\nvar TableDateCell = /** @class */ function(_super) {\n    tslib.__extends(TableDateCell1, _super);\n    function TableDateCell1() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    TableDateCell1.prototype.render = function() {\n        var _a = this.context, dateEnv = _a.dateEnv, options = _a.options, theme = _a.theme, viewApi = _a.viewApi;\n        var props = this.props;\n        var date = props.date, dateProfile = props.dateProfile;\n        var dayMeta = getDateMeta(date, props.todayRange, null, dateProfile);\n        var classNames = [\n            CLASS_NAME\n        ].concat(getDayClassNames(dayMeta, theme));\n        var text = dateEnv.format(date, props.dayHeaderFormat);\n        // if colCnt is 1, we are already in a day-view and don't need a navlink\n        var navLinkAttrs = !dayMeta.isDisabled && props.colCnt > 1 ? buildNavLinkAttrs(this.context, date) : {};\n        var hookProps = tslib.__assign(tslib.__assign(tslib.__assign({\n            date: dateEnv.toDate(date),\n            view: viewApi\n        }, props.extraHookProps), {\n            text: text\n        }), dayMeta);\n        return vdom_cjs.createElement(RenderHook, {\n            hookProps: hookProps,\n            classNames: options.dayHeaderClassNames,\n            content: options.dayHeaderContent,\n            defaultContent: renderInner$1,\n            didMount: options.dayHeaderDidMount,\n            willUnmount: options.dayHeaderWillUnmount\n        }, function(rootElRef, customClassNames, innerElRef, innerContent) {\n            return vdom_cjs.createElement(\"th\", tslib.__assign({\n                ref: rootElRef,\n                role: \"columnheader\",\n                className: classNames.concat(customClassNames).join(\" \"),\n                \"data-date\": !dayMeta.isDisabled ? formatDayString(date) : undefined,\n                colSpan: props.colSpan\n            }, props.extraDataAttrs), vdom_cjs.createElement(\"div\", {\n                className: \"fc-scrollgrid-sync-inner\"\n            }, !dayMeta.isDisabled && vdom_cjs.createElement(\"a\", tslib.__assign({\n                ref: innerElRef,\n                className: [\n                    \"fc-col-header-cell-cushion\",\n                    props.isSticky ? \"fc-sticky\" : \"\", \n                ].join(\" \")\n            }, navLinkAttrs), innerContent)));\n        });\n    };\n    return TableDateCell1;\n}(BaseComponent);\nvar WEEKDAY_FORMAT = createFormatter({\n    weekday: \"long\"\n});\nvar TableDowCell = /** @class */ function(_super) {\n    tslib.__extends(TableDowCell1, _super);\n    function TableDowCell1() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    TableDowCell1.prototype.render = function() {\n        var props = this.props;\n        var _a = this.context, dateEnv = _a.dateEnv, theme = _a.theme, viewApi = _a.viewApi, options = _a.options;\n        var date = addDays(new Date(259200000), props.dow); // start with Sun, 04 Jan 1970 00:00:00 GMT\n        var dateMeta = {\n            dow: props.dow,\n            isDisabled: false,\n            isFuture: false,\n            isPast: false,\n            isToday: false,\n            isOther: false\n        };\n        var classNames = [\n            CLASS_NAME\n        ].concat(getDayClassNames(dateMeta, theme), props.extraClassNames || []);\n        var text = dateEnv.format(date, props.dayHeaderFormat);\n        var hookProps = tslib.__assign(tslib.__assign(tslib.__assign(tslib.__assign({\n            date: date\n        }, dateMeta), {\n            view: viewApi\n        }), props.extraHookProps), {\n            text: text\n        });\n        return vdom_cjs.createElement(RenderHook, {\n            hookProps: hookProps,\n            classNames: options.dayHeaderClassNames,\n            content: options.dayHeaderContent,\n            defaultContent: renderInner$1,\n            didMount: options.dayHeaderDidMount,\n            willUnmount: options.dayHeaderWillUnmount\n        }, function(rootElRef, customClassNames, innerElRef, innerContent) {\n            return vdom_cjs.createElement(\"th\", tslib.__assign({\n                ref: rootElRef,\n                role: \"columnheader\",\n                className: classNames.concat(customClassNames).join(\" \"),\n                colSpan: props.colSpan\n            }, props.extraDataAttrs), vdom_cjs.createElement(\"div\", {\n                className: \"fc-scrollgrid-sync-inner\"\n            }, vdom_cjs.createElement(\"a\", {\n                \"aria-label\": dateEnv.format(date, WEEKDAY_FORMAT),\n                className: [\n                    \"fc-col-header-cell-cushion\",\n                    props.isSticky ? \"fc-sticky\" : \"\", \n                ].join(\" \"),\n                ref: innerElRef\n            }, innerContent)));\n        });\n    };\n    return TableDowCell1;\n}(BaseComponent);\nvar NowTimer = /** @class */ function(_super) {\n    tslib.__extends(NowTimer1, _super);\n    function NowTimer1(props, context) {\n        var _this = _super.call(this, props, context) || this;\n        _this.initialNowDate = getNow(context.options.now, context.dateEnv);\n        _this.initialNowQueriedMs = new Date().valueOf();\n        _this.state = _this.computeTiming().currentState;\n        return _this;\n    }\n    NowTimer1.prototype.render = function() {\n        var _a = this, props = _a.props, state = _a.state;\n        return props.children(state.nowDate, state.todayRange);\n    };\n    NowTimer1.prototype.componentDidMount = function() {\n        this.setTimeout();\n    };\n    NowTimer1.prototype.componentDidUpdate = function(prevProps) {\n        if (prevProps.unit !== this.props.unit) {\n            this.clearTimeout();\n            this.setTimeout();\n        }\n    };\n    NowTimer1.prototype.componentWillUnmount = function() {\n        this.clearTimeout();\n    };\n    NowTimer1.prototype.computeTiming = function() {\n        var _a = this, props = _a.props, context = _a.context;\n        var unroundedNow = addMs(this.initialNowDate, new Date().valueOf() - this.initialNowQueriedMs);\n        var currentUnitStart = context.dateEnv.startOf(unroundedNow, props.unit);\n        var nextUnitStart = context.dateEnv.add(currentUnitStart, createDuration(1, props.unit));\n        var waitMs = nextUnitStart.valueOf() - unroundedNow.valueOf();\n        // there is a max setTimeout ms value (https://stackoverflow.com/a/3468650/96342)\n        // ensure no longer than a day\n        waitMs = Math.min(1000 * 60 * 60 * 24, waitMs);\n        return {\n            currentState: {\n                nowDate: currentUnitStart,\n                todayRange: buildDayRange(currentUnitStart)\n            },\n            nextState: {\n                nowDate: nextUnitStart,\n                todayRange: buildDayRange(nextUnitStart)\n            },\n            waitMs: waitMs\n        };\n    };\n    NowTimer1.prototype.setTimeout = function() {\n        var _this = this;\n        var _a = this.computeTiming(), nextState = _a.nextState, waitMs = _a.waitMs;\n        this.timeoutId = setTimeout(function() {\n            _this.setState(nextState, function() {\n                _this.setTimeout();\n            });\n        }, waitMs);\n    };\n    NowTimer1.prototype.clearTimeout = function() {\n        if (this.timeoutId) {\n            clearTimeout(this.timeoutId);\n        }\n    };\n    NowTimer1.contextType = ViewContextType;\n    return NowTimer1;\n}(vdom_cjs.Component);\nfunction buildDayRange(date) {\n    var start = startOfDay(date);\n    var end = addDays(start, 1);\n    return {\n        start: start,\n        end: end\n    };\n}\nvar DayHeader = /** @class */ function(_super) {\n    tslib.__extends(DayHeader1, _super);\n    function DayHeader1() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.createDayHeaderFormatter = memoize(createDayHeaderFormatter);\n        return _this;\n    }\n    DayHeader1.prototype.render = function() {\n        var context = this.context;\n        var _a = this.props, dates = _a.dates, dateProfile = _a.dateProfile, datesRepDistinctDays = _a.datesRepDistinctDays, renderIntro = _a.renderIntro;\n        var dayHeaderFormat = this.createDayHeaderFormatter(context.options.dayHeaderFormat, datesRepDistinctDays, dates.length);\n        return vdom_cjs.createElement(NowTimer, {\n            unit: \"day\"\n        }, function(nowDate, todayRange) {\n            return vdom_cjs.createElement(\"tr\", {\n                role: \"row\"\n            }, renderIntro && renderIntro(\"day\"), dates.map(function(date) {\n                return datesRepDistinctDays ? vdom_cjs.createElement(TableDateCell, {\n                    key: date.toISOString(),\n                    date: date,\n                    dateProfile: dateProfile,\n                    todayRange: todayRange,\n                    colCnt: dates.length,\n                    dayHeaderFormat: dayHeaderFormat\n                }) : vdom_cjs.createElement(TableDowCell, {\n                    key: date.getUTCDay(),\n                    dow: date.getUTCDay(),\n                    dayHeaderFormat: dayHeaderFormat\n                });\n            }));\n        });\n    };\n    return DayHeader1;\n}(BaseComponent);\nfunction createDayHeaderFormatter(explicitFormat, datesRepDistinctDays, dateCnt) {\n    return explicitFormat || computeFallbackHeaderFormat(datesRepDistinctDays, dateCnt);\n}\nvar DaySeriesModel = /** @class */ function() {\n    function DaySeriesModel1(range, dateProfileGenerator) {\n        var date = range.start;\n        var end = range.end;\n        var indices = [];\n        var dates = [];\n        var dayIndex = -1;\n        while(date < end){\n            if (dateProfileGenerator.isHiddenDay(date)) {\n                indices.push(dayIndex + 0.5); // mark that it's between indices\n            } else {\n                dayIndex += 1;\n                indices.push(dayIndex);\n                dates.push(date);\n            }\n            date = addDays(date, 1);\n        }\n        this.dates = dates;\n        this.indices = indices;\n        this.cnt = dates.length;\n    }\n    DaySeriesModel1.prototype.sliceRange = function(range) {\n        var firstIndex = this.getDateDayIndex(range.start); // inclusive first index\n        var lastIndex = this.getDateDayIndex(addDays(range.end, -1)); // inclusive last index\n        var clippedFirstIndex = Math.max(0, firstIndex);\n        var clippedLastIndex = Math.min(this.cnt - 1, lastIndex);\n        // deal with in-between indices\n        clippedFirstIndex = Math.ceil(clippedFirstIndex); // in-between starts round to next cell\n        clippedLastIndex = Math.floor(clippedLastIndex); // in-between ends round to prev cell\n        if (clippedFirstIndex <= clippedLastIndex) {\n            return {\n                firstIndex: clippedFirstIndex,\n                lastIndex: clippedLastIndex,\n                isStart: firstIndex === clippedFirstIndex,\n                isEnd: lastIndex === clippedLastIndex\n            };\n        }\n        return null;\n    };\n    // Given a date, returns its chronolocial cell-index from the first cell of the grid.\n    // If the date lies between cells (because of hiddenDays), returns a floating-point value between offsets.\n    // If before the first offset, returns a negative number.\n    // If after the last offset, returns an offset past the last cell offset.\n    // Only works for *start* dates of cells. Will not work for exclusive end dates for cells.\n    DaySeriesModel1.prototype.getDateDayIndex = function(date) {\n        var indices = this.indices;\n        var dayOffset = Math.floor(diffDays(this.dates[0], date));\n        if (dayOffset < 0) {\n            return indices[0] - 1;\n        }\n        if (dayOffset >= indices.length) {\n            return indices[indices.length - 1] + 1;\n        }\n        return indices[dayOffset];\n    };\n    return DaySeriesModel1;\n}();\nvar DayTableModel = /** @class */ function() {\n    function DayTableModel1(daySeries, breakOnWeeks) {\n        var dates = daySeries.dates;\n        var daysPerRow;\n        var firstDay;\n        var rowCnt;\n        if (breakOnWeeks) {\n            // count columns until the day-of-week repeats\n            firstDay = dates[0].getUTCDay();\n            for(daysPerRow = 1; daysPerRow < dates.length; daysPerRow += 1){\n                if (dates[daysPerRow].getUTCDay() === firstDay) {\n                    break;\n                }\n            }\n            rowCnt = Math.ceil(dates.length / daysPerRow);\n        } else {\n            rowCnt = 1;\n            daysPerRow = dates.length;\n        }\n        this.rowCnt = rowCnt;\n        this.colCnt = daysPerRow;\n        this.daySeries = daySeries;\n        this.cells = this.buildCells();\n        this.headerDates = this.buildHeaderDates();\n    }\n    DayTableModel1.prototype.buildCells = function() {\n        var rows = [];\n        for(var row = 0; row < this.rowCnt; row += 1){\n            var cells = [];\n            for(var col = 0; col < this.colCnt; col += 1){\n                cells.push(this.buildCell(row, col));\n            }\n            rows.push(cells);\n        }\n        return rows;\n    };\n    DayTableModel1.prototype.buildCell = function(row, col) {\n        var date = this.daySeries.dates[row * this.colCnt + col];\n        return {\n            key: date.toISOString(),\n            date: date\n        };\n    };\n    DayTableModel1.prototype.buildHeaderDates = function() {\n        var dates = [];\n        for(var col = 0; col < this.colCnt; col += 1){\n            dates.push(this.cells[0][col].date);\n        }\n        return dates;\n    };\n    DayTableModel1.prototype.sliceRange = function(range) {\n        var colCnt = this.colCnt;\n        var seriesSeg = this.daySeries.sliceRange(range);\n        var segs = [];\n        if (seriesSeg) {\n            var firstIndex = seriesSeg.firstIndex, lastIndex = seriesSeg.lastIndex;\n            var index = firstIndex;\n            while(index <= lastIndex){\n                var row = Math.floor(index / colCnt);\n                var nextIndex = Math.min((row + 1) * colCnt, lastIndex + 1);\n                segs.push({\n                    row: row,\n                    firstCol: index % colCnt,\n                    lastCol: (nextIndex - 1) % colCnt,\n                    isStart: seriesSeg.isStart && index === firstIndex,\n                    isEnd: seriesSeg.isEnd && nextIndex - 1 === lastIndex\n                });\n                index = nextIndex;\n            }\n        }\n        return segs;\n    };\n    return DayTableModel1;\n}();\nvar Slicer = /** @class */ function() {\n    function Slicer1() {\n        this.sliceBusinessHours = memoize(this._sliceBusinessHours);\n        this.sliceDateSelection = memoize(this._sliceDateSpan);\n        this.sliceEventStore = memoize(this._sliceEventStore);\n        this.sliceEventDrag = memoize(this._sliceInteraction);\n        this.sliceEventResize = memoize(this._sliceInteraction);\n        this.forceDayIfListItem = false; // hack\n    }\n    Slicer1.prototype.sliceProps = function(props, dateProfile, nextDayThreshold, context) {\n        var extraArgs = [];\n        for(var _i = 4; _i < arguments.length; _i++){\n            extraArgs[_i - 4] = arguments[_i];\n        }\n        var eventUiBases = props.eventUiBases;\n        var eventSegs = this.sliceEventStore.apply(this, tslib.__spreadArray([\n            props.eventStore,\n            eventUiBases,\n            dateProfile,\n            nextDayThreshold\n        ], extraArgs));\n        return {\n            dateSelectionSegs: this.sliceDateSelection.apply(this, tslib.__spreadArray([\n                props.dateSelection,\n                eventUiBases,\n                context\n            ], extraArgs)),\n            businessHourSegs: this.sliceBusinessHours.apply(this, tslib.__spreadArray([\n                props.businessHours,\n                dateProfile,\n                nextDayThreshold,\n                context\n            ], extraArgs)),\n            fgEventSegs: eventSegs.fg,\n            bgEventSegs: eventSegs.bg,\n            eventDrag: this.sliceEventDrag.apply(this, tslib.__spreadArray([\n                props.eventDrag,\n                eventUiBases,\n                dateProfile,\n                nextDayThreshold\n            ], extraArgs)),\n            eventResize: this.sliceEventResize.apply(this, tslib.__spreadArray([\n                props.eventResize,\n                eventUiBases,\n                dateProfile,\n                nextDayThreshold\n            ], extraArgs)),\n            eventSelection: props.eventSelection\n        }; // TODO: give interactionSegs?\n    };\n    Slicer1.prototype.sliceNowDate = function(date, context) {\n        var extraArgs = [];\n        for(var _i = 2; _i < arguments.length; _i++){\n            extraArgs[_i - 2] = arguments[_i];\n        }\n        return this._sliceDateSpan.apply(this, tslib.__spreadArray([\n            {\n                range: {\n                    start: date,\n                    end: addMs(date, 1)\n                },\n                allDay: false\n            },\n            {},\n            context\n        ], extraArgs));\n    };\n    Slicer1.prototype._sliceBusinessHours = function(businessHours, dateProfile, nextDayThreshold, context) {\n        var extraArgs = [];\n        for(var _i = 4; _i < arguments.length; _i++){\n            extraArgs[_i - 4] = arguments[_i];\n        }\n        if (!businessHours) {\n            return [];\n        }\n        return this._sliceEventStore.apply(this, tslib.__spreadArray([\n            expandRecurring(businessHours, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), context),\n            {},\n            dateProfile,\n            nextDayThreshold\n        ], extraArgs)).bg;\n    };\n    Slicer1.prototype._sliceEventStore = function(eventStore, eventUiBases, dateProfile, nextDayThreshold) {\n        var extraArgs = [];\n        for(var _i = 4; _i < arguments.length; _i++){\n            extraArgs[_i - 4] = arguments[_i];\n        }\n        if (eventStore) {\n            var rangeRes = sliceEventStore(eventStore, eventUiBases, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), nextDayThreshold);\n            return {\n                bg: this.sliceEventRanges(rangeRes.bg, extraArgs),\n                fg: this.sliceEventRanges(rangeRes.fg, extraArgs)\n            };\n        }\n        return {\n            bg: [],\n            fg: []\n        };\n    };\n    Slicer1.prototype._sliceInteraction = function(interaction, eventUiBases, dateProfile, nextDayThreshold) {\n        var extraArgs = [];\n        for(var _i = 4; _i < arguments.length; _i++){\n            extraArgs[_i - 4] = arguments[_i];\n        }\n        if (!interaction) {\n            return null;\n        }\n        var rangeRes = sliceEventStore(interaction.mutatedEvents, eventUiBases, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), nextDayThreshold);\n        return {\n            segs: this.sliceEventRanges(rangeRes.fg, extraArgs),\n            affectedInstances: interaction.affectedEvents.instances,\n            isEvent: interaction.isEvent\n        };\n    };\n    Slicer1.prototype._sliceDateSpan = function(dateSpan, eventUiBases, context) {\n        var extraArgs = [];\n        for(var _i = 3; _i < arguments.length; _i++){\n            extraArgs[_i - 3] = arguments[_i];\n        }\n        if (!dateSpan) {\n            return [];\n        }\n        var eventRange = fabricateEventRange(dateSpan, eventUiBases, context);\n        var segs = this.sliceRange.apply(this, tslib.__spreadArray([\n            dateSpan.range\n        ], extraArgs));\n        for(var _a = 0, segs_1 = segs; _a < segs_1.length; _a++){\n            var seg = segs_1[_a];\n            seg.eventRange = eventRange;\n        }\n        return segs;\n    };\n    /*\n    \"complete\" seg means it has component and eventRange\n    */ Slicer1.prototype.sliceEventRanges = function(eventRanges, extraArgs) {\n        var segs = [];\n        for(var _i = 0, eventRanges_1 = eventRanges; _i < eventRanges_1.length; _i++){\n            var eventRange = eventRanges_1[_i];\n            segs.push.apply(segs, this.sliceEventRange(eventRange, extraArgs));\n        }\n        return segs;\n    };\n    /*\n    \"complete\" seg means it has component and eventRange\n    */ Slicer1.prototype.sliceEventRange = function(eventRange, extraArgs) {\n        var dateRange = eventRange.range;\n        // hack to make multi-day events that are being force-displayed as list-items to take up only one day\n        if (this.forceDayIfListItem && eventRange.ui.display === \"list-item\") {\n            dateRange = {\n                start: dateRange.start,\n                end: addDays(dateRange.start, 1)\n            };\n        }\n        var segs = this.sliceRange.apply(this, tslib.__spreadArray([\n            dateRange\n        ], extraArgs));\n        for(var _i = 0, segs_2 = segs; _i < segs_2.length; _i++){\n            var seg = segs_2[_i];\n            seg.eventRange = eventRange;\n            seg.isStart = eventRange.isStart && seg.isStart;\n            seg.isEnd = eventRange.isEnd && seg.isEnd;\n        }\n        return segs;\n    };\n    return Slicer1;\n}();\n/*\nfor incorporating slotMinTime/slotMaxTime if appropriate\nTODO: should be part of DateProfile!\nTimelineDateProfile already does this btw\n*/ function computeActiveRange(dateProfile, isComponentAllDay) {\n    var range = dateProfile.activeRange;\n    if (isComponentAllDay) {\n        return range;\n    }\n    return {\n        start: addMs(range.start, dateProfile.slotMinTime.milliseconds),\n        end: addMs(range.end, dateProfile.slotMaxTime.milliseconds - 86400000)\n    };\n}\n// high-level segmenting-aware tester functions\n// ------------------------------------------------------------------------------------------------------------------------\nfunction isInteractionValid(interaction, dateProfile, context) {\n    var instances = interaction.mutatedEvents.instances;\n    for(var instanceId in instances){\n        if (!rangeContainsRange(dateProfile.validRange, instances[instanceId].range)) {\n            return false;\n        }\n    }\n    return isNewPropsValid({\n        eventDrag: interaction\n    }, context); // HACK: the eventDrag props is used for ALL interactions\n}\nfunction isDateSelectionValid(dateSelection, dateProfile, context) {\n    if (!rangeContainsRange(dateProfile.validRange, dateSelection.range)) {\n        return false;\n    }\n    return isNewPropsValid({\n        dateSelection: dateSelection\n    }, context);\n}\nfunction isNewPropsValid(newProps, context) {\n    var calendarState = context.getCurrentData();\n    var props = tslib.__assign({\n        businessHours: calendarState.businessHours,\n        dateSelection: \"\",\n        eventStore: calendarState.eventStore,\n        eventUiBases: calendarState.eventUiBases,\n        eventSelection: \"\",\n        eventDrag: null,\n        eventResize: null\n    }, newProps);\n    return (context.pluginHooks.isPropsValid || isPropsValid)(props, context);\n}\nfunction isPropsValid(state, context, dateSpanMeta, filterConfig) {\n    if (dateSpanMeta === void 0) {\n        dateSpanMeta = {};\n    }\n    if (state.eventDrag && !isInteractionPropsValid(state, context, dateSpanMeta, filterConfig)) {\n        return false;\n    }\n    if (state.dateSelection && !isDateSelectionPropsValid(state, context, dateSpanMeta, filterConfig)) {\n        return false;\n    }\n    return true;\n}\n// Moving Event Validation\n// ------------------------------------------------------------------------------------------------------------------------\nfunction isInteractionPropsValid(state, context, dateSpanMeta, filterConfig) {\n    var currentState = context.getCurrentData();\n    var interaction = state.eventDrag; // HACK: the eventDrag props is used for ALL interactions\n    var subjectEventStore = interaction.mutatedEvents;\n    var subjectDefs = subjectEventStore.defs;\n    var subjectInstances = subjectEventStore.instances;\n    var subjectConfigs = compileEventUis(subjectDefs, interaction.isEvent ? state.eventUiBases : {\n        \"\": currentState.selectionConfig\n    });\n    if (filterConfig) {\n        subjectConfigs = mapHash(subjectConfigs, filterConfig);\n    }\n    // exclude the subject events. TODO: exclude defs too?\n    var otherEventStore = excludeInstances(state.eventStore, interaction.affectedEvents.instances);\n    var otherDefs = otherEventStore.defs;\n    var otherInstances = otherEventStore.instances;\n    var otherConfigs = compileEventUis(otherDefs, state.eventUiBases);\n    for(var subjectInstanceId in subjectInstances){\n        var subjectInstance = subjectInstances[subjectInstanceId];\n        var subjectRange = subjectInstance.range;\n        var subjectConfig = subjectConfigs[subjectInstance.defId];\n        var subjectDef = subjectDefs[subjectInstance.defId];\n        // constraint\n        if (!allConstraintsPass(subjectConfig.constraints, subjectRange, otherEventStore, state.businessHours, context)) {\n            return false;\n        }\n        // overlap\n        var eventOverlap = context.options.eventOverlap;\n        var eventOverlapFunc = typeof eventOverlap === \"function\" ? eventOverlap : null;\n        for(var otherInstanceId in otherInstances){\n            var otherInstance = otherInstances[otherInstanceId];\n            // intersect! evaluate\n            if (rangesIntersect(subjectRange, otherInstance.range)) {\n                var otherOverlap = otherConfigs[otherInstance.defId].overlap;\n                // consider the other event's overlap. only do this if the subject event is a \"real\" event\n                if (otherOverlap === false && interaction.isEvent) {\n                    return false;\n                }\n                if (subjectConfig.overlap === false) {\n                    return false;\n                }\n                if (eventOverlapFunc && !eventOverlapFunc(new EventApi(context, otherDefs[otherInstance.defId], otherInstance), new EventApi(context, subjectDef, subjectInstance))) {\n                    return false;\n                }\n            }\n        }\n        // allow (a function)\n        var calendarEventStore = currentState.eventStore; // need global-to-calendar, not local to component (splittable)state\n        for(var _i = 0, _a = subjectConfig.allows; _i < _a.length; _i++){\n            var subjectAllow = _a[_i];\n            var subjectDateSpan = tslib.__assign(tslib.__assign({}, dateSpanMeta), {\n                range: subjectInstance.range,\n                allDay: subjectDef.allDay\n            });\n            var origDef = calendarEventStore.defs[subjectDef.defId];\n            var origInstance = calendarEventStore.instances[subjectInstanceId];\n            var eventApi = void 0;\n            if (origDef) {\n                eventApi = new EventApi(context, origDef, origInstance);\n            } else {\n                eventApi = new EventApi(context, subjectDef); // no instance, because had no dates\n            }\n            if (!subjectAllow(buildDateSpanApiWithContext(subjectDateSpan, context), eventApi)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n// Date Selection Validation\n// ------------------------------------------------------------------------------------------------------------------------\nfunction isDateSelectionPropsValid(state, context, dateSpanMeta, filterConfig) {\n    var relevantEventStore = state.eventStore;\n    var relevantDefs = relevantEventStore.defs;\n    var relevantInstances = relevantEventStore.instances;\n    var selection = state.dateSelection;\n    var selectionRange = selection.range;\n    var selectionConfig = context.getCurrentData().selectionConfig;\n    if (filterConfig) {\n        selectionConfig = filterConfig(selectionConfig);\n    }\n    // constraint\n    if (!allConstraintsPass(selectionConfig.constraints, selectionRange, relevantEventStore, state.businessHours, context)) {\n        return false;\n    }\n    // overlap\n    var selectOverlap = context.options.selectOverlap;\n    var selectOverlapFunc = typeof selectOverlap === \"function\" ? selectOverlap : null;\n    for(var relevantInstanceId in relevantInstances){\n        var relevantInstance = relevantInstances[relevantInstanceId];\n        // intersect! evaluate\n        if (rangesIntersect(selectionRange, relevantInstance.range)) {\n            if (selectionConfig.overlap === false) {\n                return false;\n            }\n            if (selectOverlapFunc && !selectOverlapFunc(new EventApi(context, relevantDefs[relevantInstance.defId], relevantInstance), null)) {\n                return false;\n            }\n        }\n    }\n    // allow (a function)\n    for(var _i = 0, _a = selectionConfig.allows; _i < _a.length; _i++){\n        var selectionAllow = _a[_i];\n        var fullDateSpan = tslib.__assign(tslib.__assign({}, dateSpanMeta), selection);\n        if (!selectionAllow(buildDateSpanApiWithContext(fullDateSpan, context), null)) {\n            return false;\n        }\n    }\n    return true;\n}\n// Constraint Utils\n// ------------------------------------------------------------------------------------------------------------------------\nfunction allConstraintsPass(constraints, subjectRange, otherEventStore, businessHoursUnexpanded, context) {\n    for(var _i = 0, constraints_1 = constraints; _i < constraints_1.length; _i++){\n        var constraint = constraints_1[_i];\n        if (!anyRangesContainRange(constraintToRanges(constraint, subjectRange, otherEventStore, businessHoursUnexpanded, context), subjectRange)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction constraintToRanges(constraint, subjectRange, otherEventStore, businessHoursUnexpanded, context) {\n    if (constraint === \"businessHours\") {\n        return eventStoreToRanges(expandRecurring(businessHoursUnexpanded, subjectRange, context));\n    }\n    if (typeof constraint === \"string\") {\n        return eventStoreToRanges(filterEventStoreDefs(otherEventStore, function(eventDef) {\n            return eventDef.groupId === constraint;\n        }));\n    }\n    if (typeof constraint === \"object\" && constraint) {\n        return eventStoreToRanges(expandRecurring(constraint, subjectRange, context));\n    }\n    return []; // if it's false\n}\n// TODO: move to event-store file?\nfunction eventStoreToRanges(eventStore) {\n    var instances = eventStore.instances;\n    var ranges = [];\n    for(var instanceId in instances){\n        ranges.push(instances[instanceId].range);\n    }\n    return ranges;\n}\n// TODO: move to geom file?\nfunction anyRangesContainRange(outerRanges, innerRange) {\n    for(var _i = 0, outerRanges_1 = outerRanges; _i < outerRanges_1.length; _i++){\n        var outerRange = outerRanges_1[_i];\n        if (rangeContainsRange(outerRange, innerRange)) {\n            return true;\n        }\n    }\n    return false;\n}\nvar VISIBLE_HIDDEN_RE = /^(visible|hidden)$/;\nvar Scroller = /** @class */ function(_super) {\n    tslib.__extends(Scroller1, _super);\n    function Scroller1() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.handleEl = function(el) {\n            _this.el = el;\n            setRef(_this.props.elRef, el);\n        };\n        return _this;\n    }\n    Scroller1.prototype.render = function() {\n        var props = this.props;\n        var liquid = props.liquid, liquidIsAbsolute = props.liquidIsAbsolute;\n        var isAbsolute = liquid && liquidIsAbsolute;\n        var className = [\n            \"fc-scroller\"\n        ];\n        if (liquid) {\n            if (liquidIsAbsolute) {\n                className.push(\"fc-scroller-liquid-absolute\");\n            } else {\n                className.push(\"fc-scroller-liquid\");\n            }\n        }\n        return vdom_cjs.createElement(\"div\", {\n            ref: this.handleEl,\n            className: className.join(\" \"),\n            style: {\n                overflowX: props.overflowX,\n                overflowY: props.overflowY,\n                left: isAbsolute && -(props.overcomeLeft || 0) || \"\",\n                right: isAbsolute && -(props.overcomeRight || 0) || \"\",\n                bottom: isAbsolute && -(props.overcomeBottom || 0) || \"\",\n                marginLeft: !isAbsolute && -(props.overcomeLeft || 0) || \"\",\n                marginRight: !isAbsolute && -(props.overcomeRight || 0) || \"\",\n                marginBottom: !isAbsolute && -(props.overcomeBottom || 0) || \"\",\n                maxHeight: props.maxHeight || \"\"\n            }\n        }, props.children);\n    };\n    Scroller1.prototype.needsXScrolling = function() {\n        if (VISIBLE_HIDDEN_RE.test(this.props.overflowX)) {\n            return false;\n        }\n        // testing scrollWidth>clientWidth is unreliable cross-browser when pixel heights aren't integers.\n        // much more reliable to see if children are taller than the scroller, even tho doesn't account for\n        // inner-child margins and absolute positioning\n        var el = this.el;\n        var realClientWidth = this.el.getBoundingClientRect().width - this.getYScrollbarWidth();\n        var children = el.children;\n        for(var i = 0; i < children.length; i += 1){\n            var childEl = children[i];\n            if (childEl.getBoundingClientRect().width > realClientWidth) {\n                return true;\n            }\n        }\n        return false;\n    };\n    Scroller1.prototype.needsYScrolling = function() {\n        if (VISIBLE_HIDDEN_RE.test(this.props.overflowY)) {\n            return false;\n        }\n        // testing scrollHeight>clientHeight is unreliable cross-browser when pixel heights aren't integers.\n        // much more reliable to see if children are taller than the scroller, even tho doesn't account for\n        // inner-child margins and absolute positioning\n        var el = this.el;\n        var realClientHeight = this.el.getBoundingClientRect().height - this.getXScrollbarWidth();\n        var children = el.children;\n        for(var i = 0; i < children.length; i += 1){\n            var childEl = children[i];\n            if (childEl.getBoundingClientRect().height > realClientHeight) {\n                return true;\n            }\n        }\n        return false;\n    };\n    Scroller1.prototype.getXScrollbarWidth = function() {\n        if (VISIBLE_HIDDEN_RE.test(this.props.overflowX)) {\n            return 0;\n        }\n        return this.el.offsetHeight - this.el.clientHeight; // only works because we guarantee no borders. TODO: add to CSS with important?\n    };\n    Scroller1.prototype.getYScrollbarWidth = function() {\n        if (VISIBLE_HIDDEN_RE.test(this.props.overflowY)) {\n            return 0;\n        }\n        return this.el.offsetWidth - this.el.clientWidth; // only works because we guarantee no borders. TODO: add to CSS with important?\n    };\n    return Scroller1;\n}(BaseComponent);\n/*\nTODO: somehow infer OtherArgs from masterCallback?\nTODO: infer RefType from masterCallback if provided\n*/ var RefMap = /** @class */ function() {\n    function RefMap1(masterCallback) {\n        var _this = this;\n        this.masterCallback = masterCallback;\n        this.currentMap = {};\n        this.depths = {};\n        this.callbackMap = {};\n        this.handleValue = function(val, key) {\n            var _a = _this, depths = _a.depths, currentMap = _a.currentMap;\n            var removed = false;\n            var added = false;\n            if (val !== null) {\n                // for bug... ACTUALLY: can probably do away with this now that callers don't share numeric indices anymore\n                removed = key in currentMap;\n                currentMap[key] = val;\n                depths[key] = (depths[key] || 0) + 1;\n                added = true;\n            } else {\n                depths[key] -= 1;\n                if (!depths[key]) {\n                    delete currentMap[key];\n                    delete _this.callbackMap[key];\n                    removed = true;\n                }\n            }\n            if (_this.masterCallback) {\n                if (removed) {\n                    _this.masterCallback(null, String(key));\n                }\n                if (added) {\n                    _this.masterCallback(val, String(key));\n                }\n            }\n        };\n    }\n    RefMap1.prototype.createRef = function(key) {\n        var _this = this;\n        var refCallback = this.callbackMap[key];\n        if (!refCallback) {\n            refCallback = this.callbackMap[key] = function(val) {\n                _this.handleValue(val, String(key));\n            };\n        }\n        return refCallback;\n    };\n    // TODO: check callers that don't care about order. should use getAll instead\n    // NOTE: this method has become less valuable now that we are encouraged to map order by some other index\n    // TODO: provide ONE array-export function, buildArray, which fails on non-numeric indexes. caller can manipulate and \"collect\"\n    RefMap1.prototype.collect = function(startIndex, endIndex, step) {\n        return collectFromHash(this.currentMap, startIndex, endIndex, step);\n    };\n    RefMap1.prototype.getAll = function() {\n        return hashValuesToArray(this.currentMap);\n    };\n    return RefMap1;\n}();\nfunction computeShrinkWidth(chunkEls) {\n    var shrinkCells = findElements(chunkEls, \".fc-scrollgrid-shrink\");\n    var largestWidth = 0;\n    for(var _i = 0, shrinkCells_1 = shrinkCells; _i < shrinkCells_1.length; _i++){\n        var shrinkCell = shrinkCells_1[_i];\n        largestWidth = Math.max(largestWidth, computeSmallestCellWidth(shrinkCell));\n    }\n    return Math.ceil(largestWidth); // <table> elements work best with integers. round up to ensure contents fits\n}\nfunction getSectionHasLiquidHeight(props, sectionConfig) {\n    return props.liquid && sectionConfig.liquid; // does the section do liquid-height? (need to have whole scrollgrid liquid-height as well)\n}\nfunction getAllowYScrolling(props, sectionConfig) {\n    return sectionConfig.maxHeight != null || getSectionHasLiquidHeight(props, sectionConfig); // if the section is liquid height, it might condense enough to require scrollbars\n}\n// TODO: ONLY use `arg`. force out internal function to use same API\nfunction renderChunkContent(sectionConfig, chunkConfig, arg, isHeader) {\n    var expandRows = arg.expandRows;\n    var content = typeof chunkConfig.content === \"function\" ? chunkConfig.content(arg) : vdom_cjs.createElement(\"table\", {\n        role: \"presentation\",\n        className: [\n            chunkConfig.tableClassName,\n            sectionConfig.syncRowHeights ? \"fc-scrollgrid-sync-table\" : \"\", \n        ].join(\" \"),\n        style: {\n            minWidth: arg.tableMinWidth,\n            width: arg.clientWidth,\n            height: expandRows ? arg.clientHeight : \"\"\n        }\n    }, arg.tableColGroupNode, vdom_cjs.createElement(isHeader ? \"thead\" : \"tbody\", {\n        role: \"presentation\"\n    }, typeof chunkConfig.rowContent === \"function\" ? chunkConfig.rowContent(arg) : chunkConfig.rowContent));\n    return content;\n}\nfunction isColPropsEqual(cols0, cols1) {\n    return isArraysEqual(cols0, cols1, isPropsEqual);\n}\nfunction renderMicroColGroup(cols, shrinkWidth) {\n    var colNodes = [];\n    /*\n    for ColProps with spans, it would have been great to make a single <col span=\"\">\n    HOWEVER, Chrome was getting messing up distributing the width to <td>/<th> elements with colspans.\n    SOLUTION: making individual <col> elements makes Chrome behave.\n    */ for(var _i = 0, cols_1 = cols; _i < cols_1.length; _i++){\n        var colProps = cols_1[_i];\n        var span = colProps.span || 1;\n        for(var i = 0; i < span; i += 1){\n            colNodes.push(vdom_cjs.createElement(\"col\", {\n                style: {\n                    width: colProps.width === \"shrink\" ? sanitizeShrinkWidth(shrinkWidth) : colProps.width || \"\",\n                    minWidth: colProps.minWidth || \"\"\n                }\n            }));\n        }\n    }\n    return vdom_cjs.createElement.apply(void 0, tslib.__spreadArray([\n        \"colgroup\",\n        {}\n    ], colNodes));\n}\nfunction sanitizeShrinkWidth(shrinkWidth) {\n    /* why 4? if we do 0, it will kill any border, which are needed for computeSmallestCellWidth\n    4 accounts for 2 2-pixel borders. TODO: better solution? */ return shrinkWidth == null ? 4 : shrinkWidth;\n}\nfunction hasShrinkWidth(cols) {\n    for(var _i = 0, cols_2 = cols; _i < cols_2.length; _i++){\n        var col = cols_2[_i];\n        if (col.width === \"shrink\") {\n            return true;\n        }\n    }\n    return false;\n}\nfunction getScrollGridClassNames(liquid, context) {\n    var classNames = [\n        \"fc-scrollgrid\",\n        context.theme.getClass(\"table\"), \n    ];\n    if (liquid) {\n        classNames.push(\"fc-scrollgrid-liquid\");\n    }\n    return classNames;\n}\nfunction getSectionClassNames(sectionConfig, wholeTableVGrow) {\n    var classNames = [\n        \"fc-scrollgrid-section\",\n        \"fc-scrollgrid-section-\" + sectionConfig.type,\n        sectionConfig.className\n    ];\n    if (wholeTableVGrow && sectionConfig.liquid && sectionConfig.maxHeight == null) {\n        classNames.push(\"fc-scrollgrid-section-liquid\");\n    }\n    if (sectionConfig.isSticky) {\n        classNames.push(\"fc-scrollgrid-section-sticky\");\n    }\n    return classNames;\n}\nfunction renderScrollShim(arg) {\n    return vdom_cjs.createElement(\"div\", {\n        className: \"fc-scrollgrid-sticky-shim\",\n        style: {\n            width: arg.clientWidth,\n            minWidth: arg.tableMinWidth\n        }\n    });\n}\nfunction getStickyHeaderDates(options) {\n    var stickyHeaderDates = options.stickyHeaderDates;\n    if (stickyHeaderDates == null || stickyHeaderDates === \"auto\") {\n        stickyHeaderDates = options.height === \"auto\" || options.viewHeight === \"auto\";\n    }\n    return stickyHeaderDates;\n}\nfunction getStickyFooterScrollbar(options) {\n    var stickyFooterScrollbar = options.stickyFooterScrollbar;\n    if (stickyFooterScrollbar == null || stickyFooterScrollbar === \"auto\") {\n        stickyFooterScrollbar = options.height === \"auto\" || options.viewHeight === \"auto\";\n    }\n    return stickyFooterScrollbar;\n}\nvar SimpleScrollGrid = /** @class */ function(_super) {\n    tslib.__extends(SimpleScrollGrid1, _super);\n    function SimpleScrollGrid1() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.processCols = memoize(function(a) {\n            return a;\n        }, isColPropsEqual); // so we get same `cols` props every time\n        // yucky to memoize VNodes, but much more efficient for consumers\n        _this.renderMicroColGroup = memoize(renderMicroColGroup);\n        _this.scrollerRefs = new RefMap();\n        _this.scrollerElRefs = new RefMap(_this._handleScrollerEl.bind(_this));\n        _this.state = {\n            shrinkWidth: null,\n            forceYScrollbars: false,\n            scrollerClientWidths: {},\n            scrollerClientHeights: {}\n        };\n        // TODO: can do a really simple print-view. dont need to join rows\n        _this.handleSizing = function() {\n            _this.setState(tslib.__assign({\n                shrinkWidth: _this.computeShrinkWidth()\n            }, _this.computeScrollerDims()));\n        };\n        return _this;\n    }\n    SimpleScrollGrid1.prototype.render = function() {\n        var _a = this, props = _a.props, state = _a.state, context = _a.context;\n        var sectionConfigs = props.sections || [];\n        var cols = this.processCols(props.cols);\n        var microColGroupNode = this.renderMicroColGroup(cols, state.shrinkWidth);\n        var classNames = getScrollGridClassNames(props.liquid, context);\n        if (props.collapsibleWidth) {\n            classNames.push(\"fc-scrollgrid-collapsible\");\n        }\n        // TODO: make DRY\n        var configCnt = sectionConfigs.length;\n        var configI = 0;\n        var currentConfig;\n        var headSectionNodes = [];\n        var bodySectionNodes = [];\n        var footSectionNodes = [];\n        while(configI < configCnt && (currentConfig = sectionConfigs[configI]).type === \"header\"){\n            headSectionNodes.push(this.renderSection(currentConfig, microColGroupNode, true));\n            configI += 1;\n        }\n        while(configI < configCnt && (currentConfig = sectionConfigs[configI]).type === \"body\"){\n            bodySectionNodes.push(this.renderSection(currentConfig, microColGroupNode, false));\n            configI += 1;\n        }\n        while(configI < configCnt && (currentConfig = sectionConfigs[configI]).type === \"footer\"){\n            footSectionNodes.push(this.renderSection(currentConfig, microColGroupNode, true));\n            configI += 1;\n        }\n        // firefox bug: when setting height on table and there is a thead or tfoot,\n        // the necessary height:100% on the liquid-height body section forces the *whole* table to be taller. (bug #5524)\n        // use getCanVGrowWithinCell as a way to detect table-stupid firefox.\n        // if so, use a simpler dom structure, jam everything into a lone tbody.\n        var isBuggy = !getCanVGrowWithinCell();\n        var roleAttrs = {\n            role: \"rowgroup\"\n        };\n        return vdom_cjs.createElement(\"table\", {\n            role: \"grid\",\n            className: classNames.join(\" \"),\n            style: {\n                height: props.height\n            }\n        }, Boolean(!isBuggy && headSectionNodes.length) && vdom_cjs.createElement.apply(void 0, tslib.__spreadArray([\n            \"thead\",\n            roleAttrs\n        ], headSectionNodes)), Boolean(!isBuggy && bodySectionNodes.length) && vdom_cjs.createElement.apply(void 0, tslib.__spreadArray([\n            \"tbody\",\n            roleAttrs\n        ], bodySectionNodes)), Boolean(!isBuggy && footSectionNodes.length) && vdom_cjs.createElement.apply(void 0, tslib.__spreadArray([\n            \"tfoot\",\n            roleAttrs\n        ], footSectionNodes)), isBuggy && vdom_cjs.createElement.apply(void 0, tslib.__spreadArray(tslib.__spreadArray(tslib.__spreadArray([\n            \"tbody\",\n            roleAttrs\n        ], headSectionNodes), bodySectionNodes), footSectionNodes)));\n    };\n    SimpleScrollGrid1.prototype.renderSection = function(sectionConfig, microColGroupNode, isHeader) {\n        if (\"outerContent\" in sectionConfig) {\n            return vdom_cjs.createElement(vdom_cjs.Fragment, {\n                key: sectionConfig.key\n            }, sectionConfig.outerContent);\n        }\n        return vdom_cjs.createElement(\"tr\", {\n            key: sectionConfig.key,\n            role: \"presentation\",\n            className: getSectionClassNames(sectionConfig, this.props.liquid).join(\" \")\n        }, this.renderChunkTd(sectionConfig, microColGroupNode, sectionConfig.chunk, isHeader));\n    };\n    SimpleScrollGrid1.prototype.renderChunkTd = function(sectionConfig, microColGroupNode, chunkConfig, isHeader) {\n        if (\"outerContent\" in chunkConfig) {\n            return chunkConfig.outerContent;\n        }\n        var props = this.props;\n        var _a = this.state, forceYScrollbars = _a.forceYScrollbars, scrollerClientWidths = _a.scrollerClientWidths, scrollerClientHeights = _a.scrollerClientHeights;\n        var needsYScrolling = getAllowYScrolling(props, sectionConfig); // TODO: do lazily. do in section config?\n        var isLiquid = getSectionHasLiquidHeight(props, sectionConfig);\n        // for `!props.liquid` - is WHOLE scrollgrid natural height?\n        // TODO: do same thing in advanced scrollgrid? prolly not b/c always has horizontal scrollbars\n        var overflowY = !props.liquid ? \"visible\" : forceYScrollbars ? \"scroll\" : !needsYScrolling ? \"hidden\" : \"auto\";\n        var sectionKey = sectionConfig.key;\n        var content = renderChunkContent(sectionConfig, chunkConfig, {\n            tableColGroupNode: microColGroupNode,\n            tableMinWidth: \"\",\n            clientWidth: !props.collapsibleWidth && scrollerClientWidths[sectionKey] !== undefined ? scrollerClientWidths[sectionKey] : null,\n            clientHeight: scrollerClientHeights[sectionKey] !== undefined ? scrollerClientHeights[sectionKey] : null,\n            expandRows: sectionConfig.expandRows,\n            syncRowHeights: false,\n            rowSyncHeights: [],\n            reportRowHeightChange: function() {}\n        }, isHeader);\n        return vdom_cjs.createElement(isHeader ? \"th\" : \"td\", {\n            ref: chunkConfig.elRef,\n            role: \"presentation\"\n        }, vdom_cjs.createElement(\"div\", {\n            className: \"fc-scroller-harness\" + (isLiquid ? \" fc-scroller-harness-liquid\" : \"\")\n        }, vdom_cjs.createElement(Scroller, {\n            ref: this.scrollerRefs.createRef(sectionKey),\n            elRef: this.scrollerElRefs.createRef(sectionKey),\n            overflowY: overflowY,\n            overflowX: !props.liquid ? \"visible\" : \"hidden\" /* natural height? */ ,\n            maxHeight: sectionConfig.maxHeight,\n            liquid: isLiquid,\n            liquidIsAbsolute: true\n        }, content)));\n    };\n    SimpleScrollGrid1.prototype._handleScrollerEl = function(scrollerEl, key) {\n        var section = getSectionByKey(this.props.sections, key);\n        if (section) {\n            setRef(section.chunk.scrollerElRef, scrollerEl);\n        }\n    };\n    SimpleScrollGrid1.prototype.componentDidMount = function() {\n        this.handleSizing();\n        this.context.addResizeHandler(this.handleSizing);\n    };\n    SimpleScrollGrid1.prototype.componentDidUpdate = function() {\n        // TODO: need better solution when state contains non-sizing things\n        this.handleSizing();\n    };\n    SimpleScrollGrid1.prototype.componentWillUnmount = function() {\n        this.context.removeResizeHandler(this.handleSizing);\n    };\n    SimpleScrollGrid1.prototype.computeShrinkWidth = function() {\n        return hasShrinkWidth(this.props.cols) ? computeShrinkWidth(this.scrollerElRefs.getAll()) : 0;\n    };\n    SimpleScrollGrid1.prototype.computeScrollerDims = function() {\n        var scrollbarWidth = getScrollbarWidths();\n        var _a = this, scrollerRefs = _a.scrollerRefs, scrollerElRefs = _a.scrollerElRefs;\n        var forceYScrollbars = false;\n        var scrollerClientWidths = {};\n        var scrollerClientHeights = {};\n        for(var sectionKey in scrollerRefs.currentMap){\n            var scroller = scrollerRefs.currentMap[sectionKey];\n            if (scroller && scroller.needsYScrolling()) {\n                forceYScrollbars = true;\n                break;\n            }\n        }\n        for(var _i = 0, _b = this.props.sections; _i < _b.length; _i++){\n            var section = _b[_i];\n            var sectionKey = section.key;\n            var scrollerEl = scrollerElRefs.currentMap[sectionKey];\n            if (scrollerEl) {\n                var harnessEl = scrollerEl.parentNode; // TODO: weird way to get this. need harness b/c doesn't include table borders\n                scrollerClientWidths[sectionKey] = Math.floor(harnessEl.getBoundingClientRect().width - (forceYScrollbars ? scrollbarWidth.y // use global because scroller might not have scrollbars yet but will need them in future\n                 : 0));\n                scrollerClientHeights[sectionKey] = Math.floor(harnessEl.getBoundingClientRect().height);\n            }\n        }\n        return {\n            forceYScrollbars: forceYScrollbars,\n            scrollerClientWidths: scrollerClientWidths,\n            scrollerClientHeights: scrollerClientHeights\n        };\n    };\n    return SimpleScrollGrid1;\n}(BaseComponent);\nSimpleScrollGrid.addStateEquality({\n    scrollerClientWidths: isPropsEqual,\n    scrollerClientHeights: isPropsEqual\n});\nfunction getSectionByKey(sections, key) {\n    for(var _i = 0, sections_1 = sections; _i < sections_1.length; _i++){\n        var section = sections_1[_i];\n        if (section.key === key) {\n            return section;\n        }\n    }\n    return null;\n}\nvar EventRoot = /** @class */ function(_super) {\n    tslib.__extends(EventRoot1, _super);\n    function EventRoot1() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.elRef = vdom_cjs.createRef();\n        return _this;\n    }\n    EventRoot1.prototype.render = function() {\n        var _a = this, props = _a.props, context = _a.context;\n        var options = context.options;\n        var seg = props.seg;\n        var eventRange = seg.eventRange;\n        var ui = eventRange.ui;\n        var hookProps = {\n            event: new EventApi(context, eventRange.def, eventRange.instance),\n            view: context.viewApi,\n            timeText: props.timeText,\n            textColor: ui.textColor,\n            backgroundColor: ui.backgroundColor,\n            borderColor: ui.borderColor,\n            isDraggable: !props.disableDragging && computeSegDraggable(seg, context),\n            isStartResizable: !props.disableResizing && computeSegStartResizable(seg, context),\n            isEndResizable: !props.disableResizing && computeSegEndResizable(seg),\n            isMirror: Boolean(props.isDragging || props.isResizing || props.isDateSelecting),\n            isStart: Boolean(seg.isStart),\n            isEnd: Boolean(seg.isEnd),\n            isPast: Boolean(props.isPast),\n            isFuture: Boolean(props.isFuture),\n            isToday: Boolean(props.isToday),\n            isSelected: Boolean(props.isSelected),\n            isDragging: Boolean(props.isDragging),\n            isResizing: Boolean(props.isResizing)\n        };\n        var standardClassNames = getEventClassNames(hookProps).concat(ui.classNames);\n        return vdom_cjs.createElement(RenderHook, {\n            hookProps: hookProps,\n            classNames: options.eventClassNames,\n            content: options.eventContent,\n            defaultContent: props.defaultContent,\n            didMount: options.eventDidMount,\n            willUnmount: options.eventWillUnmount,\n            elRef: this.elRef\n        }, function(rootElRef, customClassNames, innerElRef, innerContent) {\n            return props.children(rootElRef, standardClassNames.concat(customClassNames), innerElRef, innerContent, hookProps);\n        });\n    };\n    EventRoot1.prototype.componentDidMount = function() {\n        setElSeg(this.elRef.current, this.props.seg);\n    };\n    /*\n    need to re-assign seg to the element if seg changes, even if the element is the same\n    */ EventRoot1.prototype.componentDidUpdate = function(prevProps) {\n        var seg = this.props.seg;\n        if (seg !== prevProps.seg) {\n            setElSeg(this.elRef.current, seg);\n        }\n    };\n    return EventRoot1;\n}(BaseComponent);\n// should not be a purecomponent\nvar StandardEvent = /** @class */ function(_super) {\n    tslib.__extends(StandardEvent1, _super);\n    function StandardEvent1() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    StandardEvent1.prototype.render = function() {\n        var _a = this, props = _a.props, context = _a.context;\n        var seg = props.seg;\n        var timeFormat = context.options.eventTimeFormat || props.defaultTimeFormat;\n        var timeText = buildSegTimeText(seg, timeFormat, context, props.defaultDisplayEventTime, props.defaultDisplayEventEnd);\n        return vdom_cjs.createElement(EventRoot, {\n            seg: seg,\n            timeText: timeText,\n            disableDragging: props.disableDragging,\n            disableResizing: props.disableResizing,\n            defaultContent: props.defaultContent || renderInnerContent$1,\n            isDragging: props.isDragging,\n            isResizing: props.isResizing,\n            isDateSelecting: props.isDateSelecting,\n            isSelected: props.isSelected,\n            isPast: props.isPast,\n            isFuture: props.isFuture,\n            isToday: props.isToday\n        }, function(rootElRef, classNames, innerElRef, innerContent, hookProps) {\n            return vdom_cjs.createElement(\"a\", tslib.__assign({\n                className: props.extraClassNames.concat(classNames).join(\" \"),\n                style: {\n                    borderColor: hookProps.borderColor,\n                    backgroundColor: hookProps.backgroundColor\n                },\n                ref: rootElRef\n            }, getSegAnchorAttrs(seg, context)), vdom_cjs.createElement(\"div\", {\n                className: \"fc-event-main\",\n                ref: innerElRef,\n                style: {\n                    color: hookProps.textColor\n                }\n            }, innerContent), hookProps.isStartResizable && vdom_cjs.createElement(\"div\", {\n                className: \"fc-event-resizer fc-event-resizer-start\"\n            }), hookProps.isEndResizable && vdom_cjs.createElement(\"div\", {\n                className: \"fc-event-resizer fc-event-resizer-end\"\n            }));\n        });\n    };\n    return StandardEvent1;\n}(BaseComponent);\nfunction renderInnerContent$1(innerProps) {\n    return vdom_cjs.createElement(\"div\", {\n        className: \"fc-event-main-frame\"\n    }, innerProps.timeText && vdom_cjs.createElement(\"div\", {\n        className: \"fc-event-time\"\n    }, innerProps.timeText), vdom_cjs.createElement(\"div\", {\n        className: \"fc-event-title-container\"\n    }, vdom_cjs.createElement(\"div\", {\n        className: \"fc-event-title fc-sticky\"\n    }, innerProps.event.title || vdom_cjs.createElement(vdom_cjs.Fragment, null, \"\\xa0\"))));\n}\nvar NowIndicatorRoot = function(props) {\n    return vdom_cjs.createElement(ViewContextType.Consumer, null, function(context) {\n        var options = context.options;\n        var hookProps = {\n            isAxis: props.isAxis,\n            date: context.dateEnv.toDate(props.date),\n            view: context.viewApi\n        };\n        return vdom_cjs.createElement(RenderHook, {\n            hookProps: hookProps,\n            classNames: options.nowIndicatorClassNames,\n            content: options.nowIndicatorContent,\n            didMount: options.nowIndicatorDidMount,\n            willUnmount: options.nowIndicatorWillUnmount\n        }, props.children);\n    });\n};\nvar DAY_NUM_FORMAT = createFormatter({\n    day: \"numeric\"\n});\nvar DayCellContent = /** @class */ function(_super) {\n    tslib.__extends(DayCellContent1, _super);\n    function DayCellContent1() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DayCellContent1.prototype.render = function() {\n        var _a = this, props = _a.props, context = _a.context;\n        var options = context.options;\n        var hookProps = refineDayCellHookProps({\n            date: props.date,\n            dateProfile: props.dateProfile,\n            todayRange: props.todayRange,\n            showDayNumber: props.showDayNumber,\n            extraProps: props.extraHookProps,\n            viewApi: context.viewApi,\n            dateEnv: context.dateEnv\n        });\n        return vdom_cjs.createElement(ContentHook, {\n            hookProps: hookProps,\n            content: options.dayCellContent,\n            defaultContent: props.defaultContent\n        }, props.children);\n    };\n    return DayCellContent1;\n}(BaseComponent);\nfunction refineDayCellHookProps(raw) {\n    var date = raw.date, dateEnv = raw.dateEnv;\n    var dayMeta = getDateMeta(date, raw.todayRange, null, raw.dateProfile);\n    return tslib.__assign(tslib.__assign(tslib.__assign({\n        date: dateEnv.toDate(date),\n        view: raw.viewApi\n    }, dayMeta), {\n        dayNumberText: raw.showDayNumber ? dateEnv.format(date, DAY_NUM_FORMAT) : \"\"\n    }), raw.extraProps);\n}\nvar DayCellRoot = /** @class */ function(_super) {\n    tslib.__extends(DayCellRoot1, _super);\n    function DayCellRoot1() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.refineHookProps = memoizeObjArg(refineDayCellHookProps);\n        _this.normalizeClassNames = buildClassNameNormalizer();\n        return _this;\n    }\n    DayCellRoot1.prototype.render = function() {\n        var _a = this, props = _a.props, context = _a.context;\n        var options = context.options;\n        var hookProps = this.refineHookProps({\n            date: props.date,\n            dateProfile: props.dateProfile,\n            todayRange: props.todayRange,\n            showDayNumber: props.showDayNumber,\n            extraProps: props.extraHookProps,\n            viewApi: context.viewApi,\n            dateEnv: context.dateEnv\n        });\n        var classNames = getDayClassNames(hookProps, context.theme).concat(hookProps.isDisabled ? [] // don't use custom classNames if disabled\n         : this.normalizeClassNames(options.dayCellClassNames, hookProps));\n        var dataAttrs = hookProps.isDisabled ? {} : {\n            \"data-date\": formatDayString(props.date)\n        };\n        return vdom_cjs.createElement(MountHook, {\n            hookProps: hookProps,\n            didMount: options.dayCellDidMount,\n            willUnmount: options.dayCellWillUnmount,\n            elRef: props.elRef\n        }, function(rootElRef) {\n            return props.children(rootElRef, classNames, dataAttrs, hookProps.isDisabled);\n        });\n    };\n    return DayCellRoot1;\n}(BaseComponent);\nfunction renderFill(fillType) {\n    return vdom_cjs.createElement(\"div\", {\n        className: \"fc-\" + fillType\n    });\n}\nvar BgEvent = function(props) {\n    return vdom_cjs.createElement(EventRoot, {\n        defaultContent: renderInnerContent,\n        seg: props.seg /* uselesss i think */ ,\n        timeText: \"\",\n        disableDragging: true,\n        disableResizing: true,\n        isDragging: false,\n        isResizing: false,\n        isDateSelecting: false,\n        isSelected: false,\n        isPast: props.isPast,\n        isFuture: props.isFuture,\n        isToday: props.isToday\n    }, function(rootElRef, classNames, innerElRef, innerContent, hookProps) {\n        return vdom_cjs.createElement(\"div\", {\n            ref: rootElRef,\n            className: [\n                \"fc-bg-event\"\n            ].concat(classNames).join(\" \"),\n            style: {\n                backgroundColor: hookProps.backgroundColor\n            }\n        }, innerContent);\n    });\n};\nfunction renderInnerContent(props) {\n    var title = props.event.title;\n    return title && vdom_cjs.createElement(\"div\", {\n        className: \"fc-event-title\"\n    }, props.event.title);\n}\nvar WeekNumberRoot = function(props) {\n    return vdom_cjs.createElement(ViewContextType.Consumer, null, function(context) {\n        var dateEnv = context.dateEnv, options = context.options;\n        var date = props.date;\n        var format = options.weekNumberFormat || props.defaultFormat;\n        var num = dateEnv.computeWeekNumber(date); // TODO: somehow use for formatting as well?\n        var text = dateEnv.format(date, format);\n        var hookProps = {\n            num: num,\n            text: text,\n            date: date\n        };\n        return vdom_cjs.createElement(RenderHook, {\n            hookProps: hookProps,\n            classNames: options.weekNumberClassNames,\n            content: options.weekNumberContent,\n            defaultContent: renderInner,\n            didMount: options.weekNumberDidMount,\n            willUnmount: options.weekNumberWillUnmount\n        }, props.children);\n    });\n};\nfunction renderInner(innerProps) {\n    return innerProps.text;\n}\nvar PADDING_FROM_VIEWPORT = 10;\nvar Popover = /** @class */ function(_super) {\n    tslib.__extends(Popover1, _super);\n    function Popover1() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            titleId: getUniqueDomId()\n        };\n        _this.handleRootEl = function(el) {\n            _this.rootEl = el;\n            if (_this.props.elRef) {\n                setRef(_this.props.elRef, el);\n            }\n        };\n        // Triggered when the user clicks *anywhere* in the document, for the autoHide feature\n        _this.handleDocumentMouseDown = function(ev) {\n            // only hide the popover if the click happened outside the popover\n            var target = getEventTargetViaRoot(ev);\n            if (!_this.rootEl.contains(target)) {\n                _this.handleCloseClick();\n            }\n        };\n        _this.handleDocumentKeyDown = function(ev) {\n            if (ev.key === \"Escape\") {\n                _this.handleCloseClick();\n            }\n        };\n        _this.handleCloseClick = function() {\n            var onClose = _this.props.onClose;\n            if (onClose) {\n                onClose();\n            }\n        };\n        return _this;\n    }\n    Popover1.prototype.render = function() {\n        var _a = this.context, theme = _a.theme, options = _a.options;\n        var _b = this, props = _b.props, state = _b.state;\n        var classNames = [\n            \"fc-popover\",\n            theme.getClass(\"popover\"), \n        ].concat(props.extraClassNames || []);\n        return vdom_cjs.createPortal(vdom_cjs.createElement(\"div\", tslib.__assign({\n            id: props.id,\n            className: classNames.join(\" \"),\n            \"aria-labelledby\": state.titleId\n        }, props.extraAttrs, {\n            ref: this.handleRootEl\n        }), vdom_cjs.createElement(\"div\", {\n            className: \"fc-popover-header \" + theme.getClass(\"popoverHeader\")\n        }, vdom_cjs.createElement(\"span\", {\n            className: \"fc-popover-title\",\n            id: state.titleId\n        }, props.title), vdom_cjs.createElement(\"span\", {\n            className: \"fc-popover-close \" + theme.getIconClass(\"close\"),\n            title: options.closeHint,\n            onClick: this.handleCloseClick\n        })), vdom_cjs.createElement(\"div\", {\n            className: \"fc-popover-body \" + theme.getClass(\"popoverContent\")\n        }, props.children)), props.parentEl);\n    };\n    Popover1.prototype.componentDidMount = function() {\n        document.addEventListener(\"mousedown\", this.handleDocumentMouseDown);\n        document.addEventListener(\"keydown\", this.handleDocumentKeyDown);\n        this.updateSize();\n    };\n    Popover1.prototype.componentWillUnmount = function() {\n        document.removeEventListener(\"mousedown\", this.handleDocumentMouseDown);\n        document.removeEventListener(\"keydown\", this.handleDocumentKeyDown);\n    };\n    Popover1.prototype.updateSize = function() {\n        var isRtl = this.context.isRtl;\n        var _a = this.props, alignmentEl = _a.alignmentEl, alignGridTop = _a.alignGridTop;\n        var rootEl = this.rootEl;\n        var alignmentRect = computeClippedClientRect(alignmentEl);\n        if (alignmentRect) {\n            var popoverDims = rootEl.getBoundingClientRect();\n            // position relative to viewport\n            var popoverTop = alignGridTop ? elementClosest(alignmentEl, \".fc-scrollgrid\").getBoundingClientRect().top : alignmentRect.top;\n            var popoverLeft = isRtl ? alignmentRect.right - popoverDims.width : alignmentRect.left;\n            // constrain\n            popoverTop = Math.max(popoverTop, PADDING_FROM_VIEWPORT);\n            popoverLeft = Math.min(popoverLeft, document.documentElement.clientWidth - PADDING_FROM_VIEWPORT - popoverDims.width);\n            popoverLeft = Math.max(popoverLeft, PADDING_FROM_VIEWPORT);\n            var origin_1 = rootEl.offsetParent.getBoundingClientRect();\n            applyStyle(rootEl, {\n                top: popoverTop - origin_1.top,\n                left: popoverLeft - origin_1.left\n            });\n        }\n    };\n    return Popover1;\n}(BaseComponent);\nvar MorePopover = /** @class */ function(_super) {\n    tslib.__extends(MorePopover1, _super);\n    function MorePopover1() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.handleRootEl = function(rootEl) {\n            _this.rootEl = rootEl;\n            if (rootEl) {\n                _this.context.registerInteractiveComponent(_this, {\n                    el: rootEl,\n                    useEventCenter: false\n                });\n            } else {\n                _this.context.unregisterInteractiveComponent(_this);\n            }\n        };\n        return _this;\n    }\n    MorePopover1.prototype.render = function() {\n        var _a = this.context, options = _a.options, dateEnv = _a.dateEnv;\n        var props = this.props;\n        var startDate = props.startDate, todayRange = props.todayRange, dateProfile = props.dateProfile;\n        var title = dateEnv.format(startDate, options.dayPopoverFormat);\n        return vdom_cjs.createElement(DayCellRoot, {\n            date: startDate,\n            dateProfile: dateProfile,\n            todayRange: todayRange,\n            elRef: this.handleRootEl\n        }, function(rootElRef, dayClassNames, dataAttrs) {\n            return vdom_cjs.createElement(Popover, {\n                elRef: rootElRef,\n                id: props.id,\n                title: title,\n                extraClassNames: [\n                    \"fc-more-popover\"\n                ].concat(dayClassNames),\n                extraAttrs: dataAttrs /* TODO: make these time-based when not whole-day? */ ,\n                parentEl: props.parentEl,\n                alignmentEl: props.alignmentEl,\n                alignGridTop: props.alignGridTop,\n                onClose: props.onClose\n            }, vdom_cjs.createElement(DayCellContent, {\n                date: startDate,\n                dateProfile: dateProfile,\n                todayRange: todayRange\n            }, function(innerElRef, innerContent) {\n                return innerContent && vdom_cjs.createElement(\"div\", {\n                    className: \"fc-more-popover-misc\",\n                    ref: innerElRef\n                }, innerContent);\n            }), props.children);\n        });\n    };\n    MorePopover1.prototype.queryHit = function(positionLeft, positionTop, elWidth, elHeight) {\n        var _a = this, rootEl = _a.rootEl, props = _a.props;\n        if (positionLeft >= 0 && positionLeft < elWidth && positionTop >= 0 && positionTop < elHeight) {\n            return {\n                dateProfile: props.dateProfile,\n                dateSpan: tslib.__assign({\n                    allDay: true,\n                    range: {\n                        start: props.startDate,\n                        end: props.endDate\n                    }\n                }, props.extraDateSpan),\n                dayEl: rootEl,\n                rect: {\n                    left: 0,\n                    top: 0,\n                    right: elWidth,\n                    bottom: elHeight\n                },\n                layer: 1\n            };\n        }\n        return null;\n    };\n    return MorePopover1;\n}(DateComponent);\nvar MoreLinkRoot = /** @class */ function(_super) {\n    tslib.__extends(MoreLinkRoot1, _super);\n    function MoreLinkRoot1() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.linkElRef = vdom_cjs.createRef();\n        _this.state = {\n            isPopoverOpen: false,\n            popoverId: getUniqueDomId()\n        };\n        _this.handleClick = function(ev) {\n            var _a1 = _this, props = _a1.props, context = _a1.context;\n            var moreLinkClick = context.options.moreLinkClick;\n            var date = computeRange(props).start;\n            function buildPublicSeg(seg) {\n                var _a = seg.eventRange, def = _a.def, instance = _a.instance, range = _a.range;\n                return {\n                    event: new EventApi(context, def, instance),\n                    start: context.dateEnv.toDate(range.start),\n                    end: context.dateEnv.toDate(range.end),\n                    isStart: seg.isStart,\n                    isEnd: seg.isEnd\n                };\n            }\n            if (typeof moreLinkClick === \"function\") {\n                moreLinkClick = moreLinkClick({\n                    date: date,\n                    allDay: Boolean(props.allDayDate),\n                    allSegs: props.allSegs.map(buildPublicSeg),\n                    hiddenSegs: props.hiddenSegs.map(buildPublicSeg),\n                    jsEvent: ev,\n                    view: context.viewApi\n                });\n            }\n            if (!moreLinkClick || moreLinkClick === \"popover\") {\n                _this.setState({\n                    isPopoverOpen: true\n                });\n            } else if (typeof moreLinkClick === \"string\") {\n                context.calendarApi.zoomTo(date, moreLinkClick);\n            }\n        };\n        _this.handlePopoverClose = function() {\n            _this.setState({\n                isPopoverOpen: false\n            });\n        };\n        return _this;\n    }\n    MoreLinkRoot1.prototype.render = function() {\n        var _this = this;\n        var _a = this, props = _a.props, state = _a.state;\n        return vdom_cjs.createElement(ViewContextType.Consumer, null, function(context) {\n            var viewApi = context.viewApi, options = context.options, calendarApi = context.calendarApi;\n            var moreLinkText = options.moreLinkText;\n            var moreCnt = props.moreCnt;\n            var range = computeRange(props);\n            var text = typeof moreLinkText === \"function\" // TODO: eventually use formatWithOrdinals\n             ? moreLinkText.call(calendarApi, moreCnt) : \"+\" + moreCnt + \" \" + moreLinkText;\n            var title = formatWithOrdinals(options.moreLinkHint, [\n                moreCnt\n            ], text);\n            var hookProps = {\n                num: moreCnt,\n                shortText: \"+\" + moreCnt,\n                text: text,\n                view: viewApi\n            };\n            return vdom_cjs.createElement(vdom_cjs.Fragment, null, Boolean(props.moreCnt) && vdom_cjs.createElement(RenderHook, {\n                elRef: _this.linkElRef,\n                hookProps: hookProps,\n                classNames: options.moreLinkClassNames,\n                content: options.moreLinkContent,\n                defaultContent: props.defaultContent || renderMoreLinkInner,\n                didMount: options.moreLinkDidMount,\n                willUnmount: options.moreLinkWillUnmount\n            }, function(rootElRef, customClassNames, innerElRef, innerContent) {\n                return props.children(rootElRef, [\n                    \"fc-more-link\"\n                ].concat(customClassNames), innerElRef, innerContent, _this.handleClick, title, state.isPopoverOpen, state.isPopoverOpen ? state.popoverId : \"\");\n            }), state.isPopoverOpen && vdom_cjs.createElement(MorePopover, {\n                id: state.popoverId,\n                startDate: range.start,\n                endDate: range.end,\n                dateProfile: props.dateProfile,\n                todayRange: props.todayRange,\n                extraDateSpan: props.extraDateSpan,\n                parentEl: _this.parentEl,\n                alignmentEl: props.alignmentElRef.current,\n                alignGridTop: props.alignGridTop,\n                onClose: _this.handlePopoverClose\n            }, props.popoverContent()));\n        });\n    };\n    MoreLinkRoot1.prototype.componentDidMount = function() {\n        this.updateParentEl();\n    };\n    MoreLinkRoot1.prototype.componentDidUpdate = function() {\n        this.updateParentEl();\n    };\n    MoreLinkRoot1.prototype.updateParentEl = function() {\n        if (this.linkElRef.current) {\n            this.parentEl = elementClosest(this.linkElRef.current, \".fc-view-harness\");\n        }\n    };\n    return MoreLinkRoot1;\n}(BaseComponent);\nfunction renderMoreLinkInner(props) {\n    return props.text;\n}\nfunction computeRange(props) {\n    if (props.allDayDate) {\n        return {\n            start: props.allDayDate,\n            end: addDays(props.allDayDate, 1)\n        };\n    }\n    var hiddenSegs = props.hiddenSegs;\n    return {\n        start: computeEarliestSegStart(hiddenSegs),\n        end: computeLatestSegEnd(hiddenSegs)\n    };\n}\nfunction computeEarliestSegStart(segs) {\n    return segs.reduce(pickEarliestStart).eventRange.range.start;\n}\nfunction pickEarliestStart(seg0, seg1) {\n    return seg0.eventRange.range.start < seg1.eventRange.range.start ? seg0 : seg1;\n}\nfunction computeLatestSegEnd(segs) {\n    return segs.reduce(pickLatestEnd).eventRange.range.end;\n}\nfunction pickLatestEnd(seg0, seg1) {\n    return seg0.eventRange.range.end > seg1.eventRange.range.end ? seg0 : seg1;\n}\n// exports\n// --------------------------------------------------------------------------------------------------\nvar version = \"5.10.2\"; // important to type it, so .d.ts has generic string\nexports.BASE_OPTION_DEFAULTS = BASE_OPTION_DEFAULTS;\nexports.BASE_OPTION_REFINERS = BASE_OPTION_REFINERS;\nexports.BaseComponent = BaseComponent;\nexports.BgEvent = BgEvent;\nexports.CalendarApi = CalendarApi;\nexports.CalendarContent = CalendarContent;\nexports.CalendarDataManager = CalendarDataManager;\nexports.CalendarDataProvider = CalendarDataProvider;\nexports.CalendarRoot = CalendarRoot;\nexports.ContentHook = ContentHook;\nexports.CustomContentRenderContext = CustomContentRenderContext;\nexports.DateComponent = DateComponent;\nexports.DateEnv = DateEnv;\nexports.DateProfileGenerator = DateProfileGenerator;\nexports.DayCellContent = DayCellContent;\nexports.DayCellRoot = DayCellRoot;\nexports.DayHeader = DayHeader;\nexports.DaySeriesModel = DaySeriesModel;\nexports.DayTableModel = DayTableModel;\nexports.DelayedRunner = DelayedRunner;\nexports.ElementDragging = ElementDragging;\nexports.ElementScrollController = ElementScrollController;\nexports.Emitter = Emitter;\nexports.EventApi = EventApi;\nexports.EventRoot = EventRoot;\nexports.EventSourceApi = EventSourceApi;\nexports.Interaction = Interaction;\nexports.MoreLinkRoot = MoreLinkRoot;\nexports.MountHook = MountHook;\nexports.NamedTimeZoneImpl = NamedTimeZoneImpl;\nexports.NowIndicatorRoot = NowIndicatorRoot;\nexports.NowTimer = NowTimer;\nexports.PositionCache = PositionCache;\nexports.RefMap = RefMap;\nexports.RenderHook = RenderHook;\nexports.ScrollController = ScrollController;\nexports.ScrollResponder = ScrollResponder;\nexports.Scroller = Scroller;\nexports.SegHierarchy = SegHierarchy;\nexports.SimpleScrollGrid = SimpleScrollGrid;\nexports.Slicer = Slicer;\nexports.Splitter = Splitter;\nexports.StandardEvent = StandardEvent;\nexports.TableDateCell = TableDateCell;\nexports.TableDowCell = TableDowCell;\nexports.Theme = Theme;\nexports.ViewApi = ViewApi;\nexports.ViewContextType = ViewContextType;\nexports.ViewRoot = ViewRoot;\nexports.WeekNumberRoot = WeekNumberRoot;\nexports.WindowScrollController = WindowScrollController;\nexports.addDays = addDays;\nexports.addDurations = addDurations;\nexports.addMs = addMs;\nexports.addWeeks = addWeeks;\nexports.allowContextMenu = allowContextMenu;\nexports.allowSelection = allowSelection;\nexports.applyMutationToEventStore = applyMutationToEventStore;\nexports.applyStyle = applyStyle;\nexports.applyStyleProp = applyStyleProp;\nexports.asCleanDays = asCleanDays;\nexports.asRoughMinutes = asRoughMinutes;\nexports.asRoughMs = asRoughMs;\nexports.asRoughSeconds = asRoughSeconds;\nexports.binarySearch = binarySearch;\nexports.buildClassNameNormalizer = buildClassNameNormalizer;\nexports.buildEntryKey = buildEntryKey;\nexports.buildEventApis = buildEventApis;\nexports.buildEventRangeKey = buildEventRangeKey;\nexports.buildHashFromArray = buildHashFromArray;\nexports.buildIsoString = buildIsoString;\nexports.buildNavLinkAttrs = buildNavLinkAttrs;\nexports.buildSegCompareObj = buildSegCompareObj;\nexports.buildSegTimeText = buildSegTimeText;\nexports.collectFromHash = collectFromHash;\nexports.combineEventUis = combineEventUis;\nexports.compareByFieldSpec = compareByFieldSpec;\nexports.compareByFieldSpecs = compareByFieldSpecs;\nexports.compareNumbers = compareNumbers;\nexports.compareObjs = compareObjs;\nexports.computeEarliestSegStart = computeEarliestSegStart;\nexports.computeEdges = computeEdges;\nexports.computeFallbackHeaderFormat = computeFallbackHeaderFormat;\nexports.computeHeightAndMargins = computeHeightAndMargins;\nexports.computeInnerRect = computeInnerRect;\nexports.computeRect = computeRect;\nexports.computeSegDraggable = computeSegDraggable;\nexports.computeSegEndResizable = computeSegEndResizable;\nexports.computeSegStartResizable = computeSegStartResizable;\nexports.computeShrinkWidth = computeShrinkWidth;\nexports.computeSmallestCellWidth = computeSmallestCellWidth;\nexports.computeVisibleDayRange = computeVisibleDayRange;\nexports.config = config;\nexports.constrainPoint = constrainPoint;\nexports.createAriaClickAttrs = createAriaClickAttrs;\nexports.createDuration = createDuration;\nexports.createEmptyEventStore = createEmptyEventStore;\nexports.createEventInstance = createEventInstance;\nexports.createEventUi = createEventUi;\nexports.createFormatter = createFormatter;\nexports.createPlugin = createPlugin;\nexports.diffDates = diffDates;\nexports.diffDayAndTime = diffDayAndTime;\nexports.diffDays = diffDays;\nexports.diffPoints = diffPoints;\nexports.diffWeeks = diffWeeks;\nexports.diffWholeDays = diffWholeDays;\nexports.diffWholeWeeks = diffWholeWeeks;\nexports.disableCursor = disableCursor;\nexports.elementClosest = elementClosest;\nexports.elementMatches = elementMatches;\nexports.enableCursor = enableCursor;\nexports.eventTupleToStore = eventTupleToStore;\nexports.filterEventStoreDefs = filterEventStoreDefs;\nexports.filterHash = filterHash;\nexports.findDirectChildren = findDirectChildren;\nexports.findElements = findElements;\nexports.flexibleCompare = flexibleCompare;\nexports.formatDate = formatDate;\nexports.formatDayString = formatDayString;\nexports.formatIsoTimeString = formatIsoTimeString;\nexports.formatRange = formatRange;\nexports.getAllowYScrolling = getAllowYScrolling;\nexports.getCanVGrowWithinCell = getCanVGrowWithinCell;\nexports.getClippingParents = getClippingParents;\nexports.getDateMeta = getDateMeta;\nexports.getDayClassNames = getDayClassNames;\nexports.getDefaultEventEnd = getDefaultEventEnd;\nexports.getElRoot = getElRoot;\nexports.getElSeg = getElSeg;\nexports.getEntrySpanEnd = getEntrySpanEnd;\nexports.getEventClassNames = getEventClassNames;\nexports.getEventTargetViaRoot = getEventTargetViaRoot;\nexports.getIsRtlScrollbarOnLeft = getIsRtlScrollbarOnLeft;\nexports.getRectCenter = getRectCenter;\nexports.getRelevantEvents = getRelevantEvents;\nexports.getScrollGridClassNames = getScrollGridClassNames;\nexports.getScrollbarWidths = getScrollbarWidths;\nexports.getSectionClassNames = getSectionClassNames;\nexports.getSectionHasLiquidHeight = getSectionHasLiquidHeight;\nexports.getSegAnchorAttrs = getSegAnchorAttrs;\nexports.getSegMeta = getSegMeta;\nexports.getSlotClassNames = getSlotClassNames;\nexports.getStickyFooterScrollbar = getStickyFooterScrollbar;\nexports.getStickyHeaderDates = getStickyHeaderDates;\nexports.getUnequalProps = getUnequalProps;\nexports.getUniqueDomId = getUniqueDomId;\nexports.globalLocales = globalLocales;\nexports.globalPlugins = globalPlugins;\nexports.greatestDurationDenominator = greatestDurationDenominator;\nexports.groupIntersectingEntries = groupIntersectingEntries;\nexports.guid = guid;\nexports.hasBgRendering = hasBgRendering;\nexports.hasShrinkWidth = hasShrinkWidth;\nexports.identity = identity;\nexports.interactionSettingsStore = interactionSettingsStore;\nexports.interactionSettingsToStore = interactionSettingsToStore;\nexports.intersectRanges = intersectRanges;\nexports.intersectRects = intersectRects;\nexports.intersectSpans = intersectSpans;\nexports.isArraysEqual = isArraysEqual;\nexports.isColPropsEqual = isColPropsEqual;\nexports.isDateSelectionValid = isDateSelectionValid;\nexports.isDateSpansEqual = isDateSpansEqual;\nexports.isInt = isInt;\nexports.isInteractionValid = isInteractionValid;\nexports.isMultiDayRange = isMultiDayRange;\nexports.isPropsEqual = isPropsEqual;\nexports.isPropsValid = isPropsValid;\nexports.isValidDate = isValidDate;\nexports.joinSpans = joinSpans;\nexports.listenBySelector = listenBySelector;\nexports.mapHash = mapHash;\nexports.memoize = memoize;\nexports.memoizeArraylike = memoizeArraylike;\nexports.memoizeHashlike = memoizeHashlike;\nexports.memoizeObjArg = memoizeObjArg;\nexports.mergeEventStores = mergeEventStores;\nexports.multiplyDuration = multiplyDuration;\nexports.padStart = padStart;\nexports.parseBusinessHours = parseBusinessHours;\nexports.parseClassNames = parseClassNames;\nexports.parseDragMeta = parseDragMeta;\nexports.parseEventDef = parseEventDef;\nexports.parseFieldSpecs = parseFieldSpecs;\nexports.parseMarker = parse;\nexports.pointInsideRect = pointInsideRect;\nexports.preventContextMenu = preventContextMenu;\nexports.preventDefault = preventDefault;\nexports.preventSelection = preventSelection;\nexports.rangeContainsMarker = rangeContainsMarker;\nexports.rangeContainsRange = rangeContainsRange;\nexports.rangesEqual = rangesEqual;\nexports.rangesIntersect = rangesIntersect;\nexports.refineEventDef = refineEventDef;\nexports.refineProps = refineProps;\nexports.removeElement = removeElement;\nexports.removeExact = removeExact;\nexports.renderChunkContent = renderChunkContent;\nexports.renderFill = renderFill;\nexports.renderMicroColGroup = renderMicroColGroup;\nexports.renderScrollShim = renderScrollShim;\nexports.requestJson = requestJson;\nexports.sanitizeShrinkWidth = sanitizeShrinkWidth;\nexports.setElSeg = setElSeg;\nexports.setRef = setRef;\nexports.sliceEventStore = sliceEventStore;\nexports.sliceEvents = sliceEvents;\nexports.sortEventSegs = sortEventSegs;\nexports.startOfDay = startOfDay;\nexports.translateRect = translateRect;\nexports.triggerDateSelect = triggerDateSelect;\nexports.unpromisify = unpromisify;\nexports.version = version;\nexports.whenTransitionDone = whenTransitionDone;\nexports.wholeDivideDurations = wholeDivideDurations;\nObject.keys(vdom_cjs).forEach(function(k) {\n    if (k !== \"default\" && !exports.hasOwnProperty(k)) Object.defineProperty(exports, k, {\n        enumerable: true,\n        get: function() {\n            return vdom_cjs[k];\n        }\n    });\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@fullcalendar/common/main.cjs.js\n");

/***/ }),

/***/ "./node_modules/@fullcalendar/common/vdom.cjs.js":
/*!*******************************************************!*\
  !*** ./node_modules/@fullcalendar/common/vdom.cjs.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n/// <reference types=\"@fullcalendar/core-preact\" />\nif (typeof FullCalendarVDom === \"undefined\") {\n    throw new Error(\"Please import the top-level fullcalendar lib before attempting to import a plugin.\");\n}\nvar Component = FullCalendarVDom.Component;\nvar createElement = FullCalendarVDom.createElement;\nvar render = FullCalendarVDom.render;\nvar createRef = FullCalendarVDom.createRef;\nvar Fragment = FullCalendarVDom.Fragment;\nvar createContext = FullCalendarVDom.createContext;\nvar createPortal = FullCalendarVDom.createPortal;\nvar flushSync = FullCalendarVDom.flushSync;\nvar unmountComponentAtNode = FullCalendarVDom.unmountComponentAtNode;\n/* eslint-enable */ exports.Component = Component;\nexports.Fragment = Fragment;\nexports.createContext = createContext;\nexports.createElement = createElement;\nexports.createPortal = createPortal;\nexports.createRef = createRef;\nexports.flushSync = flushSync;\nexports.render = render;\nexports.unmountComponentAtNode = unmountComponentAtNode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGZ1bGxjYWxlbmRhci9jb21tb24vdmRvbS5janMuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQUVHLEtBQUssRUFBRSxJQUFJO0NBQUUsRUFBQyxDQUFDO0FBRTlELG1EQUFtRDtBQUNuRCxJQUFJLE9BQU9DLGdCQUFnQixLQUFLLFdBQVcsRUFBRTtJQUN6QyxNQUFNLElBQUlDLEtBQUssQ0FBQyxvRkFBb0YsQ0FBQyxDQUFDO0NBQ3pHO0FBQ0QsSUFBSUMsU0FBUyxHQUFHRixnQkFBZ0IsQ0FBQ0UsU0FBUztBQUMxQyxJQUFJQyxhQUFhLEdBQUdILGdCQUFnQixDQUFDRyxhQUFhO0FBQ2xELElBQUlDLE1BQU0sR0FBR0osZ0JBQWdCLENBQUNJLE1BQU07QUFDcEMsSUFBSUMsU0FBUyxHQUFHTCxnQkFBZ0IsQ0FBQ0ssU0FBUztBQUMxQyxJQUFJQyxRQUFRLEdBQUdOLGdCQUFnQixDQUFDTSxRQUFRO0FBQ3hDLElBQUlDLGFBQWEsR0FBR1AsZ0JBQWdCLENBQUNPLGFBQWE7QUFDbEQsSUFBSUMsWUFBWSxHQUFHUixnQkFBZ0IsQ0FBQ1EsWUFBWTtBQUNoRCxJQUFJQyxTQUFTLEdBQUdULGdCQUFnQixDQUFDUyxTQUFTO0FBQzFDLElBQUlDLHNCQUFzQixHQUFHVixnQkFBZ0IsQ0FBQ1Usc0JBQXNCO0FBQ3BFLG1CQUFtQixDQUVuQlosaUJBQWlCLEdBQUdJLFNBQVMsQ0FBQztBQUM5QkosZ0JBQWdCLEdBQUdRLFFBQVEsQ0FBQztBQUM1QlIscUJBQXFCLEdBQUdTLGFBQWEsQ0FBQztBQUN0Q1QscUJBQXFCLEdBQUdLLGFBQWEsQ0FBQztBQUN0Q0wsb0JBQW9CLEdBQUdVLFlBQVksQ0FBQztBQUNwQ1YsaUJBQWlCLEdBQUdPLFNBQVMsQ0FBQztBQUM5QlAsaUJBQWlCLEdBQUdXLFNBQVMsQ0FBQztBQUM5QlgsY0FBYyxHQUFHTSxNQUFNLENBQUM7QUFDeEJOLDhCQUE4QixHQUFHWSxzQkFBc0IsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2RvbmdqdW5lLy4vbm9kZV9tb2R1bGVzL0BmdWxsY2FsZW5kYXIvY29tbW9uL3Zkb20uY2pzLmpzPzM3MjgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG4vLy8gPHJlZmVyZW5jZSB0eXBlcz1cIkBmdWxsY2FsZW5kYXIvY29yZS1wcmVhY3RcIiAvPlxuaWYgKHR5cGVvZiBGdWxsQ2FsZW5kYXJWRG9tID09PSAndW5kZWZpbmVkJykge1xuICAgIHRocm93IG5ldyBFcnJvcignUGxlYXNlIGltcG9ydCB0aGUgdG9wLWxldmVsIGZ1bGxjYWxlbmRhciBsaWIgYmVmb3JlIGF0dGVtcHRpbmcgdG8gaW1wb3J0IGEgcGx1Z2luLicpO1xufVxudmFyIENvbXBvbmVudCA9IEZ1bGxDYWxlbmRhclZEb20uQ29tcG9uZW50O1xudmFyIGNyZWF0ZUVsZW1lbnQgPSBGdWxsQ2FsZW5kYXJWRG9tLmNyZWF0ZUVsZW1lbnQ7XG52YXIgcmVuZGVyID0gRnVsbENhbGVuZGFyVkRvbS5yZW5kZXI7XG52YXIgY3JlYXRlUmVmID0gRnVsbENhbGVuZGFyVkRvbS5jcmVhdGVSZWY7XG52YXIgRnJhZ21lbnQgPSBGdWxsQ2FsZW5kYXJWRG9tLkZyYWdtZW50O1xudmFyIGNyZWF0ZUNvbnRleHQgPSBGdWxsQ2FsZW5kYXJWRG9tLmNyZWF0ZUNvbnRleHQ7XG52YXIgY3JlYXRlUG9ydGFsID0gRnVsbENhbGVuZGFyVkRvbS5jcmVhdGVQb3J0YWw7XG52YXIgZmx1c2hTeW5jID0gRnVsbENhbGVuZGFyVkRvbS5mbHVzaFN5bmM7XG52YXIgdW5tb3VudENvbXBvbmVudEF0Tm9kZSA9IEZ1bGxDYWxlbmRhclZEb20udW5tb3VudENvbXBvbmVudEF0Tm9kZTtcbi8qIGVzbGludC1lbmFibGUgKi9cblxuZXhwb3J0cy5Db21wb25lbnQgPSBDb21wb25lbnQ7XG5leHBvcnRzLkZyYWdtZW50ID0gRnJhZ21lbnQ7XG5leHBvcnRzLmNyZWF0ZUNvbnRleHQgPSBjcmVhdGVDb250ZXh0O1xuZXhwb3J0cy5jcmVhdGVFbGVtZW50ID0gY3JlYXRlRWxlbWVudDtcbmV4cG9ydHMuY3JlYXRlUG9ydGFsID0gY3JlYXRlUG9ydGFsO1xuZXhwb3J0cy5jcmVhdGVSZWYgPSBjcmVhdGVSZWY7XG5leHBvcnRzLmZsdXNoU3luYyA9IGZsdXNoU3luYztcbmV4cG9ydHMucmVuZGVyID0gcmVuZGVyO1xuZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlID0gdW5tb3VudENvbXBvbmVudEF0Tm9kZTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkZ1bGxDYWxlbmRhclZEb20iLCJFcnJvciIsIkNvbXBvbmVudCIsImNyZWF0ZUVsZW1lbnQiLCJyZW5kZXIiLCJjcmVhdGVSZWYiLCJGcmFnbWVudCIsImNyZWF0ZUNvbnRleHQiLCJjcmVhdGVQb3J0YWwiLCJmbHVzaFN5bmMiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@fullcalendar/common/vdom.cjs.js\n");

/***/ }),

/***/ "./node_modules/@fullcalendar/daygrid/main.cjs.js":
/*!********************************************************!*\
  !*** ./node_modules/@fullcalendar/daygrid/main.cjs.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*!\nFullCalendar v5.10.2\nDocs & License: https://fullcalendar.io/\n(c) 2021 Adam Shaw\n*/ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar common = __webpack_require__(/*! @fullcalendar/common */ \"./node_modules/@fullcalendar/common/main.cjs.js\");\nvar tslib = __webpack_require__(/*! tslib */ \"tslib\");\n;\n/* An abstract class for the daygrid views, as well as month view. Renders one or more rows of day cells.\n----------------------------------------------------------------------------------------------------------------------*/ // It is a manager for a Table subcomponent, which does most of the heavy lifting.\n// It is responsible for managing width/height.\nvar TableView = /** @class */ function(_super) {\n    tslib.__extends(TableView1, _super);\n    function TableView1() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.headerElRef = common.createRef();\n        return _this;\n    }\n    TableView1.prototype.renderSimpleLayout = function(headerRowContent, bodyContent) {\n        var _a = this, props = _a.props, context = _a.context;\n        var sections = [];\n        var stickyHeaderDates = common.getStickyHeaderDates(context.options);\n        if (headerRowContent) {\n            sections.push({\n                type: \"header\",\n                key: \"header\",\n                isSticky: stickyHeaderDates,\n                chunk: {\n                    elRef: this.headerElRef,\n                    tableClassName: \"fc-col-header\",\n                    rowContent: headerRowContent\n                }\n            });\n        }\n        sections.push({\n            type: \"body\",\n            key: \"body\",\n            liquid: true,\n            chunk: {\n                content: bodyContent\n            }\n        });\n        return common.createElement(common.ViewRoot, {\n            viewSpec: context.viewSpec\n        }, function(rootElRef, classNames) {\n            return common.createElement(\"div\", {\n                ref: rootElRef,\n                className: [\n                    \"fc-daygrid\"\n                ].concat(classNames).join(\" \")\n            }, common.createElement(common.SimpleScrollGrid, {\n                liquid: !props.isHeightAuto && !props.forPrint,\n                collapsibleWidth: props.forPrint,\n                cols: [],\n                sections: sections\n            }));\n        });\n    };\n    TableView1.prototype.renderHScrollLayout = function(headerRowContent, bodyContent, colCnt, dayMinWidth) {\n        var ScrollGrid = this.context.pluginHooks.scrollGridImpl;\n        if (!ScrollGrid) {\n            throw new Error(\"No ScrollGrid implementation\");\n        }\n        var _a = this, props = _a.props, context = _a.context;\n        var stickyHeaderDates = !props.forPrint && common.getStickyHeaderDates(context.options);\n        var stickyFooterScrollbar = !props.forPrint && common.getStickyFooterScrollbar(context.options);\n        var sections = [];\n        if (headerRowContent) {\n            sections.push({\n                type: \"header\",\n                key: \"header\",\n                isSticky: stickyHeaderDates,\n                chunks: [\n                    {\n                        key: \"main\",\n                        elRef: this.headerElRef,\n                        tableClassName: \"fc-col-header\",\n                        rowContent: headerRowContent\n                    }\n                ]\n            });\n        }\n        sections.push({\n            type: \"body\",\n            key: \"body\",\n            liquid: true,\n            chunks: [\n                {\n                    key: \"main\",\n                    content: bodyContent\n                }\n            ]\n        });\n        if (stickyFooterScrollbar) {\n            sections.push({\n                type: \"footer\",\n                key: \"footer\",\n                isSticky: true,\n                chunks: [\n                    {\n                        key: \"main\",\n                        content: common.renderScrollShim\n                    }\n                ]\n            });\n        }\n        return common.createElement(common.ViewRoot, {\n            viewSpec: context.viewSpec\n        }, function(rootElRef, classNames) {\n            return common.createElement(\"div\", {\n                ref: rootElRef,\n                className: [\n                    \"fc-daygrid\"\n                ].concat(classNames).join(\" \")\n            }, common.createElement(ScrollGrid, {\n                liquid: !props.isHeightAuto && !props.forPrint,\n                collapsibleWidth: props.forPrint,\n                colGroups: [\n                    {\n                        cols: [\n                            {\n                                span: colCnt,\n                                minWidth: dayMinWidth\n                            }\n                        ]\n                    }\n                ],\n                sections: sections\n            }));\n        });\n    };\n    return TableView1;\n}(common.DateComponent);\nfunction splitSegsByRow(segs, rowCnt) {\n    var byRow = [];\n    for(var i = 0; i < rowCnt; i += 1){\n        byRow[i] = [];\n    }\n    for(var _i = 0, segs_1 = segs; _i < segs_1.length; _i++){\n        var seg = segs_1[_i];\n        byRow[seg.row].push(seg);\n    }\n    return byRow;\n}\nfunction splitSegsByFirstCol(segs, colCnt) {\n    var byCol = [];\n    for(var i = 0; i < colCnt; i += 1){\n        byCol[i] = [];\n    }\n    for(var _i = 0, segs_2 = segs; _i < segs_2.length; _i++){\n        var seg = segs_2[_i];\n        byCol[seg.firstCol].push(seg);\n    }\n    return byCol;\n}\nfunction splitInteractionByRow(ui, rowCnt) {\n    var byRow = [];\n    if (!ui) {\n        for(var i = 0; i < rowCnt; i += 1){\n            byRow[i] = null;\n        }\n    } else {\n        for(var i = 0; i < rowCnt; i += 1){\n            byRow[i] = {\n                affectedInstances: ui.affectedInstances,\n                isEvent: ui.isEvent,\n                segs: []\n            };\n        }\n        for(var _i = 0, _a = ui.segs; _i < _a.length; _i++){\n            var seg = _a[_i];\n            byRow[seg.row].segs.push(seg);\n        }\n    }\n    return byRow;\n}\nvar TableCellTop = /** @class */ function(_super) {\n    tslib.__extends(TableCellTop1, _super);\n    function TableCellTop1() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    TableCellTop1.prototype.render = function() {\n        var props = this.props;\n        var navLinkAttrs = common.buildNavLinkAttrs(this.context, props.date);\n        return common.createElement(common.DayCellContent, {\n            date: props.date,\n            dateProfile: props.dateProfile,\n            todayRange: props.todayRange,\n            showDayNumber: props.showDayNumber,\n            extraHookProps: props.extraHookProps,\n            defaultContent: renderTopInner\n        }, function(innerElRef, innerContent) {\n            return (innerContent || props.forceDayTop) && common.createElement(\"div\", {\n                className: \"fc-daygrid-day-top\",\n                ref: innerElRef\n            }, common.createElement(\"a\", tslib.__assign({\n                id: props.dayNumberId,\n                className: \"fc-daygrid-day-number\"\n            }, navLinkAttrs), innerContent || common.createElement(common.Fragment, null, \"\\xa0\")));\n        });\n    };\n    return TableCellTop1;\n}(common.BaseComponent);\nfunction renderTopInner(props) {\n    return props.dayNumberText;\n}\nvar DEFAULT_TABLE_EVENT_TIME_FORMAT = common.createFormatter({\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    omitZeroMinute: true,\n    meridiem: \"narrow\"\n});\nfunction hasListItemDisplay(seg) {\n    var display = seg.eventRange.ui.display;\n    return display === \"list-item\" || display === \"auto\" && !seg.eventRange.def.allDay && seg.firstCol === seg.lastCol && seg.isStart && seg.isEnd // \"\n    ;\n}\nvar TableBlockEvent = /** @class */ function(_super) {\n    tslib.__extends(TableBlockEvent1, _super);\n    function TableBlockEvent1() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    TableBlockEvent1.prototype.render = function() {\n        var props = this.props;\n        return common.createElement(common.StandardEvent, tslib.__assign({}, props, {\n            extraClassNames: [\n                \"fc-daygrid-event\",\n                \"fc-daygrid-block-event\",\n                \"fc-h-event\"\n            ],\n            defaultTimeFormat: DEFAULT_TABLE_EVENT_TIME_FORMAT,\n            defaultDisplayEventEnd: props.defaultDisplayEventEnd,\n            disableResizing: !props.seg.eventRange.def.allDay\n        }));\n    };\n    return TableBlockEvent1;\n}(common.BaseComponent);\nvar TableListItemEvent = /** @class */ function(_super) {\n    tslib.__extends(TableListItemEvent1, _super);\n    function TableListItemEvent1() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    TableListItemEvent1.prototype.render = function() {\n        var _a = this, props = _a.props, context = _a.context;\n        var timeFormat = context.options.eventTimeFormat || DEFAULT_TABLE_EVENT_TIME_FORMAT;\n        var timeText = common.buildSegTimeText(props.seg, timeFormat, context, true, props.defaultDisplayEventEnd);\n        return common.createElement(common.EventRoot, {\n            seg: props.seg,\n            timeText: timeText,\n            defaultContent: renderInnerContent,\n            isDragging: props.isDragging,\n            isResizing: false,\n            isDateSelecting: false,\n            isSelected: props.isSelected,\n            isPast: props.isPast,\n            isFuture: props.isFuture,\n            isToday: props.isToday\n        }, function(rootElRef, classNames, innerElRef, innerContent) {\n            return common.createElement(\"a\", tslib.__assign({\n                className: [\n                    \"fc-daygrid-event\",\n                    \"fc-daygrid-dot-event\"\n                ].concat(classNames).join(\" \"),\n                ref: rootElRef\n            }, common.getSegAnchorAttrs(props.seg, context)), innerContent);\n        });\n    };\n    return TableListItemEvent1;\n}(common.BaseComponent);\nfunction renderInnerContent(innerProps) {\n    return common.createElement(common.Fragment, null, common.createElement(\"div\", {\n        className: \"fc-daygrid-event-dot\",\n        style: {\n            borderColor: innerProps.borderColor || innerProps.backgroundColor\n        }\n    }), innerProps.timeText && common.createElement(\"div\", {\n        className: \"fc-event-time\"\n    }, innerProps.timeText), common.createElement(\"div\", {\n        className: \"fc-event-title\"\n    }, innerProps.event.title || common.createElement(common.Fragment, null, \"\\xa0\")));\n}\nvar TableCellMoreLink = /** @class */ function(_super) {\n    tslib.__extends(TableCellMoreLink1, _super);\n    function TableCellMoreLink1() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.compileSegs = common.memoize(compileSegs);\n        return _this;\n    }\n    TableCellMoreLink1.prototype.render = function() {\n        var props = this.props;\n        var _a = this.compileSegs(props.singlePlacements), allSegs = _a.allSegs, invisibleSegs = _a.invisibleSegs;\n        return common.createElement(common.MoreLinkRoot, {\n            dateProfile: props.dateProfile,\n            todayRange: props.todayRange,\n            allDayDate: props.allDayDate,\n            moreCnt: props.moreCnt,\n            allSegs: allSegs,\n            hiddenSegs: invisibleSegs,\n            alignmentElRef: props.alignmentElRef,\n            alignGridTop: props.alignGridTop,\n            extraDateSpan: props.extraDateSpan,\n            popoverContent: function() {\n                var isForcedInvisible = (props.eventDrag ? props.eventDrag.affectedInstances : null) || (props.eventResize ? props.eventResize.affectedInstances : null) || {};\n                return common.createElement(common.Fragment, null, allSegs.map(function(seg) {\n                    var instanceId = seg.eventRange.instance.instanceId;\n                    return common.createElement(\"div\", {\n                        className: \"fc-daygrid-event-harness\",\n                        key: instanceId,\n                        style: {\n                            visibility: isForcedInvisible[instanceId] ? \"hidden\" : \"\"\n                        }\n                    }, hasListItemDisplay(seg) ? common.createElement(TableListItemEvent, tslib.__assign({\n                        seg: seg,\n                        isDragging: false,\n                        isSelected: instanceId === props.eventSelection,\n                        defaultDisplayEventEnd: false\n                    }, common.getSegMeta(seg, props.todayRange))) : common.createElement(TableBlockEvent, tslib.__assign({\n                        seg: seg,\n                        isDragging: false,\n                        isResizing: false,\n                        isDateSelecting: false,\n                        isSelected: instanceId === props.eventSelection,\n                        defaultDisplayEventEnd: false\n                    }, common.getSegMeta(seg, props.todayRange))));\n                }));\n            }\n        }, function(rootElRef, classNames, innerElRef, innerContent, handleClick, title, isExpanded, popoverId) {\n            return common.createElement(\"a\", tslib.__assign({\n                ref: rootElRef,\n                className: [\n                    \"fc-daygrid-more-link\"\n                ].concat(classNames).join(\" \"),\n                title: title,\n                \"aria-expanded\": isExpanded,\n                \"aria-controls\": popoverId\n            }, common.createAriaClickAttrs(handleClick)), innerContent);\n        });\n    };\n    return TableCellMoreLink1;\n}(common.BaseComponent);\nfunction compileSegs(singlePlacements) {\n    var allSegs = [];\n    var invisibleSegs = [];\n    for(var _i = 0, singlePlacements_1 = singlePlacements; _i < singlePlacements_1.length; _i++){\n        var placement = singlePlacements_1[_i];\n        allSegs.push(placement.seg);\n        if (!placement.isVisible) {\n            invisibleSegs.push(placement.seg);\n        }\n    }\n    return {\n        allSegs: allSegs,\n        invisibleSegs: invisibleSegs\n    };\n}\nvar DEFAULT_WEEK_NUM_FORMAT = common.createFormatter({\n    week: \"narrow\"\n});\nvar TableCell = /** @class */ function(_super) {\n    tslib.__extends(TableCell1, _super);\n    function TableCell1() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.rootElRef = common.createRef();\n        _this.state = {\n            dayNumberId: common.getUniqueDomId()\n        };\n        _this.handleRootEl = function(el) {\n            common.setRef(_this.rootElRef, el);\n            common.setRef(_this.props.elRef, el);\n        };\n        return _this;\n    }\n    TableCell1.prototype.render = function() {\n        var _a = this, context = _a.context, props = _a.props, state = _a.state, rootElRef = _a.rootElRef;\n        var date = props.date, dateProfile = props.dateProfile;\n        var navLinkAttrs = common.buildNavLinkAttrs(context, date, \"week\");\n        return common.createElement(common.DayCellRoot, {\n            date: date,\n            dateProfile: dateProfile,\n            todayRange: props.todayRange,\n            showDayNumber: props.showDayNumber,\n            extraHookProps: props.extraHookProps,\n            elRef: this.handleRootEl\n        }, function(dayElRef, dayClassNames, rootDataAttrs, isDisabled) {\n            return common.createElement(\"td\", tslib.__assign({\n                ref: dayElRef,\n                role: \"gridcell\",\n                className: [\n                    \"fc-daygrid-day\"\n                ].concat(dayClassNames, props.extraClassNames || []).join(\" \")\n            }, rootDataAttrs, props.extraDataAttrs, props.showDayNumber ? {\n                \"aria-labelledby\": state.dayNumberId\n            } : {}), common.createElement(\"div\", {\n                className: \"fc-daygrid-day-frame fc-scrollgrid-sync-inner\",\n                ref: props.innerElRef /* different from hook system! RENAME */ \n            }, props.showWeekNumber && common.createElement(common.WeekNumberRoot, {\n                date: date,\n                defaultFormat: DEFAULT_WEEK_NUM_FORMAT\n            }, function(weekElRef, weekClassNames, innerElRef, innerContent) {\n                return common.createElement(\"a\", tslib.__assign({\n                    ref: weekElRef,\n                    className: [\n                        \"fc-daygrid-week-number\"\n                    ].concat(weekClassNames).join(\" \")\n                }, navLinkAttrs), innerContent);\n            }), !isDisabled && common.createElement(TableCellTop, {\n                date: date,\n                dateProfile: dateProfile,\n                showDayNumber: props.showDayNumber,\n                dayNumberId: state.dayNumberId,\n                forceDayTop: props.forceDayTop,\n                todayRange: props.todayRange,\n                extraHookProps: props.extraHookProps\n            }), common.createElement(\"div\", {\n                className: \"fc-daygrid-day-events\",\n                ref: props.fgContentElRef\n            }, props.fgContent, common.createElement(\"div\", {\n                className: \"fc-daygrid-day-bottom\",\n                style: {\n                    marginTop: props.moreMarginTop\n                }\n            }, common.createElement(TableCellMoreLink, {\n                allDayDate: date,\n                singlePlacements: props.singlePlacements,\n                moreCnt: props.moreCnt,\n                alignmentElRef: rootElRef,\n                alignGridTop: !props.showDayNumber,\n                extraDateSpan: props.extraDateSpan,\n                dateProfile: props.dateProfile,\n                eventSelection: props.eventSelection,\n                eventDrag: props.eventDrag,\n                eventResize: props.eventResize,\n                todayRange: props.todayRange\n            }))), common.createElement(\"div\", {\n                className: \"fc-daygrid-day-bg\"\n            }, props.bgContent)));\n        });\n    };\n    return TableCell1;\n}(common.DateComponent);\nfunction computeFgSegPlacement(segs, dayMaxEvents, dayMaxEventRows, strictOrder, eventInstanceHeights, maxContentHeight, cells) {\n    var hierarchy = new DayGridSegHierarchy();\n    hierarchy.allowReslicing = true;\n    hierarchy.strictOrder = strictOrder;\n    if (dayMaxEvents === true || dayMaxEventRows === true) {\n        hierarchy.maxCoord = maxContentHeight;\n        hierarchy.hiddenConsumes = true;\n    } else if (typeof dayMaxEvents === \"number\") {\n        hierarchy.maxStackCnt = dayMaxEvents;\n    } else if (typeof dayMaxEventRows === \"number\") {\n        hierarchy.maxStackCnt = dayMaxEventRows;\n        hierarchy.hiddenConsumes = true;\n    }\n    // create segInputs only for segs with known heights\n    var segInputs = [];\n    var unknownHeightSegs = [];\n    for(var i = 0; i < segs.length; i += 1){\n        var seg = segs[i];\n        var instanceId = seg.eventRange.instance.instanceId;\n        var eventHeight = eventInstanceHeights[instanceId];\n        if (eventHeight != null) {\n            segInputs.push({\n                index: i,\n                thickness: eventHeight,\n                span: {\n                    start: seg.firstCol,\n                    end: seg.lastCol + 1\n                }\n            });\n        } else {\n            unknownHeightSegs.push(seg);\n        }\n    }\n    var hiddenEntries = hierarchy.addSegs(segInputs);\n    var segRects = hierarchy.toRects();\n    var _a = placeRects(segRects, segs, cells), singleColPlacements = _a.singleColPlacements, multiColPlacements = _a.multiColPlacements, leftoverMargins = _a.leftoverMargins;\n    var moreCnts = [];\n    var moreMarginTops = [];\n    // add segs with unknown heights\n    for(var _i = 0, unknownHeightSegs_1 = unknownHeightSegs; _i < unknownHeightSegs_1.length; _i++){\n        var seg = unknownHeightSegs_1[_i];\n        multiColPlacements[seg.firstCol].push({\n            seg: seg,\n            isVisible: false,\n            isAbsolute: true,\n            absoluteTop: 0,\n            marginTop: 0\n        });\n        for(var col = seg.firstCol; col <= seg.lastCol; col += 1){\n            singleColPlacements[col].push({\n                seg: resliceSeg(seg, col, col + 1, cells),\n                isVisible: false,\n                isAbsolute: false,\n                absoluteTop: 0,\n                marginTop: 0\n            });\n        }\n    }\n    // add the hidden entries\n    for(var col = 0; col < cells.length; col += 1){\n        moreCnts.push(0);\n    }\n    for(var _b = 0, hiddenEntries_1 = hiddenEntries; _b < hiddenEntries_1.length; _b++){\n        var hiddenEntry = hiddenEntries_1[_b];\n        var seg = segs[hiddenEntry.index];\n        var hiddenSpan = hiddenEntry.span;\n        multiColPlacements[hiddenSpan.start].push({\n            seg: resliceSeg(seg, hiddenSpan.start, hiddenSpan.end, cells),\n            isVisible: false,\n            isAbsolute: true,\n            absoluteTop: 0,\n            marginTop: 0\n        });\n        for(var col = hiddenSpan.start; col < hiddenSpan.end; col += 1){\n            moreCnts[col] += 1;\n            singleColPlacements[col].push({\n                seg: resliceSeg(seg, col, col + 1, cells),\n                isVisible: false,\n                isAbsolute: false,\n                absoluteTop: 0,\n                marginTop: 0\n            });\n        }\n    }\n    // deal with leftover margins\n    for(var col = 0; col < cells.length; col += 1){\n        moreMarginTops.push(leftoverMargins[col]);\n    }\n    return {\n        singleColPlacements: singleColPlacements,\n        multiColPlacements: multiColPlacements,\n        moreCnts: moreCnts,\n        moreMarginTops: moreMarginTops\n    };\n}\n// rects ordered by top coord, then left\nfunction placeRects(allRects, segs, cells) {\n    var rectsByEachCol = groupRectsByEachCol(allRects, cells.length);\n    var singleColPlacements = [];\n    var multiColPlacements = [];\n    var leftoverMargins = [];\n    for(var col = 0; col < cells.length; col += 1){\n        var rects = rectsByEachCol[col];\n        // compute all static segs in singlePlacements\n        var singlePlacements = [];\n        var currentHeight = 0;\n        var currentMarginTop = 0;\n        for(var _i = 0, rects_1 = rects; _i < rects_1.length; _i++){\n            var rect = rects_1[_i];\n            var seg = segs[rect.index];\n            singlePlacements.push({\n                seg: resliceSeg(seg, col, col + 1, cells),\n                isVisible: true,\n                isAbsolute: false,\n                absoluteTop: rect.levelCoord,\n                marginTop: rect.levelCoord - currentHeight\n            });\n            currentHeight = rect.levelCoord + rect.thickness;\n        }\n        // compute mixed static/absolute segs in multiPlacements\n        var multiPlacements = [];\n        currentHeight = 0;\n        currentMarginTop = 0;\n        for(var _a = 0, rects_2 = rects; _a < rects_2.length; _a++){\n            var rect = rects_2[_a];\n            var seg = segs[rect.index];\n            var isAbsolute = rect.span.end - rect.span.start > 1; // multi-column?\n            var isFirstCol = rect.span.start === col;\n            currentMarginTop += rect.levelCoord - currentHeight; // amount of space since bottom of previous seg\n            currentHeight = rect.levelCoord + rect.thickness; // height will now be bottom of current seg\n            if (isAbsolute) {\n                currentMarginTop += rect.thickness;\n                if (isFirstCol) {\n                    multiPlacements.push({\n                        seg: resliceSeg(seg, rect.span.start, rect.span.end, cells),\n                        isVisible: true,\n                        isAbsolute: true,\n                        absoluteTop: rect.levelCoord,\n                        marginTop: 0\n                    });\n                }\n            } else if (isFirstCol) {\n                multiPlacements.push({\n                    seg: resliceSeg(seg, rect.span.start, rect.span.end, cells),\n                    isVisible: true,\n                    isAbsolute: false,\n                    absoluteTop: rect.levelCoord,\n                    marginTop: currentMarginTop\n                });\n                currentMarginTop = 0;\n            }\n        }\n        singleColPlacements.push(singlePlacements);\n        multiColPlacements.push(multiPlacements);\n        leftoverMargins.push(currentMarginTop);\n    }\n    return {\n        singleColPlacements: singleColPlacements,\n        multiColPlacements: multiColPlacements,\n        leftoverMargins: leftoverMargins\n    };\n}\nfunction groupRectsByEachCol(rects, colCnt) {\n    var rectsByEachCol = [];\n    for(var col = 0; col < colCnt; col += 1){\n        rectsByEachCol.push([]);\n    }\n    for(var _i = 0, rects_3 = rects; _i < rects_3.length; _i++){\n        var rect = rects_3[_i];\n        for(var col = rect.span.start; col < rect.span.end; col += 1){\n            rectsByEachCol[col].push(rect);\n        }\n    }\n    return rectsByEachCol;\n}\nfunction resliceSeg(seg, spanStart, spanEnd, cells) {\n    if (seg.firstCol === spanStart && seg.lastCol === spanEnd - 1) {\n        return seg;\n    }\n    var eventRange = seg.eventRange;\n    var origRange = eventRange.range;\n    var slicedRange = common.intersectRanges(origRange, {\n        start: cells[spanStart].date,\n        end: common.addDays(cells[spanEnd - 1].date, 1)\n    });\n    return tslib.__assign(tslib.__assign({}, seg), {\n        firstCol: spanStart,\n        lastCol: spanEnd - 1,\n        eventRange: {\n            def: eventRange.def,\n            ui: tslib.__assign(tslib.__assign({}, eventRange.ui), {\n                durationEditable: false\n            }),\n            instance: eventRange.instance,\n            range: slicedRange\n        },\n        isStart: seg.isStart && slicedRange.start.valueOf() === origRange.start.valueOf(),\n        isEnd: seg.isEnd && slicedRange.end.valueOf() === origRange.end.valueOf()\n    });\n}\nvar DayGridSegHierarchy = /** @class */ function(_super) {\n    tslib.__extends(DayGridSegHierarchy1, _super);\n    function DayGridSegHierarchy1() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        // config\n        _this.hiddenConsumes = false;\n        // allows us to keep hidden entries in the hierarchy so they take up space\n        _this.forceHidden = {};\n        return _this;\n    }\n    DayGridSegHierarchy1.prototype.addSegs = function(segInputs) {\n        var _this = this;\n        var hiddenSegs = _super.prototype.addSegs.call(this, segInputs);\n        var entriesByLevel = this.entriesByLevel;\n        var excludeHidden = function(entry) {\n            return !_this.forceHidden[common.buildEntryKey(entry)];\n        };\n        // remove the forced-hidden segs\n        for(var level = 0; level < entriesByLevel.length; level += 1){\n            entriesByLevel[level] = entriesByLevel[level].filter(excludeHidden);\n        }\n        return hiddenSegs;\n    };\n    DayGridSegHierarchy1.prototype.handleInvalidInsertion = function(insertion, entry, hiddenEntries) {\n        var _a = this, entriesByLevel = _a.entriesByLevel, forceHidden = _a.forceHidden;\n        var touchingEntry = insertion.touchingEntry, touchingLevel = insertion.touchingLevel, touchingLateral = insertion.touchingLateral;\n        if (this.hiddenConsumes && touchingEntry) {\n            var touchingEntryId = common.buildEntryKey(touchingEntry);\n            // if not already hidden\n            if (!forceHidden[touchingEntryId]) {\n                if (this.allowReslicing) {\n                    var placeholderEntry = tslib.__assign(tslib.__assign({}, touchingEntry), {\n                        span: common.intersectSpans(touchingEntry.span, entry.span)\n                    });\n                    var placeholderEntryId = common.buildEntryKey(placeholderEntry);\n                    forceHidden[placeholderEntryId] = true;\n                    entriesByLevel[touchingLevel][touchingLateral] = placeholderEntry; // replace touchingEntry with our placeholder\n                    this.splitEntry(touchingEntry, entry, hiddenEntries); // split up the touchingEntry, reinsert it\n                } else {\n                    forceHidden[touchingEntryId] = true;\n                    hiddenEntries.push(touchingEntry);\n                }\n            }\n        }\n        return _super.prototype.handleInvalidInsertion.call(this, insertion, entry, hiddenEntries);\n    };\n    return DayGridSegHierarchy1;\n}(common.SegHierarchy);\nvar TableRow = /** @class */ function(_super) {\n    tslib.__extends(TableRow1, _super);\n    function TableRow1() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.cellElRefs = new common.RefMap(); // the <td>\n        _this.frameElRefs = new common.RefMap(); // the fc-daygrid-day-frame\n        _this.fgElRefs = new common.RefMap(); // the fc-daygrid-day-events\n        _this.segHarnessRefs = new common.RefMap(); // indexed by \"instanceId:firstCol\"\n        _this.rootElRef = common.createRef();\n        _this.state = {\n            framePositions: null,\n            maxContentHeight: null,\n            eventInstanceHeights: {}\n        };\n        return _this;\n    }\n    TableRow1.prototype.render = function() {\n        var _this = this;\n        var _a = this, props = _a.props, state = _a.state, context = _a.context;\n        var options = context.options;\n        var colCnt = props.cells.length;\n        var businessHoursByCol = splitSegsByFirstCol(props.businessHourSegs, colCnt);\n        var bgEventSegsByCol = splitSegsByFirstCol(props.bgEventSegs, colCnt);\n        var highlightSegsByCol = splitSegsByFirstCol(this.getHighlightSegs(), colCnt);\n        var mirrorSegsByCol = splitSegsByFirstCol(this.getMirrorSegs(), colCnt);\n        var _b = computeFgSegPlacement(common.sortEventSegs(props.fgEventSegs, options.eventOrder), props.dayMaxEvents, props.dayMaxEventRows, options.eventOrderStrict, state.eventInstanceHeights, state.maxContentHeight, props.cells), singleColPlacements = _b.singleColPlacements, multiColPlacements = _b.multiColPlacements, moreCnts = _b.moreCnts, moreMarginTops = _b.moreMarginTops;\n        var isForcedInvisible = props.eventDrag && props.eventDrag.affectedInstances || props.eventResize && props.eventResize.affectedInstances || {};\n        return common.createElement(\"tr\", {\n            ref: this.rootElRef,\n            role: \"row\"\n        }, props.renderIntro && props.renderIntro(), props.cells.map(function(cell, col) {\n            var normalFgNodes = _this.renderFgSegs(col, props.forPrint ? singleColPlacements[col] : multiColPlacements[col], props.todayRange, isForcedInvisible);\n            var mirrorFgNodes = _this.renderFgSegs(col, buildMirrorPlacements(mirrorSegsByCol[col], multiColPlacements), props.todayRange, {}, Boolean(props.eventDrag), Boolean(props.eventResize), false);\n            return common.createElement(TableCell, {\n                key: cell.key,\n                elRef: _this.cellElRefs.createRef(cell.key),\n                innerElRef: _this.frameElRefs.createRef(cell.key),\n                dateProfile: props.dateProfile,\n                date: cell.date,\n                showDayNumber: props.showDayNumbers,\n                showWeekNumber: props.showWeekNumbers && col === 0,\n                forceDayTop: props.showWeekNumbers /* even displaying weeknum for row, not necessarily day */ ,\n                todayRange: props.todayRange,\n                eventSelection: props.eventSelection,\n                eventDrag: props.eventDrag,\n                eventResize: props.eventResize,\n                extraHookProps: cell.extraHookProps,\n                extraDataAttrs: cell.extraDataAttrs,\n                extraClassNames: cell.extraClassNames,\n                extraDateSpan: cell.extraDateSpan,\n                moreCnt: moreCnts[col],\n                moreMarginTop: moreMarginTops[col],\n                singlePlacements: singleColPlacements[col],\n                fgContentElRef: _this.fgElRefs.createRef(cell.key),\n                fgContent: common.createElement(common.Fragment, null, common.createElement(common.Fragment, null, normalFgNodes), common.createElement(common.Fragment, null, mirrorFgNodes)),\n                bgContent: common.createElement(common.Fragment, null, _this.renderFillSegs(highlightSegsByCol[col], \"highlight\"), _this.renderFillSegs(businessHoursByCol[col], \"non-business\"), _this.renderFillSegs(bgEventSegsByCol[col], \"bg-event\"))\n            });\n        }));\n    };\n    TableRow1.prototype.componentDidMount = function() {\n        this.updateSizing(true);\n    };\n    TableRow1.prototype.componentDidUpdate = function(prevProps, prevState) {\n        var currentProps = this.props;\n        this.updateSizing(!common.isPropsEqual(prevProps, currentProps));\n    };\n    TableRow1.prototype.getHighlightSegs = function() {\n        var props = this.props;\n        if (props.eventDrag && props.eventDrag.segs.length) {\n            return props.eventDrag.segs;\n        }\n        if (props.eventResize && props.eventResize.segs.length) {\n            return props.eventResize.segs;\n        }\n        return props.dateSelectionSegs;\n    };\n    TableRow1.prototype.getMirrorSegs = function() {\n        var props = this.props;\n        if (props.eventResize && props.eventResize.segs.length) {\n            return props.eventResize.segs;\n        }\n        return [];\n    };\n    TableRow1.prototype.renderFgSegs = function(col, segPlacements, todayRange, isForcedInvisible, isDragging, isResizing, isDateSelecting) {\n        var context = this.context;\n        var eventSelection = this.props.eventSelection;\n        var framePositions = this.state.framePositions;\n        var defaultDisplayEventEnd = this.props.cells.length === 1; // colCnt === 1\n        var isMirror = isDragging || isResizing || isDateSelecting;\n        var nodes = [];\n        if (framePositions) {\n            for(var _i = 0, segPlacements_1 = segPlacements; _i < segPlacements_1.length; _i++){\n                var placement = segPlacements_1[_i];\n                var seg = placement.seg;\n                var instanceId = seg.eventRange.instance.instanceId;\n                var key = instanceId + \":\" + col;\n                var isVisible = placement.isVisible && !isForcedInvisible[instanceId];\n                var isAbsolute = placement.isAbsolute;\n                var left = \"\";\n                var right = \"\";\n                if (isAbsolute) {\n                    if (context.isRtl) {\n                        right = 0;\n                        left = framePositions.lefts[seg.lastCol] - framePositions.lefts[seg.firstCol];\n                    } else {\n                        left = 0;\n                        right = framePositions.rights[seg.firstCol] - framePositions.rights[seg.lastCol];\n                    }\n                }\n                /*\n                known bug: events that are force to be list-item but span multiple days still take up space in later columns\n                todo: in print view, for multi-day events, don't display title within non-start/end segs\n                */ nodes.push(common.createElement(\"div\", {\n                    className: \"fc-daygrid-event-harness\" + (isAbsolute ? \" fc-daygrid-event-harness-abs\" : \"\"),\n                    key: key,\n                    ref: isMirror ? null : this.segHarnessRefs.createRef(key),\n                    style: {\n                        visibility: isVisible ? \"\" : \"hidden\",\n                        marginTop: isAbsolute ? \"\" : placement.marginTop,\n                        top: isAbsolute ? placement.absoluteTop : \"\",\n                        left: left,\n                        right: right\n                    }\n                }, hasListItemDisplay(seg) ? common.createElement(TableListItemEvent, tslib.__assign({\n                    seg: seg,\n                    isDragging: isDragging,\n                    isSelected: instanceId === eventSelection,\n                    defaultDisplayEventEnd: defaultDisplayEventEnd\n                }, common.getSegMeta(seg, todayRange))) : common.createElement(TableBlockEvent, tslib.__assign({\n                    seg: seg,\n                    isDragging: isDragging,\n                    isResizing: isResizing,\n                    isDateSelecting: isDateSelecting,\n                    isSelected: instanceId === eventSelection,\n                    defaultDisplayEventEnd: defaultDisplayEventEnd\n                }, common.getSegMeta(seg, todayRange)))));\n            }\n        }\n        return nodes;\n    };\n    TableRow1.prototype.renderFillSegs = function(segs, fillType) {\n        var isRtl = this.context.isRtl;\n        var todayRange = this.props.todayRange;\n        var framePositions = this.state.framePositions;\n        var nodes = [];\n        if (framePositions) {\n            for(var _i = 0, segs_1 = segs; _i < segs_1.length; _i++){\n                var seg = segs_1[_i];\n                var leftRightCss = isRtl ? {\n                    right: 0,\n                    left: framePositions.lefts[seg.lastCol] - framePositions.lefts[seg.firstCol]\n                } : {\n                    left: 0,\n                    right: framePositions.rights[seg.firstCol] - framePositions.rights[seg.lastCol]\n                };\n                nodes.push(common.createElement(\"div\", {\n                    key: common.buildEventRangeKey(seg.eventRange),\n                    className: \"fc-daygrid-bg-harness\",\n                    style: leftRightCss\n                }, fillType === \"bg-event\" ? common.createElement(common.BgEvent, tslib.__assign({\n                    seg: seg\n                }, common.getSegMeta(seg, todayRange))) : common.renderFill(fillType)));\n            }\n        }\n        return common.createElement.apply(void 0, tslib.__spreadArray([\n            common.Fragment,\n            {}\n        ], nodes));\n    };\n    TableRow1.prototype.updateSizing = function(isExternalSizingChange) {\n        var _a = this, props = _a.props, frameElRefs = _a.frameElRefs;\n        if (!props.forPrint && props.clientWidth !== null // positioning ready?\n        ) {\n            if (isExternalSizingChange) {\n                var frameEls = props.cells.map(function(cell) {\n                    return frameElRefs.currentMap[cell.key];\n                });\n                if (frameEls.length) {\n                    var originEl = this.rootElRef.current;\n                    this.setState({\n                        framePositions: new common.PositionCache(originEl, frameEls, true, false)\n                    });\n                }\n            }\n            var oldInstanceHeights = this.state.eventInstanceHeights;\n            var newInstanceHeights = this.queryEventInstanceHeights();\n            var limitByContentHeight = props.dayMaxEvents === true || props.dayMaxEventRows === true;\n            this.setState({\n                // HACK to prevent oscillations of events being shown/hidden from max-event-rows\n                // Essentially, once you compute an element's height, never null-out.\n                // TODO: always display all events, as visibility:hidden?\n                eventInstanceHeights: tslib.__assign(tslib.__assign({}, oldInstanceHeights), newInstanceHeights),\n                maxContentHeight: limitByContentHeight ? this.computeMaxContentHeight() : null\n            });\n        }\n    };\n    TableRow1.prototype.queryEventInstanceHeights = function() {\n        var segElMap = this.segHarnessRefs.currentMap;\n        var eventInstanceHeights = {};\n        // get the max height amongst instance segs\n        for(var key in segElMap){\n            var height = Math.round(segElMap[key].getBoundingClientRect().height);\n            var instanceId = key.split(\":\")[0]; // deconstruct how renderFgSegs makes the key\n            eventInstanceHeights[instanceId] = Math.max(eventInstanceHeights[instanceId] || 0, height);\n        }\n        return eventInstanceHeights;\n    };\n    TableRow1.prototype.computeMaxContentHeight = function() {\n        var firstKey = this.props.cells[0].key;\n        var cellEl = this.cellElRefs.currentMap[firstKey];\n        var fcContainerEl = this.fgElRefs.currentMap[firstKey];\n        return cellEl.getBoundingClientRect().bottom - fcContainerEl.getBoundingClientRect().top;\n    };\n    TableRow1.prototype.getCellEls = function() {\n        var elMap = this.cellElRefs.currentMap;\n        return this.props.cells.map(function(cell) {\n            return elMap[cell.key];\n        });\n    };\n    return TableRow1;\n}(common.DateComponent);\nTableRow.addStateEquality({\n    eventInstanceHeights: common.isPropsEqual\n});\nfunction buildMirrorPlacements(mirrorSegs, colPlacements) {\n    if (!mirrorSegs.length) {\n        return [];\n    }\n    var topsByInstanceId = buildAbsoluteTopHash(colPlacements); // TODO: cache this at first render?\n    return mirrorSegs.map(function(seg) {\n        return {\n            seg: seg,\n            isVisible: true,\n            isAbsolute: true,\n            absoluteTop: topsByInstanceId[seg.eventRange.instance.instanceId],\n            marginTop: 0\n        };\n    });\n}\nfunction buildAbsoluteTopHash(colPlacements) {\n    var topsByInstanceId = {};\n    for(var _i = 0, colPlacements_1 = colPlacements; _i < colPlacements_1.length; _i++){\n        var placements = colPlacements_1[_i];\n        for(var _a = 0, placements_1 = placements; _a < placements_1.length; _a++){\n            var placement = placements_1[_a];\n            topsByInstanceId[placement.seg.eventRange.instance.instanceId] = placement.absoluteTop;\n        }\n    }\n    return topsByInstanceId;\n}\nvar Table = /** @class */ function(_super) {\n    tslib.__extends(Table1, _super);\n    function Table1() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.splitBusinessHourSegs = common.memoize(splitSegsByRow);\n        _this.splitBgEventSegs = common.memoize(splitSegsByRow);\n        _this.splitFgEventSegs = common.memoize(splitSegsByRow);\n        _this.splitDateSelectionSegs = common.memoize(splitSegsByRow);\n        _this.splitEventDrag = common.memoize(splitInteractionByRow);\n        _this.splitEventResize = common.memoize(splitInteractionByRow);\n        _this.rowRefs = new common.RefMap();\n        _this.handleRootEl = function(rootEl) {\n            _this.rootEl = rootEl;\n            if (rootEl) {\n                _this.context.registerInteractiveComponent(_this, {\n                    el: rootEl,\n                    isHitComboAllowed: _this.props.isHitComboAllowed\n                });\n            } else {\n                _this.context.unregisterInteractiveComponent(_this);\n            }\n        };\n        return _this;\n    }\n    Table1.prototype.render = function() {\n        var _this = this;\n        var props = this.props;\n        var dateProfile = props.dateProfile, dayMaxEventRows = props.dayMaxEventRows, dayMaxEvents = props.dayMaxEvents, expandRows = props.expandRows;\n        var rowCnt = props.cells.length;\n        var businessHourSegsByRow = this.splitBusinessHourSegs(props.businessHourSegs, rowCnt);\n        var bgEventSegsByRow = this.splitBgEventSegs(props.bgEventSegs, rowCnt);\n        var fgEventSegsByRow = this.splitFgEventSegs(props.fgEventSegs, rowCnt);\n        var dateSelectionSegsByRow = this.splitDateSelectionSegs(props.dateSelectionSegs, rowCnt);\n        var eventDragByRow = this.splitEventDrag(props.eventDrag, rowCnt);\n        var eventResizeByRow = this.splitEventResize(props.eventResize, rowCnt);\n        var limitViaBalanced = dayMaxEvents === true || dayMaxEventRows === true;\n        // if rows can't expand to fill fixed height, can't do balanced-height event limit\n        // TODO: best place to normalize these options?\n        if (limitViaBalanced && !expandRows) {\n            limitViaBalanced = false;\n            dayMaxEventRows = null;\n            dayMaxEvents = null;\n        }\n        var classNames = [\n            \"fc-daygrid-body\",\n            limitViaBalanced ? \"fc-daygrid-body-balanced\" : \"fc-daygrid-body-unbalanced\",\n            expandRows ? \"\" : \"fc-daygrid-body-natural\"\n        ];\n        return common.createElement(\"div\", {\n            className: classNames.join(\" \"),\n            ref: this.handleRootEl,\n            style: {\n                // these props are important to give this wrapper correct dimensions for interactions\n                // TODO: if we set it here, can we avoid giving to inner tables?\n                width: props.clientWidth,\n                minWidth: props.tableMinWidth\n            }\n        }, common.createElement(common.NowTimer, {\n            unit: \"day\"\n        }, function(nowDate, todayRange) {\n            return common.createElement(common.Fragment, null, common.createElement(\"table\", {\n                role: \"presentation\",\n                className: \"fc-scrollgrid-sync-table\",\n                style: {\n                    width: props.clientWidth,\n                    minWidth: props.tableMinWidth,\n                    height: expandRows ? props.clientHeight : \"\"\n                }\n            }, props.colGroupNode, common.createElement(\"tbody\", {\n                role: \"presentation\"\n            }, props.cells.map(function(cells, row) {\n                return common.createElement(TableRow, {\n                    ref: _this.rowRefs.createRef(row),\n                    key: cells.length ? cells[0].date.toISOString() : row // in case there are no cells (like when resource view is loading)\n                    ,\n                    showDayNumbers: rowCnt > 1,\n                    showWeekNumbers: props.showWeekNumbers,\n                    todayRange: todayRange,\n                    dateProfile: dateProfile,\n                    cells: cells,\n                    renderIntro: props.renderRowIntro,\n                    businessHourSegs: businessHourSegsByRow[row],\n                    eventSelection: props.eventSelection,\n                    bgEventSegs: bgEventSegsByRow[row].filter(isSegAllDay),\n                    fgEventSegs: fgEventSegsByRow[row],\n                    dateSelectionSegs: dateSelectionSegsByRow[row],\n                    eventDrag: eventDragByRow[row],\n                    eventResize: eventResizeByRow[row],\n                    dayMaxEvents: dayMaxEvents,\n                    dayMaxEventRows: dayMaxEventRows,\n                    clientWidth: props.clientWidth,\n                    clientHeight: props.clientHeight,\n                    forPrint: props.forPrint\n                });\n            }))));\n        }));\n    };\n    // Hit System\n    // ----------------------------------------------------------------------------------------------------\n    Table1.prototype.prepareHits = function() {\n        this.rowPositions = new common.PositionCache(this.rootEl, this.rowRefs.collect().map(function(rowObj) {\n            return rowObj.getCellEls()[0];\n        }), false, true);\n        this.colPositions = new common.PositionCache(this.rootEl, this.rowRefs.currentMap[0].getCellEls(), true, false);\n    };\n    Table1.prototype.queryHit = function(positionLeft, positionTop) {\n        var _a = this, colPositions = _a.colPositions, rowPositions = _a.rowPositions;\n        var col = colPositions.leftToIndex(positionLeft);\n        var row = rowPositions.topToIndex(positionTop);\n        if (row != null && col != null) {\n            var cell = this.props.cells[row][col];\n            return {\n                dateProfile: this.props.dateProfile,\n                dateSpan: tslib.__assign({\n                    range: this.getCellRange(row, col),\n                    allDay: true\n                }, cell.extraDateSpan),\n                dayEl: this.getCellEl(row, col),\n                rect: {\n                    left: colPositions.lefts[col],\n                    right: colPositions.rights[col],\n                    top: rowPositions.tops[row],\n                    bottom: rowPositions.bottoms[row]\n                },\n                layer: 0\n            };\n        }\n        return null;\n    };\n    Table1.prototype.getCellEl = function(row, col) {\n        return this.rowRefs.currentMap[row].getCellEls()[col]; // TODO: not optimal\n    };\n    Table1.prototype.getCellRange = function(row, col) {\n        var start = this.props.cells[row][col].date;\n        var end = common.addDays(start, 1);\n        return {\n            start: start,\n            end: end\n        };\n    };\n    return Table1;\n}(common.DateComponent);\nfunction isSegAllDay(seg) {\n    return seg.eventRange.def.allDay;\n}\nvar DayTableSlicer = /** @class */ function(_super) {\n    tslib.__extends(DayTableSlicer1, _super);\n    function DayTableSlicer1() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.forceDayIfListItem = true;\n        return _this;\n    }\n    DayTableSlicer1.prototype.sliceRange = function(dateRange, dayTableModel) {\n        return dayTableModel.sliceRange(dateRange);\n    };\n    return DayTableSlicer1;\n}(common.Slicer);\nvar DayTable = /** @class */ function(_super) {\n    tslib.__extends(DayTable1, _super);\n    function DayTable1() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.slicer = new DayTableSlicer();\n        _this.tableRef = common.createRef();\n        return _this;\n    }\n    DayTable1.prototype.render = function() {\n        var _a = this, props = _a.props, context = _a.context;\n        return common.createElement(Table, tslib.__assign({\n            ref: this.tableRef\n        }, this.slicer.sliceProps(props, props.dateProfile, props.nextDayThreshold, context, props.dayTableModel), {\n            dateProfile: props.dateProfile,\n            cells: props.dayTableModel.cells,\n            colGroupNode: props.colGroupNode,\n            tableMinWidth: props.tableMinWidth,\n            renderRowIntro: props.renderRowIntro,\n            dayMaxEvents: props.dayMaxEvents,\n            dayMaxEventRows: props.dayMaxEventRows,\n            showWeekNumbers: props.showWeekNumbers,\n            expandRows: props.expandRows,\n            headerAlignElRef: props.headerAlignElRef,\n            clientWidth: props.clientWidth,\n            clientHeight: props.clientHeight,\n            forPrint: props.forPrint\n        }));\n    };\n    return DayTable1;\n}(common.DateComponent);\nvar DayTableView = /** @class */ function(_super) {\n    tslib.__extends(DayTableView1, _super);\n    function DayTableView1() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.buildDayTableModel = common.memoize(buildDayTableModel);\n        _this.headerRef = common.createRef();\n        _this.tableRef = common.createRef();\n        return _this;\n    }\n    DayTableView1.prototype.render = function() {\n        var _this = this;\n        var _a = this.context, options = _a.options, dateProfileGenerator = _a.dateProfileGenerator;\n        var props = this.props;\n        var dayTableModel = this.buildDayTableModel(props.dateProfile, dateProfileGenerator);\n        var headerContent = options.dayHeaders && common.createElement(common.DayHeader, {\n            ref: this.headerRef,\n            dateProfile: props.dateProfile,\n            dates: dayTableModel.headerDates,\n            datesRepDistinctDays: dayTableModel.rowCnt === 1\n        });\n        var bodyContent = function(contentArg) {\n            return common.createElement(DayTable, {\n                ref: _this.tableRef,\n                dateProfile: props.dateProfile,\n                dayTableModel: dayTableModel,\n                businessHours: props.businessHours,\n                dateSelection: props.dateSelection,\n                eventStore: props.eventStore,\n                eventUiBases: props.eventUiBases,\n                eventSelection: props.eventSelection,\n                eventDrag: props.eventDrag,\n                eventResize: props.eventResize,\n                nextDayThreshold: options.nextDayThreshold,\n                colGroupNode: contentArg.tableColGroupNode,\n                tableMinWidth: contentArg.tableMinWidth,\n                dayMaxEvents: options.dayMaxEvents,\n                dayMaxEventRows: options.dayMaxEventRows,\n                showWeekNumbers: options.weekNumbers,\n                expandRows: !props.isHeightAuto,\n                headerAlignElRef: _this.headerElRef,\n                clientWidth: contentArg.clientWidth,\n                clientHeight: contentArg.clientHeight,\n                forPrint: props.forPrint\n            });\n        };\n        return options.dayMinWidth ? this.renderHScrollLayout(headerContent, bodyContent, dayTableModel.colCnt, options.dayMinWidth) : this.renderSimpleLayout(headerContent, bodyContent);\n    };\n    return DayTableView1;\n}(TableView);\nfunction buildDayTableModel(dateProfile, dateProfileGenerator) {\n    var daySeries = new common.DaySeriesModel(dateProfile.renderRange, dateProfileGenerator);\n    return new common.DayTableModel(daySeries, /year|month|week/.test(dateProfile.currentRangeUnit));\n}\nvar TableDateProfileGenerator = /** @class */ function(_super) {\n    tslib.__extends(TableDateProfileGenerator1, _super);\n    function TableDateProfileGenerator1() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    // Computes the date range that will be rendered.\n    TableDateProfileGenerator1.prototype.buildRenderRange = function(currentRange, currentRangeUnit, isRangeAllDay) {\n        var dateEnv = this.props.dateEnv;\n        var renderRange = _super.prototype.buildRenderRange.call(this, currentRange, currentRangeUnit, isRangeAllDay);\n        var start = renderRange.start;\n        var end = renderRange.end;\n        var endOfWeek;\n        // year and month views should be aligned with weeks. this is already done for week\n        if (/^(year|month)$/.test(currentRangeUnit)) {\n            start = dateEnv.startOfWeek(start);\n            // make end-of-week if not already\n            endOfWeek = dateEnv.startOfWeek(end);\n            if (endOfWeek.valueOf() !== end.valueOf()) {\n                end = common.addWeeks(endOfWeek, 1);\n            }\n        }\n        // ensure 6 weeks\n        if (this.props.monthMode && this.props.fixedWeekCount) {\n            var rowCnt = Math.ceil(common.diffWeeks(start, end));\n            end = common.addWeeks(end, 6 - rowCnt);\n        }\n        return {\n            start: start,\n            end: end\n        };\n    };\n    return TableDateProfileGenerator1;\n}(common.DateProfileGenerator);\nvar main = common.createPlugin({\n    initialView: \"dayGridMonth\",\n    views: {\n        dayGrid: {\n            component: DayTableView,\n            dateProfileGeneratorClass: TableDateProfileGenerator\n        },\n        dayGridDay: {\n            type: \"dayGrid\",\n            duration: {\n                days: 1\n            }\n        },\n        dayGridWeek: {\n            type: \"dayGrid\",\n            duration: {\n                weeks: 1\n            }\n        },\n        dayGridMonth: {\n            type: \"dayGrid\",\n            duration: {\n                months: 1\n            },\n            monthMode: true,\n            fixedWeekCount: true\n        }\n    }\n});\nexports.DayGridView = DayTableView;\nexports.DayTable = DayTable;\nexports.DayTableSlicer = DayTableSlicer;\nexports.Table = Table;\nexports.TableView = TableView;\nexports.buildDayTableModel = buildDayTableModel;\nexports[\"default\"] = main;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@fullcalendar/daygrid/main.cjs.js\n");

/***/ }),

/***/ "./node_modules/@fullcalendar/interaction/main.cjs.js":
/*!************************************************************!*\
  !*** ./node_modules/@fullcalendar/interaction/main.cjs.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*!\nFullCalendar v5.10.2\nDocs & License: https://fullcalendar.io/\n(c) 2021 Adam Shaw\n*/ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar common = __webpack_require__(/*! @fullcalendar/common */ \"./node_modules/@fullcalendar/common/main.cjs.js\");\nvar tslib = __webpack_require__(/*! tslib */ \"tslib\");\ncommon.config.touchMouseIgnoreWait = 500;\nvar ignoreMouseDepth = 0;\nvar listenerCnt = 0;\nvar isWindowTouchMoveCancelled = false;\n/*\nUses a \"pointer\" abstraction, which monitors UI events for both mouse and touch.\nTracks when the pointer \"drags\" on a certain element, meaning down+move+up.\n\nAlso, tracks if there was touch-scrolling.\nAlso, can prevent touch-scrolling from happening.\nAlso, can fire pointermove events when scrolling happens underneath, even when no real pointer movement.\n\nemits:\n- pointerdown\n- pointermove\n- pointerup\n*/ var PointerDragging = /** @class */ function() {\n    function PointerDragging1(containerEl) {\n        var _this = this;\n        this.subjectEl = null;\n        // options that can be directly assigned by caller\n        this.selector = \"\"; // will cause subjectEl in all emitted events to be this element\n        this.handleSelector = \"\";\n        this.shouldIgnoreMove = false;\n        this.shouldWatchScroll = true; // for simulating pointermove on scroll\n        // internal states\n        this.isDragging = false;\n        this.isTouchDragging = false;\n        this.wasTouchScroll = false;\n        // Mouse\n        // ----------------------------------------------------------------------------------------------------\n        this.handleMouseDown = function(ev) {\n            if (!_this.shouldIgnoreMouse() && isPrimaryMouseButton(ev) && _this.tryStart(ev)) {\n                var pev = _this.createEventFromMouse(ev, true);\n                _this.emitter.trigger(\"pointerdown\", pev);\n                _this.initScrollWatch(pev);\n                if (!_this.shouldIgnoreMove) {\n                    document.addEventListener(\"mousemove\", _this.handleMouseMove);\n                }\n                document.addEventListener(\"mouseup\", _this.handleMouseUp);\n            }\n        };\n        this.handleMouseMove = function(ev) {\n            var pev = _this.createEventFromMouse(ev);\n            _this.recordCoords(pev);\n            _this.emitter.trigger(\"pointermove\", pev);\n        };\n        this.handleMouseUp = function(ev) {\n            document.removeEventListener(\"mousemove\", _this.handleMouseMove);\n            document.removeEventListener(\"mouseup\", _this.handleMouseUp);\n            _this.emitter.trigger(\"pointerup\", _this.createEventFromMouse(ev));\n            _this.cleanup(); // call last so that pointerup has access to props\n        };\n        // Touch\n        // ----------------------------------------------------------------------------------------------------\n        this.handleTouchStart = function(ev) {\n            if (_this.tryStart(ev)) {\n                _this.isTouchDragging = true;\n                var pev = _this.createEventFromTouch(ev, true);\n                _this.emitter.trigger(\"pointerdown\", pev);\n                _this.initScrollWatch(pev);\n                // unlike mouse, need to attach to target, not document\n                // https://stackoverflow.com/a/45760014\n                var targetEl = ev.target;\n                if (!_this.shouldIgnoreMove) {\n                    targetEl.addEventListener(\"touchmove\", _this.handleTouchMove);\n                }\n                targetEl.addEventListener(\"touchend\", _this.handleTouchEnd);\n                targetEl.addEventListener(\"touchcancel\", _this.handleTouchEnd); // treat it as a touch end\n                // attach a handler to get called when ANY scroll action happens on the page.\n                // this was impossible to do with normal on/off because 'scroll' doesn't bubble.\n                // http://stackoverflow.com/a/32954565/96342\n                window.addEventListener(\"scroll\", _this.handleTouchScroll, true);\n            }\n        };\n        this.handleTouchMove = function(ev) {\n            var pev = _this.createEventFromTouch(ev);\n            _this.recordCoords(pev);\n            _this.emitter.trigger(\"pointermove\", pev);\n        };\n        this.handleTouchEnd = function(ev) {\n            if (_this.isDragging) {\n                var targetEl = ev.target;\n                targetEl.removeEventListener(\"touchmove\", _this.handleTouchMove);\n                targetEl.removeEventListener(\"touchend\", _this.handleTouchEnd);\n                targetEl.removeEventListener(\"touchcancel\", _this.handleTouchEnd);\n                window.removeEventListener(\"scroll\", _this.handleTouchScroll, true); // useCaptured=true\n                _this.emitter.trigger(\"pointerup\", _this.createEventFromTouch(ev));\n                _this.cleanup(); // call last so that pointerup has access to props\n                _this.isTouchDragging = false;\n                startIgnoringMouse();\n            }\n        };\n        this.handleTouchScroll = function() {\n            _this.wasTouchScroll = true;\n        };\n        this.handleScroll = function(ev) {\n            if (!_this.shouldIgnoreMove) {\n                var pageX = window.pageXOffset - _this.prevScrollX + _this.prevPageX;\n                var pageY = window.pageYOffset - _this.prevScrollY + _this.prevPageY;\n                _this.emitter.trigger(\"pointermove\", {\n                    origEvent: ev,\n                    isTouch: _this.isTouchDragging,\n                    subjectEl: _this.subjectEl,\n                    pageX: pageX,\n                    pageY: pageY,\n                    deltaX: pageX - _this.origPageX,\n                    deltaY: pageY - _this.origPageY\n                });\n            }\n        };\n        this.containerEl = containerEl;\n        this.emitter = new common.Emitter();\n        containerEl.addEventListener(\"mousedown\", this.handleMouseDown);\n        containerEl.addEventListener(\"touchstart\", this.handleTouchStart, {\n            passive: true\n        });\n        listenerCreated();\n    }\n    PointerDragging1.prototype.destroy = function() {\n        this.containerEl.removeEventListener(\"mousedown\", this.handleMouseDown);\n        this.containerEl.removeEventListener(\"touchstart\", this.handleTouchStart, {\n            passive: true\n        });\n        listenerDestroyed();\n    };\n    PointerDragging1.prototype.tryStart = function(ev) {\n        var subjectEl = this.querySubjectEl(ev);\n        var downEl = ev.target;\n        if (subjectEl && (!this.handleSelector || common.elementClosest(downEl, this.handleSelector))) {\n            this.subjectEl = subjectEl;\n            this.isDragging = true; // do this first so cancelTouchScroll will work\n            this.wasTouchScroll = false;\n            return true;\n        }\n        return false;\n    };\n    PointerDragging1.prototype.cleanup = function() {\n        isWindowTouchMoveCancelled = false;\n        this.isDragging = false;\n        this.subjectEl = null;\n        // keep wasTouchScroll around for later access\n        this.destroyScrollWatch();\n    };\n    PointerDragging1.prototype.querySubjectEl = function(ev) {\n        if (this.selector) {\n            return common.elementClosest(ev.target, this.selector);\n        }\n        return this.containerEl;\n    };\n    PointerDragging1.prototype.shouldIgnoreMouse = function() {\n        return ignoreMouseDepth || this.isTouchDragging;\n    };\n    // can be called by user of this class, to cancel touch-based scrolling for the current drag\n    PointerDragging1.prototype.cancelTouchScroll = function() {\n        if (this.isDragging) {\n            isWindowTouchMoveCancelled = true;\n        }\n    };\n    // Scrolling that simulates pointermoves\n    // ----------------------------------------------------------------------------------------------------\n    PointerDragging1.prototype.initScrollWatch = function(ev) {\n        if (this.shouldWatchScroll) {\n            this.recordCoords(ev);\n            window.addEventListener(\"scroll\", this.handleScroll, true); // useCapture=true\n        }\n    };\n    PointerDragging1.prototype.recordCoords = function(ev) {\n        if (this.shouldWatchScroll) {\n            this.prevPageX = ev.pageX;\n            this.prevPageY = ev.pageY;\n            this.prevScrollX = window.pageXOffset;\n            this.prevScrollY = window.pageYOffset;\n        }\n    };\n    PointerDragging1.prototype.destroyScrollWatch = function() {\n        if (this.shouldWatchScroll) {\n            window.removeEventListener(\"scroll\", this.handleScroll, true); // useCaptured=true\n        }\n    };\n    // Event Normalization\n    // ----------------------------------------------------------------------------------------------------\n    PointerDragging1.prototype.createEventFromMouse = function(ev, isFirst) {\n        var deltaX = 0;\n        var deltaY = 0;\n        // TODO: repeat code\n        if (isFirst) {\n            this.origPageX = ev.pageX;\n            this.origPageY = ev.pageY;\n        } else {\n            deltaX = ev.pageX - this.origPageX;\n            deltaY = ev.pageY - this.origPageY;\n        }\n        return {\n            origEvent: ev,\n            isTouch: false,\n            subjectEl: this.subjectEl,\n            pageX: ev.pageX,\n            pageY: ev.pageY,\n            deltaX: deltaX,\n            deltaY: deltaY\n        };\n    };\n    PointerDragging1.prototype.createEventFromTouch = function(ev, isFirst) {\n        var touches = ev.touches;\n        var pageX;\n        var pageY;\n        var deltaX = 0;\n        var deltaY = 0;\n        // if touch coords available, prefer,\n        // because FF would give bad ev.pageX ev.pageY\n        if (touches && touches.length) {\n            pageX = touches[0].pageX;\n            pageY = touches[0].pageY;\n        } else {\n            pageX = ev.pageX;\n            pageY = ev.pageY;\n        }\n        // TODO: repeat code\n        if (isFirst) {\n            this.origPageX = pageX;\n            this.origPageY = pageY;\n        } else {\n            deltaX = pageX - this.origPageX;\n            deltaY = pageY - this.origPageY;\n        }\n        return {\n            origEvent: ev,\n            isTouch: true,\n            subjectEl: this.subjectEl,\n            pageX: pageX,\n            pageY: pageY,\n            deltaX: deltaX,\n            deltaY: deltaY\n        };\n    };\n    return PointerDragging1;\n}();\n// Returns a boolean whether this was a left mouse click and no ctrl key (which means right click on Mac)\nfunction isPrimaryMouseButton(ev) {\n    return ev.button === 0 && !ev.ctrlKey;\n}\n// Ignoring fake mouse events generated by touch\n// ----------------------------------------------------------------------------------------------------\nfunction startIgnoringMouse() {\n    ignoreMouseDepth += 1;\n    setTimeout(function() {\n        ignoreMouseDepth -= 1;\n    }, common.config.touchMouseIgnoreWait);\n}\n// We want to attach touchmove as early as possible for Safari\n// ----------------------------------------------------------------------------------------------------\nfunction listenerCreated() {\n    listenerCnt += 1;\n    if (listenerCnt === 1) {\n        window.addEventListener(\"touchmove\", onWindowTouchMove, {\n            passive: false\n        });\n    }\n}\nfunction listenerDestroyed() {\n    listenerCnt -= 1;\n    if (!listenerCnt) {\n        window.removeEventListener(\"touchmove\", onWindowTouchMove, {\n            passive: false\n        });\n    }\n}\nfunction onWindowTouchMove(ev) {\n    if (isWindowTouchMoveCancelled) {\n        ev.preventDefault();\n    }\n}\n/*\nAn effect in which an element follows the movement of a pointer across the screen.\nThe moving element is a clone of some other element.\nMust call start + handleMove + stop.\n*/ var ElementMirror = /** @class */ function() {\n    function ElementMirror1() {\n        this.isVisible = false; // must be explicitly enabled\n        this.sourceEl = null;\n        this.mirrorEl = null;\n        this.sourceElRect = null; // screen coords relative to viewport\n        // options that can be set directly by caller\n        this.parentNode = document.body; // HIGHLY SUGGESTED to set this to sidestep ShadowDOM issues\n        this.zIndex = 9999;\n        this.revertDuration = 0;\n    }\n    ElementMirror1.prototype.start = function(sourceEl, pageX, pageY) {\n        this.sourceEl = sourceEl;\n        this.sourceElRect = this.sourceEl.getBoundingClientRect();\n        this.origScreenX = pageX - window.pageXOffset;\n        this.origScreenY = pageY - window.pageYOffset;\n        this.deltaX = 0;\n        this.deltaY = 0;\n        this.updateElPosition();\n    };\n    ElementMirror1.prototype.handleMove = function(pageX, pageY) {\n        this.deltaX = pageX - window.pageXOffset - this.origScreenX;\n        this.deltaY = pageY - window.pageYOffset - this.origScreenY;\n        this.updateElPosition();\n    };\n    // can be called before start\n    ElementMirror1.prototype.setIsVisible = function(bool) {\n        if (bool) {\n            if (!this.isVisible) {\n                if (this.mirrorEl) {\n                    this.mirrorEl.style.display = \"\";\n                }\n                this.isVisible = bool; // needs to happen before updateElPosition\n                this.updateElPosition(); // because was not updating the position while invisible\n            }\n        } else if (this.isVisible) {\n            if (this.mirrorEl) {\n                this.mirrorEl.style.display = \"none\";\n            }\n            this.isVisible = bool;\n        }\n    };\n    // always async\n    ElementMirror1.prototype.stop = function(needsRevertAnimation, callback) {\n        var _this = this;\n        var done = function() {\n            _this.cleanup();\n            callback();\n        };\n        if (needsRevertAnimation && this.mirrorEl && this.isVisible && this.revertDuration && (this.deltaX || this.deltaY) // if same coords, transition won't work\n        ) {\n            this.doRevertAnimation(done, this.revertDuration);\n        } else {\n            setTimeout(done, 0);\n        }\n    };\n    ElementMirror1.prototype.doRevertAnimation = function(callback, revertDuration) {\n        var mirrorEl = this.mirrorEl;\n        var finalSourceElRect = this.sourceEl.getBoundingClientRect(); // because autoscrolling might have happened\n        mirrorEl.style.transition = \"top \" + revertDuration + \"ms,\" + \"left \" + revertDuration + \"ms\";\n        common.applyStyle(mirrorEl, {\n            left: finalSourceElRect.left,\n            top: finalSourceElRect.top\n        });\n        common.whenTransitionDone(mirrorEl, function() {\n            mirrorEl.style.transition = \"\";\n            callback();\n        });\n    };\n    ElementMirror1.prototype.cleanup = function() {\n        if (this.mirrorEl) {\n            common.removeElement(this.mirrorEl);\n            this.mirrorEl = null;\n        }\n        this.sourceEl = null;\n    };\n    ElementMirror1.prototype.updateElPosition = function() {\n        if (this.sourceEl && this.isVisible) {\n            common.applyStyle(this.getMirrorEl(), {\n                left: this.sourceElRect.left + this.deltaX,\n                top: this.sourceElRect.top + this.deltaY\n            });\n        }\n    };\n    ElementMirror1.prototype.getMirrorEl = function() {\n        var sourceElRect = this.sourceElRect;\n        var mirrorEl = this.mirrorEl;\n        if (!mirrorEl) {\n            mirrorEl = this.mirrorEl = this.sourceEl.cloneNode(true); // cloneChildren=true\n            // we don't want long taps or any mouse interaction causing selection/menus.\n            // would use preventSelection(), but that prevents selectstart, causing problems.\n            mirrorEl.classList.add(\"fc-unselectable\");\n            mirrorEl.classList.add(\"fc-event-dragging\");\n            common.applyStyle(mirrorEl, {\n                position: \"fixed\",\n                zIndex: this.zIndex,\n                visibility: \"\",\n                boxSizing: \"border-box\",\n                width: sourceElRect.right - sourceElRect.left,\n                height: sourceElRect.bottom - sourceElRect.top,\n                right: \"auto\",\n                bottom: \"auto\",\n                margin: 0\n            });\n            this.parentNode.appendChild(mirrorEl);\n        }\n        return mirrorEl;\n    };\n    return ElementMirror1;\n}();\n/*\nIs a cache for a given element's scroll information (all the info that ScrollController stores)\nin addition the \"client rectangle\" of the element.. the area within the scrollbars.\n\nThe cache can be in one of two modes:\n- doesListening:false - ignores when the container is scrolled by someone else\n- doesListening:true - watch for scrolling and update the cache\n*/ var ScrollGeomCache = /** @class */ function(_super) {\n    tslib.__extends(ScrollGeomCache1, _super);\n    function ScrollGeomCache1(scrollController, doesListening) {\n        var _this = _super.call(this) || this;\n        _this.handleScroll = function() {\n            _this.scrollTop = _this.scrollController.getScrollTop();\n            _this.scrollLeft = _this.scrollController.getScrollLeft();\n            _this.handleScrollChange();\n        };\n        _this.scrollController = scrollController;\n        _this.doesListening = doesListening;\n        _this.scrollTop = _this.origScrollTop = scrollController.getScrollTop();\n        _this.scrollLeft = _this.origScrollLeft = scrollController.getScrollLeft();\n        _this.scrollWidth = scrollController.getScrollWidth();\n        _this.scrollHeight = scrollController.getScrollHeight();\n        _this.clientWidth = scrollController.getClientWidth();\n        _this.clientHeight = scrollController.getClientHeight();\n        _this.clientRect = _this.computeClientRect(); // do last in case it needs cached values\n        if (_this.doesListening) {\n            _this.getEventTarget().addEventListener(\"scroll\", _this.handleScroll);\n        }\n        return _this;\n    }\n    ScrollGeomCache1.prototype.destroy = function() {\n        if (this.doesListening) {\n            this.getEventTarget().removeEventListener(\"scroll\", this.handleScroll);\n        }\n    };\n    ScrollGeomCache1.prototype.getScrollTop = function() {\n        return this.scrollTop;\n    };\n    ScrollGeomCache1.prototype.getScrollLeft = function() {\n        return this.scrollLeft;\n    };\n    ScrollGeomCache1.prototype.setScrollTop = function(top) {\n        this.scrollController.setScrollTop(top);\n        if (!this.doesListening) {\n            // we are not relying on the element to normalize out-of-bounds scroll values\n            // so we need to sanitize ourselves\n            this.scrollTop = Math.max(Math.min(top, this.getMaxScrollTop()), 0);\n            this.handleScrollChange();\n        }\n    };\n    ScrollGeomCache1.prototype.setScrollLeft = function(top) {\n        this.scrollController.setScrollLeft(top);\n        if (!this.doesListening) {\n            // we are not relying on the element to normalize out-of-bounds scroll values\n            // so we need to sanitize ourselves\n            this.scrollLeft = Math.max(Math.min(top, this.getMaxScrollLeft()), 0);\n            this.handleScrollChange();\n        }\n    };\n    ScrollGeomCache1.prototype.getClientWidth = function() {\n        return this.clientWidth;\n    };\n    ScrollGeomCache1.prototype.getClientHeight = function() {\n        return this.clientHeight;\n    };\n    ScrollGeomCache1.prototype.getScrollWidth = function() {\n        return this.scrollWidth;\n    };\n    ScrollGeomCache1.prototype.getScrollHeight = function() {\n        return this.scrollHeight;\n    };\n    ScrollGeomCache1.prototype.handleScrollChange = function() {};\n    return ScrollGeomCache1;\n}(common.ScrollController);\nvar ElementScrollGeomCache = /** @class */ function(_super) {\n    tslib.__extends(ElementScrollGeomCache1, _super);\n    function ElementScrollGeomCache1(el, doesListening) {\n        return _super.call(this, new common.ElementScrollController(el), doesListening) || this;\n    }\n    ElementScrollGeomCache1.prototype.getEventTarget = function() {\n        return this.scrollController.el;\n    };\n    ElementScrollGeomCache1.prototype.computeClientRect = function() {\n        return common.computeInnerRect(this.scrollController.el);\n    };\n    return ElementScrollGeomCache1;\n}(ScrollGeomCache);\nvar WindowScrollGeomCache = /** @class */ function(_super) {\n    tslib.__extends(WindowScrollGeomCache1, _super);\n    function WindowScrollGeomCache1(doesListening) {\n        return _super.call(this, new common.WindowScrollController(), doesListening) || this;\n    }\n    WindowScrollGeomCache1.prototype.getEventTarget = function() {\n        return window;\n    };\n    WindowScrollGeomCache1.prototype.computeClientRect = function() {\n        return {\n            left: this.scrollLeft,\n            right: this.scrollLeft + this.clientWidth,\n            top: this.scrollTop,\n            bottom: this.scrollTop + this.clientHeight\n        };\n    };\n    // the window is the only scroll object that changes it's rectangle relative\n    // to the document's topleft as it scrolls\n    WindowScrollGeomCache1.prototype.handleScrollChange = function() {\n        this.clientRect = this.computeClientRect();\n    };\n    return WindowScrollGeomCache1;\n}(ScrollGeomCache);\n// If available we are using native \"performance\" API instead of \"Date\"\n// Read more about it on MDN:\n// https://developer.mozilla.org/en-US/docs/Web/API/Performance\nvar getTime = typeof performance === \"function\" ? performance.now : Date.now;\n/*\nFor a pointer interaction, automatically scrolls certain scroll containers when the pointer\napproaches the edge.\n\nThe caller must call start + handleMove + stop.\n*/ var AutoScroller = /** @class */ function() {\n    function AutoScroller1() {\n        var _this = this;\n        // options that can be set by caller\n        this.isEnabled = true;\n        this.scrollQuery = [\n            window,\n            \".fc-scroller\"\n        ];\n        this.edgeThreshold = 50; // pixels\n        this.maxVelocity = 300; // pixels per second\n        // internal state\n        this.pointerScreenX = null;\n        this.pointerScreenY = null;\n        this.isAnimating = false;\n        this.scrollCaches = null;\n        // protect against the initial pointerdown being too close to an edge and starting the scroll\n        this.everMovedUp = false;\n        this.everMovedDown = false;\n        this.everMovedLeft = false;\n        this.everMovedRight = false;\n        this.animate = function() {\n            if (_this.isAnimating) {\n                var edge = _this.computeBestEdge(_this.pointerScreenX + window.pageXOffset, _this.pointerScreenY + window.pageYOffset);\n                if (edge) {\n                    var now = getTime();\n                    _this.handleSide(edge, (now - _this.msSinceRequest) / 1000);\n                    _this.requestAnimation(now);\n                } else {\n                    _this.isAnimating = false; // will stop animation\n                }\n            }\n        };\n    }\n    AutoScroller1.prototype.start = function(pageX, pageY, scrollStartEl) {\n        if (this.isEnabled) {\n            this.scrollCaches = this.buildCaches(scrollStartEl);\n            this.pointerScreenX = null;\n            this.pointerScreenY = null;\n            this.everMovedUp = false;\n            this.everMovedDown = false;\n            this.everMovedLeft = false;\n            this.everMovedRight = false;\n            this.handleMove(pageX, pageY);\n        }\n    };\n    AutoScroller1.prototype.handleMove = function(pageX, pageY) {\n        if (this.isEnabled) {\n            var pointerScreenX = pageX - window.pageXOffset;\n            var pointerScreenY = pageY - window.pageYOffset;\n            var yDelta = this.pointerScreenY === null ? 0 : pointerScreenY - this.pointerScreenY;\n            var xDelta = this.pointerScreenX === null ? 0 : pointerScreenX - this.pointerScreenX;\n            if (yDelta < 0) {\n                this.everMovedUp = true;\n            } else if (yDelta > 0) {\n                this.everMovedDown = true;\n            }\n            if (xDelta < 0) {\n                this.everMovedLeft = true;\n            } else if (xDelta > 0) {\n                this.everMovedRight = true;\n            }\n            this.pointerScreenX = pointerScreenX;\n            this.pointerScreenY = pointerScreenY;\n            if (!this.isAnimating) {\n                this.isAnimating = true;\n                this.requestAnimation(getTime());\n            }\n        }\n    };\n    AutoScroller1.prototype.stop = function() {\n        if (this.isEnabled) {\n            this.isAnimating = false; // will stop animation\n            for(var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++){\n                var scrollCache = _a[_i];\n                scrollCache.destroy();\n            }\n            this.scrollCaches = null;\n        }\n    };\n    AutoScroller1.prototype.requestAnimation = function(now) {\n        this.msSinceRequest = now;\n        requestAnimationFrame(this.animate);\n    };\n    AutoScroller1.prototype.handleSide = function(edge, seconds) {\n        var scrollCache = edge.scrollCache;\n        var edgeThreshold = this.edgeThreshold;\n        var invDistance = edgeThreshold - edge.distance;\n        var velocity = invDistance * invDistance / (edgeThreshold * edgeThreshold) * this.maxVelocity * seconds;\n        var sign = 1;\n        switch(edge.name){\n            case \"left\":\n                sign = -1;\n            // falls through\n            case \"right\":\n                scrollCache.setScrollLeft(scrollCache.getScrollLeft() + velocity * sign);\n                break;\n            case \"top\":\n                sign = -1;\n            // falls through\n            case \"bottom\":\n                scrollCache.setScrollTop(scrollCache.getScrollTop() + velocity * sign);\n                break;\n        }\n    };\n    // left/top are relative to document topleft\n    AutoScroller1.prototype.computeBestEdge = function(left, top) {\n        var edgeThreshold = this.edgeThreshold;\n        var bestSide = null;\n        var scrollCaches = this.scrollCaches || [];\n        for(var _i = 0, scrollCaches_1 = scrollCaches; _i < scrollCaches_1.length; _i++){\n            var scrollCache = scrollCaches_1[_i];\n            var rect = scrollCache.clientRect;\n            var leftDist = left - rect.left;\n            var rightDist = rect.right - left;\n            var topDist = top - rect.top;\n            var bottomDist = rect.bottom - top;\n            // completely within the rect?\n            if (leftDist >= 0 && rightDist >= 0 && topDist >= 0 && bottomDist >= 0) {\n                if (topDist <= edgeThreshold && this.everMovedUp && scrollCache.canScrollUp() && (!bestSide || bestSide.distance > topDist)) {\n                    bestSide = {\n                        scrollCache: scrollCache,\n                        name: \"top\",\n                        distance: topDist\n                    };\n                }\n                if (bottomDist <= edgeThreshold && this.everMovedDown && scrollCache.canScrollDown() && (!bestSide || bestSide.distance > bottomDist)) {\n                    bestSide = {\n                        scrollCache: scrollCache,\n                        name: \"bottom\",\n                        distance: bottomDist\n                    };\n                }\n                if (leftDist <= edgeThreshold && this.everMovedLeft && scrollCache.canScrollLeft() && (!bestSide || bestSide.distance > leftDist)) {\n                    bestSide = {\n                        scrollCache: scrollCache,\n                        name: \"left\",\n                        distance: leftDist\n                    };\n                }\n                if (rightDist <= edgeThreshold && this.everMovedRight && scrollCache.canScrollRight() && (!bestSide || bestSide.distance > rightDist)) {\n                    bestSide = {\n                        scrollCache: scrollCache,\n                        name: \"right\",\n                        distance: rightDist\n                    };\n                }\n            }\n        }\n        return bestSide;\n    };\n    AutoScroller1.prototype.buildCaches = function(scrollStartEl) {\n        return this.queryScrollEls(scrollStartEl).map(function(el) {\n            if (el === window) {\n                return new WindowScrollGeomCache(false); // false = don't listen to user-generated scrolls\n            }\n            return new ElementScrollGeomCache(el, false); // false = don't listen to user-generated scrolls\n        });\n    };\n    AutoScroller1.prototype.queryScrollEls = function(scrollStartEl) {\n        var els = [];\n        for(var _i = 0, _a = this.scrollQuery; _i < _a.length; _i++){\n            var query = _a[_i];\n            if (typeof query === \"object\") {\n                els.push(query);\n            } else {\n                els.push.apply(els, Array.prototype.slice.call(common.getElRoot(scrollStartEl).querySelectorAll(query)));\n            }\n        }\n        return els;\n    };\n    return AutoScroller1;\n}();\n/*\nMonitors dragging on an element. Has a number of high-level features:\n- minimum distance required before dragging\n- minimum wait time (\"delay\") before dragging\n- a mirror element that follows the pointer\n*/ var FeaturefulElementDragging = /** @class */ function(_super) {\n    tslib.__extends(FeaturefulElementDragging1, _super);\n    function FeaturefulElementDragging1(containerEl, selector) {\n        var _this = _super.call(this, containerEl) || this;\n        _this.containerEl = containerEl;\n        // options that can be directly set by caller\n        // the caller can also set the PointerDragging's options as well\n        _this.delay = null;\n        _this.minDistance = 0;\n        _this.touchScrollAllowed = true; // prevents drag from starting and blocks scrolling during drag\n        _this.mirrorNeedsRevert = false;\n        _this.isInteracting = false; // is the user validly moving the pointer? lasts until pointerup\n        _this.isDragging = false; // is it INTENTFULLY dragging? lasts until after revert animation\n        _this.isDelayEnded = false;\n        _this.isDistanceSurpassed = false;\n        _this.delayTimeoutId = null;\n        _this.onPointerDown = function(ev) {\n            if (!_this.isDragging) {\n                _this.isInteracting = true;\n                _this.isDelayEnded = false;\n                _this.isDistanceSurpassed = false;\n                common.preventSelection(document.body);\n                common.preventContextMenu(document.body);\n                // prevent links from being visited if there's an eventual drag.\n                // also prevents selection in older browsers (maybe?).\n                // not necessary for touch, besides, browser would complain about passiveness.\n                if (!ev.isTouch) {\n                    ev.origEvent.preventDefault();\n                }\n                _this.emitter.trigger(\"pointerdown\", ev);\n                if (_this.isInteracting && !_this.pointer.shouldIgnoreMove) {\n                    // actions related to initiating dragstart+dragmove+dragend...\n                    _this.mirror.setIsVisible(false); // reset. caller must set-visible\n                    _this.mirror.start(ev.subjectEl, ev.pageX, ev.pageY); // must happen on first pointer down\n                    _this.startDelay(ev);\n                    if (!_this.minDistance) {\n                        _this.handleDistanceSurpassed(ev);\n                    }\n                }\n            }\n        };\n        _this.onPointerMove = function(ev) {\n            if (_this.isInteracting) {\n                _this.emitter.trigger(\"pointermove\", ev);\n                if (!_this.isDistanceSurpassed) {\n                    var minDistance = _this.minDistance;\n                    var distanceSq = void 0; // current distance from the origin, squared\n                    var deltaX = ev.deltaX, deltaY = ev.deltaY;\n                    distanceSq = deltaX * deltaX + deltaY * deltaY;\n                    if (distanceSq >= minDistance * minDistance) {\n                        _this.handleDistanceSurpassed(ev);\n                    }\n                }\n                if (_this.isDragging) {\n                    // a real pointer move? (not one simulated by scrolling)\n                    if (ev.origEvent.type !== \"scroll\") {\n                        _this.mirror.handleMove(ev.pageX, ev.pageY);\n                        _this.autoScroller.handleMove(ev.pageX, ev.pageY);\n                    }\n                    _this.emitter.trigger(\"dragmove\", ev);\n                }\n            }\n        };\n        _this.onPointerUp = function(ev) {\n            if (_this.isInteracting) {\n                _this.isInteracting = false;\n                common.allowSelection(document.body);\n                common.allowContextMenu(document.body);\n                _this.emitter.trigger(\"pointerup\", ev); // can potentially set mirrorNeedsRevert\n                if (_this.isDragging) {\n                    _this.autoScroller.stop();\n                    _this.tryStopDrag(ev); // which will stop the mirror\n                }\n                if (_this.delayTimeoutId) {\n                    clearTimeout(_this.delayTimeoutId);\n                    _this.delayTimeoutId = null;\n                }\n            }\n        };\n        var pointer = _this.pointer = new PointerDragging(containerEl);\n        pointer.emitter.on(\"pointerdown\", _this.onPointerDown);\n        pointer.emitter.on(\"pointermove\", _this.onPointerMove);\n        pointer.emitter.on(\"pointerup\", _this.onPointerUp);\n        if (selector) {\n            pointer.selector = selector;\n        }\n        _this.mirror = new ElementMirror();\n        _this.autoScroller = new AutoScroller();\n        return _this;\n    }\n    FeaturefulElementDragging1.prototype.destroy = function() {\n        this.pointer.destroy();\n        // HACK: simulate a pointer-up to end the current drag\n        // TODO: fire 'dragend' directly and stop interaction. discourage use of pointerup event (b/c might not fire)\n        this.onPointerUp({});\n    };\n    FeaturefulElementDragging1.prototype.startDelay = function(ev) {\n        var _this = this;\n        if (typeof this.delay === \"number\") {\n            this.delayTimeoutId = setTimeout(function() {\n                _this.delayTimeoutId = null;\n                _this.handleDelayEnd(ev);\n            }, this.delay); // not assignable to number!\n        } else {\n            this.handleDelayEnd(ev);\n        }\n    };\n    FeaturefulElementDragging1.prototype.handleDelayEnd = function(ev) {\n        this.isDelayEnded = true;\n        this.tryStartDrag(ev);\n    };\n    FeaturefulElementDragging1.prototype.handleDistanceSurpassed = function(ev) {\n        this.isDistanceSurpassed = true;\n        this.tryStartDrag(ev);\n    };\n    FeaturefulElementDragging1.prototype.tryStartDrag = function(ev) {\n        if (this.isDelayEnded && this.isDistanceSurpassed) {\n            if (!this.pointer.wasTouchScroll || this.touchScrollAllowed) {\n                this.isDragging = true;\n                this.mirrorNeedsRevert = false;\n                this.autoScroller.start(ev.pageX, ev.pageY, this.containerEl);\n                this.emitter.trigger(\"dragstart\", ev);\n                if (this.touchScrollAllowed === false) {\n                    this.pointer.cancelTouchScroll();\n                }\n            }\n        }\n    };\n    FeaturefulElementDragging1.prototype.tryStopDrag = function(ev) {\n        // .stop() is ALWAYS asynchronous, which we NEED because we want all pointerup events\n        // that come from the document to fire beforehand. much more convenient this way.\n        this.mirror.stop(this.mirrorNeedsRevert, this.stopDrag.bind(this, ev));\n    };\n    FeaturefulElementDragging1.prototype.stopDrag = function(ev) {\n        this.isDragging = false;\n        this.emitter.trigger(\"dragend\", ev);\n    };\n    // fill in the implementations...\n    FeaturefulElementDragging1.prototype.setIgnoreMove = function(bool) {\n        this.pointer.shouldIgnoreMove = bool;\n    };\n    FeaturefulElementDragging1.prototype.setMirrorIsVisible = function(bool) {\n        this.mirror.setIsVisible(bool);\n    };\n    FeaturefulElementDragging1.prototype.setMirrorNeedsRevert = function(bool) {\n        this.mirrorNeedsRevert = bool;\n    };\n    FeaturefulElementDragging1.prototype.setAutoScrollEnabled = function(bool) {\n        this.autoScroller.isEnabled = bool;\n    };\n    return FeaturefulElementDragging1;\n}(common.ElementDragging);\n/*\nWhen this class is instantiated, it records the offset of an element (relative to the document topleft),\nand continues to monitor scrolling, updating the cached coordinates if it needs to.\nDoes not access the DOM after instantiation, so highly performant.\n\nAlso keeps track of all scrolling/overflow:hidden containers that are parents of the given element\nand an determine if a given point is inside the combined clipping rectangle.\n*/ var OffsetTracker = /** @class */ function() {\n    function OffsetTracker1(el) {\n        this.origRect = common.computeRect(el);\n        // will work fine for divs that have overflow:hidden\n        this.scrollCaches = common.getClippingParents(el).map(function(scrollEl) {\n            return new ElementScrollGeomCache(scrollEl, true);\n        });\n    }\n    OffsetTracker1.prototype.destroy = function() {\n        for(var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++){\n            var scrollCache = _a[_i];\n            scrollCache.destroy();\n        }\n    };\n    OffsetTracker1.prototype.computeLeft = function() {\n        var left = this.origRect.left;\n        for(var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++){\n            var scrollCache = _a[_i];\n            left += scrollCache.origScrollLeft - scrollCache.getScrollLeft();\n        }\n        return left;\n    };\n    OffsetTracker1.prototype.computeTop = function() {\n        var top = this.origRect.top;\n        for(var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++){\n            var scrollCache = _a[_i];\n            top += scrollCache.origScrollTop - scrollCache.getScrollTop();\n        }\n        return top;\n    };\n    OffsetTracker1.prototype.isWithinClipping = function(pageX, pageY) {\n        var point = {\n            left: pageX,\n            top: pageY\n        };\n        for(var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++){\n            var scrollCache = _a[_i];\n            if (!isIgnoredClipping(scrollCache.getEventTarget()) && !common.pointInsideRect(point, scrollCache.clientRect)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    return OffsetTracker1;\n}();\n// certain clipping containers should never constrain interactions, like <html> and <body>\n// https://github.com/fullcalendar/fullcalendar/issues/3615\nfunction isIgnoredClipping(node) {\n    var tagName = node.tagName;\n    return tagName === \"HTML\" || tagName === \"BODY\";\n}\n/*\nTracks movement over multiple droppable areas (aka \"hits\")\nthat exist in one or more DateComponents.\nRelies on an existing draggable.\n\nemits:\n- pointerdown\n- dragstart\n- hitchange - fires initially, even if not over a hit\n- pointerup\n- (hitchange - again, to null, if ended over a hit)\n- dragend\n*/ var HitDragging = /** @class */ function() {\n    function HitDragging1(dragging1, droppableStore) {\n        var _this = this;\n        // options that can be set by caller\n        this.useSubjectCenter = false;\n        this.requireInitial = true; // if doesn't start out on a hit, won't emit any events\n        this.initialHit = null;\n        this.movingHit = null;\n        this.finalHit = null; // won't ever be populated if shouldIgnoreMove\n        this.handlePointerDown = function(ev) {\n            var dragging = _this.dragging;\n            _this.initialHit = null;\n            _this.movingHit = null;\n            _this.finalHit = null;\n            _this.prepareHits();\n            _this.processFirstCoord(ev);\n            if (_this.initialHit || !_this.requireInitial) {\n                dragging.setIgnoreMove(false);\n                // TODO: fire this before computing processFirstCoord, so listeners can cancel. this gets fired by almost every handler :(\n                _this.emitter.trigger(\"pointerdown\", ev);\n            } else {\n                dragging.setIgnoreMove(true);\n            }\n        };\n        this.handleDragStart = function(ev) {\n            _this.emitter.trigger(\"dragstart\", ev);\n            _this.handleMove(ev, true); // force = fire even if initially null\n        };\n        this.handleDragMove = function(ev) {\n            _this.emitter.trigger(\"dragmove\", ev);\n            _this.handleMove(ev);\n        };\n        this.handlePointerUp = function(ev) {\n            _this.releaseHits();\n            _this.emitter.trigger(\"pointerup\", ev);\n        };\n        this.handleDragEnd = function(ev) {\n            if (_this.movingHit) {\n                _this.emitter.trigger(\"hitupdate\", null, true, ev);\n            }\n            _this.finalHit = _this.movingHit;\n            _this.movingHit = null;\n            _this.emitter.trigger(\"dragend\", ev);\n        };\n        this.droppableStore = droppableStore;\n        dragging1.emitter.on(\"pointerdown\", this.handlePointerDown);\n        dragging1.emitter.on(\"dragstart\", this.handleDragStart);\n        dragging1.emitter.on(\"dragmove\", this.handleDragMove);\n        dragging1.emitter.on(\"pointerup\", this.handlePointerUp);\n        dragging1.emitter.on(\"dragend\", this.handleDragEnd);\n        this.dragging = dragging1;\n        this.emitter = new common.Emitter();\n    }\n    // sets initialHit\n    // sets coordAdjust\n    HitDragging1.prototype.processFirstCoord = function(ev) {\n        var origPoint = {\n            left: ev.pageX,\n            top: ev.pageY\n        };\n        var adjustedPoint = origPoint;\n        var subjectEl = ev.subjectEl;\n        var subjectRect;\n        if (subjectEl instanceof HTMLElement) {\n            subjectRect = common.computeRect(subjectEl);\n            adjustedPoint = common.constrainPoint(adjustedPoint, subjectRect);\n        }\n        var initialHit = this.initialHit = this.queryHitForOffset(adjustedPoint.left, adjustedPoint.top);\n        if (initialHit) {\n            if (this.useSubjectCenter && subjectRect) {\n                var slicedSubjectRect = common.intersectRects(subjectRect, initialHit.rect);\n                if (slicedSubjectRect) {\n                    adjustedPoint = common.getRectCenter(slicedSubjectRect);\n                }\n            }\n            this.coordAdjust = common.diffPoints(adjustedPoint, origPoint);\n        } else {\n            this.coordAdjust = {\n                left: 0,\n                top: 0\n            };\n        }\n    };\n    HitDragging1.prototype.handleMove = function(ev, forceHandle) {\n        var hit = this.queryHitForOffset(ev.pageX + this.coordAdjust.left, ev.pageY + this.coordAdjust.top);\n        if (forceHandle || !isHitsEqual(this.movingHit, hit)) {\n            this.movingHit = hit;\n            this.emitter.trigger(\"hitupdate\", hit, false, ev);\n        }\n    };\n    HitDragging1.prototype.prepareHits = function() {\n        this.offsetTrackers = common.mapHash(this.droppableStore, function(interactionSettings) {\n            interactionSettings.component.prepareHits();\n            return new OffsetTracker(interactionSettings.el);\n        });\n    };\n    HitDragging1.prototype.releaseHits = function() {\n        var offsetTrackers = this.offsetTrackers;\n        for(var id in offsetTrackers){\n            offsetTrackers[id].destroy();\n        }\n        this.offsetTrackers = {};\n    };\n    HitDragging1.prototype.queryHitForOffset = function(offsetLeft, offsetTop) {\n        var _a = this, droppableStore = _a.droppableStore, offsetTrackers = _a.offsetTrackers;\n        var bestHit = null;\n        for(var id in droppableStore){\n            var component = droppableStore[id].component;\n            var offsetTracker = offsetTrackers[id];\n            if (offsetTracker && offsetTracker.isWithinClipping(offsetLeft, offsetTop)) {\n                var originLeft = offsetTracker.computeLeft();\n                var originTop = offsetTracker.computeTop();\n                var positionLeft = offsetLeft - originLeft;\n                var positionTop = offsetTop - originTop;\n                var origRect = offsetTracker.origRect;\n                var width = origRect.right - origRect.left;\n                var height = origRect.bottom - origRect.top;\n                if (// must be within the element's bounds\n                positionLeft >= 0 && positionLeft < width && positionTop >= 0 && positionTop < height) {\n                    var hit = component.queryHit(positionLeft, positionTop, width, height);\n                    if (hit && // make sure the hit is within activeRange, meaning it's not a dead cell\n                    common.rangeContainsRange(hit.dateProfile.activeRange, hit.dateSpan.range) && (!bestHit || hit.layer > bestHit.layer)) {\n                        hit.componentId = id;\n                        hit.context = component.context;\n                        // TODO: better way to re-orient rectangle\n                        hit.rect.left += originLeft;\n                        hit.rect.right += originLeft;\n                        hit.rect.top += originTop;\n                        hit.rect.bottom += originTop;\n                        bestHit = hit;\n                    }\n                }\n            }\n        }\n        return bestHit;\n    };\n    return HitDragging1;\n}();\nfunction isHitsEqual(hit0, hit1) {\n    if (!hit0 && !hit1) {\n        return true;\n    }\n    if (Boolean(hit0) !== Boolean(hit1)) {\n        return false;\n    }\n    return common.isDateSpansEqual(hit0.dateSpan, hit1.dateSpan);\n}\nfunction buildDatePointApiWithContext(dateSpan, context) {\n    var props = {};\n    for(var _i = 0, _a = context.pluginHooks.datePointTransforms; _i < _a.length; _i++){\n        var transform = _a[_i];\n        tslib.__assign(props, transform(dateSpan, context));\n    }\n    tslib.__assign(props, buildDatePointApi(dateSpan, context.dateEnv));\n    return props;\n}\nfunction buildDatePointApi(span, dateEnv) {\n    return {\n        date: dateEnv.toDate(span.range.start),\n        dateStr: dateEnv.formatIso(span.range.start, {\n            omitTime: span.allDay\n        }),\n        allDay: span.allDay\n    };\n}\n/*\nMonitors when the user clicks on a specific date/time of a component.\nA pointerdown+pointerup on the same \"hit\" constitutes a click.\n*/ var DateClicking = /** @class */ function(_super) {\n    tslib.__extends(DateClicking1, _super);\n    function DateClicking1(settings) {\n        var _this = _super.call(this, settings) || this;\n        _this.handlePointerDown = function(pev) {\n            var dragging = _this.dragging;\n            var downEl = pev.origEvent.target;\n            // do this in pointerdown (not dragend) because DOM might be mutated by the time dragend is fired\n            dragging.setIgnoreMove(!_this.component.isValidDateDownEl(downEl));\n        };\n        // won't even fire if moving was ignored\n        _this.handleDragEnd = function(ev) {\n            var component = _this.component;\n            var pointer = _this.dragging.pointer;\n            if (!pointer.wasTouchScroll) {\n                var _a = _this.hitDragging, initialHit = _a.initialHit, finalHit = _a.finalHit;\n                if (initialHit && finalHit && isHitsEqual(initialHit, finalHit)) {\n                    var context = component.context;\n                    var arg = tslib.__assign(tslib.__assign({}, buildDatePointApiWithContext(initialHit.dateSpan, context)), {\n                        dayEl: initialHit.dayEl,\n                        jsEvent: ev.origEvent,\n                        view: context.viewApi || context.calendarApi.view\n                    });\n                    context.emitter.trigger(\"dateClick\", arg);\n                }\n            }\n        };\n        // we DO want to watch pointer moves because otherwise finalHit won't get populated\n        _this.dragging = new FeaturefulElementDragging(settings.el);\n        _this.dragging.autoScroller.isEnabled = false;\n        var hitDragging = _this.hitDragging = new HitDragging(_this.dragging, common.interactionSettingsToStore(settings));\n        hitDragging.emitter.on(\"pointerdown\", _this.handlePointerDown);\n        hitDragging.emitter.on(\"dragend\", _this.handleDragEnd);\n        return _this;\n    }\n    DateClicking1.prototype.destroy = function() {\n        this.dragging.destroy();\n    };\n    return DateClicking1;\n}(common.Interaction);\n/*\nTracks when the user selects a portion of time of a component,\nconstituted by a drag over date cells, with a possible delay at the beginning of the drag.\n*/ var DateSelecting = /** @class */ function(_super) {\n    tslib.__extends(DateSelecting1, _super);\n    function DateSelecting1(settings) {\n        var _this = _super.call(this, settings) || this;\n        _this.dragSelection = null;\n        _this.handlePointerDown = function(ev) {\n            var _a = _this, component = _a.component, dragging = _a.dragging;\n            var options = component.context.options;\n            var canSelect = options.selectable && component.isValidDateDownEl(ev.origEvent.target);\n            // don't bother to watch expensive moves if component won't do selection\n            dragging.setIgnoreMove(!canSelect);\n            // if touch, require user to hold down\n            dragging.delay = ev.isTouch ? getComponentTouchDelay$1(component) : null;\n        };\n        _this.handleDragStart = function(ev) {\n            _this.component.context.calendarApi.unselect(ev); // unselect previous selections\n        };\n        _this.handleHitUpdate = function(hit, isFinal) {\n            var context = _this.component.context;\n            var dragSelection = null;\n            var isInvalid = false;\n            if (hit) {\n                var initialHit = _this.hitDragging.initialHit;\n                var disallowed = hit.componentId === initialHit.componentId && _this.isHitComboAllowed && !_this.isHitComboAllowed(initialHit, hit);\n                if (!disallowed) {\n                    dragSelection = joinHitsIntoSelection(initialHit, hit, context.pluginHooks.dateSelectionTransformers);\n                }\n                if (!dragSelection || !common.isDateSelectionValid(dragSelection, hit.dateProfile, context)) {\n                    isInvalid = true;\n                    dragSelection = null;\n                }\n            }\n            if (dragSelection) {\n                context.dispatch({\n                    type: \"SELECT_DATES\",\n                    selection: dragSelection\n                });\n            } else if (!isFinal) {\n                context.dispatch({\n                    type: \"UNSELECT_DATES\"\n                });\n            }\n            if (!isInvalid) {\n                common.enableCursor();\n            } else {\n                common.disableCursor();\n            }\n            if (!isFinal) {\n                _this.dragSelection = dragSelection; // only clear if moved away from all hits while dragging\n            }\n        };\n        _this.handlePointerUp = function(pev) {\n            if (_this.dragSelection) {\n                // selection is already rendered, so just need to report selection\n                common.triggerDateSelect(_this.dragSelection, pev, _this.component.context);\n                _this.dragSelection = null;\n            }\n        };\n        var component1 = settings.component;\n        var options1 = component1.context.options;\n        var dragging2 = _this.dragging = new FeaturefulElementDragging(settings.el);\n        dragging2.touchScrollAllowed = false;\n        dragging2.minDistance = options1.selectMinDistance || 0;\n        dragging2.autoScroller.isEnabled = options1.dragScroll;\n        var hitDragging = _this.hitDragging = new HitDragging(_this.dragging, common.interactionSettingsToStore(settings));\n        hitDragging.emitter.on(\"pointerdown\", _this.handlePointerDown);\n        hitDragging.emitter.on(\"dragstart\", _this.handleDragStart);\n        hitDragging.emitter.on(\"hitupdate\", _this.handleHitUpdate);\n        hitDragging.emitter.on(\"pointerup\", _this.handlePointerUp);\n        return _this;\n    }\n    DateSelecting1.prototype.destroy = function() {\n        this.dragging.destroy();\n    };\n    return DateSelecting1;\n}(common.Interaction);\nfunction getComponentTouchDelay$1(component) {\n    var options = component.context.options;\n    var delay = options.selectLongPressDelay;\n    if (delay == null) {\n        delay = options.longPressDelay;\n    }\n    return delay;\n}\nfunction joinHitsIntoSelection(hit0, hit1, dateSelectionTransformers) {\n    var dateSpan0 = hit0.dateSpan;\n    var dateSpan1 = hit1.dateSpan;\n    var ms = [\n        dateSpan0.range.start,\n        dateSpan0.range.end,\n        dateSpan1.range.start,\n        dateSpan1.range.end, \n    ];\n    ms.sort(common.compareNumbers);\n    var props = {};\n    for(var _i = 0, dateSelectionTransformers_1 = dateSelectionTransformers; _i < dateSelectionTransformers_1.length; _i++){\n        var transformer = dateSelectionTransformers_1[_i];\n        var res = transformer(hit0, hit1);\n        if (res === false) {\n            return null;\n        }\n        if (res) {\n            tslib.__assign(props, res);\n        }\n    }\n    props.range = {\n        start: ms[0],\n        end: ms[3]\n    };\n    props.allDay = dateSpan0.allDay;\n    return props;\n}\nvar EventDragging = /** @class */ function(_super) {\n    tslib.__extends(EventDragging1, _super);\n    function EventDragging1(settings) {\n        var _this = _super.call(this, settings) || this;\n        // internal state\n        _this.subjectEl = null;\n        _this.subjectSeg = null; // the seg being selected/dragged\n        _this.isDragging = false;\n        _this.eventRange = null;\n        _this.relevantEvents = null; // the events being dragged\n        _this.receivingContext = null;\n        _this.validMutation = null;\n        _this.mutatedRelevantEvents = null;\n        _this.handlePointerDown = function(ev) {\n            var origTarget = ev.origEvent.target;\n            var _a = _this, component = _a.component, dragging = _a.dragging;\n            var mirror = dragging.mirror;\n            var options = component.context.options;\n            var initialContext = component.context;\n            _this.subjectEl = ev.subjectEl;\n            var subjectSeg = _this.subjectSeg = common.getElSeg(ev.subjectEl);\n            var eventRange = _this.eventRange = subjectSeg.eventRange;\n            var eventInstanceId = eventRange.instance.instanceId;\n            _this.relevantEvents = common.getRelevantEvents(initialContext.getCurrentData().eventStore, eventInstanceId);\n            dragging.minDistance = ev.isTouch ? 0 : options.eventDragMinDistance;\n            dragging.delay = // only do a touch delay if touch and this event hasn't been selected yet\n            (ev.isTouch && eventInstanceId !== component.props.eventSelection) ? getComponentTouchDelay(component) : null;\n            if (options.fixedMirrorParent) {\n                mirror.parentNode = options.fixedMirrorParent;\n            } else {\n                mirror.parentNode = common.elementClosest(origTarget, \".fc\");\n            }\n            mirror.revertDuration = options.dragRevertDuration;\n            var isValid = component.isValidSegDownEl(origTarget) && !common.elementClosest(origTarget, \".fc-event-resizer\"); // NOT on a resizer\n            dragging.setIgnoreMove(!isValid);\n            // disable dragging for elements that are resizable (ie, selectable)\n            // but are not draggable\n            _this.isDragging = isValid && ev.subjectEl.classList.contains(\"fc-event-draggable\");\n        };\n        _this.handleDragStart = function(ev) {\n            var initialContext = _this.component.context;\n            var eventRange = _this.eventRange;\n            var eventInstanceId = eventRange.instance.instanceId;\n            if (ev.isTouch) {\n                // need to select a different event?\n                if (eventInstanceId !== _this.component.props.eventSelection) {\n                    initialContext.dispatch({\n                        type: \"SELECT_EVENT\",\n                        eventInstanceId: eventInstanceId\n                    });\n                }\n            } else {\n                // if now using mouse, but was previous touch interaction, clear selected event\n                initialContext.dispatch({\n                    type: \"UNSELECT_EVENT\"\n                });\n            }\n            if (_this.isDragging) {\n                initialContext.calendarApi.unselect(ev); // unselect *date* selection\n                initialContext.emitter.trigger(\"eventDragStart\", {\n                    el: _this.subjectEl,\n                    event: new common.EventApi(initialContext, eventRange.def, eventRange.instance),\n                    jsEvent: ev.origEvent,\n                    view: initialContext.viewApi\n                });\n            }\n        };\n        _this.handleHitUpdate = function(hit, isFinal) {\n            if (!_this.isDragging) {\n                return;\n            }\n            var relevantEvents = _this.relevantEvents;\n            var initialHit = _this.hitDragging.initialHit;\n            var initialContext = _this.component.context;\n            // states based on new hit\n            var receivingContext = null;\n            var mutation = null;\n            var mutatedRelevantEvents = null;\n            var isInvalid = false;\n            var interaction = {\n                affectedEvents: relevantEvents,\n                mutatedEvents: common.createEmptyEventStore(),\n                isEvent: true\n            };\n            if (hit) {\n                receivingContext = hit.context;\n                var receivingOptions = receivingContext.options;\n                if (initialContext === receivingContext || receivingOptions.editable && receivingOptions.droppable) {\n                    mutation = computeEventMutation(initialHit, hit, receivingContext.getCurrentData().pluginHooks.eventDragMutationMassagers);\n                    if (mutation) {\n                        mutatedRelevantEvents = common.applyMutationToEventStore(relevantEvents, receivingContext.getCurrentData().eventUiBases, mutation, receivingContext);\n                        interaction.mutatedEvents = mutatedRelevantEvents;\n                        if (!common.isInteractionValid(interaction, hit.dateProfile, receivingContext)) {\n                            isInvalid = true;\n                            mutation = null;\n                            mutatedRelevantEvents = null;\n                            interaction.mutatedEvents = common.createEmptyEventStore();\n                        }\n                    }\n                } else {\n                    receivingContext = null;\n                }\n            }\n            _this.displayDrag(receivingContext, interaction);\n            if (!isInvalid) {\n                common.enableCursor();\n            } else {\n                common.disableCursor();\n            }\n            if (!isFinal) {\n                if (initialContext === receivingContext && isHitsEqual(initialHit, hit)) {\n                    mutation = null;\n                }\n                _this.dragging.setMirrorNeedsRevert(!mutation);\n                // render the mirror if no already-rendered mirror\n                // TODO: wish we could somehow wait for dispatch to guarantee render\n                _this.dragging.setMirrorIsVisible(!hit || !common.getElRoot(_this.subjectEl).querySelector(\".fc-event-mirror\"));\n                // assign states based on new hit\n                _this.receivingContext = receivingContext;\n                _this.validMutation = mutation;\n                _this.mutatedRelevantEvents = mutatedRelevantEvents;\n            }\n        };\n        _this.handlePointerUp = function() {\n            if (!_this.isDragging) {\n                _this.cleanup(); // because handleDragEnd won't fire\n            }\n        };\n        _this.handleDragEnd = function(ev) {\n            if (_this.isDragging) {\n                var initialContext_1 = _this.component.context;\n                var initialView = initialContext_1.viewApi;\n                var _a = _this, receivingContext_1 = _a.receivingContext, validMutation = _a.validMutation;\n                var eventDef = _this.eventRange.def;\n                var eventInstance = _this.eventRange.instance;\n                var eventApi = new common.EventApi(initialContext_1, eventDef, eventInstance);\n                var relevantEvents_1 = _this.relevantEvents;\n                var mutatedRelevantEvents_1 = _this.mutatedRelevantEvents;\n                var finalHit = _this.hitDragging.finalHit;\n                _this.clearDrag(); // must happen after revert animation\n                initialContext_1.emitter.trigger(\"eventDragStop\", {\n                    el: _this.subjectEl,\n                    event: eventApi,\n                    jsEvent: ev.origEvent,\n                    view: initialView\n                });\n                if (validMutation) {\n                    // dropped within same calendar\n                    if (receivingContext_1 === initialContext_1) {\n                        var updatedEventApi = new common.EventApi(initialContext_1, mutatedRelevantEvents_1.defs[eventDef.defId], eventInstance ? mutatedRelevantEvents_1.instances[eventInstance.instanceId] : null);\n                        initialContext_1.dispatch({\n                            type: \"MERGE_EVENTS\",\n                            eventStore: mutatedRelevantEvents_1\n                        });\n                        var eventChangeArg = {\n                            oldEvent: eventApi,\n                            event: updatedEventApi,\n                            relatedEvents: common.buildEventApis(mutatedRelevantEvents_1, initialContext_1, eventInstance),\n                            revert: function() {\n                                initialContext_1.dispatch({\n                                    type: \"MERGE_EVENTS\",\n                                    eventStore: relevantEvents_1\n                                });\n                            }\n                        };\n                        var transformed = {};\n                        for(var _i = 0, _b = initialContext_1.getCurrentData().pluginHooks.eventDropTransformers; _i < _b.length; _i++){\n                            var transformer = _b[_i];\n                            tslib.__assign(transformed, transformer(validMutation, initialContext_1));\n                        }\n                        initialContext_1.emitter.trigger(\"eventDrop\", tslib.__assign(tslib.__assign(tslib.__assign({}, eventChangeArg), transformed), {\n                            el: ev.subjectEl,\n                            delta: validMutation.datesDelta,\n                            jsEvent: ev.origEvent,\n                            view: initialView\n                        }));\n                        initialContext_1.emitter.trigger(\"eventChange\", eventChangeArg);\n                    // dropped in different calendar\n                    } else if (receivingContext_1) {\n                        var eventRemoveArg = {\n                            event: eventApi,\n                            relatedEvents: common.buildEventApis(relevantEvents_1, initialContext_1, eventInstance),\n                            revert: function() {\n                                initialContext_1.dispatch({\n                                    type: \"MERGE_EVENTS\",\n                                    eventStore: relevantEvents_1\n                                });\n                            }\n                        };\n                        initialContext_1.emitter.trigger(\"eventLeave\", tslib.__assign(tslib.__assign({}, eventRemoveArg), {\n                            draggedEl: ev.subjectEl,\n                            view: initialView\n                        }));\n                        initialContext_1.dispatch({\n                            type: \"REMOVE_EVENTS\",\n                            eventStore: relevantEvents_1\n                        });\n                        initialContext_1.emitter.trigger(\"eventRemove\", eventRemoveArg);\n                        var addedEventDef = mutatedRelevantEvents_1.defs[eventDef.defId];\n                        var addedEventInstance = mutatedRelevantEvents_1.instances[eventInstance.instanceId];\n                        var addedEventApi = new common.EventApi(receivingContext_1, addedEventDef, addedEventInstance);\n                        receivingContext_1.dispatch({\n                            type: \"MERGE_EVENTS\",\n                            eventStore: mutatedRelevantEvents_1\n                        });\n                        var eventAddArg = {\n                            event: addedEventApi,\n                            relatedEvents: common.buildEventApis(mutatedRelevantEvents_1, receivingContext_1, addedEventInstance),\n                            revert: function() {\n                                receivingContext_1.dispatch({\n                                    type: \"REMOVE_EVENTS\",\n                                    eventStore: mutatedRelevantEvents_1\n                                });\n                            }\n                        };\n                        receivingContext_1.emitter.trigger(\"eventAdd\", eventAddArg);\n                        if (ev.isTouch) {\n                            receivingContext_1.dispatch({\n                                type: \"SELECT_EVENT\",\n                                eventInstanceId: eventInstance.instanceId\n                            });\n                        }\n                        receivingContext_1.emitter.trigger(\"drop\", tslib.__assign(tslib.__assign({}, buildDatePointApiWithContext(finalHit.dateSpan, receivingContext_1)), {\n                            draggedEl: ev.subjectEl,\n                            jsEvent: ev.origEvent,\n                            view: finalHit.context.viewApi\n                        }));\n                        receivingContext_1.emitter.trigger(\"eventReceive\", tslib.__assign(tslib.__assign({}, eventAddArg), {\n                            draggedEl: ev.subjectEl,\n                            view: finalHit.context.viewApi\n                        }));\n                    }\n                } else {\n                    initialContext_1.emitter.trigger(\"_noEventDrop\");\n                }\n            }\n            _this.cleanup();\n        };\n        var component2 = _this.component;\n        var options2 = component2.context.options;\n        var dragging3 = _this.dragging = new FeaturefulElementDragging(settings.el);\n        dragging3.pointer.selector = EventDragging1.SELECTOR;\n        dragging3.touchScrollAllowed = false;\n        dragging3.autoScroller.isEnabled = options2.dragScroll;\n        var hitDragging = _this.hitDragging = new HitDragging(_this.dragging, common.interactionSettingsStore);\n        hitDragging.useSubjectCenter = settings.useEventCenter;\n        hitDragging.emitter.on(\"pointerdown\", _this.handlePointerDown);\n        hitDragging.emitter.on(\"dragstart\", _this.handleDragStart);\n        hitDragging.emitter.on(\"hitupdate\", _this.handleHitUpdate);\n        hitDragging.emitter.on(\"pointerup\", _this.handlePointerUp);\n        hitDragging.emitter.on(\"dragend\", _this.handleDragEnd);\n        return _this;\n    }\n    EventDragging1.prototype.destroy = function() {\n        this.dragging.destroy();\n    };\n    // render a drag state on the next receivingCalendar\n    EventDragging1.prototype.displayDrag = function(nextContext, state) {\n        var initialContext = this.component.context;\n        var prevContext = this.receivingContext;\n        // does the previous calendar need to be cleared?\n        if (prevContext && prevContext !== nextContext) {\n            // does the initial calendar need to be cleared?\n            // if so, don't clear all the way. we still need to to hide the affectedEvents\n            if (prevContext === initialContext) {\n                prevContext.dispatch({\n                    type: \"SET_EVENT_DRAG\",\n                    state: {\n                        affectedEvents: state.affectedEvents,\n                        mutatedEvents: common.createEmptyEventStore(),\n                        isEvent: true\n                    }\n                });\n            // completely clear the old calendar if it wasn't the initial\n            } else {\n                prevContext.dispatch({\n                    type: \"UNSET_EVENT_DRAG\"\n                });\n            }\n        }\n        if (nextContext) {\n            nextContext.dispatch({\n                type: \"SET_EVENT_DRAG\",\n                state: state\n            });\n        }\n    };\n    EventDragging1.prototype.clearDrag = function() {\n        var initialCalendar = this.component.context;\n        var receivingContext = this.receivingContext;\n        if (receivingContext) {\n            receivingContext.dispatch({\n                type: \"UNSET_EVENT_DRAG\"\n            });\n        }\n        // the initial calendar might have an dummy drag state from displayDrag\n        if (initialCalendar !== receivingContext) {\n            initialCalendar.dispatch({\n                type: \"UNSET_EVENT_DRAG\"\n            });\n        }\n    };\n    EventDragging1.prototype.cleanup = function() {\n        this.subjectSeg = null;\n        this.isDragging = false;\n        this.eventRange = null;\n        this.relevantEvents = null;\n        this.receivingContext = null;\n        this.validMutation = null;\n        this.mutatedRelevantEvents = null;\n    };\n    // TODO: test this in IE11\n    // QUESTION: why do we need it on the resizable???\n    EventDragging1.SELECTOR = \".fc-event-draggable, .fc-event-resizable\";\n    return EventDragging1;\n}(common.Interaction);\nfunction computeEventMutation(hit0, hit1, massagers) {\n    var dateSpan0 = hit0.dateSpan;\n    var dateSpan1 = hit1.dateSpan;\n    var date0 = dateSpan0.range.start;\n    var date1 = dateSpan1.range.start;\n    var standardProps = {};\n    if (dateSpan0.allDay !== dateSpan1.allDay) {\n        standardProps.allDay = dateSpan1.allDay;\n        standardProps.hasEnd = hit1.context.options.allDayMaintainDuration;\n        if (dateSpan1.allDay) {\n            // means date1 is already start-of-day,\n            // but date0 needs to be converted\n            date0 = common.startOfDay(date0);\n        }\n    }\n    var delta = common.diffDates(date0, date1, hit0.context.dateEnv, hit0.componentId === hit1.componentId ? hit0.largeUnit : null);\n    if (delta.milliseconds) {\n        standardProps.allDay = false;\n    }\n    var mutation = {\n        datesDelta: delta,\n        standardProps: standardProps\n    };\n    for(var _i = 0, massagers_1 = massagers; _i < massagers_1.length; _i++){\n        var massager = massagers_1[_i];\n        massager(mutation, hit0, hit1);\n    }\n    return mutation;\n}\nfunction getComponentTouchDelay(component) {\n    var options = component.context.options;\n    var delay = options.eventLongPressDelay;\n    if (delay == null) {\n        delay = options.longPressDelay;\n    }\n    return delay;\n}\nvar EventResizing = /** @class */ function(_super) {\n    tslib.__extends(EventResizing1, _super);\n    function EventResizing1(settings) {\n        var _this = _super.call(this, settings) || this;\n        // internal state\n        _this.draggingSegEl = null;\n        _this.draggingSeg = null; // TODO: rename to resizingSeg? subjectSeg?\n        _this.eventRange = null;\n        _this.relevantEvents = null;\n        _this.validMutation = null;\n        _this.mutatedRelevantEvents = null;\n        _this.handlePointerDown = function(ev) {\n            var component = _this.component;\n            var segEl = _this.querySegEl(ev);\n            var seg = common.getElSeg(segEl);\n            var eventRange = _this.eventRange = seg.eventRange;\n            _this.dragging.minDistance = component.context.options.eventDragMinDistance;\n            // if touch, need to be working with a selected event\n            _this.dragging.setIgnoreMove(!_this.component.isValidSegDownEl(ev.origEvent.target) || ev.isTouch && _this.component.props.eventSelection !== eventRange.instance.instanceId);\n        };\n        _this.handleDragStart = function(ev) {\n            var context = _this.component.context;\n            var eventRange = _this.eventRange;\n            _this.relevantEvents = common.getRelevantEvents(context.getCurrentData().eventStore, _this.eventRange.instance.instanceId);\n            var segEl = _this.querySegEl(ev);\n            _this.draggingSegEl = segEl;\n            _this.draggingSeg = common.getElSeg(segEl);\n            context.calendarApi.unselect();\n            context.emitter.trigger(\"eventResizeStart\", {\n                el: segEl,\n                event: new common.EventApi(context, eventRange.def, eventRange.instance),\n                jsEvent: ev.origEvent,\n                view: context.viewApi\n            });\n        };\n        _this.handleHitUpdate = function(hit, isFinal, ev) {\n            var context = _this.component.context;\n            var relevantEvents = _this.relevantEvents;\n            var initialHit = _this.hitDragging.initialHit;\n            var eventInstance = _this.eventRange.instance;\n            var mutation = null;\n            var mutatedRelevantEvents = null;\n            var isInvalid = false;\n            var interaction = {\n                affectedEvents: relevantEvents,\n                mutatedEvents: common.createEmptyEventStore(),\n                isEvent: true\n            };\n            if (hit) {\n                var disallowed = hit.componentId === initialHit.componentId && _this.isHitComboAllowed && !_this.isHitComboAllowed(initialHit, hit);\n                if (!disallowed) {\n                    mutation = computeMutation(initialHit, hit, ev.subjectEl.classList.contains(\"fc-event-resizer-start\"), eventInstance.range);\n                }\n            }\n            if (mutation) {\n                mutatedRelevantEvents = common.applyMutationToEventStore(relevantEvents, context.getCurrentData().eventUiBases, mutation, context);\n                interaction.mutatedEvents = mutatedRelevantEvents;\n                if (!common.isInteractionValid(interaction, hit.dateProfile, context)) {\n                    isInvalid = true;\n                    mutation = null;\n                    mutatedRelevantEvents = null;\n                    interaction.mutatedEvents = null;\n                }\n            }\n            if (mutatedRelevantEvents) {\n                context.dispatch({\n                    type: \"SET_EVENT_RESIZE\",\n                    state: interaction\n                });\n            } else {\n                context.dispatch({\n                    type: \"UNSET_EVENT_RESIZE\"\n                });\n            }\n            if (!isInvalid) {\n                common.enableCursor();\n            } else {\n                common.disableCursor();\n            }\n            if (!isFinal) {\n                if (mutation && isHitsEqual(initialHit, hit)) {\n                    mutation = null;\n                }\n                _this.validMutation = mutation;\n                _this.mutatedRelevantEvents = mutatedRelevantEvents;\n            }\n        };\n        _this.handleDragEnd = function(ev) {\n            var context = _this.component.context;\n            var eventDef = _this.eventRange.def;\n            var eventInstance = _this.eventRange.instance;\n            var eventApi = new common.EventApi(context, eventDef, eventInstance);\n            var relevantEvents = _this.relevantEvents;\n            var mutatedRelevantEvents = _this.mutatedRelevantEvents;\n            context.emitter.trigger(\"eventResizeStop\", {\n                el: _this.draggingSegEl,\n                event: eventApi,\n                jsEvent: ev.origEvent,\n                view: context.viewApi\n            });\n            if (_this.validMutation) {\n                var updatedEventApi = new common.EventApi(context, mutatedRelevantEvents.defs[eventDef.defId], eventInstance ? mutatedRelevantEvents.instances[eventInstance.instanceId] : null);\n                context.dispatch({\n                    type: \"MERGE_EVENTS\",\n                    eventStore: mutatedRelevantEvents\n                });\n                var eventChangeArg = {\n                    oldEvent: eventApi,\n                    event: updatedEventApi,\n                    relatedEvents: common.buildEventApis(mutatedRelevantEvents, context, eventInstance),\n                    revert: function() {\n                        context.dispatch({\n                            type: \"MERGE_EVENTS\",\n                            eventStore: relevantEvents\n                        });\n                    }\n                };\n                context.emitter.trigger(\"eventResize\", tslib.__assign(tslib.__assign({}, eventChangeArg), {\n                    el: _this.draggingSegEl,\n                    startDelta: _this.validMutation.startDelta || common.createDuration(0),\n                    endDelta: _this.validMutation.endDelta || common.createDuration(0),\n                    jsEvent: ev.origEvent,\n                    view: context.viewApi\n                }));\n                context.emitter.trigger(\"eventChange\", eventChangeArg);\n            } else {\n                context.emitter.trigger(\"_noEventResize\");\n            }\n            // reset all internal state\n            _this.draggingSeg = null;\n            _this.relevantEvents = null;\n            _this.validMutation = null;\n        // okay to keep eventInstance around. useful to set it in handlePointerDown\n        };\n        var component3 = settings.component;\n        var dragging = _this.dragging = new FeaturefulElementDragging(settings.el);\n        dragging.pointer.selector = \".fc-event-resizer\";\n        dragging.touchScrollAllowed = false;\n        dragging.autoScroller.isEnabled = component3.context.options.dragScroll;\n        var hitDragging = _this.hitDragging = new HitDragging(_this.dragging, common.interactionSettingsToStore(settings));\n        hitDragging.emitter.on(\"pointerdown\", _this.handlePointerDown);\n        hitDragging.emitter.on(\"dragstart\", _this.handleDragStart);\n        hitDragging.emitter.on(\"hitupdate\", _this.handleHitUpdate);\n        hitDragging.emitter.on(\"dragend\", _this.handleDragEnd);\n        return _this;\n    }\n    EventResizing1.prototype.destroy = function() {\n        this.dragging.destroy();\n    };\n    EventResizing1.prototype.querySegEl = function(ev) {\n        return common.elementClosest(ev.subjectEl, \".fc-event\");\n    };\n    return EventResizing1;\n}(common.Interaction);\nfunction computeMutation(hit0, hit1, isFromStart, instanceRange) {\n    var dateEnv = hit0.context.dateEnv;\n    var date0 = hit0.dateSpan.range.start;\n    var date1 = hit1.dateSpan.range.start;\n    var delta = common.diffDates(date0, date1, dateEnv, hit0.largeUnit);\n    if (isFromStart) {\n        if (dateEnv.add(instanceRange.start, delta) < instanceRange.end) {\n            return {\n                startDelta: delta\n            };\n        }\n    } else if (dateEnv.add(instanceRange.end, delta) > instanceRange.start) {\n        return {\n            endDelta: delta\n        };\n    }\n    return null;\n}\nvar UnselectAuto = /** @class */ function() {\n    function UnselectAuto1(context1) {\n        var _this = this;\n        this.context = context1;\n        this.isRecentPointerDateSelect = false; // wish we could use a selector to detect date selection, but uses hit system\n        this.matchesCancel = false;\n        this.matchesEvent = false;\n        this.onSelect = function(selectInfo) {\n            if (selectInfo.jsEvent) {\n                _this.isRecentPointerDateSelect = true;\n            }\n        };\n        this.onDocumentPointerDown = function(pev) {\n            var unselectCancel = _this.context.options.unselectCancel;\n            var downEl = common.getEventTargetViaRoot(pev.origEvent);\n            _this.matchesCancel = !!common.elementClosest(downEl, unselectCancel);\n            _this.matchesEvent = !!common.elementClosest(downEl, EventDragging.SELECTOR); // interaction started on an event?\n        };\n        this.onDocumentPointerUp = function(pev) {\n            var context = _this.context;\n            var documentPointer = _this.documentPointer;\n            var calendarState = context.getCurrentData();\n            // touch-scrolling should never unfocus any type of selection\n            if (!documentPointer.wasTouchScroll) {\n                if (calendarState.dateSelection && !_this.isRecentPointerDateSelect // a new pointer-initiated date selection since last onDocumentPointerUp?\n                ) {\n                    var unselectAuto = context.options.unselectAuto;\n                    if (unselectAuto && (!unselectAuto || !_this.matchesCancel)) {\n                        context.calendarApi.unselect(pev);\n                    }\n                }\n                if (calendarState.eventSelection && !_this.matchesEvent // interaction DIDN'T start on an event\n                ) {\n                    context.dispatch({\n                        type: \"UNSELECT_EVENT\"\n                    });\n                }\n            }\n            _this.isRecentPointerDateSelect = false;\n        };\n        var documentPointer1 = this.documentPointer = new PointerDragging(document);\n        documentPointer1.shouldIgnoreMove = true;\n        documentPointer1.shouldWatchScroll = false;\n        documentPointer1.emitter.on(\"pointerdown\", this.onDocumentPointerDown);\n        documentPointer1.emitter.on(\"pointerup\", this.onDocumentPointerUp);\n        /*\n        TODO: better way to know about whether there was a selection with the pointer\n        */ context1.emitter.on(\"select\", this.onSelect);\n    }\n    UnselectAuto1.prototype.destroy = function() {\n        this.context.emitter.off(\"select\", this.onSelect);\n        this.documentPointer.destroy();\n    };\n    return UnselectAuto1;\n}();\nvar OPTION_REFINERS = {\n    fixedMirrorParent: common.identity\n};\nvar LISTENER_REFINERS = {\n    dateClick: common.identity,\n    eventDragStart: common.identity,\n    eventDragStop: common.identity,\n    eventDrop: common.identity,\n    eventResizeStart: common.identity,\n    eventResizeStop: common.identity,\n    eventResize: common.identity,\n    drop: common.identity,\n    eventReceive: common.identity,\n    eventLeave: common.identity\n};\n/*\nGiven an already instantiated draggable object for one-or-more elements,\nInterprets any dragging as an attempt to drag an events that lives outside\nof a calendar onto a calendar.\n*/ var ExternalElementDragging = /** @class */ function() {\n    function ExternalElementDragging1(dragging4, suppliedDragMeta) {\n        var _this = this;\n        this.receivingContext = null;\n        this.droppableEvent = null; // will exist for all drags, even if create:false\n        this.suppliedDragMeta = null;\n        this.dragMeta = null;\n        this.handleDragStart = function(ev) {\n            _this.dragMeta = _this.buildDragMeta(ev.subjectEl);\n        };\n        this.handleHitUpdate = function(hit, isFinal, ev) {\n            var dragging = _this.hitDragging.dragging;\n            var receivingContext = null;\n            var droppableEvent = null;\n            var isInvalid = false;\n            var interaction = {\n                affectedEvents: common.createEmptyEventStore(),\n                mutatedEvents: common.createEmptyEventStore(),\n                isEvent: _this.dragMeta.create\n            };\n            if (hit) {\n                receivingContext = hit.context;\n                if (_this.canDropElOnCalendar(ev.subjectEl, receivingContext)) {\n                    droppableEvent = computeEventForDateSpan(hit.dateSpan, _this.dragMeta, receivingContext);\n                    interaction.mutatedEvents = common.eventTupleToStore(droppableEvent);\n                    isInvalid = !common.isInteractionValid(interaction, hit.dateProfile, receivingContext);\n                    if (isInvalid) {\n                        interaction.mutatedEvents = common.createEmptyEventStore();\n                        droppableEvent = null;\n                    }\n                }\n            }\n            _this.displayDrag(receivingContext, interaction);\n            // show mirror if no already-rendered mirror element OR if we are shutting down the mirror (?)\n            // TODO: wish we could somehow wait for dispatch to guarantee render\n            dragging.setMirrorIsVisible(isFinal || !droppableEvent || !document.querySelector(\".fc-event-mirror\"));\n            if (!isInvalid) {\n                common.enableCursor();\n            } else {\n                common.disableCursor();\n            }\n            if (!isFinal) {\n                dragging.setMirrorNeedsRevert(!droppableEvent);\n                _this.receivingContext = receivingContext;\n                _this.droppableEvent = droppableEvent;\n            }\n        };\n        this.handleDragEnd = function(pev) {\n            var _a = _this, receivingContext = _a.receivingContext, droppableEvent = _a.droppableEvent;\n            _this.clearDrag();\n            if (receivingContext && droppableEvent) {\n                var finalHit = _this.hitDragging.finalHit;\n                var finalView = finalHit.context.viewApi;\n                var dragMeta = _this.dragMeta;\n                receivingContext.emitter.trigger(\"drop\", tslib.__assign(tslib.__assign({}, buildDatePointApiWithContext(finalHit.dateSpan, receivingContext)), {\n                    draggedEl: pev.subjectEl,\n                    jsEvent: pev.origEvent,\n                    view: finalView\n                }));\n                if (dragMeta.create) {\n                    var addingEvents_1 = common.eventTupleToStore(droppableEvent);\n                    receivingContext.dispatch({\n                        type: \"MERGE_EVENTS\",\n                        eventStore: addingEvents_1\n                    });\n                    if (pev.isTouch) {\n                        receivingContext.dispatch({\n                            type: \"SELECT_EVENT\",\n                            eventInstanceId: droppableEvent.instance.instanceId\n                        });\n                    }\n                    // signal that an external event landed\n                    receivingContext.emitter.trigger(\"eventReceive\", {\n                        event: new common.EventApi(receivingContext, droppableEvent.def, droppableEvent.instance),\n                        relatedEvents: [],\n                        revert: function() {\n                            receivingContext.dispatch({\n                                type: \"REMOVE_EVENTS\",\n                                eventStore: addingEvents_1\n                            });\n                        },\n                        draggedEl: pev.subjectEl,\n                        view: finalView\n                    });\n                }\n            }\n            _this.receivingContext = null;\n            _this.droppableEvent = null;\n        };\n        var hitDragging = this.hitDragging = new HitDragging(dragging4, common.interactionSettingsStore);\n        hitDragging.requireInitial = false; // will start outside of a component\n        hitDragging.emitter.on(\"dragstart\", this.handleDragStart);\n        hitDragging.emitter.on(\"hitupdate\", this.handleHitUpdate);\n        hitDragging.emitter.on(\"dragend\", this.handleDragEnd);\n        this.suppliedDragMeta = suppliedDragMeta;\n    }\n    ExternalElementDragging1.prototype.buildDragMeta = function(subjectEl) {\n        if (typeof this.suppliedDragMeta === \"object\") {\n            return common.parseDragMeta(this.suppliedDragMeta);\n        }\n        if (typeof this.suppliedDragMeta === \"function\") {\n            return common.parseDragMeta(this.suppliedDragMeta(subjectEl));\n        }\n        return getDragMetaFromEl(subjectEl);\n    };\n    ExternalElementDragging1.prototype.displayDrag = function(nextContext, state) {\n        var prevContext = this.receivingContext;\n        if (prevContext && prevContext !== nextContext) {\n            prevContext.dispatch({\n                type: \"UNSET_EVENT_DRAG\"\n            });\n        }\n        if (nextContext) {\n            nextContext.dispatch({\n                type: \"SET_EVENT_DRAG\",\n                state: state\n            });\n        }\n    };\n    ExternalElementDragging1.prototype.clearDrag = function() {\n        if (this.receivingContext) {\n            this.receivingContext.dispatch({\n                type: \"UNSET_EVENT_DRAG\"\n            });\n        }\n    };\n    ExternalElementDragging1.prototype.canDropElOnCalendar = function(el, receivingContext) {\n        var dropAccept = receivingContext.options.dropAccept;\n        if (typeof dropAccept === \"function\") {\n            return dropAccept.call(receivingContext.calendarApi, el);\n        }\n        if (typeof dropAccept === \"string\" && dropAccept) {\n            return Boolean(common.elementMatches(el, dropAccept));\n        }\n        return true;\n    };\n    return ExternalElementDragging1;\n}();\n// Utils for computing event store from the DragMeta\n// ----------------------------------------------------------------------------------------------------\nfunction computeEventForDateSpan(dateSpan, dragMeta, context) {\n    var defProps = tslib.__assign({}, dragMeta.leftoverProps);\n    for(var _i = 0, _a = context.pluginHooks.externalDefTransforms; _i < _a.length; _i++){\n        var transform = _a[_i];\n        tslib.__assign(defProps, transform(dateSpan, dragMeta));\n    }\n    var _b = common.refineEventDef(defProps, context), refined = _b.refined, extra = _b.extra;\n    var def = common.parseEventDef(refined, extra, dragMeta.sourceId, dateSpan.allDay, context.options.forceEventDuration || Boolean(dragMeta.duration), context);\n    var start = dateSpan.range.start;\n    // only rely on time info if drop zone is all-day,\n    // otherwise, we already know the time\n    if (dateSpan.allDay && dragMeta.startTime) {\n        start = context.dateEnv.add(start, dragMeta.startTime);\n    }\n    var end = dragMeta.duration ? context.dateEnv.add(start, dragMeta.duration) : common.getDefaultEventEnd(dateSpan.allDay, start, context);\n    var instance = common.createEventInstance(def.defId, {\n        start: start,\n        end: end\n    });\n    return {\n        def: def,\n        instance: instance\n    };\n}\n// Utils for extracting data from element\n// ----------------------------------------------------------------------------------------------------\nfunction getDragMetaFromEl(el) {\n    var str = getEmbeddedElData(el, \"event\");\n    var obj = str ? JSON.parse(str) : {\n        create: false\n    }; // if no embedded data, assume no event creation\n    return common.parseDragMeta(obj);\n}\ncommon.config.dataAttrPrefix = \"\";\nfunction getEmbeddedElData(el, name) {\n    var prefix = common.config.dataAttrPrefix;\n    var prefixedName = (prefix ? prefix + \"-\" : \"\") + name;\n    return el.getAttribute(\"data-\" + prefixedName) || \"\";\n}\n/*\nMakes an element (that is *external* to any calendar) draggable.\nCan pass in data that determines how an event will be created when dropped onto a calendar.\nLeverages FullCalendar's internal drag-n-drop functionality WITHOUT a third-party drag system.\n*/ var ExternalDraggable = /** @class */ function() {\n    function ExternalDraggable1(el, settings) {\n        var _this = this;\n        if (settings === void 0) {\n            settings = {};\n        }\n        this.handlePointerDown = function(ev) {\n            var dragging = _this.dragging;\n            var _a = _this.settings, minDistance = _a.minDistance, longPressDelay = _a.longPressDelay;\n            dragging.minDistance = minDistance != null ? minDistance : ev.isTouch ? 0 : common.BASE_OPTION_DEFAULTS.eventDragMinDistance;\n            dragging.delay = ev.isTouch ? longPressDelay != null ? longPressDelay : common.BASE_OPTION_DEFAULTS.longPressDelay : 0;\n        };\n        this.handleDragStart = function(ev) {\n            if (ev.isTouch && _this.dragging.delay && ev.subjectEl.classList.contains(\"fc-event\")) {\n                _this.dragging.mirror.getMirrorEl().classList.add(\"fc-event-selected\");\n            }\n        };\n        this.settings = settings;\n        var dragging5 = this.dragging = new FeaturefulElementDragging(el);\n        dragging5.touchScrollAllowed = false;\n        if (settings.itemSelector != null) {\n            dragging5.pointer.selector = settings.itemSelector;\n        }\n        if (settings.appendTo != null) {\n            dragging5.mirror.parentNode = settings.appendTo; // TODO: write tests\n        }\n        dragging5.emitter.on(\"pointerdown\", this.handlePointerDown);\n        dragging5.emitter.on(\"dragstart\", this.handleDragStart);\n        new ExternalElementDragging(dragging5, settings.eventData); // eslint-disable-line no-new\n    }\n    ExternalDraggable1.prototype.destroy = function() {\n        this.dragging.destroy();\n    };\n    return ExternalDraggable1;\n}();\n/*\nDetects when a *THIRD-PARTY* drag-n-drop system interacts with elements.\nThe third-party system is responsible for drawing the visuals effects of the drag.\nThis class simply monitors for pointer movements and fires events.\nIt also has the ability to hide the moving element (the \"mirror\") during the drag.\n*/ var InferredElementDragging = /** @class */ function(_super) {\n    tslib.__extends(InferredElementDragging1, _super);\n    function InferredElementDragging1(containerEl) {\n        var _this = _super.call(this, containerEl) || this;\n        _this.shouldIgnoreMove = false;\n        _this.mirrorSelector = \"\";\n        _this.currentMirrorEl = null;\n        _this.handlePointerDown = function(ev) {\n            _this.emitter.trigger(\"pointerdown\", ev);\n            if (!_this.shouldIgnoreMove) {\n                // fire dragstart right away. does not support delay or min-distance\n                _this.emitter.trigger(\"dragstart\", ev);\n            }\n        };\n        _this.handlePointerMove = function(ev) {\n            if (!_this.shouldIgnoreMove) {\n                _this.emitter.trigger(\"dragmove\", ev);\n            }\n        };\n        _this.handlePointerUp = function(ev) {\n            _this.emitter.trigger(\"pointerup\", ev);\n            if (!_this.shouldIgnoreMove) {\n                // fire dragend right away. does not support a revert animation\n                _this.emitter.trigger(\"dragend\", ev);\n            }\n        };\n        var pointer = _this.pointer = new PointerDragging(containerEl);\n        pointer.emitter.on(\"pointerdown\", _this.handlePointerDown);\n        pointer.emitter.on(\"pointermove\", _this.handlePointerMove);\n        pointer.emitter.on(\"pointerup\", _this.handlePointerUp);\n        return _this;\n    }\n    InferredElementDragging1.prototype.destroy = function() {\n        this.pointer.destroy();\n    };\n    InferredElementDragging1.prototype.setIgnoreMove = function(bool) {\n        this.shouldIgnoreMove = bool;\n    };\n    InferredElementDragging1.prototype.setMirrorIsVisible = function(bool) {\n        if (bool) {\n            // restore a previously hidden element.\n            // use the reference in case the selector class has already been removed.\n            if (this.currentMirrorEl) {\n                this.currentMirrorEl.style.visibility = \"\";\n                this.currentMirrorEl = null;\n            }\n        } else {\n            var mirrorEl = this.mirrorSelector ? document.querySelector(this.mirrorSelector) : null;\n            if (mirrorEl) {\n                this.currentMirrorEl = mirrorEl;\n                mirrorEl.style.visibility = \"hidden\";\n            }\n        }\n    };\n    return InferredElementDragging1;\n}(common.ElementDragging);\n/*\nBridges third-party drag-n-drop systems with FullCalendar.\nMust be instantiated and destroyed by caller.\n*/ var ThirdPartyDraggable = /** @class */ function() {\n    function ThirdPartyDraggable1(containerOrSettings, settings) {\n        var containerEl = document;\n        if (// wish we could just test instanceof EventTarget, but doesn't work in IE11\n        containerOrSettings === document || containerOrSettings instanceof Element) {\n            containerEl = containerOrSettings;\n            settings = settings || {};\n        } else {\n            settings = containerOrSettings || {};\n        }\n        var dragging = this.dragging = new InferredElementDragging(containerEl);\n        if (typeof settings.itemSelector === \"string\") {\n            dragging.pointer.selector = settings.itemSelector;\n        } else if (containerEl === document) {\n            dragging.pointer.selector = \"[data-event]\";\n        }\n        if (typeof settings.mirrorSelector === \"string\") {\n            dragging.mirrorSelector = settings.mirrorSelector;\n        }\n        new ExternalElementDragging(dragging, settings.eventData); // eslint-disable-line no-new\n    }\n    ThirdPartyDraggable1.prototype.destroy = function() {\n        this.dragging.destroy();\n    };\n    return ThirdPartyDraggable1;\n}();\nvar main = common.createPlugin({\n    componentInteractions: [\n        DateClicking,\n        DateSelecting,\n        EventDragging,\n        EventResizing\n    ],\n    calendarInteractions: [\n        UnselectAuto\n    ],\n    elementDraggingImpl: FeaturefulElementDragging,\n    optionRefiners: OPTION_REFINERS,\n    listenerRefiners: LISTENER_REFINERS\n});\nexports.Draggable = ExternalDraggable;\nexports.FeaturefulElementDragging = FeaturefulElementDragging;\nexports.PointerDragging = PointerDragging;\nexports.ThirdPartyDraggable = ThirdPartyDraggable;\nexports[\"default\"] = main;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGZ1bGxjYWxlbmRhci9pbnRlcmFjdGlvbi9tYWluLmNqcy5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7OztFQUlFLENBQ1c7QUFFYkEsOENBQTZDO0lBQUVHLEtBQUssRUFBRSxJQUFJO0NBQUUsRUFBQyxDQUFDO0FBRTlELElBQUlDLE1BQU0sR0FBR0MsbUJBQU8sQ0FBQyw2RUFBc0IsQ0FBQztBQUM1QyxJQUFJQyxLQUFLLEdBQUdELG1CQUFPLENBQUMsb0JBQU8sQ0FBQztBQUU1QkQsTUFBTSxDQUFDRyxNQUFNLENBQUNDLG9CQUFvQixHQUFHLEdBQUcsQ0FBQztBQUN6QyxJQUFJQyxnQkFBZ0IsR0FBRyxDQUFDO0FBQ3hCLElBQUlDLFdBQVcsR0FBRyxDQUFDO0FBQ25CLElBQUlDLDBCQUEwQixHQUFHLEtBQUs7QUFDdEM7Ozs7Ozs7Ozs7OztFQVlFLENBQ0YsSUFBSUMsZUFBZSxHQUFHLGFBQWEsQ0FBRSxXQUFZO0lBQzdDLFNBQVNBLGdCQUFlLENBQUNDLFdBQVcsRUFBRTtRQUNsQyxJQUFJQyxLQUFLLEdBQUcsSUFBSTtRQUNoQixJQUFJLENBQUNDLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFDdEIsa0RBQWtEO1FBQ2xELElBQUksQ0FBQ0MsUUFBUSxHQUFHLEVBQUUsQ0FBQyxDQUFDLGdFQUFnRTtRQUNwRixJQUFJLENBQUNDLGNBQWMsR0FBRyxFQUFFLENBQUM7UUFDekIsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7UUFDOUIsSUFBSSxDQUFDQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsQ0FBQyx1Q0FBdUM7UUFDdEUsa0JBQWtCO1FBQ2xCLElBQUksQ0FBQ0MsVUFBVSxHQUFHLEtBQUssQ0FBQztRQUN4QixJQUFJLENBQUNDLGVBQWUsR0FBRyxLQUFLLENBQUM7UUFDN0IsSUFBSSxDQUFDQyxjQUFjLEdBQUcsS0FBSyxDQUFDO1FBQzVCLFFBQVE7UUFDUix1R0FBdUc7UUFDdkcsSUFBSSxDQUFDQyxlQUFlLEdBQUcsU0FBVUMsRUFBRSxFQUFFO1lBQ2pDLElBQUksQ0FBQ1YsS0FBSyxDQUFDVyxpQkFBaUIsRUFBRSxJQUMxQkMsb0JBQW9CLENBQUNGLEVBQUUsQ0FBQyxJQUN4QlYsS0FBSyxDQUFDYSxRQUFRLENBQUNILEVBQUUsQ0FBQyxFQUFFO2dCQUNwQixJQUFJSSxHQUFHLEdBQUdkLEtBQUssQ0FBQ2Usb0JBQW9CLENBQUNMLEVBQUUsRUFBRSxJQUFJLENBQUM7Z0JBQzlDVixLQUFLLENBQUNnQixPQUFPLENBQUNDLE9BQU8sQ0FBQyxhQUFhLEVBQUVILEdBQUcsQ0FBQyxDQUFDO2dCQUMxQ2QsS0FBSyxDQUFDa0IsZUFBZSxDQUFDSixHQUFHLENBQUMsQ0FBQztnQkFDM0IsSUFBSSxDQUFDZCxLQUFLLENBQUNJLGdCQUFnQixFQUFFO29CQUN6QmUsUUFBUSxDQUFDQyxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUVwQixLQUFLLENBQUNxQixlQUFlLENBQUMsQ0FBQztpQkFDakU7Z0JBQ0RGLFFBQVEsQ0FBQ0MsZ0JBQWdCLENBQUMsU0FBUyxFQUFFcEIsS0FBSyxDQUFDc0IsYUFBYSxDQUFDLENBQUM7YUFDN0Q7U0FDSixDQUFDO1FBQ0YsSUFBSSxDQUFDRCxlQUFlLEdBQUcsU0FBVVgsRUFBRSxFQUFFO1lBQ2pDLElBQUlJLEdBQUcsR0FBR2QsS0FBSyxDQUFDZSxvQkFBb0IsQ0FBQ0wsRUFBRSxDQUFDO1lBQ3hDVixLQUFLLENBQUN1QixZQUFZLENBQUNULEdBQUcsQ0FBQyxDQUFDO1lBQ3hCZCxLQUFLLENBQUNnQixPQUFPLENBQUNDLE9BQU8sQ0FBQyxhQUFhLEVBQUVILEdBQUcsQ0FBQyxDQUFDO1NBQzdDLENBQUM7UUFDRixJQUFJLENBQUNRLGFBQWEsR0FBRyxTQUFVWixFQUFFLEVBQUU7WUFDL0JTLFFBQVEsQ0FBQ0ssbUJBQW1CLENBQUMsV0FBVyxFQUFFeEIsS0FBSyxDQUFDcUIsZUFBZSxDQUFDLENBQUM7WUFDakVGLFFBQVEsQ0FBQ0ssbUJBQW1CLENBQUMsU0FBUyxFQUFFeEIsS0FBSyxDQUFDc0IsYUFBYSxDQUFDLENBQUM7WUFDN0R0QixLQUFLLENBQUNnQixPQUFPLENBQUNDLE9BQU8sQ0FBQyxXQUFXLEVBQUVqQixLQUFLLENBQUNlLG9CQUFvQixDQUFDTCxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ25FVixLQUFLLENBQUN5QixPQUFPLEVBQUUsQ0FBQyxDQUFDLGtEQUFrRDtTQUN0RSxDQUFDO1FBQ0YsUUFBUTtRQUNSLHVHQUF1RztRQUN2RyxJQUFJLENBQUNDLGdCQUFnQixHQUFHLFNBQVVoQixFQUFFLEVBQUU7WUFDbEMsSUFBSVYsS0FBSyxDQUFDYSxRQUFRLENBQUNILEVBQUUsQ0FBQyxFQUFFO2dCQUNwQlYsS0FBSyxDQUFDTyxlQUFlLEdBQUcsSUFBSSxDQUFDO2dCQUM3QixJQUFJTyxHQUFHLEdBQUdkLEtBQUssQ0FBQzJCLG9CQUFvQixDQUFDakIsRUFBRSxFQUFFLElBQUksQ0FBQztnQkFDOUNWLEtBQUssQ0FBQ2dCLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDLGFBQWEsRUFBRUgsR0FBRyxDQUFDLENBQUM7Z0JBQzFDZCxLQUFLLENBQUNrQixlQUFlLENBQUNKLEdBQUcsQ0FBQyxDQUFDO2dCQUMzQix1REFBdUQ7Z0JBQ3ZELHVDQUF1QztnQkFDdkMsSUFBSWMsUUFBUSxHQUFHbEIsRUFBRSxDQUFDbUIsTUFBTTtnQkFDeEIsSUFBSSxDQUFDN0IsS0FBSyxDQUFDSSxnQkFBZ0IsRUFBRTtvQkFDekJ3QixRQUFRLENBQUNSLGdCQUFnQixDQUFDLFdBQVcsRUFBRXBCLEtBQUssQ0FBQzhCLGVBQWUsQ0FBQyxDQUFDO2lCQUNqRTtnQkFDREYsUUFBUSxDQUFDUixnQkFBZ0IsQ0FBQyxVQUFVLEVBQUVwQixLQUFLLENBQUMrQixjQUFjLENBQUMsQ0FBQztnQkFDNURILFFBQVEsQ0FBQ1IsZ0JBQWdCLENBQUMsYUFBYSxFQUFFcEIsS0FBSyxDQUFDK0IsY0FBYyxDQUFDLENBQUMsQ0FBQywwQkFBMEI7Z0JBQzFGLDZFQUE2RTtnQkFDN0UsZ0ZBQWdGO2dCQUNoRiw0Q0FBNEM7Z0JBQzVDQyxNQUFNLENBQUNaLGdCQUFnQixDQUFDLFFBQVEsRUFBRXBCLEtBQUssQ0FBQ2lDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxDQUFDO2FBQ3BFO1NBQ0osQ0FBQztRQUNGLElBQUksQ0FBQ0gsZUFBZSxHQUFHLFNBQVVwQixFQUFFLEVBQUU7WUFDakMsSUFBSUksR0FBRyxHQUFHZCxLQUFLLENBQUMyQixvQkFBb0IsQ0FBQ2pCLEVBQUUsQ0FBQztZQUN4Q1YsS0FBSyxDQUFDdUIsWUFBWSxDQUFDVCxHQUFHLENBQUMsQ0FBQztZQUN4QmQsS0FBSyxDQUFDZ0IsT0FBTyxDQUFDQyxPQUFPLENBQUMsYUFBYSxFQUFFSCxHQUFHLENBQUMsQ0FBQztTQUM3QyxDQUFDO1FBQ0YsSUFBSSxDQUFDaUIsY0FBYyxHQUFHLFNBQVVyQixFQUFFLEVBQUU7WUFDaEMsSUFBSVYsS0FBSyxDQUFDTSxVQUFVLEVBQUU7Z0JBQ2xCLElBQUlzQixRQUFRLEdBQUdsQixFQUFFLENBQUNtQixNQUFNO2dCQUN4QkQsUUFBUSxDQUFDSixtQkFBbUIsQ0FBQyxXQUFXLEVBQUV4QixLQUFLLENBQUM4QixlQUFlLENBQUMsQ0FBQztnQkFDakVGLFFBQVEsQ0FBQ0osbUJBQW1CLENBQUMsVUFBVSxFQUFFeEIsS0FBSyxDQUFDK0IsY0FBYyxDQUFDLENBQUM7Z0JBQy9ESCxRQUFRLENBQUNKLG1CQUFtQixDQUFDLGFBQWEsRUFBRXhCLEtBQUssQ0FBQytCLGNBQWMsQ0FBQyxDQUFDO2dCQUNsRUMsTUFBTSxDQUFDUixtQkFBbUIsQ0FBQyxRQUFRLEVBQUV4QixLQUFLLENBQUNpQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLG1CQUFtQjtnQkFDeEZqQyxLQUFLLENBQUNnQixPQUFPLENBQUNDLE9BQU8sQ0FBQyxXQUFXLEVBQUVqQixLQUFLLENBQUMyQixvQkFBb0IsQ0FBQ2pCLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ25FVixLQUFLLENBQUN5QixPQUFPLEVBQUUsQ0FBQyxDQUFDLGtEQUFrRDtnQkFDbkV6QixLQUFLLENBQUNPLGVBQWUsR0FBRyxLQUFLLENBQUM7Z0JBQzlCMkIsa0JBQWtCLEVBQUUsQ0FBQzthQUN4QjtTQUNKLENBQUM7UUFDRixJQUFJLENBQUNELGlCQUFpQixHQUFHLFdBQVk7WUFDakNqQyxLQUFLLENBQUNRLGNBQWMsR0FBRyxJQUFJLENBQUM7U0FDL0IsQ0FBQztRQUNGLElBQUksQ0FBQzJCLFlBQVksR0FBRyxTQUFVekIsRUFBRSxFQUFFO1lBQzlCLElBQUksQ0FBQ1YsS0FBSyxDQUFDSSxnQkFBZ0IsRUFBRTtnQkFDekIsSUFBSWdDLEtBQUssR0FBRyxNQUFPLENBQUNDLFdBQVcsR0FBR3JDLEtBQUssQ0FBQ3NDLFdBQVcsR0FBSXRDLEtBQUssQ0FBQ3VDLFNBQVM7Z0JBQ3RFLElBQUlDLEtBQUssR0FBRyxNQUFPLENBQUNDLFdBQVcsR0FBR3pDLEtBQUssQ0FBQzBDLFdBQVcsR0FBSTFDLEtBQUssQ0FBQzJDLFNBQVM7Z0JBQ3RFM0MsS0FBSyxDQUFDZ0IsT0FBTyxDQUFDQyxPQUFPLENBQUMsYUFBYSxFQUFFO29CQUNqQzJCLFNBQVMsRUFBRWxDLEVBQUU7b0JBQ2JtQyxPQUFPLEVBQUU3QyxLQUFLLENBQUNPLGVBQWU7b0JBQzlCTixTQUFTLEVBQUVELEtBQUssQ0FBQ0MsU0FBUztvQkFDMUJtQyxLQUFLLEVBQUVBLEtBQUs7b0JBQ1pJLEtBQUssRUFBRUEsS0FBSztvQkFDWk0sTUFBTSxFQUFFVixLQUFLLEdBQUdwQyxLQUFLLENBQUMrQyxTQUFTO29CQUMvQkMsTUFBTSxFQUFFUixLQUFLLEdBQUd4QyxLQUFLLENBQUNpRCxTQUFTO2lCQUNsQyxDQUFDLENBQUM7YUFDTjtTQUNKLENBQUM7UUFDRixJQUFJLENBQUNsRCxXQUFXLEdBQUdBLFdBQVcsQ0FBQztRQUMvQixJQUFJLENBQUNpQixPQUFPLEdBQUcsSUFBSTFCLE1BQU0sQ0FBQzRELE9BQU8sRUFBRSxDQUFDO1FBQ3BDbkQsV0FBVyxDQUFDcUIsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQ1gsZUFBZSxDQUFDLENBQUM7UUFDaEVWLFdBQVcsQ0FBQ3FCLGdCQUFnQixDQUFDLFlBQVksRUFBRSxJQUFJLENBQUNNLGdCQUFnQixFQUFFO1lBQUV5QixPQUFPLEVBQUUsSUFBSTtTQUFFLENBQUMsQ0FBQztRQUNyRkMsZUFBZSxFQUFFLENBQUM7S0FDckI7SUFDRHRELGdCQUFlLENBQUN1RCxTQUFTLENBQUNDLE9BQU8sR0FBRyxXQUFZO1FBQzVDLElBQUksQ0FBQ3ZELFdBQVcsQ0FBQ3lCLG1CQUFtQixDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUNmLGVBQWUsQ0FBQyxDQUFDO1FBQ3hFLElBQUksQ0FBQ1YsV0FBVyxDQUFDeUIsbUJBQW1CLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQ0UsZ0JBQWdCLEVBQUU7WUFBRXlCLE9BQU8sRUFBRSxJQUFJO1NBQUUsQ0FBQyxDQUFDO1FBQzdGSSxpQkFBaUIsRUFBRSxDQUFDO0tBQ3ZCLENBQUM7SUFDRnpELGdCQUFlLENBQUN1RCxTQUFTLENBQUN4QyxRQUFRLEdBQUcsU0FBVUgsRUFBRSxFQUFFO1FBQy9DLElBQUlULFNBQVMsR0FBRyxJQUFJLENBQUN1RCxjQUFjLENBQUM5QyxFQUFFLENBQUM7UUFDdkMsSUFBSStDLE1BQU0sR0FBRy9DLEVBQUUsQ0FBQ21CLE1BQU07UUFDdEIsSUFBSTVCLFNBQVMsSUFDVCxDQUFDLENBQUMsSUFBSSxDQUFDRSxjQUFjLElBQUliLE1BQU0sQ0FBQ29FLGNBQWMsQ0FBQ0QsTUFBTSxFQUFFLElBQUksQ0FBQ3RELGNBQWMsQ0FBQyxDQUFDLEVBQUU7WUFDOUUsSUFBSSxDQUFDRixTQUFTLEdBQUdBLFNBQVMsQ0FBQztZQUMzQixJQUFJLENBQUNLLFVBQVUsR0FBRyxJQUFJLENBQUMsQ0FBQywrQ0FBK0M7WUFDdkUsSUFBSSxDQUFDRSxjQUFjLEdBQUcsS0FBSyxDQUFDO1lBQzVCLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFDRCxPQUFPLEtBQUssQ0FBQztLQUNoQixDQUFDO0lBQ0ZWLGdCQUFlLENBQUN1RCxTQUFTLENBQUM1QixPQUFPLEdBQUcsV0FBWTtRQUM1QzVCLDBCQUEwQixHQUFHLEtBQUssQ0FBQztRQUNuQyxJQUFJLENBQUNTLFVBQVUsR0FBRyxLQUFLLENBQUM7UUFDeEIsSUFBSSxDQUFDTCxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ3RCLDhDQUE4QztRQUM5QyxJQUFJLENBQUMwRCxrQkFBa0IsRUFBRSxDQUFDO0tBQzdCLENBQUM7SUFDRjdELGdCQUFlLENBQUN1RCxTQUFTLENBQUNHLGNBQWMsR0FBRyxTQUFVOUMsRUFBRSxFQUFFO1FBQ3JELElBQUksSUFBSSxDQUFDUixRQUFRLEVBQUU7WUFDZixPQUFPWixNQUFNLENBQUNvRSxjQUFjLENBQUNoRCxFQUFFLENBQUNtQixNQUFNLEVBQUUsSUFBSSxDQUFDM0IsUUFBUSxDQUFDLENBQUM7U0FDMUQ7UUFDRCxPQUFPLElBQUksQ0FBQ0gsV0FBVyxDQUFDO0tBQzNCLENBQUM7SUFDRkQsZ0JBQWUsQ0FBQ3VELFNBQVMsQ0FBQzFDLGlCQUFpQixHQUFHLFdBQVk7UUFDdEQsT0FBT2hCLGdCQUFnQixJQUFJLElBQUksQ0FBQ1ksZUFBZSxDQUFDO0tBQ25ELENBQUM7SUFDRiw0RkFBNEY7SUFDNUZULGdCQUFlLENBQUN1RCxTQUFTLENBQUNPLGlCQUFpQixHQUFHLFdBQVk7UUFDdEQsSUFBSSxJQUFJLENBQUN0RCxVQUFVLEVBQUU7WUFDakJULDBCQUEwQixHQUFHLElBQUksQ0FBQztTQUNyQztLQUNKLENBQUM7SUFDRix3Q0FBd0M7SUFDeEMsdUdBQXVHO0lBQ3ZHQyxnQkFBZSxDQUFDdUQsU0FBUyxDQUFDbkMsZUFBZSxHQUFHLFNBQVVSLEVBQUUsRUFBRTtRQUN0RCxJQUFJLElBQUksQ0FBQ0wsaUJBQWlCLEVBQUU7WUFDeEIsSUFBSSxDQUFDa0IsWUFBWSxDQUFDYixFQUFFLENBQUMsQ0FBQztZQUN0QnNCLE1BQU0sQ0FBQ1osZ0JBQWdCLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQ2UsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsa0JBQWtCO1NBQ2pGO0tBQ0osQ0FBQztJQUNGckMsZ0JBQWUsQ0FBQ3VELFNBQVMsQ0FBQzlCLFlBQVksR0FBRyxTQUFVYixFQUFFLEVBQUU7UUFDbkQsSUFBSSxJQUFJLENBQUNMLGlCQUFpQixFQUFFO1lBQ3hCLElBQUksQ0FBQ2tDLFNBQVMsR0FBRzdCLEVBQUUsQ0FBQzBCLEtBQUssQ0FBQztZQUMxQixJQUFJLENBQUNPLFNBQVMsR0FBR2pDLEVBQUUsQ0FBQzhCLEtBQUssQ0FBQztZQUMxQixJQUFJLENBQUNGLFdBQVcsR0FBR04sTUFBTSxDQUFDSyxXQUFXLENBQUM7WUFDdEMsSUFBSSxDQUFDSyxXQUFXLEdBQUdWLE1BQU0sQ0FBQ1MsV0FBVyxDQUFDO1NBQ3pDO0tBQ0osQ0FBQztJQUNGM0MsZ0JBQWUsQ0FBQ3VELFNBQVMsQ0FBQ00sa0JBQWtCLEdBQUcsV0FBWTtRQUN2RCxJQUFJLElBQUksQ0FBQ3RELGlCQUFpQixFQUFFO1lBQ3hCMkIsTUFBTSxDQUFDUixtQkFBbUIsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDVyxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxtQkFBbUI7U0FDckY7S0FDSixDQUFDO0lBQ0Ysc0JBQXNCO0lBQ3RCLHVHQUF1RztJQUN2R3JDLGdCQUFlLENBQUN1RCxTQUFTLENBQUN0QyxvQkFBb0IsR0FBRyxTQUFVTCxFQUFFLEVBQUVtRCxPQUFPLEVBQUU7UUFDcEUsSUFBSWYsTUFBTSxHQUFHLENBQUM7UUFDZCxJQUFJRSxNQUFNLEdBQUcsQ0FBQztRQUNkLG9CQUFvQjtRQUNwQixJQUFJYSxPQUFPLEVBQUU7WUFDVCxJQUFJLENBQUNkLFNBQVMsR0FBR3JDLEVBQUUsQ0FBQzBCLEtBQUssQ0FBQztZQUMxQixJQUFJLENBQUNhLFNBQVMsR0FBR3ZDLEVBQUUsQ0FBQzhCLEtBQUssQ0FBQztTQUM3QixNQUNJO1lBQ0RNLE1BQU0sR0FBR3BDLEVBQUUsQ0FBQzBCLEtBQUssR0FBRyxJQUFJLENBQUNXLFNBQVMsQ0FBQztZQUNuQ0MsTUFBTSxHQUFHdEMsRUFBRSxDQUFDOEIsS0FBSyxHQUFHLElBQUksQ0FBQ1MsU0FBUyxDQUFDO1NBQ3RDO1FBQ0QsT0FBTztZQUNITCxTQUFTLEVBQUVsQyxFQUFFO1lBQ2JtQyxPQUFPLEVBQUUsS0FBSztZQUNkNUMsU0FBUyxFQUFFLElBQUksQ0FBQ0EsU0FBUztZQUN6Qm1DLEtBQUssRUFBRTFCLEVBQUUsQ0FBQzBCLEtBQUs7WUFDZkksS0FBSyxFQUFFOUIsRUFBRSxDQUFDOEIsS0FBSztZQUNmTSxNQUFNLEVBQUVBLE1BQU07WUFDZEUsTUFBTSxFQUFFQSxNQUFNO1NBQ2pCLENBQUM7S0FDTCxDQUFDO0lBQ0ZsRCxnQkFBZSxDQUFDdUQsU0FBUyxDQUFDMUIsb0JBQW9CLEdBQUcsU0FBVWpCLEVBQUUsRUFBRW1ELE9BQU8sRUFBRTtRQUNwRSxJQUFJQyxPQUFPLEdBQUdwRCxFQUFFLENBQUNvRCxPQUFPO1FBQ3hCLElBQUkxQixLQUFLO1FBQ1QsSUFBSUksS0FBSztRQUNULElBQUlNLE1BQU0sR0FBRyxDQUFDO1FBQ2QsSUFBSUUsTUFBTSxHQUFHLENBQUM7UUFDZCxxQ0FBcUM7UUFDckMsOENBQThDO1FBQzlDLElBQUljLE9BQU8sSUFBSUEsT0FBTyxDQUFDQyxNQUFNLEVBQUU7WUFDM0IzQixLQUFLLEdBQUcwQixPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMxQixLQUFLLENBQUM7WUFDekJJLEtBQUssR0FBR3NCLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQ3RCLEtBQUssQ0FBQztTQUM1QixNQUNJO1lBQ0RKLEtBQUssR0FBRzFCLEVBQUUsQ0FBQzBCLEtBQUssQ0FBQztZQUNqQkksS0FBSyxHQUFHOUIsRUFBRSxDQUFDOEIsS0FBSyxDQUFDO1NBQ3BCO1FBQ0Qsb0JBQW9CO1FBQ3BCLElBQUlxQixPQUFPLEVBQUU7WUFDVCxJQUFJLENBQUNkLFNBQVMsR0FBR1gsS0FBSyxDQUFDO1lBQ3ZCLElBQUksQ0FBQ2EsU0FBUyxHQUFHVCxLQUFLLENBQUM7U0FDMUIsTUFDSTtZQUNETSxNQUFNLEdBQUdWLEtBQUssR0FBRyxJQUFJLENBQUNXLFNBQVMsQ0FBQztZQUNoQ0MsTUFBTSxHQUFHUixLQUFLLEdBQUcsSUFBSSxDQUFDUyxTQUFTLENBQUM7U0FDbkM7UUFDRCxPQUFPO1lBQ0hMLFNBQVMsRUFBRWxDLEVBQUU7WUFDYm1DLE9BQU8sRUFBRSxJQUFJO1lBQ2I1QyxTQUFTLEVBQUUsSUFBSSxDQUFDQSxTQUFTO1lBQ3pCbUMsS0FBSyxFQUFFQSxLQUFLO1lBQ1pJLEtBQUssRUFBRUEsS0FBSztZQUNaTSxNQUFNLEVBQUVBLE1BQU07WUFDZEUsTUFBTSxFQUFFQSxNQUFNO1NBQ2pCLENBQUM7S0FDTCxDQUFDO0lBQ0YsT0FBT2xELGdCQUFlLENBQUM7Q0FDMUIsRUFBRTtBQUNILHlHQUF5RztBQUN6RyxTQUFTYyxvQkFBb0IsQ0FBQ0YsRUFBRSxFQUFFO0lBQzlCLE9BQU9BLEVBQUUsQ0FBQ3NELE1BQU0sS0FBSyxDQUFDLElBQUksQ0FBQ3RELEVBQUUsQ0FBQ3VELE9BQU8sQ0FBQztDQUN6QztBQUNELGdEQUFnRDtBQUNoRCx1R0FBdUc7QUFDdkcsU0FBUy9CLGtCQUFrQixHQUFHO0lBQzFCdkMsZ0JBQWdCLElBQUksQ0FBQyxDQUFDO0lBQ3RCdUUsVUFBVSxDQUFDLFdBQVk7UUFDbkJ2RSxnQkFBZ0IsSUFBSSxDQUFDLENBQUM7S0FDekIsRUFBRUwsTUFBTSxDQUFDRyxNQUFNLENBQUNDLG9CQUFvQixDQUFDLENBQUM7Q0FDMUM7QUFDRCw4REFBOEQ7QUFDOUQsdUdBQXVHO0FBQ3ZHLFNBQVMwRCxlQUFlLEdBQUc7SUFDdkJ4RCxXQUFXLElBQUksQ0FBQyxDQUFDO0lBQ2pCLElBQUlBLFdBQVcsS0FBSyxDQUFDLEVBQUU7UUFDbkJvQyxNQUFNLENBQUNaLGdCQUFnQixDQUFDLFdBQVcsRUFBRStDLGlCQUFpQixFQUFFO1lBQUVoQixPQUFPLEVBQUUsS0FBSztTQUFFLENBQUMsQ0FBQztLQUMvRTtDQUNKO0FBQ0QsU0FBU0ksaUJBQWlCLEdBQUc7SUFDekIzRCxXQUFXLElBQUksQ0FBQyxDQUFDO0lBQ2pCLElBQUksQ0FBQ0EsV0FBVyxFQUFFO1FBQ2RvQyxNQUFNLENBQUNSLG1CQUFtQixDQUFDLFdBQVcsRUFBRTJDLGlCQUFpQixFQUFFO1lBQUVoQixPQUFPLEVBQUUsS0FBSztTQUFFLENBQUMsQ0FBQztLQUNsRjtDQUNKO0FBQ0QsU0FBU2dCLGlCQUFpQixDQUFDekQsRUFBRSxFQUFFO0lBQzNCLElBQUliLDBCQUEwQixFQUFFO1FBQzVCYSxFQUFFLENBQUMwRCxjQUFjLEVBQUUsQ0FBQztLQUN2QjtDQUNKO0FBRUQ7Ozs7RUFJRSxDQUNGLElBQUlDLGFBQWEsR0FBRyxhQUFhLENBQUUsV0FBWTtJQUMzQyxTQUFTQSxjQUFhLEdBQUc7UUFDckIsSUFBSSxDQUFDQyxTQUFTLEdBQUcsS0FBSyxDQUFDLENBQUMsNkJBQTZCO1FBQ3JELElBQUksQ0FBQ0MsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFJLENBQUNDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDQyxZQUFZLEdBQUcsSUFBSSxDQUFDLENBQUMscUNBQXFDO1FBQy9ELDZDQUE2QztRQUM3QyxJQUFJLENBQUNDLFVBQVUsR0FBR3ZELFFBQVEsQ0FBQ3dELElBQUksQ0FBQyxDQUFDLDREQUE0RDtRQUM3RixJQUFJLENBQUNDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDbkIsSUFBSSxDQUFDQyxjQUFjLEdBQUcsQ0FBQyxDQUFDO0tBQzNCO0lBQ0RSLGNBQWEsQ0FBQ2hCLFNBQVMsQ0FBQ3lCLEtBQUssR0FBRyxTQUFVUCxRQUFRLEVBQUVuQyxLQUFLLEVBQUVJLEtBQUssRUFBRTtRQUM5RCxJQUFJLENBQUMrQixRQUFRLEdBQUdBLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUNFLFlBQVksR0FBRyxJQUFJLENBQUNGLFFBQVEsQ0FBQ1EscUJBQXFCLEVBQUUsQ0FBQztRQUMxRCxJQUFJLENBQUNDLFdBQVcsR0FBRzVDLEtBQUssR0FBR0osTUFBTSxDQUFDSyxXQUFXLENBQUM7UUFDOUMsSUFBSSxDQUFDNEMsV0FBVyxHQUFHekMsS0FBSyxHQUFHUixNQUFNLENBQUNTLFdBQVcsQ0FBQztRQUM5QyxJQUFJLENBQUNLLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDaEIsSUFBSSxDQUFDRSxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ2hCLElBQUksQ0FBQ2tDLGdCQUFnQixFQUFFLENBQUM7S0FDM0IsQ0FBQztJQUNGYixjQUFhLENBQUNoQixTQUFTLENBQUM4QixVQUFVLEdBQUcsU0FBVS9DLEtBQUssRUFBRUksS0FBSyxFQUFFO1FBQ3pELElBQUksQ0FBQ00sTUFBTSxHQUFHLEtBQU0sR0FBR2QsTUFBTSxDQUFDSyxXQUFXLEdBQUksSUFBSSxDQUFDMkMsV0FBVyxDQUFDO1FBQzlELElBQUksQ0FBQ2hDLE1BQU0sR0FBRyxLQUFNLEdBQUdoQixNQUFNLENBQUNTLFdBQVcsR0FBSSxJQUFJLENBQUN3QyxXQUFXLENBQUM7UUFDOUQsSUFBSSxDQUFDQyxnQkFBZ0IsRUFBRSxDQUFDO0tBQzNCLENBQUM7SUFDRiw2QkFBNkI7SUFDN0JiLGNBQWEsQ0FBQ2hCLFNBQVMsQ0FBQytCLFlBQVksR0FBRyxTQUFVQyxJQUFJLEVBQUU7UUFDbkQsSUFBSUEsSUFBSSxFQUFFO1lBQ04sSUFBSSxDQUFDLElBQUksQ0FBQ2YsU0FBUyxFQUFFO2dCQUNqQixJQUFJLElBQUksQ0FBQ0UsUUFBUSxFQUFFO29CQUNmLElBQUksQ0FBQ0EsUUFBUSxDQUFDYyxLQUFLLENBQUNDLE9BQU8sR0FBRyxFQUFFLENBQUM7aUJBQ3BDO2dCQUNELElBQUksQ0FBQ2pCLFNBQVMsR0FBR2UsSUFBSSxDQUFDLENBQUMsMENBQTBDO2dCQUNqRSxJQUFJLENBQUNILGdCQUFnQixFQUFFLENBQUMsQ0FBQyx3REFBd0Q7YUFDcEY7U0FDSixNQUNJLElBQUksSUFBSSxDQUFDWixTQUFTLEVBQUU7WUFDckIsSUFBSSxJQUFJLENBQUNFLFFBQVEsRUFBRTtnQkFDZixJQUFJLENBQUNBLFFBQVEsQ0FBQ2MsS0FBSyxDQUFDQyxPQUFPLEdBQUcsTUFBTSxDQUFDO2FBQ3hDO1lBQ0QsSUFBSSxDQUFDakIsU0FBUyxHQUFHZSxJQUFJLENBQUM7U0FDekI7S0FDSixDQUFDO0lBQ0YsZUFBZTtJQUNmaEIsY0FBYSxDQUFDaEIsU0FBUyxDQUFDbUMsSUFBSSxHQUFHLFNBQVVDLG9CQUFvQixFQUFFQyxRQUFRLEVBQUU7UUFDckUsSUFBSTFGLEtBQUssR0FBRyxJQUFJO1FBQ2hCLElBQUkyRixJQUFJLEdBQUcsV0FBWTtZQUNuQjNGLEtBQUssQ0FBQ3lCLE9BQU8sRUFBRSxDQUFDO1lBQ2hCaUUsUUFBUSxFQUFFLENBQUM7U0FDZDtRQUNELElBQUlELG9CQUFvQixJQUNwQixJQUFJLENBQUNqQixRQUFRLElBQ2IsSUFBSSxDQUFDRixTQUFTLElBQ2QsSUFBSSxDQUFDTyxjQUFjLElBQ25CLENBQUMsSUFBSSxDQUFDL0IsTUFBTSxJQUFJLElBQUksQ0FBQ0UsTUFBTSxDQUFDLENBQUMsd0NBQXdDO1FBQXpDLEVBQzlCO1lBQ0UsSUFBSSxDQUFDNEMsaUJBQWlCLENBQUNELElBQUksRUFBRSxJQUFJLENBQUNkLGNBQWMsQ0FBQyxDQUFDO1NBQ3JELE1BQ0k7WUFDRFgsVUFBVSxDQUFDeUIsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0osQ0FBQztJQUNGdEIsY0FBYSxDQUFDaEIsU0FBUyxDQUFDdUMsaUJBQWlCLEdBQUcsU0FBVUYsUUFBUSxFQUFFYixjQUFjLEVBQUU7UUFDNUUsSUFBSUwsUUFBUSxHQUFHLElBQUksQ0FBQ0EsUUFBUTtRQUM1QixJQUFJcUIsaUJBQWlCLEdBQUcsSUFBSSxDQUFDdEIsUUFBUSxDQUFDUSxxQkFBcUIsRUFBRSxFQUFFLDRDQUE0QztRQUMzR1AsUUFBUSxDQUFDYyxLQUFLLENBQUNRLFVBQVUsR0FDckIsTUFBTSxHQUFHakIsY0FBYyxHQUFHLEtBQUssR0FDM0IsT0FBTyxHQUFHQSxjQUFjLEdBQUcsSUFBSSxDQUFDO1FBQ3hDdkYsTUFBTSxDQUFDeUcsVUFBVSxDQUFDdkIsUUFBUSxFQUFFO1lBQ3hCd0IsSUFBSSxFQUFFSCxpQkFBaUIsQ0FBQ0csSUFBSTtZQUM1QkMsR0FBRyxFQUFFSixpQkFBaUIsQ0FBQ0ksR0FBRztTQUM3QixDQUFDLENBQUM7UUFDSDNHLE1BQU0sQ0FBQzRHLGtCQUFrQixDQUFDMUIsUUFBUSxFQUFFLFdBQVk7WUFDNUNBLFFBQVEsQ0FBQ2MsS0FBSyxDQUFDUSxVQUFVLEdBQUcsRUFBRSxDQUFDO1lBQy9CSixRQUFRLEVBQUUsQ0FBQztTQUNkLENBQUMsQ0FBQztLQUNOLENBQUM7SUFDRnJCLGNBQWEsQ0FBQ2hCLFNBQVMsQ0FBQzVCLE9BQU8sR0FBRyxXQUFZO1FBQzFDLElBQUksSUFBSSxDQUFDK0MsUUFBUSxFQUFFO1lBQ2ZsRixNQUFNLENBQUM2RyxhQUFhLENBQUMsSUFBSSxDQUFDM0IsUUFBUSxDQUFDLENBQUM7WUFDcEMsSUFBSSxDQUFDQSxRQUFRLEdBQUcsSUFBSSxDQUFDO1NBQ3hCO1FBQ0QsSUFBSSxDQUFDRCxRQUFRLEdBQUcsSUFBSSxDQUFDO0tBQ3hCLENBQUM7SUFDRkYsY0FBYSxDQUFDaEIsU0FBUyxDQUFDNkIsZ0JBQWdCLEdBQUcsV0FBWTtRQUNuRCxJQUFJLElBQUksQ0FBQ1gsUUFBUSxJQUFJLElBQUksQ0FBQ0QsU0FBUyxFQUFFO1lBQ2pDaEYsTUFBTSxDQUFDeUcsVUFBVSxDQUFDLElBQUksQ0FBQ0ssV0FBVyxFQUFFLEVBQUU7Z0JBQ2xDSixJQUFJLEVBQUUsSUFBSSxDQUFDdkIsWUFBWSxDQUFDdUIsSUFBSSxHQUFHLElBQUksQ0FBQ2xELE1BQU07Z0JBQzFDbUQsR0FBRyxFQUFFLElBQUksQ0FBQ3hCLFlBQVksQ0FBQ3dCLEdBQUcsR0FBRyxJQUFJLENBQUNqRCxNQUFNO2FBQzNDLENBQUMsQ0FBQztTQUNOO0tBQ0osQ0FBQztJQUNGcUIsY0FBYSxDQUFDaEIsU0FBUyxDQUFDK0MsV0FBVyxHQUFHLFdBQVk7UUFDOUMsSUFBSTNCLFlBQVksR0FBRyxJQUFJLENBQUNBLFlBQVk7UUFDcEMsSUFBSUQsUUFBUSxHQUFHLElBQUksQ0FBQ0EsUUFBUTtRQUM1QixJQUFJLENBQUNBLFFBQVEsRUFBRTtZQUNYQSxRQUFRLEdBQUcsSUFBSSxDQUFDQSxRQUFRLEdBQUcsSUFBSSxDQUFDRCxRQUFRLENBQUM4QixTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxxQkFBcUI7WUFDL0UsNEVBQTRFO1lBQzVFLGlGQUFpRjtZQUNqRjdCLFFBQVEsQ0FBQzhCLFNBQVMsQ0FBQ0MsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7WUFDMUMvQixRQUFRLENBQUM4QixTQUFTLENBQUNDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1lBQzVDakgsTUFBTSxDQUFDeUcsVUFBVSxDQUFDdkIsUUFBUSxFQUFFO2dCQUN4QmdDLFFBQVEsRUFBRSxPQUFPO2dCQUNqQjVCLE1BQU0sRUFBRSxJQUFJLENBQUNBLE1BQU07Z0JBQ25CNkIsVUFBVSxFQUFFLEVBQUU7Z0JBQ2RDLFNBQVMsRUFBRSxZQUFZO2dCQUN2QkMsS0FBSyxFQUFFbEMsWUFBWSxDQUFDbUMsS0FBSyxHQUFHbkMsWUFBWSxDQUFDdUIsSUFBSTtnQkFDN0NhLE1BQU0sRUFBRXBDLFlBQVksQ0FBQ3FDLE1BQU0sR0FBR3JDLFlBQVksQ0FBQ3dCLEdBQUc7Z0JBQzlDVyxLQUFLLEVBQUUsTUFBTTtnQkFDYkUsTUFBTSxFQUFFLE1BQU07Z0JBQ2RDLE1BQU0sRUFBRSxDQUFDO2FBQ1osQ0FBQyxDQUFDO1lBQ0gsSUFBSSxDQUFDckMsVUFBVSxDQUFDc0MsV0FBVyxDQUFDeEMsUUFBUSxDQUFDLENBQUM7U0FDekM7UUFDRCxPQUFPQSxRQUFRLENBQUM7S0FDbkIsQ0FBQztJQUNGLE9BQU9ILGNBQWEsQ0FBQztDQUN4QixFQUFFO0FBRUg7Ozs7Ozs7RUFPRSxDQUNGLElBQUk0QyxlQUFlLEdBQUcsYUFBYSxDQUFFLFNBQVVDLE1BQU0sRUFBRTtJQUNuRDFILEtBQUssQ0FBQzJILFNBQVMsQ0FBQ0YsZ0JBQWUsRUFBRUMsTUFBTSxDQUFDLENBQUM7SUFDekMsU0FBU0QsZ0JBQWUsQ0FBQ0csZ0JBQWdCLEVBQUVDLGFBQWEsRUFBRTtRQUN0RCxJQUFJckgsS0FBSyxHQUFHa0gsTUFBTSxDQUFDSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSTtRQUNyQ3RILEtBQUssQ0FBQ21DLFlBQVksR0FBRyxXQUFZO1lBQzdCbkMsS0FBSyxDQUFDdUgsU0FBUyxHQUFHdkgsS0FBSyxDQUFDb0gsZ0JBQWdCLENBQUNJLFlBQVksRUFBRSxDQUFDO1lBQ3hEeEgsS0FBSyxDQUFDeUgsVUFBVSxHQUFHekgsS0FBSyxDQUFDb0gsZ0JBQWdCLENBQUNNLGFBQWEsRUFBRSxDQUFDO1lBQzFEMUgsS0FBSyxDQUFDMkgsa0JBQWtCLEVBQUUsQ0FBQztTQUM5QixDQUFDO1FBQ0YzSCxLQUFLLENBQUNvSCxnQkFBZ0IsR0FBR0EsZ0JBQWdCLENBQUM7UUFDMUNwSCxLQUFLLENBQUNxSCxhQUFhLEdBQUdBLGFBQWEsQ0FBQztRQUNwQ3JILEtBQUssQ0FBQ3VILFNBQVMsR0FBR3ZILEtBQUssQ0FBQzRILGFBQWEsR0FBR1IsZ0JBQWdCLENBQUNJLFlBQVksRUFBRSxDQUFDO1FBQ3hFeEgsS0FBSyxDQUFDeUgsVUFBVSxHQUFHekgsS0FBSyxDQUFDNkgsY0FBYyxHQUFHVCxnQkFBZ0IsQ0FBQ00sYUFBYSxFQUFFLENBQUM7UUFDM0UxSCxLQUFLLENBQUM4SCxXQUFXLEdBQUdWLGdCQUFnQixDQUFDVyxjQUFjLEVBQUUsQ0FBQztRQUN0RC9ILEtBQUssQ0FBQ2dJLFlBQVksR0FBR1osZ0JBQWdCLENBQUNhLGVBQWUsRUFBRSxDQUFDO1FBQ3hEakksS0FBSyxDQUFDa0ksV0FBVyxHQUFHZCxnQkFBZ0IsQ0FBQ2UsY0FBYyxFQUFFLENBQUM7UUFDdERuSSxLQUFLLENBQUNvSSxZQUFZLEdBQUdoQixnQkFBZ0IsQ0FBQ2lCLGVBQWUsRUFBRSxDQUFDO1FBQ3hEckksS0FBSyxDQUFDc0ksVUFBVSxHQUFHdEksS0FBSyxDQUFDdUksaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLHlDQUF5QztRQUN2RixJQUFJdkksS0FBSyxDQUFDcUgsYUFBYSxFQUFFO1lBQ3JCckgsS0FBSyxDQUFDd0ksY0FBYyxFQUFFLENBQUNwSCxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUVwQixLQUFLLENBQUNtQyxZQUFZLENBQUMsQ0FBQztTQUN6RTtRQUNELE9BQU9uQyxLQUFLLENBQUM7S0FDaEI7SUFDRGlILGdCQUFlLENBQUM1RCxTQUFTLENBQUNDLE9BQU8sR0FBRyxXQUFZO1FBQzVDLElBQUksSUFBSSxDQUFDK0QsYUFBYSxFQUFFO1lBQ3BCLElBQUksQ0FBQ21CLGNBQWMsRUFBRSxDQUFDaEgsbUJBQW1CLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQ1csWUFBWSxDQUFDLENBQUM7U0FDMUU7S0FDSixDQUFDO0lBQ0Y4RSxnQkFBZSxDQUFDNUQsU0FBUyxDQUFDbUUsWUFBWSxHQUFHLFdBQVk7UUFDakQsT0FBTyxJQUFJLENBQUNELFNBQVMsQ0FBQztLQUN6QixDQUFDO0lBQ0ZOLGdCQUFlLENBQUM1RCxTQUFTLENBQUNxRSxhQUFhLEdBQUcsV0FBWTtRQUNsRCxPQUFPLElBQUksQ0FBQ0QsVUFBVSxDQUFDO0tBQzFCLENBQUM7SUFDRlIsZ0JBQWUsQ0FBQzVELFNBQVMsQ0FBQ29GLFlBQVksR0FBRyxTQUFVeEMsR0FBRyxFQUFFO1FBQ3BELElBQUksQ0FBQ21CLGdCQUFnQixDQUFDcUIsWUFBWSxDQUFDeEMsR0FBRyxDQUFDLENBQUM7UUFDeEMsSUFBSSxDQUFDLElBQUksQ0FBQ29CLGFBQWEsRUFBRTtZQUNyQiw2RUFBNkU7WUFDN0UsbUNBQW1DO1lBQ25DLElBQUksQ0FBQ0UsU0FBUyxHQUFHbUIsSUFBSSxDQUFDQyxHQUFHLENBQUNELElBQUksQ0FBQ0UsR0FBRyxDQUFDM0MsR0FBRyxFQUFFLElBQUksQ0FBQzRDLGVBQWUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDcEUsSUFBSSxDQUFDbEIsa0JBQWtCLEVBQUUsQ0FBQztTQUM3QjtLQUNKLENBQUM7SUFDRlYsZ0JBQWUsQ0FBQzVELFNBQVMsQ0FBQ3lGLGFBQWEsR0FBRyxTQUFVN0MsR0FBRyxFQUFFO1FBQ3JELElBQUksQ0FBQ21CLGdCQUFnQixDQUFDMEIsYUFBYSxDQUFDN0MsR0FBRyxDQUFDLENBQUM7UUFDekMsSUFBSSxDQUFDLElBQUksQ0FBQ29CLGFBQWEsRUFBRTtZQUNyQiw2RUFBNkU7WUFDN0UsbUNBQW1DO1lBQ25DLElBQUksQ0FBQ0ksVUFBVSxHQUFHaUIsSUFBSSxDQUFDQyxHQUFHLENBQUNELElBQUksQ0FBQ0UsR0FBRyxDQUFDM0MsR0FBRyxFQUFFLElBQUksQ0FBQzhDLGdCQUFnQixFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN0RSxJQUFJLENBQUNwQixrQkFBa0IsRUFBRSxDQUFDO1NBQzdCO0tBQ0osQ0FBQztJQUNGVixnQkFBZSxDQUFDNUQsU0FBUyxDQUFDOEUsY0FBYyxHQUFHLFdBQVk7UUFDbkQsT0FBTyxJQUFJLENBQUNELFdBQVcsQ0FBQztLQUMzQixDQUFDO0lBQ0ZqQixnQkFBZSxDQUFDNUQsU0FBUyxDQUFDZ0YsZUFBZSxHQUFHLFdBQVk7UUFDcEQsT0FBTyxJQUFJLENBQUNELFlBQVksQ0FBQztLQUM1QixDQUFDO0lBQ0ZuQixnQkFBZSxDQUFDNUQsU0FBUyxDQUFDMEUsY0FBYyxHQUFHLFdBQVk7UUFDbkQsT0FBTyxJQUFJLENBQUNELFdBQVcsQ0FBQztLQUMzQixDQUFDO0lBQ0ZiLGdCQUFlLENBQUM1RCxTQUFTLENBQUM0RSxlQUFlLEdBQUcsV0FBWTtRQUNwRCxPQUFPLElBQUksQ0FBQ0QsWUFBWSxDQUFDO0tBQzVCLENBQUM7SUFDRmYsZ0JBQWUsQ0FBQzVELFNBQVMsQ0FBQ3NFLGtCQUFrQixHQUFHLFdBQVksRUFDMUQsQ0FBQztJQUNGLE9BQU9WLGdCQUFlLENBQUM7Q0FDMUIsQ0FBQzNILE1BQU0sQ0FBQzBKLGdCQUFnQixDQUFDO0FBRTFCLElBQUlDLHNCQUFzQixHQUFHLGFBQWEsQ0FBRSxTQUFVL0IsTUFBTSxFQUFFO0lBQzFEMUgsS0FBSyxDQUFDMkgsU0FBUyxDQUFDOEIsdUJBQXNCLEVBQUUvQixNQUFNLENBQUMsQ0FBQztJQUNoRCxTQUFTK0IsdUJBQXNCLENBQUNDLEVBQUUsRUFBRTdCLGFBQWEsRUFBRTtRQUMvQyxPQUFPSCxNQUFNLENBQUNJLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSWhJLE1BQU0sQ0FBQzZKLHVCQUF1QixDQUFDRCxFQUFFLENBQUMsRUFBRTdCLGFBQWEsQ0FBQyxJQUFJLElBQUksQ0FBQztLQUMzRjtJQUNENEIsdUJBQXNCLENBQUM1RixTQUFTLENBQUNtRixjQUFjLEdBQUcsV0FBWTtRQUMxRCxPQUFPLElBQUksQ0FBQ3BCLGdCQUFnQixDQUFDOEIsRUFBRSxDQUFDO0tBQ25DLENBQUM7SUFDRkQsdUJBQXNCLENBQUM1RixTQUFTLENBQUNrRixpQkFBaUIsR0FBRyxXQUFZO1FBQzdELE9BQU9qSixNQUFNLENBQUM4SixnQkFBZ0IsQ0FBQyxJQUFJLENBQUNoQyxnQkFBZ0IsQ0FBQzhCLEVBQUUsQ0FBQyxDQUFDO0tBQzVELENBQUM7SUFDRixPQUFPRCx1QkFBc0IsQ0FBQztDQUNqQyxDQUFDaEMsZUFBZSxDQUFDO0FBRWxCLElBQUlvQyxxQkFBcUIsR0FBRyxhQUFhLENBQUUsU0FBVW5DLE1BQU0sRUFBRTtJQUN6RDFILEtBQUssQ0FBQzJILFNBQVMsQ0FBQ2tDLHNCQUFxQixFQUFFbkMsTUFBTSxDQUFDLENBQUM7SUFDL0MsU0FBU21DLHNCQUFxQixDQUFDaEMsYUFBYSxFQUFFO1FBQzFDLE9BQU9ILE1BQU0sQ0FBQ0ksSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJaEksTUFBTSxDQUFDZ0ssc0JBQXNCLEVBQUUsRUFBRWpDLGFBQWEsQ0FBQyxJQUFJLElBQUksQ0FBQztLQUN4RjtJQUNEZ0Msc0JBQXFCLENBQUNoRyxTQUFTLENBQUNtRixjQUFjLEdBQUcsV0FBWTtRQUN6RCxPQUFPeEcsTUFBTSxDQUFDO0tBQ2pCLENBQUM7SUFDRnFILHNCQUFxQixDQUFDaEcsU0FBUyxDQUFDa0YsaUJBQWlCLEdBQUcsV0FBWTtRQUM1RCxPQUFPO1lBQ0h2QyxJQUFJLEVBQUUsSUFBSSxDQUFDeUIsVUFBVTtZQUNyQmIsS0FBSyxFQUFFLElBQUksQ0FBQ2EsVUFBVSxHQUFHLElBQUksQ0FBQ1MsV0FBVztZQUN6Q2pDLEdBQUcsRUFBRSxJQUFJLENBQUNzQixTQUFTO1lBQ25CVCxNQUFNLEVBQUUsSUFBSSxDQUFDUyxTQUFTLEdBQUcsSUFBSSxDQUFDYSxZQUFZO1NBQzdDLENBQUM7S0FDTCxDQUFDO0lBQ0YsNEVBQTRFO0lBQzVFLDBDQUEwQztJQUMxQ2lCLHNCQUFxQixDQUFDaEcsU0FBUyxDQUFDc0Usa0JBQWtCLEdBQUcsV0FBWTtRQUM3RCxJQUFJLENBQUNXLFVBQVUsR0FBRyxJQUFJLENBQUNDLGlCQUFpQixFQUFFLENBQUM7S0FDOUMsQ0FBQztJQUNGLE9BQU9jLHNCQUFxQixDQUFDO0NBQ2hDLENBQUNwQyxlQUFlLENBQUM7QUFFbEIsdUVBQXVFO0FBQ3ZFLDZCQUE2QjtBQUM3QiwrREFBK0Q7QUFDL0QsSUFBSXNDLE9BQU8sR0FBRyxPQUFPQyxXQUFXLEtBQUssVUFBVSxHQUFHQSxXQUFXLENBQUNDLEdBQUcsR0FBR0MsSUFBSSxDQUFDRCxHQUFHO0FBQzVFOzs7OztFQUtFLENBQ0YsSUFBSUUsWUFBWSxHQUFHLGFBQWEsQ0FBRSxXQUFZO0lBQzFDLFNBQVNBLGFBQVksR0FBRztRQUNwQixJQUFJM0osS0FBSyxHQUFHLElBQUk7UUFDaEIsb0NBQW9DO1FBQ3BDLElBQUksQ0FBQzRKLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFDdEIsSUFBSSxDQUFDQyxXQUFXLEdBQUc7WUFBQzdILE1BQU07WUFBRSxjQUFjO1NBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUM4SCxhQUFhLEdBQUcsRUFBRSxDQUFDLENBQUMsU0FBUztRQUNsQyxJQUFJLENBQUNDLFdBQVcsR0FBRyxHQUFHLENBQUMsQ0FBQyxvQkFBb0I7UUFDNUMsaUJBQWlCO1FBQ2pCLElBQUksQ0FBQ0MsY0FBYyxHQUFHLElBQUksQ0FBQztRQUMzQixJQUFJLENBQUNDLGNBQWMsR0FBRyxJQUFJLENBQUM7UUFDM0IsSUFBSSxDQUFDQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1FBQ3pCLElBQUksQ0FBQ0MsWUFBWSxHQUFHLElBQUksQ0FBQztRQUN6Qiw2RkFBNkY7UUFDN0YsSUFBSSxDQUFDQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1FBQ3pCLElBQUksQ0FBQ0MsYUFBYSxHQUFHLEtBQUssQ0FBQztRQUMzQixJQUFJLENBQUNDLGFBQWEsR0FBRyxLQUFLLENBQUM7UUFDM0IsSUFBSSxDQUFDQyxjQUFjLEdBQUcsS0FBSyxDQUFDO1FBQzVCLElBQUksQ0FBQ0MsT0FBTyxHQUFHLFdBQVk7WUFDdkIsSUFBSXhLLEtBQUssQ0FBQ2tLLFdBQVcsRUFBRTtnQkFDbkIsSUFBSU8sSUFBSSxHQUFHekssS0FBSyxDQUFDMEssZUFBZSxDQUFDMUssS0FBSyxDQUFDZ0ssY0FBYyxHQUFHaEksTUFBTSxDQUFDSyxXQUFXLEVBQUVyQyxLQUFLLENBQUNpSyxjQUFjLEdBQUdqSSxNQUFNLENBQUNTLFdBQVcsQ0FBQztnQkFDdEgsSUFBSWdJLElBQUksRUFBRTtvQkFDTixJQUFJaEIsR0FBRyxHQUFHRixPQUFPLEVBQUU7b0JBQ25CdkosS0FBSyxDQUFDMkssVUFBVSxDQUFDRixJQUFJLEVBQUUsQ0FBQ2hCLEdBQUcsR0FBR3pKLEtBQUssQ0FBQzRLLGNBQWMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO29CQUM1RDVLLEtBQUssQ0FBQzZLLGdCQUFnQixDQUFDcEIsR0FBRyxDQUFDLENBQUM7aUJBQy9CLE1BQ0k7b0JBQ0R6SixLQUFLLENBQUNrSyxXQUFXLEdBQUcsS0FBSyxDQUFDLENBQUMsc0JBQXNCO2lCQUNwRDthQUNKO1NBQ0osQ0FBQztLQUNMO0lBQ0RQLGFBQVksQ0FBQ3RHLFNBQVMsQ0FBQ3lCLEtBQUssR0FBRyxTQUFVMUMsS0FBSyxFQUFFSSxLQUFLLEVBQUVzSSxhQUFhLEVBQUU7UUFDbEUsSUFBSSxJQUFJLENBQUNsQixTQUFTLEVBQUU7WUFDaEIsSUFBSSxDQUFDTyxZQUFZLEdBQUcsSUFBSSxDQUFDWSxXQUFXLENBQUNELGFBQWEsQ0FBQyxDQUFDO1lBQ3BELElBQUksQ0FBQ2QsY0FBYyxHQUFHLElBQUksQ0FBQztZQUMzQixJQUFJLENBQUNDLGNBQWMsR0FBRyxJQUFJLENBQUM7WUFDM0IsSUFBSSxDQUFDRyxXQUFXLEdBQUcsS0FBSyxDQUFDO1lBQ3pCLElBQUksQ0FBQ0MsYUFBYSxHQUFHLEtBQUssQ0FBQztZQUMzQixJQUFJLENBQUNDLGFBQWEsR0FBRyxLQUFLLENBQUM7WUFDM0IsSUFBSSxDQUFDQyxjQUFjLEdBQUcsS0FBSyxDQUFDO1lBQzVCLElBQUksQ0FBQ3BGLFVBQVUsQ0FBQy9DLEtBQUssRUFBRUksS0FBSyxDQUFDLENBQUM7U0FDakM7S0FDSixDQUFDO0lBQ0ZtSCxhQUFZLENBQUN0RyxTQUFTLENBQUM4QixVQUFVLEdBQUcsU0FBVS9DLEtBQUssRUFBRUksS0FBSyxFQUFFO1FBQ3hELElBQUksSUFBSSxDQUFDb0gsU0FBUyxFQUFFO1lBQ2hCLElBQUlJLGNBQWMsR0FBRzVILEtBQUssR0FBR0osTUFBTSxDQUFDSyxXQUFXO1lBQy9DLElBQUk0SCxjQUFjLEdBQUd6SCxLQUFLLEdBQUdSLE1BQU0sQ0FBQ1MsV0FBVztZQUMvQyxJQUFJdUksTUFBTSxHQUFHLElBQUksQ0FBQ2YsY0FBYyxLQUFLLElBQUksR0FBRyxDQUFDLEdBQUdBLGNBQWMsR0FBRyxJQUFJLENBQUNBLGNBQWM7WUFDcEYsSUFBSWdCLE1BQU0sR0FBRyxJQUFJLENBQUNqQixjQUFjLEtBQUssSUFBSSxHQUFHLENBQUMsR0FBR0EsY0FBYyxHQUFHLElBQUksQ0FBQ0EsY0FBYztZQUNwRixJQUFJZ0IsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDWixJQUFJLENBQUNaLFdBQVcsR0FBRyxJQUFJLENBQUM7YUFDM0IsTUFDSSxJQUFJWSxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUNqQixJQUFJLENBQUNYLGFBQWEsR0FBRyxJQUFJLENBQUM7YUFDN0I7WUFDRCxJQUFJWSxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUNaLElBQUksQ0FBQ1gsYUFBYSxHQUFHLElBQUksQ0FBQzthQUM3QixNQUNJLElBQUlXLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQ2pCLElBQUksQ0FBQ1YsY0FBYyxHQUFHLElBQUksQ0FBQzthQUM5QjtZQUNELElBQUksQ0FBQ1AsY0FBYyxHQUFHQSxjQUFjLENBQUM7WUFDckMsSUFBSSxDQUFDQyxjQUFjLEdBQUdBLGNBQWMsQ0FBQztZQUNyQyxJQUFJLENBQUMsSUFBSSxDQUFDQyxXQUFXLEVBQUU7Z0JBQ25CLElBQUksQ0FBQ0EsV0FBVyxHQUFHLElBQUksQ0FBQztnQkFDeEIsSUFBSSxDQUFDVyxnQkFBZ0IsQ0FBQ3RCLE9BQU8sRUFBRSxDQUFDLENBQUM7YUFDcEM7U0FDSjtLQUNKLENBQUM7SUFDRkksYUFBWSxDQUFDdEcsU0FBUyxDQUFDbUMsSUFBSSxHQUFHLFdBQVk7UUFDdEMsSUFBSSxJQUFJLENBQUNvRSxTQUFTLEVBQUU7WUFDaEIsSUFBSSxDQUFDTSxXQUFXLEdBQUcsS0FBSyxDQUFDLENBQUMsc0JBQXNCO1lBQ2hELElBQUssSUFBSWdCLEVBQUUsR0FBRyxDQUFDLEVBQUVDLEVBQUUsR0FBRyxJQUFJLENBQUNoQixZQUFZLEVBQUVlLEVBQUUsR0FBR0MsRUFBRSxDQUFDcEgsTUFBTSxFQUFFbUgsRUFBRSxFQUFFLENBQUU7Z0JBQzNELElBQUlFLFdBQVcsR0FBR0QsRUFBRSxDQUFDRCxFQUFFLENBQUM7Z0JBQ3hCRSxXQUFXLENBQUM5SCxPQUFPLEVBQUUsQ0FBQzthQUN6QjtZQUNELElBQUksQ0FBQzZHLFlBQVksR0FBRyxJQUFJLENBQUM7U0FDNUI7S0FDSixDQUFDO0lBQ0ZSLGFBQVksQ0FBQ3RHLFNBQVMsQ0FBQ3dILGdCQUFnQixHQUFHLFNBQVVwQixHQUFHLEVBQUU7UUFDckQsSUFBSSxDQUFDbUIsY0FBYyxHQUFHbkIsR0FBRyxDQUFDO1FBQzFCNEIscUJBQXFCLENBQUMsSUFBSSxDQUFDYixPQUFPLENBQUMsQ0FBQztLQUN2QyxDQUFDO0lBQ0ZiLGFBQVksQ0FBQ3RHLFNBQVMsQ0FBQ3NILFVBQVUsR0FBRyxTQUFVRixJQUFJLEVBQUVhLE9BQU8sRUFBRTtRQUN6RCxJQUFJRixXQUFXLEdBQUdYLElBQUksQ0FBQ1csV0FBVztRQUNsQyxJQUFJdEIsYUFBYSxHQUFHLElBQUksQ0FBQ0EsYUFBYTtRQUN0QyxJQUFJeUIsV0FBVyxHQUFHekIsYUFBYSxHQUFHVyxJQUFJLENBQUNlLFFBQVE7UUFDL0MsSUFBSUMsUUFBUSxHQUNYLFdBQWEsR0FBR0YsV0FBVyxHQUFJLENBQUN6QixhQUFhLEdBQUdBLGFBQWEsQ0FBQyxHQUMzRCxJQUFJLENBQUNDLFdBQVcsR0FBR3VCLE9BQU87UUFDOUIsSUFBSUksSUFBSSxHQUFHLENBQUM7UUFDWixPQUFRakIsSUFBSSxDQUFDa0IsSUFBSTtZQUNiLEtBQUssTUFBTTtnQkFDUEQsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ2QsZ0JBQWdCO1lBQ2hCLEtBQUssT0FBTztnQkFDUk4sV0FBVyxDQUFDdEMsYUFBYSxDQUFDc0MsV0FBVyxDQUFDMUQsYUFBYSxFQUFFLEdBQUcrRCxRQUFRLEdBQUdDLElBQUksQ0FBQyxDQUFDO2dCQUN6RSxNQUFNO1lBQ1YsS0FBSyxLQUFLO2dCQUNOQSxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDZCxnQkFBZ0I7WUFDaEIsS0FBSyxRQUFRO2dCQUNUTixXQUFXLENBQUMzQyxZQUFZLENBQUMyQyxXQUFXLENBQUM1RCxZQUFZLEVBQUUsR0FBR2lFLFFBQVEsR0FBR0MsSUFBSSxDQUFDLENBQUM7Z0JBQ3ZFLE1BQU07U0FDYjtLQUNKLENBQUM7SUFDRiw0Q0FBNEM7SUFDNUMvQixhQUFZLENBQUN0RyxTQUFTLENBQUNxSCxlQUFlLEdBQUcsU0FBVTFFLElBQUksRUFBRUMsR0FBRyxFQUFFO1FBQzFELElBQUk2RCxhQUFhLEdBQUcsSUFBSSxDQUFDQSxhQUFhO1FBQ3RDLElBQUk4QixRQUFRLEdBQUcsSUFBSTtRQUNuQixJQUFJekIsWUFBWSxHQUFHLElBQUksQ0FBQ0EsWUFBWSxJQUFJLEVBQUU7UUFDMUMsSUFBSyxJQUFJZSxFQUFFLEdBQUcsQ0FBQyxFQUFFVyxjQUFjLEdBQUcxQixZQUFZLEVBQUVlLEVBQUUsR0FBR1csY0FBYyxDQUFDOUgsTUFBTSxFQUFFbUgsRUFBRSxFQUFFLENBQUU7WUFDOUUsSUFBSUUsV0FBVyxHQUFHUyxjQUFjLENBQUNYLEVBQUUsQ0FBQztZQUNwQyxJQUFJWSxJQUFJLEdBQUdWLFdBQVcsQ0FBQzlDLFVBQVU7WUFDakMsSUFBSXlELFFBQVEsR0FBRy9GLElBQUksR0FBRzhGLElBQUksQ0FBQzlGLElBQUk7WUFDL0IsSUFBSWdHLFNBQVMsR0FBR0YsSUFBSSxDQUFDbEYsS0FBSyxHQUFHWixJQUFJO1lBQ2pDLElBQUlpRyxPQUFPLEdBQUdoRyxHQUFHLEdBQUc2RixJQUFJLENBQUM3RixHQUFHO1lBQzVCLElBQUlpRyxVQUFVLEdBQUdKLElBQUksQ0FBQ2hGLE1BQU0sR0FBR2IsR0FBRztZQUNsQyw4QkFBOEI7WUFDOUIsSUFBSThGLFFBQVEsSUFBSSxDQUFDLElBQUlDLFNBQVMsSUFBSSxDQUFDLElBQUlDLE9BQU8sSUFBSSxDQUFDLElBQUlDLFVBQVUsSUFBSSxDQUFDLEVBQUU7Z0JBQ3BFLElBQUlELE9BQU8sSUFBSW5DLGFBQWEsSUFBSSxJQUFJLENBQUNNLFdBQVcsSUFBSWdCLFdBQVcsQ0FBQ2UsV0FBVyxFQUFFLElBQ3pFLENBQUMsQ0FBQ1AsUUFBUSxJQUFJQSxRQUFRLENBQUNKLFFBQVEsR0FBR1MsT0FBTyxDQUFDLEVBQUU7b0JBQzVDTCxRQUFRLEdBQUc7d0JBQUVSLFdBQVcsRUFBRUEsV0FBVzt3QkFBRU8sSUFBSSxFQUFFLEtBQUs7d0JBQUVILFFBQVEsRUFBRVMsT0FBTztxQkFBRSxDQUFDO2lCQUMzRTtnQkFDRCxJQUFJQyxVQUFVLElBQUlwQyxhQUFhLElBQUksSUFBSSxDQUFDTyxhQUFhLElBQUllLFdBQVcsQ0FBQ2dCLGFBQWEsRUFBRSxJQUNoRixDQUFDLENBQUNSLFFBQVEsSUFBSUEsUUFBUSxDQUFDSixRQUFRLEdBQUdVLFVBQVUsQ0FBQyxFQUFFO29CQUMvQ04sUUFBUSxHQUFHO3dCQUFFUixXQUFXLEVBQUVBLFdBQVc7d0JBQUVPLElBQUksRUFBRSxRQUFRO3dCQUFFSCxRQUFRLEVBQUVVLFVBQVU7cUJBQUUsQ0FBQztpQkFDakY7Z0JBQ0QsSUFBSUgsUUFBUSxJQUFJakMsYUFBYSxJQUFJLElBQUksQ0FBQ1EsYUFBYSxJQUFJYyxXQUFXLENBQUNpQixhQUFhLEVBQUUsSUFDOUUsQ0FBQyxDQUFDVCxRQUFRLElBQUlBLFFBQVEsQ0FBQ0osUUFBUSxHQUFHTyxRQUFRLENBQUMsRUFBRTtvQkFDN0NILFFBQVEsR0FBRzt3QkFBRVIsV0FBVyxFQUFFQSxXQUFXO3dCQUFFTyxJQUFJLEVBQUUsTUFBTTt3QkFBRUgsUUFBUSxFQUFFTyxRQUFRO3FCQUFFLENBQUM7aUJBQzdFO2dCQUNELElBQUlDLFNBQVMsSUFBSWxDLGFBQWEsSUFBSSxJQUFJLENBQUNTLGNBQWMsSUFBSWEsV0FBVyxDQUFDa0IsY0FBYyxFQUFFLElBQ2pGLENBQUMsQ0FBQ1YsUUFBUSxJQUFJQSxRQUFRLENBQUNKLFFBQVEsR0FBR1EsU0FBUyxDQUFDLEVBQUU7b0JBQzlDSixRQUFRLEdBQUc7d0JBQUVSLFdBQVcsRUFBRUEsV0FBVzt3QkFBRU8sSUFBSSxFQUFFLE9BQU87d0JBQUVILFFBQVEsRUFBRVEsU0FBUztxQkFBRSxDQUFDO2lCQUMvRTthQUNKO1NBQ0o7UUFDRCxPQUFPSixRQUFRLENBQUM7S0FDbkIsQ0FBQztJQUNGakMsYUFBWSxDQUFDdEcsU0FBUyxDQUFDMEgsV0FBVyxHQUFHLFNBQVVELGFBQWEsRUFBRTtRQUMxRCxPQUFPLElBQUksQ0FBQ3lCLGNBQWMsQ0FBQ3pCLGFBQWEsQ0FBQyxDQUFDMEIsR0FBRyxDQUFDLFNBQVV0RCxFQUFFLEVBQUU7WUFDeEQsSUFBSUEsRUFBRSxLQUFLbEgsTUFBTSxFQUFFO2dCQUNmLE9BQU8sSUFBSXFILHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsaURBQWlEO2FBQzdGO1lBQ0QsT0FBTyxJQUFJSixzQkFBc0IsQ0FBQ0MsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsaURBQWlEO1NBQ2xHLENBQUMsQ0FBQztLQUNOLENBQUM7SUFDRlMsYUFBWSxDQUFDdEcsU0FBUyxDQUFDa0osY0FBYyxHQUFHLFNBQVV6QixhQUFhLEVBQUU7UUFDN0QsSUFBSTJCLEdBQUcsR0FBRyxFQUFFO1FBQ1osSUFBSyxJQUFJdkIsRUFBRSxHQUFHLENBQUMsRUFBRUMsRUFBRSxHQUFHLElBQUksQ0FBQ3RCLFdBQVcsRUFBRXFCLEVBQUUsR0FBR0MsRUFBRSxDQUFDcEgsTUFBTSxFQUFFbUgsRUFBRSxFQUFFLENBQUU7WUFDMUQsSUFBSXdCLEtBQUssR0FBR3ZCLEVBQUUsQ0FBQ0QsRUFBRSxDQUFDO1lBQ2xCLElBQUksT0FBT3dCLEtBQUssS0FBSyxRQUFRLEVBQUU7Z0JBQzNCRCxHQUFHLENBQUNFLElBQUksQ0FBQ0QsS0FBSyxDQUFDLENBQUM7YUFDbkIsTUFDSTtnQkFDREQsR0FBRyxDQUFDRSxJQUFJLENBQUNDLEtBQUssQ0FBQ0gsR0FBRyxFQUFFSSxLQUFLLENBQUN4SixTQUFTLENBQUN5SixLQUFLLENBQUN4RixJQUFJLENBQUNoSSxNQUFNLENBQUN5TixTQUFTLENBQUNqQyxhQUFhLENBQUMsQ0FBQ2tDLGdCQUFnQixDQUFDTixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDNUc7U0FDSjtRQUNELE9BQU9ELEdBQUcsQ0FBQztLQUNkLENBQUM7SUFDRixPQUFPOUMsYUFBWSxDQUFDO0NBQ3ZCLEVBQUU7QUFFSDs7Ozs7RUFLRSxDQUNGLElBQUlzRCx5QkFBeUIsR0FBRyxhQUFhLENBQUUsU0FBVS9GLE1BQU0sRUFBRTtJQUM3RDFILEtBQUssQ0FBQzJILFNBQVMsQ0FBQzhGLDBCQUF5QixFQUFFL0YsTUFBTSxDQUFDLENBQUM7SUFDbkQsU0FBUytGLDBCQUF5QixDQUFDbE4sV0FBVyxFQUFFRyxRQUFRLEVBQUU7UUFDdEQsSUFBSUYsS0FBSyxHQUFHa0gsTUFBTSxDQUFDSSxJQUFJLENBQUMsSUFBSSxFQUFFdkgsV0FBVyxDQUFDLElBQUksSUFBSTtRQUNsREMsS0FBSyxDQUFDRCxXQUFXLEdBQUdBLFdBQVcsQ0FBQztRQUNoQyw2Q0FBNkM7UUFDN0MsZ0VBQWdFO1FBQ2hFQyxLQUFLLENBQUNrTixLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ25CbE4sS0FBSyxDQUFDbU4sV0FBVyxHQUFHLENBQUMsQ0FBQztRQUN0Qm5OLEtBQUssQ0FBQ29OLGtCQUFrQixHQUFHLElBQUksQ0FBQyxDQUFDLCtEQUErRDtRQUNoR3BOLEtBQUssQ0FBQ3FOLGlCQUFpQixHQUFHLEtBQUssQ0FBQztRQUNoQ3JOLEtBQUssQ0FBQ3NOLGFBQWEsR0FBRyxLQUFLLENBQUMsQ0FBQyxnRUFBZ0U7UUFDN0Z0TixLQUFLLENBQUNNLFVBQVUsR0FBRyxLQUFLLENBQUMsQ0FBQyxpRUFBaUU7UUFDM0ZOLEtBQUssQ0FBQ3VOLFlBQVksR0FBRyxLQUFLLENBQUM7UUFDM0J2TixLQUFLLENBQUN3TixtQkFBbUIsR0FBRyxLQUFLLENBQUM7UUFDbEN4TixLQUFLLENBQUN5TixjQUFjLEdBQUcsSUFBSSxDQUFDO1FBQzVCek4sS0FBSyxDQUFDME4sYUFBYSxHQUFHLFNBQVVoTixFQUFFLEVBQUU7WUFDaEMsSUFBSSxDQUFDVixLQUFLLENBQUNNLFVBQVUsRUFBRTtnQkFDbkJOLEtBQUssQ0FBQ3NOLGFBQWEsR0FBRyxJQUFJLENBQUM7Z0JBQzNCdE4sS0FBSyxDQUFDdU4sWUFBWSxHQUFHLEtBQUssQ0FBQztnQkFDM0J2TixLQUFLLENBQUN3TixtQkFBbUIsR0FBRyxLQUFLLENBQUM7Z0JBQ2xDbE8sTUFBTSxDQUFDcU8sZ0JBQWdCLENBQUN4TSxRQUFRLENBQUN3RCxJQUFJLENBQUMsQ0FBQztnQkFDdkNyRixNQUFNLENBQUNzTyxrQkFBa0IsQ0FBQ3pNLFFBQVEsQ0FBQ3dELElBQUksQ0FBQyxDQUFDO2dCQUN6QyxnRUFBZ0U7Z0JBQ2hFLHNEQUFzRDtnQkFDdEQsOEVBQThFO2dCQUM5RSxJQUFJLENBQUNqRSxFQUFFLENBQUNtQyxPQUFPLEVBQUU7b0JBQ2JuQyxFQUFFLENBQUNrQyxTQUFTLENBQUN3QixjQUFjLEVBQUUsQ0FBQztpQkFDakM7Z0JBQ0RwRSxLQUFLLENBQUNnQixPQUFPLENBQUNDLE9BQU8sQ0FBQyxhQUFhLEVBQUVQLEVBQUUsQ0FBQyxDQUFDO2dCQUN6QyxJQUFJVixLQUFLLENBQUNzTixhQUFhLElBQ25CLENBQUN0TixLQUFLLENBQUM2TixPQUFPLENBQUN6TixnQkFBZ0IsRUFBRTtvQkFDakMsOERBQThEO29CQUM5REosS0FBSyxDQUFDOE4sTUFBTSxDQUFDMUksWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsaUNBQWlDO29CQUNuRXBGLEtBQUssQ0FBQzhOLE1BQU0sQ0FBQ2hKLEtBQUssQ0FBQ3BFLEVBQUUsQ0FBQ1QsU0FBUyxFQUFFUyxFQUFFLENBQUMwQixLQUFLLEVBQUUxQixFQUFFLENBQUM4QixLQUFLLENBQUMsQ0FBQyxDQUFDLG9DQUFvQztvQkFDMUZ4QyxLQUFLLENBQUMrTixVQUFVLENBQUNyTixFQUFFLENBQUMsQ0FBQztvQkFDckIsSUFBSSxDQUFDVixLQUFLLENBQUNtTixXQUFXLEVBQUU7d0JBQ3BCbk4sS0FBSyxDQUFDZ08sdUJBQXVCLENBQUN0TixFQUFFLENBQUMsQ0FBQztxQkFDckM7aUJBQ0o7YUFDSjtTQUNKLENBQUM7UUFDRlYsS0FBSyxDQUFDaU8sYUFBYSxHQUFHLFNBQVV2TixFQUFFLEVBQUU7WUFDaEMsSUFBSVYsS0FBSyxDQUFDc04sYUFBYSxFQUFFO2dCQUNyQnROLEtBQUssQ0FBQ2dCLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDLGFBQWEsRUFBRVAsRUFBRSxDQUFDLENBQUM7Z0JBQ3pDLElBQUksQ0FBQ1YsS0FBSyxDQUFDd04sbUJBQW1CLEVBQUU7b0JBQzVCLElBQUlMLFdBQVcsR0FBR25OLEtBQUssQ0FBQ21OLFdBQVc7b0JBQ25DLElBQUllLFVBQVUsR0FBRyxLQUFLLENBQUMsRUFBRSw0Q0FBNEM7b0JBQ3JFLElBQUlwTCxNQUFNLEdBQUdwQyxFQUFFLENBQUNvQyxNQUFNLEVBQUVFLE1BQU0sR0FBR3RDLEVBQUUsQ0FBQ3NDLE1BQU07b0JBQzFDa0wsVUFBVSxHQUFHcEwsTUFBTSxHQUFHQSxNQUFNLEdBQUdFLE1BQU0sR0FBR0EsTUFBTSxDQUFDO29CQUMvQyxJQUFJa0wsVUFBVSxJQUFJZixXQUFXLEdBQUdBLFdBQVcsRUFBRTt3QkFDekNuTixLQUFLLENBQUNnTyx1QkFBdUIsQ0FBQ3ROLEVBQUUsQ0FBQyxDQUFDO3FCQUNyQztpQkFDSjtnQkFDRCxJQUFJVixLQUFLLENBQUNNLFVBQVUsRUFBRTtvQkFDbEIsd0RBQXdEO29CQUN4RCxJQUFJSSxFQUFFLENBQUNrQyxTQUFTLENBQUN1TCxJQUFJLEtBQUssUUFBUSxFQUFFO3dCQUNoQ25PLEtBQUssQ0FBQzhOLE1BQU0sQ0FBQzNJLFVBQVUsQ0FBQ3pFLEVBQUUsQ0FBQzBCLEtBQUssRUFBRTFCLEVBQUUsQ0FBQzhCLEtBQUssQ0FBQyxDQUFDO3dCQUM1Q3hDLEtBQUssQ0FBQ29PLFlBQVksQ0FBQ2pKLFVBQVUsQ0FBQ3pFLEVBQUUsQ0FBQzBCLEtBQUssRUFBRTFCLEVBQUUsQ0FBQzhCLEtBQUssQ0FBQyxDQUFDO3FCQUNyRDtvQkFDRHhDLEtBQUssQ0FBQ2dCLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDLFVBQVUsRUFBRVAsRUFBRSxDQUFDLENBQUM7aUJBQ3pDO2FBQ0o7U0FDSixDQUFDO1FBQ0ZWLEtBQUssQ0FBQ3FPLFdBQVcsR0FBRyxTQUFVM04sRUFBRSxFQUFFO1lBQzlCLElBQUlWLEtBQUssQ0FBQ3NOLGFBQWEsRUFBRTtnQkFDckJ0TixLQUFLLENBQUNzTixhQUFhLEdBQUcsS0FBSyxDQUFDO2dCQUM1QmhPLE1BQU0sQ0FBQ2dQLGNBQWMsQ0FBQ25OLFFBQVEsQ0FBQ3dELElBQUksQ0FBQyxDQUFDO2dCQUNyQ3JGLE1BQU0sQ0FBQ2lQLGdCQUFnQixDQUFDcE4sUUFBUSxDQUFDd0QsSUFBSSxDQUFDLENBQUM7Z0JBQ3ZDM0UsS0FBSyxDQUFDZ0IsT0FBTyxDQUFDQyxPQUFPLENBQUMsV0FBVyxFQUFFUCxFQUFFLENBQUMsQ0FBQyxDQUFDLHdDQUF3QztnQkFDaEYsSUFBSVYsS0FBSyxDQUFDTSxVQUFVLEVBQUU7b0JBQ2xCTixLQUFLLENBQUNvTyxZQUFZLENBQUM1SSxJQUFJLEVBQUUsQ0FBQztvQkFDMUJ4RixLQUFLLENBQUN3TyxXQUFXLENBQUM5TixFQUFFLENBQUMsQ0FBQyxDQUFDLDZCQUE2QjtpQkFDdkQ7Z0JBQ0QsSUFBSVYsS0FBSyxDQUFDeU4sY0FBYyxFQUFFO29CQUN0QmdCLFlBQVksQ0FBQ3pPLEtBQUssQ0FBQ3lOLGNBQWMsQ0FBQyxDQUFDO29CQUNuQ3pOLEtBQUssQ0FBQ3lOLGNBQWMsR0FBRyxJQUFJLENBQUM7aUJBQy9CO2FBQ0o7U0FDSixDQUFDO1FBQ0YsSUFBSUksT0FBTyxHQUFHN04sS0FBSyxDQUFDNk4sT0FBTyxHQUFHLElBQUkvTixlQUFlLENBQUNDLFdBQVcsQ0FBQztRQUM5RDhOLE9BQU8sQ0FBQzdNLE9BQU8sQ0FBQzBOLEVBQUUsQ0FBQyxhQUFhLEVBQUUxTyxLQUFLLENBQUMwTixhQUFhLENBQUMsQ0FBQztRQUN2REcsT0FBTyxDQUFDN00sT0FBTyxDQUFDME4sRUFBRSxDQUFDLGFBQWEsRUFBRTFPLEtBQUssQ0FBQ2lPLGFBQWEsQ0FBQyxDQUFDO1FBQ3ZESixPQUFPLENBQUM3TSxPQUFPLENBQUMwTixFQUFFLENBQUMsV0FBVyxFQUFFMU8sS0FBSyxDQUFDcU8sV0FBVyxDQUFDLENBQUM7UUFDbkQsSUFBSW5PLFFBQVEsRUFBRTtZQUNWMk4sT0FBTyxDQUFDM04sUUFBUSxHQUFHQSxRQUFRLENBQUM7U0FDL0I7UUFDREYsS0FBSyxDQUFDOE4sTUFBTSxHQUFHLElBQUl6SixhQUFhLEVBQUUsQ0FBQztRQUNuQ3JFLEtBQUssQ0FBQ29PLFlBQVksR0FBRyxJQUFJekUsWUFBWSxFQUFFLENBQUM7UUFDeEMsT0FBTzNKLEtBQUssQ0FBQztLQUNoQjtJQUNEaU4sMEJBQXlCLENBQUM1SixTQUFTLENBQUNDLE9BQU8sR0FBRyxXQUFZO1FBQ3RELElBQUksQ0FBQ3VLLE9BQU8sQ0FBQ3ZLLE9BQU8sRUFBRSxDQUFDO1FBQ3ZCLHNEQUFzRDtRQUN0RCw2R0FBNkc7UUFDN0csSUFBSSxDQUFDK0ssV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ3hCLENBQUM7SUFDRnBCLDBCQUF5QixDQUFDNUosU0FBUyxDQUFDMEssVUFBVSxHQUFHLFNBQVVyTixFQUFFLEVBQUU7UUFDM0QsSUFBSVYsS0FBSyxHQUFHLElBQUk7UUFDaEIsSUFBSSxPQUFPLElBQUksQ0FBQ2tOLEtBQUssS0FBSyxRQUFRLEVBQUU7WUFDaEMsSUFBSSxDQUFDTyxjQUFjLEdBQUd2SixVQUFVLENBQUMsV0FBWTtnQkFDekNsRSxLQUFLLENBQUN5TixjQUFjLEdBQUcsSUFBSSxDQUFDO2dCQUM1QnpOLEtBQUssQ0FBQzJPLGNBQWMsQ0FBQ2pPLEVBQUUsQ0FBQyxDQUFDO2FBQzVCLEVBQUUsSUFBSSxDQUFDd00sS0FBSyxDQUFDLENBQUMsQ0FBQyw0QkFBNEI7U0FDL0MsTUFDSTtZQUNELElBQUksQ0FBQ3lCLGNBQWMsQ0FBQ2pPLEVBQUUsQ0FBQyxDQUFDO1NBQzNCO0tBQ0osQ0FBQztJQUNGdU0sMEJBQXlCLENBQUM1SixTQUFTLENBQUNzTCxjQUFjLEdBQUcsU0FBVWpPLEVBQUUsRUFBRTtRQUMvRCxJQUFJLENBQUM2TSxZQUFZLEdBQUcsSUFBSSxDQUFDO1FBQ3pCLElBQUksQ0FBQ3FCLFlBQVksQ0FBQ2xPLEVBQUUsQ0FBQyxDQUFDO0tBQ3pCLENBQUM7SUFDRnVNLDBCQUF5QixDQUFDNUosU0FBUyxDQUFDMkssdUJBQXVCLEdBQUcsU0FBVXROLEVBQUUsRUFBRTtRQUN4RSxJQUFJLENBQUM4TSxtQkFBbUIsR0FBRyxJQUFJLENBQUM7UUFDaEMsSUFBSSxDQUFDb0IsWUFBWSxDQUFDbE8sRUFBRSxDQUFDLENBQUM7S0FDekIsQ0FBQztJQUNGdU0sMEJBQXlCLENBQUM1SixTQUFTLENBQUN1TCxZQUFZLEdBQUcsU0FBVWxPLEVBQUUsRUFBRTtRQUM3RCxJQUFJLElBQUksQ0FBQzZNLFlBQVksSUFBSSxJQUFJLENBQUNDLG1CQUFtQixFQUFFO1lBQy9DLElBQUksQ0FBQyxJQUFJLENBQUNLLE9BQU8sQ0FBQ3JOLGNBQWMsSUFBSSxJQUFJLENBQUM0TSxrQkFBa0IsRUFBRTtnQkFDekQsSUFBSSxDQUFDOU0sVUFBVSxHQUFHLElBQUksQ0FBQztnQkFDdkIsSUFBSSxDQUFDK00saUJBQWlCLEdBQUcsS0FBSyxDQUFDO2dCQUMvQixJQUFJLENBQUNlLFlBQVksQ0FBQ3RKLEtBQUssQ0FBQ3BFLEVBQUUsQ0FBQzBCLEtBQUssRUFBRTFCLEVBQUUsQ0FBQzhCLEtBQUssRUFBRSxJQUFJLENBQUN6QyxXQUFXLENBQUMsQ0FBQztnQkFDOUQsSUFBSSxDQUFDaUIsT0FBTyxDQUFDQyxPQUFPLENBQUMsV0FBVyxFQUFFUCxFQUFFLENBQUMsQ0FBQztnQkFDdEMsSUFBSSxJQUFJLENBQUMwTSxrQkFBa0IsS0FBSyxLQUFLLEVBQUU7b0JBQ25DLElBQUksQ0FBQ1MsT0FBTyxDQUFDakssaUJBQWlCLEVBQUUsQ0FBQztpQkFDcEM7YUFDSjtTQUNKO0tBQ0osQ0FBQztJQUNGcUosMEJBQXlCLENBQUM1SixTQUFTLENBQUNtTCxXQUFXLEdBQUcsU0FBVTlOLEVBQUUsRUFBRTtRQUM1RCxxRkFBcUY7UUFDckYsaUZBQWlGO1FBQ2pGLElBQUksQ0FBQ29OLE1BQU0sQ0FBQ3RJLElBQUksQ0FBQyxJQUFJLENBQUM2SCxpQkFBaUIsRUFBRSxJQUFJLENBQUN3QixRQUFRLENBQUNDLElBQUksQ0FBQyxJQUFJLEVBQUVwTyxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQzFFLENBQUM7SUFDRnVNLDBCQUF5QixDQUFDNUosU0FBUyxDQUFDd0wsUUFBUSxHQUFHLFNBQVVuTyxFQUFFLEVBQUU7UUFDekQsSUFBSSxDQUFDSixVQUFVLEdBQUcsS0FBSyxDQUFDO1FBQ3hCLElBQUksQ0FBQ1UsT0FBTyxDQUFDQyxPQUFPLENBQUMsU0FBUyxFQUFFUCxFQUFFLENBQUMsQ0FBQztLQUN2QyxDQUFDO0lBQ0YsaUNBQWlDO0lBQ2pDdU0sMEJBQXlCLENBQUM1SixTQUFTLENBQUMwTCxhQUFhLEdBQUcsU0FBVTFKLElBQUksRUFBRTtRQUNoRSxJQUFJLENBQUN3SSxPQUFPLENBQUN6TixnQkFBZ0IsR0FBR2lGLElBQUksQ0FBQztLQUN4QyxDQUFDO0lBQ0Y0SCwwQkFBeUIsQ0FBQzVKLFNBQVMsQ0FBQzJMLGtCQUFrQixHQUFHLFNBQVUzSixJQUFJLEVBQUU7UUFDckUsSUFBSSxDQUFDeUksTUFBTSxDQUFDMUksWUFBWSxDQUFDQyxJQUFJLENBQUMsQ0FBQztLQUNsQyxDQUFDO0lBQ0Y0SCwwQkFBeUIsQ0FBQzVKLFNBQVMsQ0FBQzRMLG9CQUFvQixHQUFHLFNBQVU1SixJQUFJLEVBQUU7UUFDdkUsSUFBSSxDQUFDZ0ksaUJBQWlCLEdBQUdoSSxJQUFJLENBQUM7S0FDakMsQ0FBQztJQUNGNEgsMEJBQXlCLENBQUM1SixTQUFTLENBQUM2TCxvQkFBb0IsR0FBRyxTQUFVN0osSUFBSSxFQUFFO1FBQ3ZFLElBQUksQ0FBQytJLFlBQVksQ0FBQ3hFLFNBQVMsR0FBR3ZFLElBQUksQ0FBQztLQUN0QyxDQUFDO0lBQ0YsT0FBTzRILDBCQUF5QixDQUFDO0NBQ3BDLENBQUMzTixNQUFNLENBQUM2UCxlQUFlLENBQUM7QUFFekI7Ozs7Ozs7RUFPRSxDQUNGLElBQUlDLGFBQWEsR0FBRyxhQUFhLENBQUUsV0FBWTtJQUMzQyxTQUFTQSxjQUFhLENBQUNsRyxFQUFFLEVBQUU7UUFDdkIsSUFBSSxDQUFDbUcsUUFBUSxHQUFHL1AsTUFBTSxDQUFDZ1EsV0FBVyxDQUFDcEcsRUFBRSxDQUFDLENBQUM7UUFDdkMsb0RBQW9EO1FBQ3BELElBQUksQ0FBQ2lCLFlBQVksR0FBRzdLLE1BQU0sQ0FBQ2lRLGtCQUFrQixDQUFDckcsRUFBRSxDQUFDLENBQUNzRCxHQUFHLENBQUMsU0FBVWdELFFBQVEsRUFBRTtZQUFFLE9BQU8sSUFBSXZHLHNCQUFzQixDQUFDdUcsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQUUsQ0FBQyxDQUFDO0tBQ3JJO0lBQ0RKLGNBQWEsQ0FBQy9MLFNBQVMsQ0FBQ0MsT0FBTyxHQUFHLFdBQVk7UUFDMUMsSUFBSyxJQUFJNEgsRUFBRSxHQUFHLENBQUMsRUFBRUMsRUFBRSxHQUFHLElBQUksQ0FBQ2hCLFlBQVksRUFBRWUsRUFBRSxHQUFHQyxFQUFFLENBQUNwSCxNQUFNLEVBQUVtSCxFQUFFLEVBQUUsQ0FBRTtZQUMzRCxJQUFJRSxXQUFXLEdBQUdELEVBQUUsQ0FBQ0QsRUFBRSxDQUFDO1lBQ3hCRSxXQUFXLENBQUM5SCxPQUFPLEVBQUUsQ0FBQztTQUN6QjtLQUNKLENBQUM7SUFDRjhMLGNBQWEsQ0FBQy9MLFNBQVMsQ0FBQ29NLFdBQVcsR0FBRyxXQUFZO1FBQzlDLElBQUl6SixJQUFJLEdBQUcsSUFBSSxDQUFDcUosUUFBUSxDQUFDckosSUFBSTtRQUM3QixJQUFLLElBQUlrRixFQUFFLEdBQUcsQ0FBQyxFQUFFQyxFQUFFLEdBQUcsSUFBSSxDQUFDaEIsWUFBWSxFQUFFZSxFQUFFLEdBQUdDLEVBQUUsQ0FBQ3BILE1BQU0sRUFBRW1ILEVBQUUsRUFBRSxDQUFFO1lBQzNELElBQUlFLFdBQVcsR0FBR0QsRUFBRSxDQUFDRCxFQUFFLENBQUM7WUFDeEJsRixJQUFJLElBQUlvRixXQUFXLENBQUN2RCxjQUFjLEdBQUd1RCxXQUFXLENBQUMxRCxhQUFhLEVBQUUsQ0FBQztTQUNwRTtRQUNELE9BQU8xQixJQUFJLENBQUM7S0FDZixDQUFDO0lBQ0ZvSixjQUFhLENBQUMvTCxTQUFTLENBQUNxTSxVQUFVLEdBQUcsV0FBWTtRQUM3QyxJQUFJekosR0FBRyxHQUFHLElBQUksQ0FBQ29KLFFBQVEsQ0FBQ3BKLEdBQUc7UUFDM0IsSUFBSyxJQUFJaUYsRUFBRSxHQUFHLENBQUMsRUFBRUMsRUFBRSxHQUFHLElBQUksQ0FBQ2hCLFlBQVksRUFBRWUsRUFBRSxHQUFHQyxFQUFFLENBQUNwSCxNQUFNLEVBQUVtSCxFQUFFLEVBQUUsQ0FBRTtZQUMzRCxJQUFJRSxXQUFXLEdBQUdELEVBQUUsQ0FBQ0QsRUFBRSxDQUFDO1lBQ3hCakYsR0FBRyxJQUFJbUYsV0FBVyxDQUFDeEQsYUFBYSxHQUFHd0QsV0FBVyxDQUFDNUQsWUFBWSxFQUFFLENBQUM7U0FDakU7UUFDRCxPQUFPdkIsR0FBRyxDQUFDO0tBQ2QsQ0FBQztJQUNGbUosY0FBYSxDQUFDL0wsU0FBUyxDQUFDc00sZ0JBQWdCLEdBQUcsU0FBVXZOLEtBQUssRUFBRUksS0FBSyxFQUFFO1FBQy9ELElBQUlvTixLQUFLLEdBQUc7WUFBRTVKLElBQUksRUFBRTVELEtBQUs7WUFBRTZELEdBQUcsRUFBRXpELEtBQUs7U0FBRTtRQUN2QyxJQUFLLElBQUkwSSxFQUFFLEdBQUcsQ0FBQyxFQUFFQyxFQUFFLEdBQUcsSUFBSSxDQUFDaEIsWUFBWSxFQUFFZSxFQUFFLEdBQUdDLEVBQUUsQ0FBQ3BILE1BQU0sRUFBRW1ILEVBQUUsRUFBRSxDQUFFO1lBQzNELElBQUlFLFdBQVcsR0FBR0QsRUFBRSxDQUFDRCxFQUFFLENBQUM7WUFDeEIsSUFBSSxDQUFDMkUsaUJBQWlCLENBQUN6RSxXQUFXLENBQUM1QyxjQUFjLEVBQUUsQ0FBQyxJQUNoRCxDQUFDbEosTUFBTSxDQUFDd1EsZUFBZSxDQUFDRixLQUFLLEVBQUV4RSxXQUFXLENBQUM5QyxVQUFVLENBQUMsRUFBRTtnQkFDeEQsT0FBTyxLQUFLLENBQUM7YUFDaEI7U0FDSjtRQUNELE9BQU8sSUFBSSxDQUFDO0tBQ2YsQ0FBQztJQUNGLE9BQU84RyxjQUFhLENBQUM7Q0FDeEIsRUFBRTtBQUNILDBGQUEwRjtBQUMxRiwyREFBMkQ7QUFDM0QsU0FBU1MsaUJBQWlCLENBQUNFLElBQUksRUFBRTtJQUM3QixJQUFJQyxPQUFPLEdBQUdELElBQUksQ0FBQ0MsT0FBTztJQUMxQixPQUFPQSxPQUFPLEtBQUssTUFBTSxJQUFJQSxPQUFPLEtBQUssTUFBTSxDQUFDO0NBQ25EO0FBRUQ7Ozs7Ozs7Ozs7OztFQVlFLENBQ0YsSUFBSUMsV0FBVyxHQUFHLGFBQWEsQ0FBRSxXQUFZO0lBQ3pDLFNBQVNBLFlBQVcsQ0FBQ0MsU0FBUSxFQUFFQyxjQUFjLEVBQUU7UUFDM0MsSUFBSW5RLEtBQUssR0FBRyxJQUFJO1FBQ2hCLG9DQUFvQztRQUNwQyxJQUFJLENBQUNvUSxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7UUFDOUIsSUFBSSxDQUFDQyxjQUFjLEdBQUcsSUFBSSxDQUFDLENBQUMsdURBQXVEO1FBQ25GLElBQUksQ0FBQ0MsVUFBVSxHQUFHLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUNDLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFDdEIsSUFBSSxDQUFDQyxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsOENBQThDO1FBQ3BFLElBQUksQ0FBQ0MsaUJBQWlCLEdBQUcsU0FBVS9QLEVBQUUsRUFBRTtZQUNuQyxJQUFJd1AsUUFBUSxHQUFHbFEsS0FBSyxDQUFDa1EsUUFBUTtZQUM3QmxRLEtBQUssQ0FBQ3NRLFVBQVUsR0FBRyxJQUFJLENBQUM7WUFDeEJ0USxLQUFLLENBQUN1USxTQUFTLEdBQUcsSUFBSSxDQUFDO1lBQ3ZCdlEsS0FBSyxDQUFDd1EsUUFBUSxHQUFHLElBQUksQ0FBQztZQUN0QnhRLEtBQUssQ0FBQzBRLFdBQVcsRUFBRSxDQUFDO1lBQ3BCMVEsS0FBSyxDQUFDMlEsaUJBQWlCLENBQUNqUSxFQUFFLENBQUMsQ0FBQztZQUM1QixJQUFJVixLQUFLLENBQUNzUSxVQUFVLElBQUksQ0FBQ3RRLEtBQUssQ0FBQ3FRLGNBQWMsRUFBRTtnQkFDM0NILFFBQVEsQ0FBQ25CLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDOUIsMEhBQTBIO2dCQUMxSC9PLEtBQUssQ0FBQ2dCLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDLGFBQWEsRUFBRVAsRUFBRSxDQUFDLENBQUM7YUFDNUMsTUFDSTtnQkFDRHdQLFFBQVEsQ0FBQ25CLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNoQztTQUNKLENBQUM7UUFDRixJQUFJLENBQUM2QixlQUFlLEdBQUcsU0FBVWxRLEVBQUUsRUFBRTtZQUNqQ1YsS0FBSyxDQUFDZ0IsT0FBTyxDQUFDQyxPQUFPLENBQUMsV0FBVyxFQUFFUCxFQUFFLENBQUMsQ0FBQztZQUN2Q1YsS0FBSyxDQUFDbUYsVUFBVSxDQUFDekUsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsc0NBQXNDO1NBQ3JFLENBQUM7UUFDRixJQUFJLENBQUNtUSxjQUFjLEdBQUcsU0FBVW5RLEVBQUUsRUFBRTtZQUNoQ1YsS0FBSyxDQUFDZ0IsT0FBTyxDQUFDQyxPQUFPLENBQUMsVUFBVSxFQUFFUCxFQUFFLENBQUMsQ0FBQztZQUN0Q1YsS0FBSyxDQUFDbUYsVUFBVSxDQUFDekUsRUFBRSxDQUFDLENBQUM7U0FDeEIsQ0FBQztRQUNGLElBQUksQ0FBQ29RLGVBQWUsR0FBRyxTQUFVcFEsRUFBRSxFQUFFO1lBQ2pDVixLQUFLLENBQUMrUSxXQUFXLEVBQUUsQ0FBQztZQUNwQi9RLEtBQUssQ0FBQ2dCLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDLFdBQVcsRUFBRVAsRUFBRSxDQUFDLENBQUM7U0FDMUMsQ0FBQztRQUNGLElBQUksQ0FBQ3NRLGFBQWEsR0FBRyxTQUFVdFEsRUFBRSxFQUFFO1lBQy9CLElBQUlWLEtBQUssQ0FBQ3VRLFNBQVMsRUFBRTtnQkFDakJ2USxLQUFLLENBQUNnQixPQUFPLENBQUNDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRVAsRUFBRSxDQUFDLENBQUM7YUFDdEQ7WUFDRFYsS0FBSyxDQUFDd1EsUUFBUSxHQUFHeFEsS0FBSyxDQUFDdVEsU0FBUyxDQUFDO1lBQ2pDdlEsS0FBSyxDQUFDdVEsU0FBUyxHQUFHLElBQUksQ0FBQztZQUN2QnZRLEtBQUssQ0FBQ2dCLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDLFNBQVMsRUFBRVAsRUFBRSxDQUFDLENBQUM7U0FDeEMsQ0FBQztRQUNGLElBQUksQ0FBQ3lQLGNBQWMsR0FBR0EsY0FBYyxDQUFDO1FBQ3JDRCxTQUFRLENBQUNsUCxPQUFPLENBQUMwTixFQUFFLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQytCLGlCQUFpQixDQUFDLENBQUM7UUFDM0RQLFNBQVEsQ0FBQ2xQLE9BQU8sQ0FBQzBOLEVBQUUsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDa0MsZUFBZSxDQUFDLENBQUM7UUFDdkRWLFNBQVEsQ0FBQ2xQLE9BQU8sQ0FBQzBOLEVBQUUsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDbUMsY0FBYyxDQUFDLENBQUM7UUFDckRYLFNBQVEsQ0FBQ2xQLE9BQU8sQ0FBQzBOLEVBQUUsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDb0MsZUFBZSxDQUFDLENBQUM7UUFDdkRaLFNBQVEsQ0FBQ2xQLE9BQU8sQ0FBQzBOLEVBQUUsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDc0MsYUFBYSxDQUFDLENBQUM7UUFDbkQsSUFBSSxDQUFDZCxRQUFRLEdBQUdBLFNBQVEsQ0FBQztRQUN6QixJQUFJLENBQUNsUCxPQUFPLEdBQUcsSUFBSTFCLE1BQU0sQ0FBQzRELE9BQU8sRUFBRSxDQUFDO0tBQ3ZDO0lBQ0Qsa0JBQWtCO0lBQ2xCLG1CQUFtQjtJQUNuQitNLFlBQVcsQ0FBQzVNLFNBQVMsQ0FBQ3NOLGlCQUFpQixHQUFHLFNBQVVqUSxFQUFFLEVBQUU7UUFDcEQsSUFBSXVRLFNBQVMsR0FBRztZQUFFakwsSUFBSSxFQUFFdEYsRUFBRSxDQUFDMEIsS0FBSztZQUFFNkQsR0FBRyxFQUFFdkYsRUFBRSxDQUFDOEIsS0FBSztTQUFFO1FBQ2pELElBQUkwTyxhQUFhLEdBQUdELFNBQVM7UUFDN0IsSUFBSWhSLFNBQVMsR0FBR1MsRUFBRSxDQUFDVCxTQUFTO1FBQzVCLElBQUlrUixXQUFXO1FBQ2YsSUFBSWxSLFNBQVMsWUFBWW1SLFdBQVcsRUFBRTtZQUNsQ0QsV0FBVyxHQUFHN1IsTUFBTSxDQUFDZ1EsV0FBVyxDQUFDclAsU0FBUyxDQUFDLENBQUM7WUFDNUNpUixhQUFhLEdBQUc1UixNQUFNLENBQUMrUixjQUFjLENBQUNILGFBQWEsRUFBRUMsV0FBVyxDQUFDLENBQUM7U0FDckU7UUFDRCxJQUFJYixVQUFVLEdBQUcsSUFBSSxDQUFDQSxVQUFVLEdBQUcsSUFBSSxDQUFDZ0IsaUJBQWlCLENBQUNKLGFBQWEsQ0FBQ2xMLElBQUksRUFBRWtMLGFBQWEsQ0FBQ2pMLEdBQUcsQ0FBQztRQUNoRyxJQUFJcUssVUFBVSxFQUFFO1lBQ1osSUFBSSxJQUFJLENBQUNGLGdCQUFnQixJQUFJZSxXQUFXLEVBQUU7Z0JBQ3RDLElBQUlJLGlCQUFpQixHQUFHalMsTUFBTSxDQUFDa1MsY0FBYyxDQUFDTCxXQUFXLEVBQUViLFVBQVUsQ0FBQ3hFLElBQUksQ0FBQztnQkFDM0UsSUFBSXlGLGlCQUFpQixFQUFFO29CQUNuQkwsYUFBYSxHQUFHNVIsTUFBTSxDQUFDbVMsYUFBYSxDQUFDRixpQkFBaUIsQ0FBQyxDQUFDO2lCQUMzRDthQUNKO1lBQ0QsSUFBSSxDQUFDRyxXQUFXLEdBQUdwUyxNQUFNLENBQUNxUyxVQUFVLENBQUNULGFBQWEsRUFBRUQsU0FBUyxDQUFDLENBQUM7U0FDbEUsTUFDSTtZQUNELElBQUksQ0FBQ1MsV0FBVyxHQUFHO2dCQUFFMUwsSUFBSSxFQUFFLENBQUM7Z0JBQUVDLEdBQUcsRUFBRSxDQUFDO2FBQUUsQ0FBQztTQUMxQztLQUNKLENBQUM7SUFDRmdLLFlBQVcsQ0FBQzVNLFNBQVMsQ0FBQzhCLFVBQVUsR0FBRyxTQUFVekUsRUFBRSxFQUFFa1IsV0FBVyxFQUFFO1FBQzFELElBQUlDLEdBQUcsR0FBRyxJQUFJLENBQUNQLGlCQUFpQixDQUFDNVEsRUFBRSxDQUFDMEIsS0FBSyxHQUFHLElBQUksQ0FBQ3NQLFdBQVcsQ0FBQzFMLElBQUksRUFBRXRGLEVBQUUsQ0FBQzhCLEtBQUssR0FBRyxJQUFJLENBQUNrUCxXQUFXLENBQUN6TCxHQUFHLENBQUM7UUFDbkcsSUFBSTJMLFdBQVcsSUFBSSxDQUFDRSxXQUFXLENBQUMsSUFBSSxDQUFDdkIsU0FBUyxFQUFFc0IsR0FBRyxDQUFDLEVBQUU7WUFDbEQsSUFBSSxDQUFDdEIsU0FBUyxHQUFHc0IsR0FBRyxDQUFDO1lBQ3JCLElBQUksQ0FBQzdRLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDLFdBQVcsRUFBRTRRLEdBQUcsRUFBRSxLQUFLLEVBQUVuUixFQUFFLENBQUMsQ0FBQztTQUNyRDtLQUNKLENBQUM7SUFDRnVQLFlBQVcsQ0FBQzVNLFNBQVMsQ0FBQ3FOLFdBQVcsR0FBRyxXQUFZO1FBQzVDLElBQUksQ0FBQ3FCLGNBQWMsR0FBR3pTLE1BQU0sQ0FBQzBTLE9BQU8sQ0FBQyxJQUFJLENBQUM3QixjQUFjLEVBQUUsU0FBVThCLG1CQUFtQixFQUFFO1lBQ3JGQSxtQkFBbUIsQ0FBQ0MsU0FBUyxDQUFDeEIsV0FBVyxFQUFFLENBQUM7WUFDNUMsT0FBTyxJQUFJdEIsYUFBYSxDQUFDNkMsbUJBQW1CLENBQUMvSSxFQUFFLENBQUMsQ0FBQztTQUNwRCxDQUFDLENBQUM7S0FDTixDQUFDO0lBQ0YrRyxZQUFXLENBQUM1TSxTQUFTLENBQUMwTixXQUFXLEdBQUcsV0FBWTtRQUM1QyxJQUFJZ0IsY0FBYyxHQUFHLElBQUksQ0FBQ0EsY0FBYztRQUN4QyxJQUFLLElBQUlJLEVBQUUsSUFBSUosY0FBYyxDQUFFO1lBQzNCQSxjQUFjLENBQUNJLEVBQUUsQ0FBQyxDQUFDN08sT0FBTyxFQUFFLENBQUM7U0FDaEM7UUFDRCxJQUFJLENBQUN5TyxjQUFjLEdBQUcsRUFBRSxDQUFDO0tBQzVCLENBQUM7SUFDRjlCLFlBQVcsQ0FBQzVNLFNBQVMsQ0FBQ2lPLGlCQUFpQixHQUFHLFNBQVVjLFVBQVUsRUFBRUMsU0FBUyxFQUFFO1FBQ3ZFLElBQUlsSCxFQUFFLEdBQUcsSUFBSSxFQUFFZ0YsY0FBYyxHQUFHaEYsRUFBRSxDQUFDZ0YsY0FBYyxFQUFFNEIsY0FBYyxHQUFHNUcsRUFBRSxDQUFDNEcsY0FBYztRQUNyRixJQUFJTyxPQUFPLEdBQUcsSUFBSTtRQUNsQixJQUFLLElBQUlILEVBQUUsSUFBSWhDLGNBQWMsQ0FBRTtZQUMzQixJQUFJK0IsU0FBUyxHQUFHL0IsY0FBYyxDQUFDZ0MsRUFBRSxDQUFDLENBQUNELFNBQVM7WUFDNUMsSUFBSUssYUFBYSxHQUFHUixjQUFjLENBQUNJLEVBQUUsQ0FBQztZQUN0QyxJQUFJSSxhQUFhLElBQ2JBLGFBQWEsQ0FBQzVDLGdCQUFnQixDQUFDeUMsVUFBVSxFQUFFQyxTQUFTLENBQUMsRUFBRTtnQkFDdkQsSUFBSUcsVUFBVSxHQUFHRCxhQUFhLENBQUM5QyxXQUFXLEVBQUU7Z0JBQzVDLElBQUlnRCxTQUFTLEdBQUdGLGFBQWEsQ0FBQzdDLFVBQVUsRUFBRTtnQkFDMUMsSUFBSWdELFlBQVksR0FBR04sVUFBVSxHQUFHSSxVQUFVO2dCQUMxQyxJQUFJRyxXQUFXLEdBQUdOLFNBQVMsR0FBR0ksU0FBUztnQkFDdkMsSUFBSXBELFFBQVEsR0FBR2tELGFBQWEsQ0FBQ2xELFFBQVE7Z0JBQ3JDLElBQUkxSSxLQUFLLEdBQUcwSSxRQUFRLENBQUN6SSxLQUFLLEdBQUd5SSxRQUFRLENBQUNySixJQUFJO2dCQUMxQyxJQUFJYSxNQUFNLEdBQUd3SSxRQUFRLENBQUN2SSxNQUFNLEdBQUd1SSxRQUFRLENBQUNwSixHQUFHO2dCQUMzQyxJQUNBLHNDQUFzQztnQkFDdEN5TSxZQUFZLElBQUksQ0FBQyxJQUFJQSxZQUFZLEdBQUcvTCxLQUFLLElBQ3JDZ00sV0FBVyxJQUFJLENBQUMsSUFBSUEsV0FBVyxHQUFHOUwsTUFBTSxFQUFFO29CQUMxQyxJQUFJZ0wsR0FBRyxHQUFHSyxTQUFTLENBQUNVLFFBQVEsQ0FBQ0YsWUFBWSxFQUFFQyxXQUFXLEVBQUVoTSxLQUFLLEVBQUVFLE1BQU0sQ0FBQztvQkFDdEUsSUFBSWdMLEdBQUcsSUFDUCx3RUFBd0U7b0JBQ3hFdlMsTUFBTSxDQUFDdVQsa0JBQWtCLENBQUNoQixHQUFHLENBQUNpQixXQUFXLENBQUNDLFdBQVcsRUFBRWxCLEdBQUcsQ0FBQ21CLFFBQVEsQ0FBQ0MsS0FBSyxDQUFDLElBQ3RFLENBQUMsQ0FBQ1gsT0FBTyxJQUFJVCxHQUFHLENBQUNxQixLQUFLLEdBQUdaLE9BQU8sQ0FBQ1ksS0FBSyxDQUFDLEVBQUU7d0JBQ3pDckIsR0FBRyxDQUFDc0IsV0FBVyxHQUFHaEIsRUFBRSxDQUFDO3dCQUNyQk4sR0FBRyxDQUFDdUIsT0FBTyxHQUFHbEIsU0FBUyxDQUFDa0IsT0FBTyxDQUFDO3dCQUNoQywwQ0FBMEM7d0JBQzFDdkIsR0FBRyxDQUFDL0YsSUFBSSxDQUFDOUYsSUFBSSxJQUFJd00sVUFBVSxDQUFDO3dCQUM1QlgsR0FBRyxDQUFDL0YsSUFBSSxDQUFDbEYsS0FBSyxJQUFJNEwsVUFBVSxDQUFDO3dCQUM3QlgsR0FBRyxDQUFDL0YsSUFBSSxDQUFDN0YsR0FBRyxJQUFJd00sU0FBUyxDQUFDO3dCQUMxQlosR0FBRyxDQUFDL0YsSUFBSSxDQUFDaEYsTUFBTSxJQUFJMkwsU0FBUyxDQUFDO3dCQUM3QkgsT0FBTyxHQUFHVCxHQUFHLENBQUM7cUJBQ2pCO2lCQUNKO2FBQ0o7U0FDSjtRQUNELE9BQU9TLE9BQU8sQ0FBQztLQUNsQixDQUFDO0lBQ0YsT0FBT3JDLFlBQVcsQ0FBQztDQUN0QixFQUFFO0FBQ0gsU0FBUzZCLFdBQVcsQ0FBQ3VCLElBQUksRUFBRUMsSUFBSSxFQUFFO0lBQzdCLElBQUksQ0FBQ0QsSUFBSSxJQUFJLENBQUNDLElBQUksRUFBRTtRQUNoQixPQUFPLElBQUksQ0FBQztLQUNmO0lBQ0QsSUFBSUMsT0FBTyxDQUFDRixJQUFJLENBQUMsS0FBS0UsT0FBTyxDQUFDRCxJQUFJLENBQUMsRUFBRTtRQUNqQyxPQUFPLEtBQUssQ0FBQztLQUNoQjtJQUNELE9BQU9oVSxNQUFNLENBQUNrVSxnQkFBZ0IsQ0FBQ0gsSUFBSSxDQUFDTCxRQUFRLEVBQUVNLElBQUksQ0FBQ04sUUFBUSxDQUFDLENBQUM7Q0FDaEU7QUFFRCxTQUFTUyw0QkFBNEIsQ0FBQ1QsUUFBUSxFQUFFSSxPQUFPLEVBQUU7SUFDckQsSUFBSU0sS0FBSyxHQUFHLEVBQUU7SUFDZCxJQUFLLElBQUl4SSxFQUFFLEdBQUcsQ0FBQyxFQUFFQyxFQUFFLEdBQUdpSSxPQUFPLENBQUNPLFdBQVcsQ0FBQ0MsbUJBQW1CLEVBQUUxSSxFQUFFLEdBQUdDLEVBQUUsQ0FBQ3BILE1BQU0sRUFBRW1ILEVBQUUsRUFBRSxDQUFFO1FBQ2pGLElBQUkySSxTQUFTLEdBQUcxSSxFQUFFLENBQUNELEVBQUUsQ0FBQztRQUN0QjFMLEtBQUssQ0FBQ3NVLFFBQVEsQ0FBQ0osS0FBSyxFQUFFRyxTQUFTLENBQUNiLFFBQVEsRUFBRUksT0FBTyxDQUFDLENBQUMsQ0FBQztLQUN2RDtJQUNENVQsS0FBSyxDQUFDc1UsUUFBUSxDQUFDSixLQUFLLEVBQUVLLGlCQUFpQixDQUFDZixRQUFRLEVBQUVJLE9BQU8sQ0FBQ1ksT0FBTyxDQUFDLENBQUMsQ0FBQztJQUNwRSxPQUFPTixLQUFLLENBQUM7Q0FDaEI7QUFDRCxTQUFTSyxpQkFBaUIsQ0FBQ0UsSUFBSSxFQUFFRCxPQUFPLEVBQUU7SUFDdEMsT0FBTztRQUNIRSxJQUFJLEVBQUVGLE9BQU8sQ0FBQ0csTUFBTSxDQUFDRixJQUFJLENBQUNoQixLQUFLLENBQUNuTyxLQUFLLENBQUM7UUFDdENzUCxPQUFPLEVBQUVKLE9BQU8sQ0FBQ0ssU0FBUyxDQUFDSixJQUFJLENBQUNoQixLQUFLLENBQUNuTyxLQUFLLEVBQUU7WUFBRXdQLFFBQVEsRUFBRUwsSUFBSSxDQUFDTSxNQUFNO1NBQUUsQ0FBQztRQUN2RUEsTUFBTSxFQUFFTixJQUFJLENBQUNNLE1BQU07S0FDdEIsQ0FBQztDQUNMO0FBRUQ7OztFQUdFLENBQ0YsSUFBSUMsWUFBWSxHQUFHLGFBQWEsQ0FBRSxTQUFVdE4sTUFBTSxFQUFFO0lBQ2hEMUgsS0FBSyxDQUFDMkgsU0FBUyxDQUFDcU4sYUFBWSxFQUFFdE4sTUFBTSxDQUFDLENBQUM7SUFDdEMsU0FBU3NOLGFBQVksQ0FBQ0MsUUFBUSxFQUFFO1FBQzVCLElBQUl6VSxLQUFLLEdBQUdrSCxNQUFNLENBQUNJLElBQUksQ0FBQyxJQUFJLEVBQUVtTixRQUFRLENBQUMsSUFBSSxJQUFJO1FBQy9DelUsS0FBSyxDQUFDeVEsaUJBQWlCLEdBQUcsU0FBVTNQLEdBQUcsRUFBRTtZQUNyQyxJQUFJb1AsUUFBUSxHQUFHbFEsS0FBSyxDQUFDa1EsUUFBUTtZQUM3QixJQUFJek0sTUFBTSxHQUFHM0MsR0FBRyxDQUFDOEIsU0FBUyxDQUFDZixNQUFNO1lBQ2pDLGlHQUFpRztZQUNqR3FPLFFBQVEsQ0FBQ25CLGFBQWEsQ0FBQyxDQUFDL08sS0FBSyxDQUFDa1MsU0FBUyxDQUFDd0MsaUJBQWlCLENBQUNqUixNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQ3RFLENBQUM7UUFDRix3Q0FBd0M7UUFDeEN6RCxLQUFLLENBQUNnUixhQUFhLEdBQUcsU0FBVXRRLEVBQUUsRUFBRTtZQUNoQyxJQUFJd1IsU0FBUyxHQUFHbFMsS0FBSyxDQUFDa1MsU0FBUztZQUMvQixJQUFJckUsT0FBTyxHQUFHN04sS0FBSyxDQUFDa1EsUUFBUSxDQUFDckMsT0FBTztZQUNwQyxJQUFJLENBQUNBLE9BQU8sQ0FBQ3JOLGNBQWMsRUFBRTtnQkFDekIsSUFBSTJLLEVBQUUsR0FBR25MLEtBQUssQ0FBQzJVLFdBQVcsRUFBRXJFLFVBQVUsR0FBR25GLEVBQUUsQ0FBQ21GLFVBQVUsRUFBRUUsUUFBUSxHQUFHckYsRUFBRSxDQUFDcUYsUUFBUTtnQkFDOUUsSUFBSUYsVUFBVSxJQUFJRSxRQUFRLElBQUlzQixXQUFXLENBQUN4QixVQUFVLEVBQUVFLFFBQVEsQ0FBQyxFQUFFO29CQUM3RCxJQUFJNEMsT0FBTyxHQUFHbEIsU0FBUyxDQUFDa0IsT0FBTztvQkFDL0IsSUFBSXdCLEdBQUcsR0FBR3BWLEtBQUssQ0FBQ3NVLFFBQVEsQ0FBQ3RVLEtBQUssQ0FBQ3NVLFFBQVEsQ0FBQyxFQUFFLEVBQUVMLDRCQUE0QixDQUFDbkQsVUFBVSxDQUFDMEMsUUFBUSxFQUFFSSxPQUFPLENBQUMsQ0FBQyxFQUFFO3dCQUFFeUIsS0FBSyxFQUFFdkUsVUFBVSxDQUFDdUUsS0FBSzt3QkFBRUMsT0FBTyxFQUFFcFUsRUFBRSxDQUFDa0MsU0FBUzt3QkFBRW1TLElBQUksRUFBRTNCLE9BQU8sQ0FBQzRCLE9BQU8sSUFBSTVCLE9BQU8sQ0FBQzZCLFdBQVcsQ0FBQ0YsSUFBSTtxQkFBRSxDQUFDO29CQUMvTTNCLE9BQU8sQ0FBQ3BTLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDLFdBQVcsRUFBRTJULEdBQUcsQ0FBQyxDQUFDO2lCQUM3QzthQUNKO1NBQ0osQ0FBQztRQUNGLG1GQUFtRjtRQUNuRjVVLEtBQUssQ0FBQ2tRLFFBQVEsR0FBRyxJQUFJakQseUJBQXlCLENBQUN3SCxRQUFRLENBQUN2TCxFQUFFLENBQUMsQ0FBQztRQUM1RGxKLEtBQUssQ0FBQ2tRLFFBQVEsQ0FBQzlCLFlBQVksQ0FBQ3hFLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDOUMsSUFBSStLLFdBQVcsR0FBRzNVLEtBQUssQ0FBQzJVLFdBQVcsR0FBRyxJQUFJMUUsV0FBVyxDQUFDalEsS0FBSyxDQUFDa1EsUUFBUSxFQUFFNVEsTUFBTSxDQUFDNFYsMEJBQTBCLENBQUNULFFBQVEsQ0FBQyxDQUFDO1FBQ2xIRSxXQUFXLENBQUMzVCxPQUFPLENBQUMwTixFQUFFLENBQUMsYUFBYSxFQUFFMU8sS0FBSyxDQUFDeVEsaUJBQWlCLENBQUMsQ0FBQztRQUMvRGtFLFdBQVcsQ0FBQzNULE9BQU8sQ0FBQzBOLEVBQUUsQ0FBQyxTQUFTLEVBQUUxTyxLQUFLLENBQUNnUixhQUFhLENBQUMsQ0FBQztRQUN2RCxPQUFPaFIsS0FBSyxDQUFDO0tBQ2hCO0lBQ0R3VSxhQUFZLENBQUNuUixTQUFTLENBQUNDLE9BQU8sR0FBRyxXQUFZO1FBQ3pDLElBQUksQ0FBQzRNLFFBQVEsQ0FBQzVNLE9BQU8sRUFBRSxDQUFDO0tBQzNCLENBQUM7SUFDRixPQUFPa1IsYUFBWSxDQUFDO0NBQ3ZCLENBQUNsVixNQUFNLENBQUM2VixXQUFXLENBQUM7QUFFckI7OztFQUdFLENBQ0YsSUFBSUMsYUFBYSxHQUFHLGFBQWEsQ0FBRSxTQUFVbE8sTUFBTSxFQUFFO0lBQ2pEMUgsS0FBSyxDQUFDMkgsU0FBUyxDQUFDaU8sY0FBYSxFQUFFbE8sTUFBTSxDQUFDLENBQUM7SUFDdkMsU0FBU2tPLGNBQWEsQ0FBQ1gsUUFBUSxFQUFFO1FBQzdCLElBQUl6VSxLQUFLLEdBQUdrSCxNQUFNLENBQUNJLElBQUksQ0FBQyxJQUFJLEVBQUVtTixRQUFRLENBQUMsSUFBSSxJQUFJO1FBQy9DelUsS0FBSyxDQUFDcVYsYUFBYSxHQUFHLElBQUksQ0FBQztRQUMzQnJWLEtBQUssQ0FBQ3lRLGlCQUFpQixHQUFHLFNBQVUvUCxFQUFFLEVBQUU7WUFDcEMsSUFBSXlLLEVBQUUsR0FBR25MLEtBQUssRUFBRWtTLFNBQVMsR0FBRy9HLEVBQUUsQ0FBQytHLFNBQVMsRUFBRWhDLFFBQVEsR0FBRy9FLEVBQUUsQ0FBQytFLFFBQVE7WUFDaEUsSUFBSW9GLE9BQU8sR0FBR3BELFNBQVMsQ0FBQ2tCLE9BQU8sQ0FBQ2tDLE9BQU87WUFDdkMsSUFBSUMsU0FBUyxHQUFHRCxPQUFPLENBQUNFLFVBQVUsSUFDOUJ0RCxTQUFTLENBQUN3QyxpQkFBaUIsQ0FBQ2hVLEVBQUUsQ0FBQ2tDLFNBQVMsQ0FBQ2YsTUFBTSxDQUFDO1lBQ3BELHdFQUF3RTtZQUN4RXFPLFFBQVEsQ0FBQ25CLGFBQWEsQ0FBQyxDQUFDd0csU0FBUyxDQUFDLENBQUM7WUFDbkMsc0NBQXNDO1lBQ3RDckYsUUFBUSxDQUFDaEQsS0FBSyxHQUFHeE0sRUFBRSxDQUFDbUMsT0FBTyxHQUFHNFMsd0JBQXdCLENBQUN2RCxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUM7U0FDNUUsQ0FBQztRQUNGbFMsS0FBSyxDQUFDNFEsZUFBZSxHQUFHLFNBQVVsUSxFQUFFLEVBQUU7WUFDbENWLEtBQUssQ0FBQ2tTLFNBQVMsQ0FBQ2tCLE9BQU8sQ0FBQzZCLFdBQVcsQ0FBQ1MsUUFBUSxDQUFDaFYsRUFBRSxDQUFDLENBQUMsQ0FBQywrQkFBK0I7U0FDcEYsQ0FBQztRQUNGVixLQUFLLENBQUMyVixlQUFlLEdBQUcsU0FBVTlELEdBQUcsRUFBRStELE9BQU8sRUFBRTtZQUM1QyxJQUFJeEMsT0FBTyxHQUFHcFQsS0FBSyxDQUFDa1MsU0FBUyxDQUFDa0IsT0FBTztZQUNyQyxJQUFJaUMsYUFBYSxHQUFHLElBQUk7WUFDeEIsSUFBSVEsU0FBUyxHQUFHLEtBQUs7WUFDckIsSUFBSWhFLEdBQUcsRUFBRTtnQkFDTCxJQUFJdkIsVUFBVSxHQUFHdFEsS0FBSyxDQUFDMlUsV0FBVyxDQUFDckUsVUFBVTtnQkFDN0MsSUFBSXdGLFVBQVUsR0FBR2pFLEdBQUcsQ0FBQ3NCLFdBQVcsS0FBSzdDLFVBQVUsQ0FBQzZDLFdBQVcsSUFDcERuVCxLQUFLLENBQUMrVixpQkFBaUIsSUFDdkIsQ0FBQy9WLEtBQUssQ0FBQytWLGlCQUFpQixDQUFDekYsVUFBVSxFQUFFdUIsR0FBRyxDQUFDO2dCQUNoRCxJQUFJLENBQUNpRSxVQUFVLEVBQUU7b0JBQ2JULGFBQWEsR0FBR1cscUJBQXFCLENBQUMxRixVQUFVLEVBQUV1QixHQUFHLEVBQUV1QixPQUFPLENBQUNPLFdBQVcsQ0FBQ3NDLHlCQUF5QixDQUFDLENBQUM7aUJBQ3pHO2dCQUNELElBQUksQ0FBQ1osYUFBYSxJQUFJLENBQUMvVixNQUFNLENBQUM0VyxvQkFBb0IsQ0FBQ2IsYUFBYSxFQUFFeEQsR0FBRyxDQUFDaUIsV0FBVyxFQUFFTSxPQUFPLENBQUMsRUFBRTtvQkFDekZ5QyxTQUFTLEdBQUcsSUFBSSxDQUFDO29CQUNqQlIsYUFBYSxHQUFHLElBQUksQ0FBQztpQkFDeEI7YUFDSjtZQUNELElBQUlBLGFBQWEsRUFBRTtnQkFDZmpDLE9BQU8sQ0FBQytDLFFBQVEsQ0FBQztvQkFBRWhJLElBQUksRUFBRSxjQUFjO29CQUFFaUksU0FBUyxFQUFFZixhQUFhO2lCQUFFLENBQUMsQ0FBQzthQUN4RSxNQUNJLElBQUksQ0FBQ08sT0FBTyxFQUFFO2dCQUNmeEMsT0FBTyxDQUFDK0MsUUFBUSxDQUFDO29CQUFFaEksSUFBSSxFQUFFLGdCQUFnQjtpQkFBRSxDQUFDLENBQUM7YUFDaEQ7WUFDRCxJQUFJLENBQUMwSCxTQUFTLEVBQUU7Z0JBQ1p2VyxNQUFNLENBQUMrVyxZQUFZLEVBQUUsQ0FBQzthQUN6QixNQUNJO2dCQUNEL1csTUFBTSxDQUFDZ1gsYUFBYSxFQUFFLENBQUM7YUFDMUI7WUFDRCxJQUFJLENBQUNWLE9BQU8sRUFBRTtnQkFDVjVWLEtBQUssQ0FBQ3FWLGFBQWEsR0FBR0EsYUFBYSxDQUFDLENBQUMsd0RBQXdEO2FBQ2hHO1NBQ0osQ0FBQztRQUNGclYsS0FBSyxDQUFDOFEsZUFBZSxHQUFHLFNBQVVoUSxHQUFHLEVBQUU7WUFDbkMsSUFBSWQsS0FBSyxDQUFDcVYsYUFBYSxFQUFFO2dCQUNyQixrRUFBa0U7Z0JBQ2xFL1YsTUFBTSxDQUFDaVgsaUJBQWlCLENBQUN2VyxLQUFLLENBQUNxVixhQUFhLEVBQUV2VSxHQUFHLEVBQUVkLEtBQUssQ0FBQ2tTLFNBQVMsQ0FBQ2tCLE9BQU8sQ0FBQyxDQUFDO2dCQUM1RXBULEtBQUssQ0FBQ3FWLGFBQWEsR0FBRyxJQUFJLENBQUM7YUFDOUI7U0FDSixDQUFDO1FBQ0YsSUFBSW5ELFVBQVMsR0FBR3VDLFFBQVEsQ0FBQ3ZDLFNBQVM7UUFDbEMsSUFBSW9ELFFBQU8sR0FBR3BELFVBQVMsQ0FBQ2tCLE9BQU8sQ0FBQ2tDLE9BQU87UUFDdkMsSUFBSXBGLFNBQVEsR0FBR2xRLEtBQUssQ0FBQ2tRLFFBQVEsR0FBRyxJQUFJakQseUJBQXlCLENBQUN3SCxRQUFRLENBQUN2TCxFQUFFLENBQUM7UUFDMUVnSCxTQUFRLENBQUM5QyxrQkFBa0IsR0FBRyxLQUFLLENBQUM7UUFDcEM4QyxTQUFRLENBQUMvQyxXQUFXLEdBQUdtSSxRQUFPLENBQUNrQixpQkFBaUIsSUFBSSxDQUFDLENBQUM7UUFDdER0RyxTQUFRLENBQUM5QixZQUFZLENBQUN4RSxTQUFTLEdBQUcwTCxRQUFPLENBQUNtQixVQUFVLENBQUM7UUFDckQsSUFBSTlCLFdBQVcsR0FBRzNVLEtBQUssQ0FBQzJVLFdBQVcsR0FBRyxJQUFJMUUsV0FBVyxDQUFDalEsS0FBSyxDQUFDa1EsUUFBUSxFQUFFNVEsTUFBTSxDQUFDNFYsMEJBQTBCLENBQUNULFFBQVEsQ0FBQyxDQUFDO1FBQ2xIRSxXQUFXLENBQUMzVCxPQUFPLENBQUMwTixFQUFFLENBQUMsYUFBYSxFQUFFMU8sS0FBSyxDQUFDeVEsaUJBQWlCLENBQUMsQ0FBQztRQUMvRGtFLFdBQVcsQ0FBQzNULE9BQU8sQ0FBQzBOLEVBQUUsQ0FBQyxXQUFXLEVBQUUxTyxLQUFLLENBQUM0USxlQUFlLENBQUMsQ0FBQztRQUMzRCtELFdBQVcsQ0FBQzNULE9BQU8sQ0FBQzBOLEVBQUUsQ0FBQyxXQUFXLEVBQUUxTyxLQUFLLENBQUMyVixlQUFlLENBQUMsQ0FBQztRQUMzRGhCLFdBQVcsQ0FBQzNULE9BQU8sQ0FBQzBOLEVBQUUsQ0FBQyxXQUFXLEVBQUUxTyxLQUFLLENBQUM4USxlQUFlLENBQUMsQ0FBQztRQUMzRCxPQUFPOVEsS0FBSyxDQUFDO0tBQ2hCO0lBQ0RvVixjQUFhLENBQUMvUixTQUFTLENBQUNDLE9BQU8sR0FBRyxXQUFZO1FBQzFDLElBQUksQ0FBQzRNLFFBQVEsQ0FBQzVNLE9BQU8sRUFBRSxDQUFDO0tBQzNCLENBQUM7SUFDRixPQUFPOFIsY0FBYSxDQUFDO0NBQ3hCLENBQUM5VixNQUFNLENBQUM2VixXQUFXLENBQUM7QUFDckIsU0FBU00sd0JBQXdCLENBQUN2RCxTQUFTLEVBQUU7SUFDekMsSUFBSW9ELE9BQU8sR0FBR3BELFNBQVMsQ0FBQ2tCLE9BQU8sQ0FBQ2tDLE9BQU87SUFDdkMsSUFBSXBJLEtBQUssR0FBR29JLE9BQU8sQ0FBQ29CLG9CQUFvQjtJQUN4QyxJQUFJeEosS0FBSyxJQUFJLElBQUksRUFBRTtRQUNmQSxLQUFLLEdBQUdvSSxPQUFPLENBQUNxQixjQUFjLENBQUM7S0FDbEM7SUFDRCxPQUFPekosS0FBSyxDQUFDO0NBQ2hCO0FBQ0QsU0FBUzhJLHFCQUFxQixDQUFDM0MsSUFBSSxFQUFFQyxJQUFJLEVBQUUyQyx5QkFBeUIsRUFBRTtJQUNsRSxJQUFJVyxTQUFTLEdBQUd2RCxJQUFJLENBQUNMLFFBQVE7SUFDN0IsSUFBSTZELFNBQVMsR0FBR3ZELElBQUksQ0FBQ04sUUFBUTtJQUM3QixJQUFJOEQsRUFBRSxHQUFHO1FBQ0xGLFNBQVMsQ0FBQzNELEtBQUssQ0FBQ25PLEtBQUs7UUFDckI4UixTQUFTLENBQUMzRCxLQUFLLENBQUM4RCxHQUFHO1FBQ25CRixTQUFTLENBQUM1RCxLQUFLLENBQUNuTyxLQUFLO1FBQ3JCK1IsU0FBUyxDQUFDNUQsS0FBSyxDQUFDOEQsR0FBRztLQUN0QjtJQUNERCxFQUFFLENBQUNFLElBQUksQ0FBQzFYLE1BQU0sQ0FBQzJYLGNBQWMsQ0FBQyxDQUFDO0lBQy9CLElBQUl2RCxLQUFLLEdBQUcsRUFBRTtJQUNkLElBQUssSUFBSXhJLEVBQUUsR0FBRyxDQUFDLEVBQUVnTSwyQkFBMkIsR0FBR2pCLHlCQUF5QixFQUFFL0ssRUFBRSxHQUFHZ00sMkJBQTJCLENBQUNuVCxNQUFNLEVBQUVtSCxFQUFFLEVBQUUsQ0FBRTtRQUNySCxJQUFJaU0sV0FBVyxHQUFHRCwyQkFBMkIsQ0FBQ2hNLEVBQUUsQ0FBQztRQUNqRCxJQUFJa00sR0FBRyxHQUFHRCxXQUFXLENBQUM5RCxJQUFJLEVBQUVDLElBQUksQ0FBQztRQUNqQyxJQUFJOEQsR0FBRyxLQUFLLEtBQUssRUFBRTtZQUNmLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFDRCxJQUFJQSxHQUFHLEVBQUU7WUFDTDVYLEtBQUssQ0FBQ3NVLFFBQVEsQ0FBQ0osS0FBSyxFQUFFMEQsR0FBRyxDQUFDLENBQUM7U0FDOUI7S0FDSjtJQUNEMUQsS0FBSyxDQUFDVCxLQUFLLEdBQUc7UUFBRW5PLEtBQUssRUFBRWdTLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFBRUMsR0FBRyxFQUFFRCxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQUUsQ0FBQztJQUMzQ3BELEtBQUssQ0FBQ2EsTUFBTSxHQUFHcUMsU0FBUyxDQUFDckMsTUFBTSxDQUFDO0lBQ2hDLE9BQU9iLEtBQUssQ0FBQztDQUNoQjtBQUVELElBQUkyRCxhQUFhLEdBQUcsYUFBYSxDQUFFLFNBQVVuUSxNQUFNLEVBQUU7SUFDakQxSCxLQUFLLENBQUMySCxTQUFTLENBQUNrUSxjQUFhLEVBQUVuUSxNQUFNLENBQUMsQ0FBQztJQUN2QyxTQUFTbVEsY0FBYSxDQUFDNUMsUUFBUSxFQUFFO1FBQzdCLElBQUl6VSxLQUFLLEdBQUdrSCxNQUFNLENBQUNJLElBQUksQ0FBQyxJQUFJLEVBQUVtTixRQUFRLENBQUMsSUFBSSxJQUFJO1FBQy9DLGlCQUFpQjtRQUNqQnpVLEtBQUssQ0FBQ0MsU0FBUyxHQUFHLElBQUksQ0FBQztRQUN2QkQsS0FBSyxDQUFDc1gsVUFBVSxHQUFHLElBQUksQ0FBQyxDQUFDLGlDQUFpQztRQUMxRHRYLEtBQUssQ0FBQ00sVUFBVSxHQUFHLEtBQUssQ0FBQztRQUN6Qk4sS0FBSyxDQUFDdVgsVUFBVSxHQUFHLElBQUksQ0FBQztRQUN4QnZYLEtBQUssQ0FBQ3dYLGNBQWMsR0FBRyxJQUFJLENBQUMsQ0FBQywyQkFBMkI7UUFDeER4WCxLQUFLLENBQUN5WCxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7UUFDOUJ6WCxLQUFLLENBQUMwWCxhQUFhLEdBQUcsSUFBSSxDQUFDO1FBQzNCMVgsS0FBSyxDQUFDMlgscUJBQXFCLEdBQUcsSUFBSSxDQUFDO1FBQ25DM1gsS0FBSyxDQUFDeVEsaUJBQWlCLEdBQUcsU0FBVS9QLEVBQUUsRUFBRTtZQUNwQyxJQUFJa1gsVUFBVSxHQUFHbFgsRUFBRSxDQUFDa0MsU0FBUyxDQUFDZixNQUFNO1lBQ3BDLElBQUlzSixFQUFFLEdBQUduTCxLQUFLLEVBQUVrUyxTQUFTLEdBQUcvRyxFQUFFLENBQUMrRyxTQUFTLEVBQUVoQyxRQUFRLEdBQUcvRSxFQUFFLENBQUMrRSxRQUFRO1lBQ2hFLElBQUlwQyxNQUFNLEdBQUdvQyxRQUFRLENBQUNwQyxNQUFNO1lBQzVCLElBQUl3SCxPQUFPLEdBQUdwRCxTQUFTLENBQUNrQixPQUFPLENBQUNrQyxPQUFPO1lBQ3ZDLElBQUl1QyxjQUFjLEdBQUczRixTQUFTLENBQUNrQixPQUFPO1lBQ3RDcFQsS0FBSyxDQUFDQyxTQUFTLEdBQUdTLEVBQUUsQ0FBQ1QsU0FBUyxDQUFDO1lBQy9CLElBQUlxWCxVQUFVLEdBQUd0WCxLQUFLLENBQUNzWCxVQUFVLEdBQUdoWSxNQUFNLENBQUN3WSxRQUFRLENBQUNwWCxFQUFFLENBQUNULFNBQVMsQ0FBQztZQUNqRSxJQUFJc1gsVUFBVSxHQUFHdlgsS0FBSyxDQUFDdVgsVUFBVSxHQUFHRCxVQUFVLENBQUNDLFVBQVU7WUFDekQsSUFBSVEsZUFBZSxHQUFHUixVQUFVLENBQUNTLFFBQVEsQ0FBQ0MsVUFBVTtZQUNwRGpZLEtBQUssQ0FBQ3dYLGNBQWMsR0FBR2xZLE1BQU0sQ0FBQzRZLGlCQUFpQixDQUFDTCxjQUFjLENBQUNNLGNBQWMsRUFBRSxDQUFDQyxVQUFVLEVBQUVMLGVBQWUsQ0FBQyxDQUFDO1lBQzdHN0gsUUFBUSxDQUFDL0MsV0FBVyxHQUFHek0sRUFBRSxDQUFDbUMsT0FBTyxHQUFHLENBQUMsR0FBR3lTLE9BQU8sQ0FBQytDLG9CQUFvQixDQUFDO1lBQ3JFbkksUUFBUSxDQUFDaEQsS0FBSyxHQUNWLHlFQUF5RTtZQUN6RSxDQUFDeE0sRUFBRSxDQUFDbUMsT0FBTyxJQUFJa1YsZUFBZSxLQUFLN0YsU0FBUyxDQUFDd0IsS0FBSyxDQUFDNEUsY0FBYyxDQUFDLEdBQzlEQyxzQkFBc0IsQ0FBQ3JHLFNBQVMsQ0FBQyxHQUNqQyxJQUFJLENBQUM7WUFDYixJQUFJb0QsT0FBTyxDQUFDa0QsaUJBQWlCLEVBQUU7Z0JBQzNCMUssTUFBTSxDQUFDcEosVUFBVSxHQUFHNFEsT0FBTyxDQUFDa0QsaUJBQWlCLENBQUM7YUFDakQsTUFDSTtnQkFDRDFLLE1BQU0sQ0FBQ3BKLFVBQVUsR0FBR3BGLE1BQU0sQ0FBQ29FLGNBQWMsQ0FBQ2tVLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQzthQUNoRTtZQUNEOUosTUFBTSxDQUFDakosY0FBYyxHQUFHeVEsT0FBTyxDQUFDbUQsa0JBQWtCLENBQUM7WUFDbkQsSUFBSUMsT0FBTyxHQUFHeEcsU0FBUyxDQUFDeUcsZ0JBQWdCLENBQUNmLFVBQVUsQ0FBQyxJQUNoRCxDQUFDdFksTUFBTSxDQUFDb0UsY0FBYyxDQUFDa1UsVUFBVSxFQUFFLG1CQUFtQixDQUFDLEVBQUUsbUJBQW1CO1lBQ2hGMUgsUUFBUSxDQUFDbkIsYUFBYSxDQUFDLENBQUMySixPQUFPLENBQUMsQ0FBQztZQUNqQyxvRUFBb0U7WUFDcEUsd0JBQXdCO1lBQ3hCMVksS0FBSyxDQUFDTSxVQUFVLEdBQUdvWSxPQUFPLElBQ3RCaFksRUFBRSxDQUFDVCxTQUFTLENBQUNxRyxTQUFTLENBQUNzUyxRQUFRLENBQUMsb0JBQW9CLENBQUMsQ0FBQztTQUM3RCxDQUFDO1FBQ0Y1WSxLQUFLLENBQUM0USxlQUFlLEdBQUcsU0FBVWxRLEVBQUUsRUFBRTtZQUNsQyxJQUFJbVgsY0FBYyxHQUFHN1gsS0FBSyxDQUFDa1MsU0FBUyxDQUFDa0IsT0FBTztZQUM1QyxJQUFJbUUsVUFBVSxHQUFHdlgsS0FBSyxDQUFDdVgsVUFBVTtZQUNqQyxJQUFJUSxlQUFlLEdBQUdSLFVBQVUsQ0FBQ1MsUUFBUSxDQUFDQyxVQUFVO1lBQ3BELElBQUl2WCxFQUFFLENBQUNtQyxPQUFPLEVBQUU7Z0JBQ1osb0NBQW9DO2dCQUNwQyxJQUFJa1YsZUFBZSxLQUFLL1gsS0FBSyxDQUFDa1MsU0FBUyxDQUFDd0IsS0FBSyxDQUFDNEUsY0FBYyxFQUFFO29CQUMxRFQsY0FBYyxDQUFDMUIsUUFBUSxDQUFDO3dCQUFFaEksSUFBSSxFQUFFLGNBQWM7d0JBQUU0SixlQUFlLEVBQUVBLGVBQWU7cUJBQUUsQ0FBQyxDQUFDO2lCQUN2RjthQUNKLE1BQ0k7Z0JBQ0QsK0VBQStFO2dCQUMvRUYsY0FBYyxDQUFDMUIsUUFBUSxDQUFDO29CQUFFaEksSUFBSSxFQUFFLGdCQUFnQjtpQkFBRSxDQUFDLENBQUM7YUFDdkQ7WUFDRCxJQUFJbk8sS0FBSyxDQUFDTSxVQUFVLEVBQUU7Z0JBQ2xCdVgsY0FBYyxDQUFDNUMsV0FBVyxDQUFDUyxRQUFRLENBQUNoVixFQUFFLENBQUMsQ0FBQyxDQUFDLDRCQUE0QjtnQkFDckVtWCxjQUFjLENBQUM3VyxPQUFPLENBQUNDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRTtvQkFDN0NpSSxFQUFFLEVBQUVsSixLQUFLLENBQUNDLFNBQVM7b0JBQ25CNFksS0FBSyxFQUFFLElBQUl2WixNQUFNLENBQUN3WixRQUFRLENBQUNqQixjQUFjLEVBQUVOLFVBQVUsQ0FBQ3dCLEdBQUcsRUFBRXhCLFVBQVUsQ0FBQ1MsUUFBUSxDQUFDO29CQUMvRWxELE9BQU8sRUFBRXBVLEVBQUUsQ0FBQ2tDLFNBQVM7b0JBQ3JCbVMsSUFBSSxFQUFFOEMsY0FBYyxDQUFDN0MsT0FBTztpQkFDL0IsQ0FBQyxDQUFDO2FBQ047U0FDSixDQUFDO1FBQ0ZoVixLQUFLLENBQUMyVixlQUFlLEdBQUcsU0FBVTlELEdBQUcsRUFBRStELE9BQU8sRUFBRTtZQUM1QyxJQUFJLENBQUM1VixLQUFLLENBQUNNLFVBQVUsRUFBRTtnQkFDbkIsT0FBTzthQUNWO1lBQ0QsSUFBSWtYLGNBQWMsR0FBR3hYLEtBQUssQ0FBQ3dYLGNBQWM7WUFDekMsSUFBSWxILFVBQVUsR0FBR3RRLEtBQUssQ0FBQzJVLFdBQVcsQ0FBQ3JFLFVBQVU7WUFDN0MsSUFBSXVILGNBQWMsR0FBRzdYLEtBQUssQ0FBQ2tTLFNBQVMsQ0FBQ2tCLE9BQU87WUFDNUMsMEJBQTBCO1lBQzFCLElBQUlxRSxnQkFBZ0IsR0FBRyxJQUFJO1lBQzNCLElBQUl1QixRQUFRLEdBQUcsSUFBSTtZQUNuQixJQUFJckIscUJBQXFCLEdBQUcsSUFBSTtZQUNoQyxJQUFJOUIsU0FBUyxHQUFHLEtBQUs7WUFDckIsSUFBSW9ELFdBQVcsR0FBRztnQkFDZEMsY0FBYyxFQUFFMUIsY0FBYztnQkFDOUIyQixhQUFhLEVBQUU3WixNQUFNLENBQUM4WixxQkFBcUIsRUFBRTtnQkFDN0NDLE9BQU8sRUFBRSxJQUFJO2FBQ2hCO1lBQ0QsSUFBSXhILEdBQUcsRUFBRTtnQkFDTDRGLGdCQUFnQixHQUFHNUYsR0FBRyxDQUFDdUIsT0FBTyxDQUFDO2dCQUMvQixJQUFJa0csZ0JBQWdCLEdBQUc3QixnQkFBZ0IsQ0FBQ25DLE9BQU87Z0JBQy9DLElBQUl1QyxjQUFjLEtBQUtKLGdCQUFnQixJQUNsQzZCLGdCQUFnQixDQUFDQyxRQUFRLElBQUlELGdCQUFnQixDQUFDRSxTQUFTLEVBQUc7b0JBQzNEUixRQUFRLEdBQUdTLG9CQUFvQixDQUFDbkosVUFBVSxFQUFFdUIsR0FBRyxFQUFFNEYsZ0JBQWdCLENBQUNVLGNBQWMsRUFBRSxDQUFDeEUsV0FBVyxDQUFDK0YsMEJBQTBCLENBQUMsQ0FBQztvQkFDM0gsSUFBSVYsUUFBUSxFQUFFO3dCQUNWckIscUJBQXFCLEdBQUdyWSxNQUFNLENBQUNxYSx5QkFBeUIsQ0FBQ25DLGNBQWMsRUFBRUMsZ0JBQWdCLENBQUNVLGNBQWMsRUFBRSxDQUFDeUIsWUFBWSxFQUFFWixRQUFRLEVBQUV2QixnQkFBZ0IsQ0FBQyxDQUFDO3dCQUNySndCLFdBQVcsQ0FBQ0UsYUFBYSxHQUFHeEIscUJBQXFCLENBQUM7d0JBQ2xELElBQUksQ0FBQ3JZLE1BQU0sQ0FBQ3VhLGtCQUFrQixDQUFDWixXQUFXLEVBQUVwSCxHQUFHLENBQUNpQixXQUFXLEVBQUUyRSxnQkFBZ0IsQ0FBQyxFQUFFOzRCQUM1RTVCLFNBQVMsR0FBRyxJQUFJLENBQUM7NEJBQ2pCbUQsUUFBUSxHQUFHLElBQUksQ0FBQzs0QkFDaEJyQixxQkFBcUIsR0FBRyxJQUFJLENBQUM7NEJBQzdCc0IsV0FBVyxDQUFDRSxhQUFhLEdBQUc3WixNQUFNLENBQUM4WixxQkFBcUIsRUFBRSxDQUFDO3lCQUM5RDtxQkFDSjtpQkFDSixNQUNJO29CQUNEM0IsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO2lCQUMzQjthQUNKO1lBQ0R6WCxLQUFLLENBQUM4WixXQUFXLENBQUNyQyxnQkFBZ0IsRUFBRXdCLFdBQVcsQ0FBQyxDQUFDO1lBQ2pELElBQUksQ0FBQ3BELFNBQVMsRUFBRTtnQkFDWnZXLE1BQU0sQ0FBQytXLFlBQVksRUFBRSxDQUFDO2FBQ3pCLE1BQ0k7Z0JBQ0QvVyxNQUFNLENBQUNnWCxhQUFhLEVBQUUsQ0FBQzthQUMxQjtZQUNELElBQUksQ0FBQ1YsT0FBTyxFQUFFO2dCQUNWLElBQUlpQyxjQUFjLEtBQUtKLGdCQUFnQixJQUNuQzNGLFdBQVcsQ0FBQ3hCLFVBQVUsRUFBRXVCLEdBQUcsQ0FBQyxFQUFFO29CQUM5Qm1ILFFBQVEsR0FBRyxJQUFJLENBQUM7aUJBQ25CO2dCQUNEaFosS0FBSyxDQUFDa1EsUUFBUSxDQUFDakIsb0JBQW9CLENBQUMsQ0FBQytKLFFBQVEsQ0FBQyxDQUFDO2dCQUMvQyxrREFBa0Q7Z0JBQ2xELG9FQUFvRTtnQkFDcEVoWixLQUFLLENBQUNrUSxRQUFRLENBQUNsQixrQkFBa0IsQ0FBQyxDQUFDNkMsR0FBRyxJQUFJLENBQUN2UyxNQUFNLENBQUN5TixTQUFTLENBQUMvTSxLQUFLLENBQUNDLFNBQVMsQ0FBQyxDQUFDOFosYUFBYSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztnQkFDaEgsaUNBQWlDO2dCQUNqQy9aLEtBQUssQ0FBQ3lYLGdCQUFnQixHQUFHQSxnQkFBZ0IsQ0FBQztnQkFDMUN6WCxLQUFLLENBQUMwWCxhQUFhLEdBQUdzQixRQUFRLENBQUM7Z0JBQy9CaFosS0FBSyxDQUFDMlgscUJBQXFCLEdBQUdBLHFCQUFxQixDQUFDO2FBQ3ZEO1NBQ0osQ0FBQztRQUNGM1gsS0FBSyxDQUFDOFEsZUFBZSxHQUFHLFdBQVk7WUFDaEMsSUFBSSxDQUFDOVEsS0FBSyxDQUFDTSxVQUFVLEVBQUU7Z0JBQ25CTixLQUFLLENBQUN5QixPQUFPLEVBQUUsQ0FBQyxDQUFDLG1DQUFtQzthQUN2RDtTQUNKLENBQUM7UUFDRnpCLEtBQUssQ0FBQ2dSLGFBQWEsR0FBRyxTQUFVdFEsRUFBRSxFQUFFO1lBQ2hDLElBQUlWLEtBQUssQ0FBQ00sVUFBVSxFQUFFO2dCQUNsQixJQUFJMFosZ0JBQWdCLEdBQUdoYSxLQUFLLENBQUNrUyxTQUFTLENBQUNrQixPQUFPO2dCQUM5QyxJQUFJNkcsV0FBVyxHQUFHRCxnQkFBZ0IsQ0FBQ2hGLE9BQU87Z0JBQzFDLElBQUk3SixFQUFFLEdBQUduTCxLQUFLLEVBQUVrYSxrQkFBa0IsR0FBRy9PLEVBQUUsQ0FBQ3NNLGdCQUFnQixFQUFFQyxhQUFhLEdBQUd2TSxFQUFFLENBQUN1TSxhQUFhO2dCQUMxRixJQUFJeUMsUUFBUSxHQUFHbmEsS0FBSyxDQUFDdVgsVUFBVSxDQUFDd0IsR0FBRztnQkFDbkMsSUFBSXFCLGFBQWEsR0FBR3BhLEtBQUssQ0FBQ3VYLFVBQVUsQ0FBQ1MsUUFBUTtnQkFDN0MsSUFBSXFDLFFBQVEsR0FBRyxJQUFJL2EsTUFBTSxDQUFDd1osUUFBUSxDQUFDa0IsZ0JBQWdCLEVBQUVHLFFBQVEsRUFBRUMsYUFBYSxDQUFDO2dCQUM3RSxJQUFJRSxnQkFBZ0IsR0FBR3RhLEtBQUssQ0FBQ3dYLGNBQWM7Z0JBQzNDLElBQUkrQyx1QkFBdUIsR0FBR3ZhLEtBQUssQ0FBQzJYLHFCQUFxQjtnQkFDekQsSUFBSW5ILFFBQVEsR0FBR3hRLEtBQUssQ0FBQzJVLFdBQVcsQ0FBQ25FLFFBQVE7Z0JBQ3pDeFEsS0FBSyxDQUFDd2EsU0FBUyxFQUFFLENBQUMsQ0FBQyxxQ0FBcUM7Z0JBQ3hEUixnQkFBZ0IsQ0FBQ2haLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDLGVBQWUsRUFBRTtvQkFDOUNpSSxFQUFFLEVBQUVsSixLQUFLLENBQUNDLFNBQVM7b0JBQ25CNFksS0FBSyxFQUFFd0IsUUFBUTtvQkFDZnZGLE9BQU8sRUFBRXBVLEVBQUUsQ0FBQ2tDLFNBQVM7b0JBQ3JCbVMsSUFBSSxFQUFFa0YsV0FBVztpQkFDcEIsQ0FBQyxDQUFDO2dCQUNILElBQUl2QyxhQUFhLEVBQUU7b0JBQ2YsK0JBQStCO29CQUMvQixJQUFJd0Msa0JBQWtCLEtBQUtGLGdCQUFnQixFQUFFO3dCQUN6QyxJQUFJUyxlQUFlLEdBQUcsSUFBSW5iLE1BQU0sQ0FBQ3daLFFBQVEsQ0FBQ2tCLGdCQUFnQixFQUFFTyx1QkFBdUIsQ0FBQ0csSUFBSSxDQUFDUCxRQUFRLENBQUNRLEtBQUssQ0FBQyxFQUFFUCxhQUFhLEdBQUdHLHVCQUF1QixDQUFDSyxTQUFTLENBQUNSLGFBQWEsQ0FBQ25DLFVBQVUsQ0FBQyxHQUFHLElBQUksQ0FBQzt3QkFDN0wrQixnQkFBZ0IsQ0FBQzdELFFBQVEsQ0FBQzs0QkFDdEJoSSxJQUFJLEVBQUUsY0FBYzs0QkFDcEJpSyxVQUFVLEVBQUVtQyx1QkFBdUI7eUJBQ3RDLENBQUMsQ0FBQzt3QkFDSCxJQUFJTSxjQUFjLEdBQUc7NEJBQ2pCQyxRQUFRLEVBQUVULFFBQVE7NEJBQ2xCeEIsS0FBSyxFQUFFNEIsZUFBZTs0QkFDdEJNLGFBQWEsRUFBRXpiLE1BQU0sQ0FBQzBiLGNBQWMsQ0FBQ1QsdUJBQXVCLEVBQUVQLGdCQUFnQixFQUFFSSxhQUFhLENBQUM7NEJBQzlGYSxNQUFNLEVBQUUsV0FBWTtnQ0FDaEJqQixnQkFBZ0IsQ0FBQzdELFFBQVEsQ0FBQztvQ0FDdEJoSSxJQUFJLEVBQUUsY0FBYztvQ0FDcEJpSyxVQUFVLEVBQUVrQyxnQkFBZ0I7aUNBQy9CLENBQUMsQ0FBQzs2QkFDTjt5QkFDSjt3QkFDRCxJQUFJWSxXQUFXLEdBQUcsRUFBRTt3QkFDcEIsSUFBSyxJQUFJaFEsRUFBRSxHQUFHLENBQUMsRUFBRWlRLEVBQUUsR0FBR25CLGdCQUFnQixDQUFDN0IsY0FBYyxFQUFFLENBQUN4RSxXQUFXLENBQUN5SCxxQkFBcUIsRUFBRWxRLEVBQUUsR0FBR2lRLEVBQUUsQ0FBQ3BYLE1BQU0sRUFBRW1ILEVBQUUsRUFBRSxDQUFFOzRCQUM3RyxJQUFJaU0sV0FBVyxHQUFHZ0UsRUFBRSxDQUFDalEsRUFBRSxDQUFDOzRCQUN4QjFMLEtBQUssQ0FBQ3NVLFFBQVEsQ0FBQ29ILFdBQVcsRUFBRS9ELFdBQVcsQ0FBQ08sYUFBYSxFQUFFc0MsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO3lCQUM3RTt3QkFDREEsZ0JBQWdCLENBQUNoWixPQUFPLENBQUNDLE9BQU8sQ0FBQyxXQUFXLEVBQUV6QixLQUFLLENBQUNzVSxRQUFRLENBQUN0VSxLQUFLLENBQUNzVSxRQUFRLENBQUN0VSxLQUFLLENBQUNzVSxRQUFRLENBQUMsRUFBRSxFQUFFK0csY0FBYyxDQUFDLEVBQUVLLFdBQVcsQ0FBQyxFQUFFOzRCQUFFaFMsRUFBRSxFQUFFeEksRUFBRSxDQUFDVCxTQUFTOzRCQUFFb2IsS0FBSyxFQUFFM0QsYUFBYSxDQUFDNEQsVUFBVTs0QkFBRXhHLE9BQU8sRUFBRXBVLEVBQUUsQ0FBQ2tDLFNBQVM7NEJBQUVtUyxJQUFJLEVBQUVrRixXQUFXO3lCQUFFLENBQUMsQ0FBQyxDQUFDO3dCQUNoT0QsZ0JBQWdCLENBQUNoWixPQUFPLENBQUNDLE9BQU8sQ0FBQyxhQUFhLEVBQUU0WixjQUFjLENBQUMsQ0FBQztvQkFDaEUsZ0NBQWdDO3FCQUNuQyxNQUNJLElBQUlYLGtCQUFrQixFQUFFO3dCQUN6QixJQUFJcUIsY0FBYyxHQUFHOzRCQUNqQjFDLEtBQUssRUFBRXdCLFFBQVE7NEJBQ2ZVLGFBQWEsRUFBRXpiLE1BQU0sQ0FBQzBiLGNBQWMsQ0FBQ1YsZ0JBQWdCLEVBQUVOLGdCQUFnQixFQUFFSSxhQUFhLENBQUM7NEJBQ3ZGYSxNQUFNLEVBQUUsV0FBWTtnQ0FDaEJqQixnQkFBZ0IsQ0FBQzdELFFBQVEsQ0FBQztvQ0FDdEJoSSxJQUFJLEVBQUUsY0FBYztvQ0FDcEJpSyxVQUFVLEVBQUVrQyxnQkFBZ0I7aUNBQy9CLENBQUMsQ0FBQzs2QkFDTjt5QkFDSjt3QkFDRE4sZ0JBQWdCLENBQUNoWixPQUFPLENBQUNDLE9BQU8sQ0FBQyxZQUFZLEVBQUV6QixLQUFLLENBQUNzVSxRQUFRLENBQUN0VSxLQUFLLENBQUNzVSxRQUFRLENBQUMsRUFBRSxFQUFFeUgsY0FBYyxDQUFDLEVBQUU7NEJBQUVDLFNBQVMsRUFBRTlhLEVBQUUsQ0FBQ1QsU0FBUzs0QkFBRThVLElBQUksRUFBRWtGLFdBQVc7eUJBQUUsQ0FBQyxDQUFDLENBQUM7d0JBQ25KRCxnQkFBZ0IsQ0FBQzdELFFBQVEsQ0FBQzs0QkFDdEJoSSxJQUFJLEVBQUUsZUFBZTs0QkFDckJpSyxVQUFVLEVBQUVrQyxnQkFBZ0I7eUJBQy9CLENBQUMsQ0FBQzt3QkFDSE4sZ0JBQWdCLENBQUNoWixPQUFPLENBQUNDLE9BQU8sQ0FBQyxhQUFhLEVBQUVzYSxjQUFjLENBQUMsQ0FBQzt3QkFDaEUsSUFBSUUsYUFBYSxHQUFHbEIsdUJBQXVCLENBQUNHLElBQUksQ0FBQ1AsUUFBUSxDQUFDUSxLQUFLLENBQUM7d0JBQ2hFLElBQUllLGtCQUFrQixHQUFHbkIsdUJBQXVCLENBQUNLLFNBQVMsQ0FBQ1IsYUFBYSxDQUFDbkMsVUFBVSxDQUFDO3dCQUNwRixJQUFJMEQsYUFBYSxHQUFHLElBQUlyYyxNQUFNLENBQUN3WixRQUFRLENBQUNvQixrQkFBa0IsRUFBRXVCLGFBQWEsRUFBRUMsa0JBQWtCLENBQUM7d0JBQzlGeEIsa0JBQWtCLENBQUMvRCxRQUFRLENBQUM7NEJBQ3hCaEksSUFBSSxFQUFFLGNBQWM7NEJBQ3BCaUssVUFBVSxFQUFFbUMsdUJBQXVCO3lCQUN0QyxDQUFDLENBQUM7d0JBQ0gsSUFBSXFCLFdBQVcsR0FBRzs0QkFDZC9DLEtBQUssRUFBRThDLGFBQWE7NEJBQ3BCWixhQUFhLEVBQUV6YixNQUFNLENBQUMwYixjQUFjLENBQUNULHVCQUF1QixFQUFFTCxrQkFBa0IsRUFBRXdCLGtCQUFrQixDQUFDOzRCQUNyR1QsTUFBTSxFQUFFLFdBQVk7Z0NBQ2hCZixrQkFBa0IsQ0FBQy9ELFFBQVEsQ0FBQztvQ0FDeEJoSSxJQUFJLEVBQUUsZUFBZTtvQ0FDckJpSyxVQUFVLEVBQUVtQyx1QkFBdUI7aUNBQ3RDLENBQUMsQ0FBQzs2QkFDTjt5QkFDSjt3QkFDREwsa0JBQWtCLENBQUNsWixPQUFPLENBQUNDLE9BQU8sQ0FBQyxVQUFVLEVBQUUyYSxXQUFXLENBQUMsQ0FBQzt3QkFDNUQsSUFBSWxiLEVBQUUsQ0FBQ21DLE9BQU8sRUFBRTs0QkFDWnFYLGtCQUFrQixDQUFDL0QsUUFBUSxDQUFDO2dDQUN4QmhJLElBQUksRUFBRSxjQUFjO2dDQUNwQjRKLGVBQWUsRUFBRXFDLGFBQWEsQ0FBQ25DLFVBQVU7NkJBQzVDLENBQUMsQ0FBQzt5QkFDTjt3QkFDRGlDLGtCQUFrQixDQUFDbFosT0FBTyxDQUFDQyxPQUFPLENBQUMsTUFBTSxFQUFFekIsS0FBSyxDQUFDc1UsUUFBUSxDQUFDdFUsS0FBSyxDQUFDc1UsUUFBUSxDQUFDLEVBQUUsRUFBRUwsNEJBQTRCLENBQUNqRCxRQUFRLENBQUN3QyxRQUFRLEVBQUVrSCxrQkFBa0IsQ0FBQyxDQUFDLEVBQUU7NEJBQUVzQixTQUFTLEVBQUU5YSxFQUFFLENBQUNULFNBQVM7NEJBQUU2VSxPQUFPLEVBQUVwVSxFQUFFLENBQUNrQyxTQUFTOzRCQUFFbVMsSUFBSSxFQUFFdkUsUUFBUSxDQUFDNEMsT0FBTyxDQUFDNEIsT0FBTzt5QkFBRSxDQUFDLENBQUMsQ0FBQzt3QkFDeE9rRixrQkFBa0IsQ0FBQ2xaLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDLGNBQWMsRUFBRXpCLEtBQUssQ0FBQ3NVLFFBQVEsQ0FBQ3RVLEtBQUssQ0FBQ3NVLFFBQVEsQ0FBQyxFQUFFLEVBQUU4SCxXQUFXLENBQUMsRUFBRTs0QkFBRUosU0FBUyxFQUFFOWEsRUFBRSxDQUFDVCxTQUFTOzRCQUFFOFUsSUFBSSxFQUFFdkUsUUFBUSxDQUFDNEMsT0FBTyxDQUFDNEIsT0FBTzt5QkFBRSxDQUFDLENBQUMsQ0FBQztxQkFDcEs7aUJBQ0osTUFDSTtvQkFDRGdGLGdCQUFnQixDQUFDaFosT0FBTyxDQUFDQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7aUJBQ3BEO2FBQ0o7WUFDRGpCLEtBQUssQ0FBQ3lCLE9BQU8sRUFBRSxDQUFDO1NBQ25CLENBQUM7UUFDRixJQUFJeVEsVUFBUyxHQUFHbFMsS0FBSyxDQUFDa1MsU0FBUztRQUMvQixJQUFJb0QsUUFBTyxHQUFHcEQsVUFBUyxDQUFDa0IsT0FBTyxDQUFDa0MsT0FBTztRQUN2QyxJQUFJcEYsU0FBUSxHQUFHbFEsS0FBSyxDQUFDa1EsUUFBUSxHQUFHLElBQUlqRCx5QkFBeUIsQ0FBQ3dILFFBQVEsQ0FBQ3ZMLEVBQUUsQ0FBQztRQUMxRWdILFNBQVEsQ0FBQ3JDLE9BQU8sQ0FBQzNOLFFBQVEsR0FBR21YLGNBQWEsQ0FBQ3dFLFFBQVEsQ0FBQztRQUNuRDNMLFNBQVEsQ0FBQzlDLGtCQUFrQixHQUFHLEtBQUssQ0FBQztRQUNwQzhDLFNBQVEsQ0FBQzlCLFlBQVksQ0FBQ3hFLFNBQVMsR0FBRzBMLFFBQU8sQ0FBQ21CLFVBQVUsQ0FBQztRQUNyRCxJQUFJOUIsV0FBVyxHQUFHM1UsS0FBSyxDQUFDMlUsV0FBVyxHQUFHLElBQUkxRSxXQUFXLENBQUNqUSxLQUFLLENBQUNrUSxRQUFRLEVBQUU1USxNQUFNLENBQUN3Yyx3QkFBd0IsQ0FBQztRQUN0R25ILFdBQVcsQ0FBQ3ZFLGdCQUFnQixHQUFHcUUsUUFBUSxDQUFDc0gsY0FBYyxDQUFDO1FBQ3ZEcEgsV0FBVyxDQUFDM1QsT0FBTyxDQUFDME4sRUFBRSxDQUFDLGFBQWEsRUFBRTFPLEtBQUssQ0FBQ3lRLGlCQUFpQixDQUFDLENBQUM7UUFDL0RrRSxXQUFXLENBQUMzVCxPQUFPLENBQUMwTixFQUFFLENBQUMsV0FBVyxFQUFFMU8sS0FBSyxDQUFDNFEsZUFBZSxDQUFDLENBQUM7UUFDM0QrRCxXQUFXLENBQUMzVCxPQUFPLENBQUMwTixFQUFFLENBQUMsV0FBVyxFQUFFMU8sS0FBSyxDQUFDMlYsZUFBZSxDQUFDLENBQUM7UUFDM0RoQixXQUFXLENBQUMzVCxPQUFPLENBQUMwTixFQUFFLENBQUMsV0FBVyxFQUFFMU8sS0FBSyxDQUFDOFEsZUFBZSxDQUFDLENBQUM7UUFDM0Q2RCxXQUFXLENBQUMzVCxPQUFPLENBQUMwTixFQUFFLENBQUMsU0FBUyxFQUFFMU8sS0FBSyxDQUFDZ1IsYUFBYSxDQUFDLENBQUM7UUFDdkQsT0FBT2hSLEtBQUssQ0FBQztLQUNoQjtJQUNEcVgsY0FBYSxDQUFDaFUsU0FBUyxDQUFDQyxPQUFPLEdBQUcsV0FBWTtRQUMxQyxJQUFJLENBQUM0TSxRQUFRLENBQUM1TSxPQUFPLEVBQUUsQ0FBQztLQUMzQixDQUFDO0lBQ0Ysb0RBQW9EO0lBQ3BEK1QsY0FBYSxDQUFDaFUsU0FBUyxDQUFDeVcsV0FBVyxHQUFHLFNBQVVrQyxXQUFXLEVBQUVDLEtBQUssRUFBRTtRQUNoRSxJQUFJcEUsY0FBYyxHQUFHLElBQUksQ0FBQzNGLFNBQVMsQ0FBQ2tCLE9BQU87UUFDM0MsSUFBSThJLFdBQVcsR0FBRyxJQUFJLENBQUN6RSxnQkFBZ0I7UUFDdkMsaURBQWlEO1FBQ2pELElBQUl5RSxXQUFXLElBQUlBLFdBQVcsS0FBS0YsV0FBVyxFQUFFO1lBQzVDLGdEQUFnRDtZQUNoRCw4RUFBOEU7WUFDOUUsSUFBSUUsV0FBVyxLQUFLckUsY0FBYyxFQUFFO2dCQUNoQ3FFLFdBQVcsQ0FBQy9GLFFBQVEsQ0FBQztvQkFDakJoSSxJQUFJLEVBQUUsZ0JBQWdCO29CQUN0QjhOLEtBQUssRUFBRTt3QkFDSC9DLGNBQWMsRUFBRStDLEtBQUssQ0FBQy9DLGNBQWM7d0JBQ3BDQyxhQUFhLEVBQUU3WixNQUFNLENBQUM4WixxQkFBcUIsRUFBRTt3QkFDN0NDLE9BQU8sRUFBRSxJQUFJO3FCQUNoQjtpQkFDSixDQUFDLENBQUM7WUFDSCw2REFBNkQ7YUFDaEUsTUFDSTtnQkFDRDZDLFdBQVcsQ0FBQy9GLFFBQVEsQ0FBQztvQkFBRWhJLElBQUksRUFBRSxrQkFBa0I7aUJBQUUsQ0FBQyxDQUFDO2FBQ3REO1NBQ0o7UUFDRCxJQUFJNk4sV0FBVyxFQUFFO1lBQ2JBLFdBQVcsQ0FBQzdGLFFBQVEsQ0FBQztnQkFBRWhJLElBQUksRUFBRSxnQkFBZ0I7Z0JBQUU4TixLQUFLLEVBQUVBLEtBQUs7YUFBRSxDQUFDLENBQUM7U0FDbEU7S0FDSixDQUFDO0lBQ0Y1RSxjQUFhLENBQUNoVSxTQUFTLENBQUNtWCxTQUFTLEdBQUcsV0FBWTtRQUM1QyxJQUFJMkIsZUFBZSxHQUFHLElBQUksQ0FBQ2pLLFNBQVMsQ0FBQ2tCLE9BQU87UUFDNUMsSUFBSXFFLGdCQUFnQixHQUFHLElBQUksQ0FBQ0EsZ0JBQWdCO1FBQzVDLElBQUlBLGdCQUFnQixFQUFFO1lBQ2xCQSxnQkFBZ0IsQ0FBQ3RCLFFBQVEsQ0FBQztnQkFBRWhJLElBQUksRUFBRSxrQkFBa0I7YUFBRSxDQUFDLENBQUM7U0FDM0Q7UUFDRCx1RUFBdUU7UUFDdkUsSUFBSWdPLGVBQWUsS0FBSzFFLGdCQUFnQixFQUFFO1lBQ3RDMEUsZUFBZSxDQUFDaEcsUUFBUSxDQUFDO2dCQUFFaEksSUFBSSxFQUFFLGtCQUFrQjthQUFFLENBQUMsQ0FBQztTQUMxRDtLQUNKLENBQUM7SUFDRmtKLGNBQWEsQ0FBQ2hVLFNBQVMsQ0FBQzVCLE9BQU8sR0FBRyxXQUFZO1FBQzFDLElBQUksQ0FBQzZWLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDdkIsSUFBSSxDQUFDaFgsVUFBVSxHQUFHLEtBQUssQ0FBQztRQUN4QixJQUFJLENBQUNpWCxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ3ZCLElBQUksQ0FBQ0MsY0FBYyxHQUFHLElBQUksQ0FBQztRQUMzQixJQUFJLENBQUNDLGdCQUFnQixHQUFHLElBQUksQ0FBQztRQUM3QixJQUFJLENBQUNDLGFBQWEsR0FBRyxJQUFJLENBQUM7UUFDMUIsSUFBSSxDQUFDQyxxQkFBcUIsR0FBRyxJQUFJLENBQUM7S0FDckMsQ0FBQztJQUNGLDBCQUEwQjtJQUMxQixrREFBa0Q7SUFDbEROLGNBQWEsQ0FBQ3dFLFFBQVEsR0FBRywwQ0FBMEMsQ0FBQztJQUNwRSxPQUFPeEUsY0FBYSxDQUFDO0NBQ3hCLENBQUMvWCxNQUFNLENBQUM2VixXQUFXLENBQUM7QUFDckIsU0FBU3NFLG9CQUFvQixDQUFDcEcsSUFBSSxFQUFFQyxJQUFJLEVBQUU4SSxTQUFTLEVBQUU7SUFDakQsSUFBSXhGLFNBQVMsR0FBR3ZELElBQUksQ0FBQ0wsUUFBUTtJQUM3QixJQUFJNkQsU0FBUyxHQUFHdkQsSUFBSSxDQUFDTixRQUFRO0lBQzdCLElBQUlxSixLQUFLLEdBQUd6RixTQUFTLENBQUMzRCxLQUFLLENBQUNuTyxLQUFLO0lBQ2pDLElBQUl3WCxLQUFLLEdBQUd6RixTQUFTLENBQUM1RCxLQUFLLENBQUNuTyxLQUFLO0lBQ2pDLElBQUl5WCxhQUFhLEdBQUcsRUFBRTtJQUN0QixJQUFJM0YsU0FBUyxDQUFDckMsTUFBTSxLQUFLc0MsU0FBUyxDQUFDdEMsTUFBTSxFQUFFO1FBQ3ZDZ0ksYUFBYSxDQUFDaEksTUFBTSxHQUFHc0MsU0FBUyxDQUFDdEMsTUFBTSxDQUFDO1FBQ3hDZ0ksYUFBYSxDQUFDQyxNQUFNLEdBQUdsSixJQUFJLENBQUNGLE9BQU8sQ0FBQ2tDLE9BQU8sQ0FBQ21ILHNCQUFzQixDQUFDO1FBQ25FLElBQUk1RixTQUFTLENBQUN0QyxNQUFNLEVBQUU7WUFDbEIsdUNBQXVDO1lBQ3ZDLGtDQUFrQztZQUNsQzhILEtBQUssR0FBRy9jLE1BQU0sQ0FBQ29kLFVBQVUsQ0FBQ0wsS0FBSyxDQUFDLENBQUM7U0FDcEM7S0FDSjtJQUNELElBQUloQixLQUFLLEdBQUcvYixNQUFNLENBQUNxZCxTQUFTLENBQUNOLEtBQUssRUFBRUMsS0FBSyxFQUFFakosSUFBSSxDQUFDRCxPQUFPLENBQUNZLE9BQU8sRUFBRVgsSUFBSSxDQUFDRixXQUFXLEtBQUtHLElBQUksQ0FBQ0gsV0FBVyxHQUNsR0UsSUFBSSxDQUFDdUosU0FBUyxHQUNkLElBQUksQ0FBQztJQUNULElBQUl2QixLQUFLLENBQUN3QixZQUFZLEVBQUU7UUFDcEJOLGFBQWEsQ0FBQ2hJLE1BQU0sR0FBRyxLQUFLLENBQUM7S0FDaEM7SUFDRCxJQUFJeUUsUUFBUSxHQUFHO1FBQ1hzQyxVQUFVLEVBQUVELEtBQUs7UUFDakJrQixhQUFhLEVBQUVBLGFBQWE7S0FDL0I7SUFDRCxJQUFLLElBQUlyUixFQUFFLEdBQUcsQ0FBQyxFQUFFNFIsV0FBVyxHQUFHVixTQUFTLEVBQUVsUixFQUFFLEdBQUc0UixXQUFXLENBQUMvWSxNQUFNLEVBQUVtSCxFQUFFLEVBQUUsQ0FBRTtRQUNyRSxJQUFJNlIsUUFBUSxHQUFHRCxXQUFXLENBQUM1UixFQUFFLENBQUM7UUFDOUI2UixRQUFRLENBQUMvRCxRQUFRLEVBQUUzRixJQUFJLEVBQUVDLElBQUksQ0FBQyxDQUFDO0tBQ2xDO0lBQ0QsT0FBTzBGLFFBQVEsQ0FBQztDQUNuQjtBQUNELFNBQVNULHNCQUFzQixDQUFDckcsU0FBUyxFQUFFO0lBQ3ZDLElBQUlvRCxPQUFPLEdBQUdwRCxTQUFTLENBQUNrQixPQUFPLENBQUNrQyxPQUFPO0lBQ3ZDLElBQUlwSSxLQUFLLEdBQUdvSSxPQUFPLENBQUMwSCxtQkFBbUI7SUFDdkMsSUFBSTlQLEtBQUssSUFBSSxJQUFJLEVBQUU7UUFDZkEsS0FBSyxHQUFHb0ksT0FBTyxDQUFDcUIsY0FBYyxDQUFDO0tBQ2xDO0lBQ0QsT0FBT3pKLEtBQUssQ0FBQztDQUNoQjtBQUVELElBQUkrUCxhQUFhLEdBQUcsYUFBYSxDQUFFLFNBQVUvVixNQUFNLEVBQUU7SUFDakQxSCxLQUFLLENBQUMySCxTQUFTLENBQUM4VixjQUFhLEVBQUUvVixNQUFNLENBQUMsQ0FBQztJQUN2QyxTQUFTK1YsY0FBYSxDQUFDeEksUUFBUSxFQUFFO1FBQzdCLElBQUl6VSxLQUFLLEdBQUdrSCxNQUFNLENBQUNJLElBQUksQ0FBQyxJQUFJLEVBQUVtTixRQUFRLENBQUMsSUFBSSxJQUFJO1FBQy9DLGlCQUFpQjtRQUNqQnpVLEtBQUssQ0FBQ2tkLGFBQWEsR0FBRyxJQUFJLENBQUM7UUFDM0JsZCxLQUFLLENBQUNtZCxXQUFXLEdBQUcsSUFBSSxDQUFDLENBQUMsMkNBQTJDO1FBQ3JFbmQsS0FBSyxDQUFDdVgsVUFBVSxHQUFHLElBQUksQ0FBQztRQUN4QnZYLEtBQUssQ0FBQ3dYLGNBQWMsR0FBRyxJQUFJLENBQUM7UUFDNUJ4WCxLQUFLLENBQUMwWCxhQUFhLEdBQUcsSUFBSSxDQUFDO1FBQzNCMVgsS0FBSyxDQUFDMlgscUJBQXFCLEdBQUcsSUFBSSxDQUFDO1FBQ25DM1gsS0FBSyxDQUFDeVEsaUJBQWlCLEdBQUcsU0FBVS9QLEVBQUUsRUFBRTtZQUNwQyxJQUFJd1IsU0FBUyxHQUFHbFMsS0FBSyxDQUFDa1MsU0FBUztZQUMvQixJQUFJa0wsS0FBSyxHQUFHcGQsS0FBSyxDQUFDcWQsVUFBVSxDQUFDM2MsRUFBRSxDQUFDO1lBQ2hDLElBQUk0YyxHQUFHLEdBQUdoZSxNQUFNLENBQUN3WSxRQUFRLENBQUNzRixLQUFLLENBQUM7WUFDaEMsSUFBSTdGLFVBQVUsR0FBR3ZYLEtBQUssQ0FBQ3VYLFVBQVUsR0FBRytGLEdBQUcsQ0FBQy9GLFVBQVU7WUFDbER2WCxLQUFLLENBQUNrUSxRQUFRLENBQUMvQyxXQUFXLEdBQUcrRSxTQUFTLENBQUNrQixPQUFPLENBQUNrQyxPQUFPLENBQUMrQyxvQkFBb0IsQ0FBQztZQUM1RSxxREFBcUQ7WUFDckRyWSxLQUFLLENBQUNrUSxRQUFRLENBQUNuQixhQUFhLENBQUMsQ0FBQy9PLEtBQUssQ0FBQ2tTLFNBQVMsQ0FBQ3lHLGdCQUFnQixDQUFDalksRUFBRSxDQUFDa0MsU0FBUyxDQUFDZixNQUFNLENBQUMsSUFDOUVuQixFQUFFLENBQUNtQyxPQUFPLElBQUk3QyxLQUFLLENBQUNrUyxTQUFTLENBQUN3QixLQUFLLENBQUM0RSxjQUFjLEtBQUtmLFVBQVUsQ0FBQ1MsUUFBUSxDQUFDQyxVQUFVLENBQUUsQ0FBQztTQUNoRyxDQUFDO1FBQ0ZqWSxLQUFLLENBQUM0USxlQUFlLEdBQUcsU0FBVWxRLEVBQUUsRUFBRTtZQUNsQyxJQUFJMFMsT0FBTyxHQUFHcFQsS0FBSyxDQUFDa1MsU0FBUyxDQUFDa0IsT0FBTztZQUNyQyxJQUFJbUUsVUFBVSxHQUFHdlgsS0FBSyxDQUFDdVgsVUFBVTtZQUNqQ3ZYLEtBQUssQ0FBQ3dYLGNBQWMsR0FBR2xZLE1BQU0sQ0FBQzRZLGlCQUFpQixDQUFDOUUsT0FBTyxDQUFDK0UsY0FBYyxFQUFFLENBQUNDLFVBQVUsRUFBRXBZLEtBQUssQ0FBQ3VYLFVBQVUsQ0FBQ1MsUUFBUSxDQUFDQyxVQUFVLENBQUMsQ0FBQztZQUMzSCxJQUFJbUYsS0FBSyxHQUFHcGQsS0FBSyxDQUFDcWQsVUFBVSxDQUFDM2MsRUFBRSxDQUFDO1lBQ2hDVixLQUFLLENBQUNrZCxhQUFhLEdBQUdFLEtBQUssQ0FBQztZQUM1QnBkLEtBQUssQ0FBQ21kLFdBQVcsR0FBRzdkLE1BQU0sQ0FBQ3dZLFFBQVEsQ0FBQ3NGLEtBQUssQ0FBQyxDQUFDO1lBQzNDaEssT0FBTyxDQUFDNkIsV0FBVyxDQUFDUyxRQUFRLEVBQUUsQ0FBQztZQUMvQnRDLE9BQU8sQ0FBQ3BTLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDLGtCQUFrQixFQUFFO2dCQUN4Q2lJLEVBQUUsRUFBRWtVLEtBQUs7Z0JBQ1R2RSxLQUFLLEVBQUUsSUFBSXZaLE1BQU0sQ0FBQ3daLFFBQVEsQ0FBQzFGLE9BQU8sRUFBRW1FLFVBQVUsQ0FBQ3dCLEdBQUcsRUFBRXhCLFVBQVUsQ0FBQ1MsUUFBUSxDQUFDO2dCQUN4RWxELE9BQU8sRUFBRXBVLEVBQUUsQ0FBQ2tDLFNBQVM7Z0JBQ3JCbVMsSUFBSSxFQUFFM0IsT0FBTyxDQUFDNEIsT0FBTzthQUN4QixDQUFDLENBQUM7U0FDTixDQUFDO1FBQ0ZoVixLQUFLLENBQUMyVixlQUFlLEdBQUcsU0FBVTlELEdBQUcsRUFBRStELE9BQU8sRUFBRWxWLEVBQUUsRUFBRTtZQUNoRCxJQUFJMFMsT0FBTyxHQUFHcFQsS0FBSyxDQUFDa1MsU0FBUyxDQUFDa0IsT0FBTztZQUNyQyxJQUFJb0UsY0FBYyxHQUFHeFgsS0FBSyxDQUFDd1gsY0FBYztZQUN6QyxJQUFJbEgsVUFBVSxHQUFHdFEsS0FBSyxDQUFDMlUsV0FBVyxDQUFDckUsVUFBVTtZQUM3QyxJQUFJOEosYUFBYSxHQUFHcGEsS0FBSyxDQUFDdVgsVUFBVSxDQUFDUyxRQUFRO1lBQzdDLElBQUlnQixRQUFRLEdBQUcsSUFBSTtZQUNuQixJQUFJckIscUJBQXFCLEdBQUcsSUFBSTtZQUNoQyxJQUFJOUIsU0FBUyxHQUFHLEtBQUs7WUFDckIsSUFBSW9ELFdBQVcsR0FBRztnQkFDZEMsY0FBYyxFQUFFMUIsY0FBYztnQkFDOUIyQixhQUFhLEVBQUU3WixNQUFNLENBQUM4WixxQkFBcUIsRUFBRTtnQkFDN0NDLE9BQU8sRUFBRSxJQUFJO2FBQ2hCO1lBQ0QsSUFBSXhILEdBQUcsRUFBRTtnQkFDTCxJQUFJaUUsVUFBVSxHQUFHakUsR0FBRyxDQUFDc0IsV0FBVyxLQUFLN0MsVUFBVSxDQUFDNkMsV0FBVyxJQUNwRG5ULEtBQUssQ0FBQytWLGlCQUFpQixJQUN2QixDQUFDL1YsS0FBSyxDQUFDK1YsaUJBQWlCLENBQUN6RixVQUFVLEVBQUV1QixHQUFHLENBQUM7Z0JBQ2hELElBQUksQ0FBQ2lFLFVBQVUsRUFBRTtvQkFDYmtELFFBQVEsR0FBR3VFLGVBQWUsQ0FBQ2pOLFVBQVUsRUFBRXVCLEdBQUcsRUFBRW5SLEVBQUUsQ0FBQ1QsU0FBUyxDQUFDcUcsU0FBUyxDQUFDc1MsUUFBUSxDQUFDLHdCQUF3QixDQUFDLEVBQUV3QixhQUFhLENBQUNuSCxLQUFLLENBQUMsQ0FBQztpQkFDL0g7YUFDSjtZQUNELElBQUkrRixRQUFRLEVBQUU7Z0JBQ1ZyQixxQkFBcUIsR0FBR3JZLE1BQU0sQ0FBQ3FhLHlCQUF5QixDQUFDbkMsY0FBYyxFQUFFcEUsT0FBTyxDQUFDK0UsY0FBYyxFQUFFLENBQUN5QixZQUFZLEVBQUVaLFFBQVEsRUFBRTVGLE9BQU8sQ0FBQyxDQUFDO2dCQUNuSTZGLFdBQVcsQ0FBQ0UsYUFBYSxHQUFHeEIscUJBQXFCLENBQUM7Z0JBQ2xELElBQUksQ0FBQ3JZLE1BQU0sQ0FBQ3VhLGtCQUFrQixDQUFDWixXQUFXLEVBQUVwSCxHQUFHLENBQUNpQixXQUFXLEVBQUVNLE9BQU8sQ0FBQyxFQUFFO29CQUNuRXlDLFNBQVMsR0FBRyxJQUFJLENBQUM7b0JBQ2pCbUQsUUFBUSxHQUFHLElBQUksQ0FBQztvQkFDaEJyQixxQkFBcUIsR0FBRyxJQUFJLENBQUM7b0JBQzdCc0IsV0FBVyxDQUFDRSxhQUFhLEdBQUcsSUFBSSxDQUFDO2lCQUNwQzthQUNKO1lBQ0QsSUFBSXhCLHFCQUFxQixFQUFFO2dCQUN2QnZFLE9BQU8sQ0FBQytDLFFBQVEsQ0FBQztvQkFDYmhJLElBQUksRUFBRSxrQkFBa0I7b0JBQ3hCOE4sS0FBSyxFQUFFaEQsV0FBVztpQkFDckIsQ0FBQyxDQUFDO2FBQ04sTUFDSTtnQkFDRDdGLE9BQU8sQ0FBQytDLFFBQVEsQ0FBQztvQkFBRWhJLElBQUksRUFBRSxvQkFBb0I7aUJBQUUsQ0FBQyxDQUFDO2FBQ3BEO1lBQ0QsSUFBSSxDQUFDMEgsU0FBUyxFQUFFO2dCQUNadlcsTUFBTSxDQUFDK1csWUFBWSxFQUFFLENBQUM7YUFDekIsTUFDSTtnQkFDRC9XLE1BQU0sQ0FBQ2dYLGFBQWEsRUFBRSxDQUFDO2FBQzFCO1lBQ0QsSUFBSSxDQUFDVixPQUFPLEVBQUU7Z0JBQ1YsSUFBSW9ELFFBQVEsSUFBSWxILFdBQVcsQ0FBQ3hCLFVBQVUsRUFBRXVCLEdBQUcsQ0FBQyxFQUFFO29CQUMxQ21ILFFBQVEsR0FBRyxJQUFJLENBQUM7aUJBQ25CO2dCQUNEaFosS0FBSyxDQUFDMFgsYUFBYSxHQUFHc0IsUUFBUSxDQUFDO2dCQUMvQmhaLEtBQUssQ0FBQzJYLHFCQUFxQixHQUFHQSxxQkFBcUIsQ0FBQzthQUN2RDtTQUNKLENBQUM7UUFDRjNYLEtBQUssQ0FBQ2dSLGFBQWEsR0FBRyxTQUFVdFEsRUFBRSxFQUFFO1lBQ2hDLElBQUkwUyxPQUFPLEdBQUdwVCxLQUFLLENBQUNrUyxTQUFTLENBQUNrQixPQUFPO1lBQ3JDLElBQUkrRyxRQUFRLEdBQUduYSxLQUFLLENBQUN1WCxVQUFVLENBQUN3QixHQUFHO1lBQ25DLElBQUlxQixhQUFhLEdBQUdwYSxLQUFLLENBQUN1WCxVQUFVLENBQUNTLFFBQVE7WUFDN0MsSUFBSXFDLFFBQVEsR0FBRyxJQUFJL2EsTUFBTSxDQUFDd1osUUFBUSxDQUFDMUYsT0FBTyxFQUFFK0csUUFBUSxFQUFFQyxhQUFhLENBQUM7WUFDcEUsSUFBSTVDLGNBQWMsR0FBR3hYLEtBQUssQ0FBQ3dYLGNBQWM7WUFDekMsSUFBSUcscUJBQXFCLEdBQUczWCxLQUFLLENBQUMyWCxxQkFBcUI7WUFDdkR2RSxPQUFPLENBQUNwUyxPQUFPLENBQUNDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRTtnQkFDdkNpSSxFQUFFLEVBQUVsSixLQUFLLENBQUNrZCxhQUFhO2dCQUN2QnJFLEtBQUssRUFBRXdCLFFBQVE7Z0JBQ2Z2RixPQUFPLEVBQUVwVSxFQUFFLENBQUNrQyxTQUFTO2dCQUNyQm1TLElBQUksRUFBRTNCLE9BQU8sQ0FBQzRCLE9BQU87YUFDeEIsQ0FBQyxDQUFDO1lBQ0gsSUFBSWhWLEtBQUssQ0FBQzBYLGFBQWEsRUFBRTtnQkFDckIsSUFBSStDLGVBQWUsR0FBRyxJQUFJbmIsTUFBTSxDQUFDd1osUUFBUSxDQUFDMUYsT0FBTyxFQUFFdUUscUJBQXFCLENBQUMrQyxJQUFJLENBQUNQLFFBQVEsQ0FBQ1EsS0FBSyxDQUFDLEVBQUVQLGFBQWEsR0FBR3pDLHFCQUFxQixDQUFDaUQsU0FBUyxDQUFDUixhQUFhLENBQUNuQyxVQUFVLENBQUMsR0FBRyxJQUFJLENBQUM7Z0JBQ2hMN0UsT0FBTyxDQUFDK0MsUUFBUSxDQUFDO29CQUNiaEksSUFBSSxFQUFFLGNBQWM7b0JBQ3BCaUssVUFBVSxFQUFFVCxxQkFBcUI7aUJBQ3BDLENBQUMsQ0FBQztnQkFDSCxJQUFJa0QsY0FBYyxHQUFHO29CQUNqQkMsUUFBUSxFQUFFVCxRQUFRO29CQUNsQnhCLEtBQUssRUFBRTRCLGVBQWU7b0JBQ3RCTSxhQUFhLEVBQUV6YixNQUFNLENBQUMwYixjQUFjLENBQUNyRCxxQkFBcUIsRUFBRXZFLE9BQU8sRUFBRWdILGFBQWEsQ0FBQztvQkFDbkZhLE1BQU0sRUFBRSxXQUFZO3dCQUNoQjdILE9BQU8sQ0FBQytDLFFBQVEsQ0FBQzs0QkFDYmhJLElBQUksRUFBRSxjQUFjOzRCQUNwQmlLLFVBQVUsRUFBRVosY0FBYzt5QkFDN0IsQ0FBQyxDQUFDO3FCQUNOO2lCQUNKO2dCQUNEcEUsT0FBTyxDQUFDcFMsT0FBTyxDQUFDQyxPQUFPLENBQUMsYUFBYSxFQUFFekIsS0FBSyxDQUFDc1UsUUFBUSxDQUFDdFUsS0FBSyxDQUFDc1UsUUFBUSxDQUFDLEVBQUUsRUFBRStHLGNBQWMsQ0FBQyxFQUFFO29CQUFFM1IsRUFBRSxFQUFFbEosS0FBSyxDQUFDa2QsYUFBYTtvQkFBRU0sVUFBVSxFQUFFeGQsS0FBSyxDQUFDMFgsYUFBYSxDQUFDOEYsVUFBVSxJQUFJbGUsTUFBTSxDQUFDbWUsY0FBYyxDQUFDLENBQUMsQ0FBQztvQkFBRUMsUUFBUSxFQUFFMWQsS0FBSyxDQUFDMFgsYUFBYSxDQUFDZ0csUUFBUSxJQUFJcGUsTUFBTSxDQUFDbWUsY0FBYyxDQUFDLENBQUMsQ0FBQztvQkFBRTNJLE9BQU8sRUFBRXBVLEVBQUUsQ0FBQ2tDLFNBQVM7b0JBQUVtUyxJQUFJLEVBQUUzQixPQUFPLENBQUM0QixPQUFPO2lCQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUNsVDVCLE9BQU8sQ0FBQ3BTLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDLGFBQWEsRUFBRTRaLGNBQWMsQ0FBQyxDQUFDO2FBQzFELE1BQ0k7Z0JBQ0R6SCxPQUFPLENBQUNwUyxPQUFPLENBQUNDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO2FBQzdDO1lBQ0QsMkJBQTJCO1lBQzNCakIsS0FBSyxDQUFDbWQsV0FBVyxHQUFHLElBQUksQ0FBQztZQUN6Qm5kLEtBQUssQ0FBQ3dYLGNBQWMsR0FBRyxJQUFJLENBQUM7WUFDNUJ4WCxLQUFLLENBQUMwWCxhQUFhLEdBQUcsSUFBSSxDQUFDO1FBQzNCLDJFQUEyRTtTQUM5RSxDQUFDO1FBQ0YsSUFBSXhGLFVBQVMsR0FBR3VDLFFBQVEsQ0FBQ3ZDLFNBQVM7UUFDbEMsSUFBSWhDLFFBQVEsR0FBR2xRLEtBQUssQ0FBQ2tRLFFBQVEsR0FBRyxJQUFJakQseUJBQXlCLENBQUN3SCxRQUFRLENBQUN2TCxFQUFFLENBQUM7UUFDMUVnSCxRQUFRLENBQUNyQyxPQUFPLENBQUMzTixRQUFRLEdBQUcsbUJBQW1CLENBQUM7UUFDaERnUSxRQUFRLENBQUM5QyxrQkFBa0IsR0FBRyxLQUFLLENBQUM7UUFDcEM4QyxRQUFRLENBQUM5QixZQUFZLENBQUN4RSxTQUFTLEdBQUdzSSxVQUFTLENBQUNrQixPQUFPLENBQUNrQyxPQUFPLENBQUNtQixVQUFVLENBQUM7UUFDdkUsSUFBSTlCLFdBQVcsR0FBRzNVLEtBQUssQ0FBQzJVLFdBQVcsR0FBRyxJQUFJMUUsV0FBVyxDQUFDalEsS0FBSyxDQUFDa1EsUUFBUSxFQUFFNVEsTUFBTSxDQUFDNFYsMEJBQTBCLENBQUNULFFBQVEsQ0FBQyxDQUFDO1FBQ2xIRSxXQUFXLENBQUMzVCxPQUFPLENBQUMwTixFQUFFLENBQUMsYUFBYSxFQUFFMU8sS0FBSyxDQUFDeVEsaUJBQWlCLENBQUMsQ0FBQztRQUMvRGtFLFdBQVcsQ0FBQzNULE9BQU8sQ0FBQzBOLEVBQUUsQ0FBQyxXQUFXLEVBQUUxTyxLQUFLLENBQUM0USxlQUFlLENBQUMsQ0FBQztRQUMzRCtELFdBQVcsQ0FBQzNULE9BQU8sQ0FBQzBOLEVBQUUsQ0FBQyxXQUFXLEVBQUUxTyxLQUFLLENBQUMyVixlQUFlLENBQUMsQ0FBQztRQUMzRGhCLFdBQVcsQ0FBQzNULE9BQU8sQ0FBQzBOLEVBQUUsQ0FBQyxTQUFTLEVBQUUxTyxLQUFLLENBQUNnUixhQUFhLENBQUMsQ0FBQztRQUN2RCxPQUFPaFIsS0FBSyxDQUFDO0tBQ2hCO0lBQ0RpZCxjQUFhLENBQUM1WixTQUFTLENBQUNDLE9BQU8sR0FBRyxXQUFZO1FBQzFDLElBQUksQ0FBQzRNLFFBQVEsQ0FBQzVNLE9BQU8sRUFBRSxDQUFDO0tBQzNCLENBQUM7SUFDRjJaLGNBQWEsQ0FBQzVaLFNBQVMsQ0FBQ2dhLFVBQVUsR0FBRyxTQUFVM2MsRUFBRSxFQUFFO1FBQy9DLE9BQU9wQixNQUFNLENBQUNvRSxjQUFjLENBQUNoRCxFQUFFLENBQUNULFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztLQUMzRCxDQUFDO0lBQ0YsT0FBT2dkLGNBQWEsQ0FBQztDQUN4QixDQUFDM2QsTUFBTSxDQUFDNlYsV0FBVyxDQUFDO0FBQ3JCLFNBQVNvSSxlQUFlLENBQUNsSyxJQUFJLEVBQUVDLElBQUksRUFBRXFLLFdBQVcsRUFBRUMsYUFBYSxFQUFFO0lBQzdELElBQUk1SixPQUFPLEdBQUdYLElBQUksQ0FBQ0QsT0FBTyxDQUFDWSxPQUFPO0lBQ2xDLElBQUlxSSxLQUFLLEdBQUdoSixJQUFJLENBQUNMLFFBQVEsQ0FBQ0MsS0FBSyxDQUFDbk8sS0FBSztJQUNyQyxJQUFJd1gsS0FBSyxHQUFHaEosSUFBSSxDQUFDTixRQUFRLENBQUNDLEtBQUssQ0FBQ25PLEtBQUs7SUFDckMsSUFBSXVXLEtBQUssR0FBRy9iLE1BQU0sQ0FBQ3FkLFNBQVMsQ0FBQ04sS0FBSyxFQUFFQyxLQUFLLEVBQUV0SSxPQUFPLEVBQUVYLElBQUksQ0FBQ3VKLFNBQVMsQ0FBQztJQUNuRSxJQUFJZSxXQUFXLEVBQUU7UUFDYixJQUFJM0osT0FBTyxDQUFDek4sR0FBRyxDQUFDcVgsYUFBYSxDQUFDOVksS0FBSyxFQUFFdVcsS0FBSyxDQUFDLEdBQUd1QyxhQUFhLENBQUM3RyxHQUFHLEVBQUU7WUFDN0QsT0FBTztnQkFBRXlHLFVBQVUsRUFBRW5DLEtBQUs7YUFBRSxDQUFDO1NBQ2hDO0tBQ0osTUFDSSxJQUFJckgsT0FBTyxDQUFDek4sR0FBRyxDQUFDcVgsYUFBYSxDQUFDN0csR0FBRyxFQUFFc0UsS0FBSyxDQUFDLEdBQUd1QyxhQUFhLENBQUM5WSxLQUFLLEVBQUU7UUFDbEUsT0FBTztZQUFFNFksUUFBUSxFQUFFckMsS0FBSztTQUFFLENBQUM7S0FDOUI7SUFDRCxPQUFPLElBQUksQ0FBQztDQUNmO0FBRUQsSUFBSXdDLFlBQVksR0FBRyxhQUFhLENBQUUsV0FBWTtJQUMxQyxTQUFTQSxhQUFZLENBQUN6SyxRQUFPLEVBQUU7UUFDM0IsSUFBSXBULEtBQUssR0FBRyxJQUFJO1FBQ2hCLElBQUksQ0FBQ29ULE9BQU8sR0FBR0EsUUFBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQzBLLHlCQUF5QixHQUFHLEtBQUssQ0FBQyxDQUFDLDZFQUE2RTtRQUNySCxJQUFJLENBQUNDLGFBQWEsR0FBRyxLQUFLLENBQUM7UUFDM0IsSUFBSSxDQUFDQyxZQUFZLEdBQUcsS0FBSyxDQUFDO1FBQzFCLElBQUksQ0FBQ0MsUUFBUSxHQUFHLFNBQVVDLFVBQVUsRUFBRTtZQUNsQyxJQUFJQSxVQUFVLENBQUNwSixPQUFPLEVBQUU7Z0JBQ3BCOVUsS0FBSyxDQUFDOGQseUJBQXlCLEdBQUcsSUFBSSxDQUFDO2FBQzFDO1NBQ0osQ0FBQztRQUNGLElBQUksQ0FBQ0sscUJBQXFCLEdBQUcsU0FBVXJkLEdBQUcsRUFBRTtZQUN4QyxJQUFJc2QsY0FBYyxHQUFHcGUsS0FBSyxDQUFDb1QsT0FBTyxDQUFDa0MsT0FBTyxDQUFDOEksY0FBYztZQUN6RCxJQUFJM2EsTUFBTSxHQUFHbkUsTUFBTSxDQUFDK2UscUJBQXFCLENBQUN2ZCxHQUFHLENBQUM4QixTQUFTLENBQUM7WUFDeEQ1QyxLQUFLLENBQUMrZCxhQUFhLEdBQUcsQ0FBQyxDQUFDemUsTUFBTSxDQUFDb0UsY0FBYyxDQUFDRCxNQUFNLEVBQUUyYSxjQUFjLENBQUMsQ0FBQztZQUN0RXBlLEtBQUssQ0FBQ2dlLFlBQVksR0FBRyxDQUFDLENBQUMxZSxNQUFNLENBQUNvRSxjQUFjLENBQUNELE1BQU0sRUFBRTRULGFBQWEsQ0FBQ3dFLFFBQVEsQ0FBQyxDQUFDLENBQUMsbUNBQW1DO1NBQ3BILENBQUM7UUFDRixJQUFJLENBQUN5QyxtQkFBbUIsR0FBRyxTQUFVeGQsR0FBRyxFQUFFO1lBQ3RDLElBQUlzUyxPQUFPLEdBQUdwVCxLQUFLLENBQUNvVCxPQUFPO1lBQzNCLElBQUltTCxlQUFlLEdBQUd2ZSxLQUFLLENBQUN1ZSxlQUFlO1lBQzNDLElBQUlDLGFBQWEsR0FBR3BMLE9BQU8sQ0FBQytFLGNBQWMsRUFBRTtZQUM1Qyw2REFBNkQ7WUFDN0QsSUFBSSxDQUFDb0csZUFBZSxDQUFDL2QsY0FBYyxFQUFFO2dCQUNqQyxJQUFJZ2UsYUFBYSxDQUFDQyxhQUFhLElBQzNCLENBQUN6ZSxLQUFLLENBQUM4ZCx5QkFBeUIsQ0FBQyx5RUFBeUU7Z0JBQTFFLEVBQ2xDO29CQUNFLElBQUlZLFlBQVksR0FBR3RMLE9BQU8sQ0FBQ2tDLE9BQU8sQ0FBQ29KLFlBQVk7b0JBQy9DLElBQUlBLFlBQVksSUFBSSxDQUFDLENBQUNBLFlBQVksSUFBSSxDQUFDMWUsS0FBSyxDQUFDK2QsYUFBYSxDQUFDLEVBQUU7d0JBQ3pEM0ssT0FBTyxDQUFDNkIsV0FBVyxDQUFDUyxRQUFRLENBQUM1VSxHQUFHLENBQUMsQ0FBQztxQkFDckM7aUJBQ0o7Z0JBQ0QsSUFBSTBkLGFBQWEsQ0FBQ2xHLGNBQWMsSUFDNUIsQ0FBQ3RZLEtBQUssQ0FBQ2dlLFlBQVksQ0FBQyx1Q0FBdUM7Z0JBQXhDLEVBQ3JCO29CQUNFNUssT0FBTyxDQUFDK0MsUUFBUSxDQUFDO3dCQUFFaEksSUFBSSxFQUFFLGdCQUFnQjtxQkFBRSxDQUFDLENBQUM7aUJBQ2hEO2FBQ0o7WUFDRG5PLEtBQUssQ0FBQzhkLHlCQUF5QixHQUFHLEtBQUssQ0FBQztTQUMzQyxDQUFDO1FBQ0YsSUFBSVMsZ0JBQWUsR0FBRyxJQUFJLENBQUNBLGVBQWUsR0FBRyxJQUFJemUsZUFBZSxDQUFDcUIsUUFBUSxDQUFDO1FBQzFFb2QsZ0JBQWUsQ0FBQ25lLGdCQUFnQixHQUFHLElBQUksQ0FBQztRQUN4Q21lLGdCQUFlLENBQUNsZSxpQkFBaUIsR0FBRyxLQUFLLENBQUM7UUFDMUNrZSxnQkFBZSxDQUFDdmQsT0FBTyxDQUFDME4sRUFBRSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUN5UCxxQkFBcUIsQ0FBQyxDQUFDO1FBQ3RFSSxnQkFBZSxDQUFDdmQsT0FBTyxDQUFDME4sRUFBRSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUM0UCxtQkFBbUIsQ0FBQyxDQUFDO1FBQ2xFOztVQUVFLENBQ0ZsTCxRQUFPLENBQUNwUyxPQUFPLENBQUMwTixFQUFFLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQ3VQLFFBQVEsQ0FBQyxDQUFDO0tBQy9DO0lBQ0RKLGFBQVksQ0FBQ3hhLFNBQVMsQ0FBQ0MsT0FBTyxHQUFHLFdBQVk7UUFDekMsSUFBSSxDQUFDOFAsT0FBTyxDQUFDcFMsT0FBTyxDQUFDMmQsR0FBRyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUNWLFFBQVEsQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQ00sZUFBZSxDQUFDamIsT0FBTyxFQUFFLENBQUM7S0FDbEMsQ0FBQztJQUNGLE9BQU91YSxhQUFZLENBQUM7Q0FDdkIsRUFBRTtBQUVILElBQUllLGVBQWUsR0FBRztJQUNsQnBHLGlCQUFpQixFQUFFbFosTUFBTSxDQUFDdWYsUUFBUTtDQUNyQztBQUNELElBQUlDLGlCQUFpQixHQUFHO0lBQ3BCQyxTQUFTLEVBQUV6ZixNQUFNLENBQUN1ZixRQUFRO0lBQzFCRyxjQUFjLEVBQUUxZixNQUFNLENBQUN1ZixRQUFRO0lBQy9CSSxhQUFhLEVBQUUzZixNQUFNLENBQUN1ZixRQUFRO0lBQzlCSyxTQUFTLEVBQUU1ZixNQUFNLENBQUN1ZixRQUFRO0lBQzFCTSxnQkFBZ0IsRUFBRTdmLE1BQU0sQ0FBQ3VmLFFBQVE7SUFDakNPLGVBQWUsRUFBRTlmLE1BQU0sQ0FBQ3VmLFFBQVE7SUFDaENRLFdBQVcsRUFBRS9mLE1BQU0sQ0FBQ3VmLFFBQVE7SUFDNUJTLElBQUksRUFBRWhnQixNQUFNLENBQUN1ZixRQUFRO0lBQ3JCVSxZQUFZLEVBQUVqZ0IsTUFBTSxDQUFDdWYsUUFBUTtJQUM3QlcsVUFBVSxFQUFFbGdCLE1BQU0sQ0FBQ3VmLFFBQVE7Q0FDOUI7QUFFRDs7OztFQUlFLENBQ0YsSUFBSVksdUJBQXVCLEdBQUcsYUFBYSxDQUFFLFdBQVk7SUFDckQsU0FBU0Esd0JBQXVCLENBQUN2UCxTQUFRLEVBQUV3UCxnQkFBZ0IsRUFBRTtRQUN6RCxJQUFJMWYsS0FBSyxHQUFHLElBQUk7UUFDaEIsSUFBSSxDQUFDeVgsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO1FBQzdCLElBQUksQ0FBQ2tJLGNBQWMsR0FBRyxJQUFJLENBQUMsQ0FBQyxpREFBaUQ7UUFDN0UsSUFBSSxDQUFDRCxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7UUFDN0IsSUFBSSxDQUFDRSxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLElBQUksQ0FBQ2hQLGVBQWUsR0FBRyxTQUFVbFEsRUFBRSxFQUFFO1lBQ2pDVixLQUFLLENBQUM0ZixRQUFRLEdBQUc1ZixLQUFLLENBQUM2ZixhQUFhLENBQUNuZixFQUFFLENBQUNULFNBQVMsQ0FBQyxDQUFDO1NBQ3RELENBQUM7UUFDRixJQUFJLENBQUMwVixlQUFlLEdBQUcsU0FBVTlELEdBQUcsRUFBRStELE9BQU8sRUFBRWxWLEVBQUUsRUFBRTtZQUMvQyxJQUFJd1AsUUFBUSxHQUFHbFEsS0FBSyxDQUFDMlUsV0FBVyxDQUFDekUsUUFBUTtZQUN6QyxJQUFJdUgsZ0JBQWdCLEdBQUcsSUFBSTtZQUMzQixJQUFJa0ksY0FBYyxHQUFHLElBQUk7WUFDekIsSUFBSTlKLFNBQVMsR0FBRyxLQUFLO1lBQ3JCLElBQUlvRCxXQUFXLEdBQUc7Z0JBQ2RDLGNBQWMsRUFBRTVaLE1BQU0sQ0FBQzhaLHFCQUFxQixFQUFFO2dCQUM5Q0QsYUFBYSxFQUFFN1osTUFBTSxDQUFDOFoscUJBQXFCLEVBQUU7Z0JBQzdDQyxPQUFPLEVBQUVyWixLQUFLLENBQUM0ZixRQUFRLENBQUNFLE1BQU07YUFDakM7WUFDRCxJQUFJak8sR0FBRyxFQUFFO2dCQUNMNEYsZ0JBQWdCLEdBQUc1RixHQUFHLENBQUN1QixPQUFPLENBQUM7Z0JBQy9CLElBQUlwVCxLQUFLLENBQUMrZixtQkFBbUIsQ0FBQ3JmLEVBQUUsQ0FBQ1QsU0FBUyxFQUFFd1gsZ0JBQWdCLENBQUMsRUFBRTtvQkFDM0RrSSxjQUFjLEdBQUdLLHVCQUF1QixDQUFDbk8sR0FBRyxDQUFDbUIsUUFBUSxFQUFFaFQsS0FBSyxDQUFDNGYsUUFBUSxFQUFFbkksZ0JBQWdCLENBQUMsQ0FBQztvQkFDekZ3QixXQUFXLENBQUNFLGFBQWEsR0FBRzdaLE1BQU0sQ0FBQzJnQixpQkFBaUIsQ0FBQ04sY0FBYyxDQUFDLENBQUM7b0JBQ3JFOUosU0FBUyxHQUFHLENBQUN2VyxNQUFNLENBQUN1YSxrQkFBa0IsQ0FBQ1osV0FBVyxFQUFFcEgsR0FBRyxDQUFDaUIsV0FBVyxFQUFFMkUsZ0JBQWdCLENBQUMsQ0FBQztvQkFDdkYsSUFBSTVCLFNBQVMsRUFBRTt3QkFDWG9ELFdBQVcsQ0FBQ0UsYUFBYSxHQUFHN1osTUFBTSxDQUFDOFoscUJBQXFCLEVBQUUsQ0FBQzt3QkFDM0R1RyxjQUFjLEdBQUcsSUFBSSxDQUFDO3FCQUN6QjtpQkFDSjthQUNKO1lBQ0QzZixLQUFLLENBQUM4WixXQUFXLENBQUNyQyxnQkFBZ0IsRUFBRXdCLFdBQVcsQ0FBQyxDQUFDO1lBQ2pELDhGQUE4RjtZQUM5RixvRUFBb0U7WUFDcEUvSSxRQUFRLENBQUNsQixrQkFBa0IsQ0FBQzRHLE9BQU8sSUFBSSxDQUFDK0osY0FBYyxJQUFJLENBQUN4ZSxRQUFRLENBQUM0WSxhQUFhLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO1lBQ3ZHLElBQUksQ0FBQ2xFLFNBQVMsRUFBRTtnQkFDWnZXLE1BQU0sQ0FBQytXLFlBQVksRUFBRSxDQUFDO2FBQ3pCLE1BQ0k7Z0JBQ0QvVyxNQUFNLENBQUNnWCxhQUFhLEVBQUUsQ0FBQzthQUMxQjtZQUNELElBQUksQ0FBQ1YsT0FBTyxFQUFFO2dCQUNWMUYsUUFBUSxDQUFDakIsb0JBQW9CLENBQUMsQ0FBQzBRLGNBQWMsQ0FBQyxDQUFDO2dCQUMvQzNmLEtBQUssQ0FBQ3lYLGdCQUFnQixHQUFHQSxnQkFBZ0IsQ0FBQztnQkFDMUN6WCxLQUFLLENBQUMyZixjQUFjLEdBQUdBLGNBQWMsQ0FBQzthQUN6QztTQUNKLENBQUM7UUFDRixJQUFJLENBQUMzTyxhQUFhLEdBQUcsU0FBVWxRLEdBQUcsRUFBRTtZQUNoQyxJQUFJcUssRUFBRSxHQUFHbkwsS0FBSyxFQUFFeVgsZ0JBQWdCLEdBQUd0TSxFQUFFLENBQUNzTSxnQkFBZ0IsRUFBRWtJLGNBQWMsR0FBR3hVLEVBQUUsQ0FBQ3dVLGNBQWM7WUFDMUYzZixLQUFLLENBQUN3YSxTQUFTLEVBQUUsQ0FBQztZQUNsQixJQUFJL0MsZ0JBQWdCLElBQUlrSSxjQUFjLEVBQUU7Z0JBQ3BDLElBQUluUCxRQUFRLEdBQUd4USxLQUFLLENBQUMyVSxXQUFXLENBQUNuRSxRQUFRO2dCQUN6QyxJQUFJMFAsU0FBUyxHQUFHMVAsUUFBUSxDQUFDNEMsT0FBTyxDQUFDNEIsT0FBTztnQkFDeEMsSUFBSTRLLFFBQVEsR0FBRzVmLEtBQUssQ0FBQzRmLFFBQVE7Z0JBQzdCbkksZ0JBQWdCLENBQUN6VyxPQUFPLENBQUNDLE9BQU8sQ0FBQyxNQUFNLEVBQUV6QixLQUFLLENBQUNzVSxRQUFRLENBQUN0VSxLQUFLLENBQUNzVSxRQUFRLENBQUMsRUFBRSxFQUFFTCw0QkFBNEIsQ0FBQ2pELFFBQVEsQ0FBQ3dDLFFBQVEsRUFBRXlFLGdCQUFnQixDQUFDLENBQUMsRUFBRTtvQkFBRStELFNBQVMsRUFBRTFhLEdBQUcsQ0FBQ2IsU0FBUztvQkFBRTZVLE9BQU8sRUFBRWhVLEdBQUcsQ0FBQzhCLFNBQVM7b0JBQUVtUyxJQUFJLEVBQUVtTCxTQUFTO2lCQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUN2TixJQUFJTixRQUFRLENBQUNFLE1BQU0sRUFBRTtvQkFDakIsSUFBSUssY0FBYyxHQUFHN2dCLE1BQU0sQ0FBQzJnQixpQkFBaUIsQ0FBQ04sY0FBYyxDQUFDO29CQUM3RGxJLGdCQUFnQixDQUFDdEIsUUFBUSxDQUFDO3dCQUN0QmhJLElBQUksRUFBRSxjQUFjO3dCQUNwQmlLLFVBQVUsRUFBRStILGNBQWM7cUJBQzdCLENBQUMsQ0FBQztvQkFDSCxJQUFJcmYsR0FBRyxDQUFDK0IsT0FBTyxFQUFFO3dCQUNiNFUsZ0JBQWdCLENBQUN0QixRQUFRLENBQUM7NEJBQ3RCaEksSUFBSSxFQUFFLGNBQWM7NEJBQ3BCNEosZUFBZSxFQUFFNEgsY0FBYyxDQUFDM0gsUUFBUSxDQUFDQyxVQUFVO3lCQUN0RCxDQUFDLENBQUM7cUJBQ047b0JBQ0QsdUNBQXVDO29CQUN2Q1IsZ0JBQWdCLENBQUN6VyxPQUFPLENBQUNDLE9BQU8sQ0FBQyxjQUFjLEVBQUU7d0JBQzdDNFgsS0FBSyxFQUFFLElBQUl2WixNQUFNLENBQUN3WixRQUFRLENBQUNyQixnQkFBZ0IsRUFBRWtJLGNBQWMsQ0FBQzVHLEdBQUcsRUFBRTRHLGNBQWMsQ0FBQzNILFFBQVEsQ0FBQzt3QkFDekYrQyxhQUFhLEVBQUUsRUFBRTt3QkFDakJFLE1BQU0sRUFBRSxXQUFZOzRCQUNoQnhELGdCQUFnQixDQUFDdEIsUUFBUSxDQUFDO2dDQUN0QmhJLElBQUksRUFBRSxlQUFlO2dDQUNyQmlLLFVBQVUsRUFBRStILGNBQWM7NkJBQzdCLENBQUMsQ0FBQzt5QkFDTjt3QkFDRDNFLFNBQVMsRUFBRTFhLEdBQUcsQ0FBQ2IsU0FBUzt3QkFDeEI4VSxJQUFJLEVBQUVtTCxTQUFTO3FCQUNsQixDQUFDLENBQUM7aUJBQ047YUFDSjtZQUNEbGdCLEtBQUssQ0FBQ3lYLGdCQUFnQixHQUFHLElBQUksQ0FBQztZQUM5QnpYLEtBQUssQ0FBQzJmLGNBQWMsR0FBRyxJQUFJLENBQUM7U0FDL0IsQ0FBQztRQUNGLElBQUloTCxXQUFXLEdBQUcsSUFBSSxDQUFDQSxXQUFXLEdBQUcsSUFBSTFFLFdBQVcsQ0FBQ0MsU0FBUSxFQUFFNVEsTUFBTSxDQUFDd2Msd0JBQXdCLENBQUM7UUFDL0ZuSCxXQUFXLENBQUN0RSxjQUFjLEdBQUcsS0FBSyxDQUFDLENBQUMsb0NBQW9DO1FBQ3hFc0UsV0FBVyxDQUFDM1QsT0FBTyxDQUFDME4sRUFBRSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUNrQyxlQUFlLENBQUMsQ0FBQztRQUMxRCtELFdBQVcsQ0FBQzNULE9BQU8sQ0FBQzBOLEVBQUUsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDaUgsZUFBZSxDQUFDLENBQUM7UUFDMURoQixXQUFXLENBQUMzVCxPQUFPLENBQUMwTixFQUFFLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQ3NDLGFBQWEsQ0FBQyxDQUFDO1FBQ3RELElBQUksQ0FBQzBPLGdCQUFnQixHQUFHQSxnQkFBZ0IsQ0FBQztLQUM1QztJQUNERCx3QkFBdUIsQ0FBQ3BjLFNBQVMsQ0FBQ3djLGFBQWEsR0FBRyxTQUFVNWYsU0FBUyxFQUFFO1FBQ25FLElBQUksT0FBTyxJQUFJLENBQUN5ZixnQkFBZ0IsS0FBSyxRQUFRLEVBQUU7WUFDM0MsT0FBT3BnQixNQUFNLENBQUM4Z0IsYUFBYSxDQUFDLElBQUksQ0FBQ1YsZ0JBQWdCLENBQUMsQ0FBQztTQUN0RDtRQUNELElBQUksT0FBTyxJQUFJLENBQUNBLGdCQUFnQixLQUFLLFVBQVUsRUFBRTtZQUM3QyxPQUFPcGdCLE1BQU0sQ0FBQzhnQixhQUFhLENBQUMsSUFBSSxDQUFDVixnQkFBZ0IsQ0FBQ3pmLFNBQVMsQ0FBQyxDQUFDLENBQUM7U0FDakU7UUFDRCxPQUFPb2dCLGlCQUFpQixDQUFDcGdCLFNBQVMsQ0FBQyxDQUFDO0tBQ3ZDLENBQUM7SUFDRndmLHdCQUF1QixDQUFDcGMsU0FBUyxDQUFDeVcsV0FBVyxHQUFHLFNBQVVrQyxXQUFXLEVBQUVDLEtBQUssRUFBRTtRQUMxRSxJQUFJQyxXQUFXLEdBQUcsSUFBSSxDQUFDekUsZ0JBQWdCO1FBQ3ZDLElBQUl5RSxXQUFXLElBQUlBLFdBQVcsS0FBS0YsV0FBVyxFQUFFO1lBQzVDRSxXQUFXLENBQUMvRixRQUFRLENBQUM7Z0JBQUVoSSxJQUFJLEVBQUUsa0JBQWtCO2FBQUUsQ0FBQyxDQUFDO1NBQ3REO1FBQ0QsSUFBSTZOLFdBQVcsRUFBRTtZQUNiQSxXQUFXLENBQUM3RixRQUFRLENBQUM7Z0JBQUVoSSxJQUFJLEVBQUUsZ0JBQWdCO2dCQUFFOE4sS0FBSyxFQUFFQSxLQUFLO2FBQUUsQ0FBQyxDQUFDO1NBQ2xFO0tBQ0osQ0FBQztJQUNGd0Qsd0JBQXVCLENBQUNwYyxTQUFTLENBQUNtWCxTQUFTLEdBQUcsV0FBWTtRQUN0RCxJQUFJLElBQUksQ0FBQy9DLGdCQUFnQixFQUFFO1lBQ3ZCLElBQUksQ0FBQ0EsZ0JBQWdCLENBQUN0QixRQUFRLENBQUM7Z0JBQUVoSSxJQUFJLEVBQUUsa0JBQWtCO2FBQUUsQ0FBQyxDQUFDO1NBQ2hFO0tBQ0osQ0FBQztJQUNGc1Isd0JBQXVCLENBQUNwYyxTQUFTLENBQUMwYyxtQkFBbUIsR0FBRyxTQUFVN1csRUFBRSxFQUFFdU8sZ0JBQWdCLEVBQUU7UUFDcEYsSUFBSTZJLFVBQVUsR0FBRzdJLGdCQUFnQixDQUFDbkMsT0FBTyxDQUFDZ0wsVUFBVTtRQUNwRCxJQUFJLE9BQU9BLFVBQVUsS0FBSyxVQUFVLEVBQUU7WUFDbEMsT0FBT0EsVUFBVSxDQUFDaFosSUFBSSxDQUFDbVEsZ0JBQWdCLENBQUN4QyxXQUFXLEVBQUUvTCxFQUFFLENBQUMsQ0FBQztTQUM1RDtRQUNELElBQUksT0FBT29YLFVBQVUsS0FBSyxRQUFRLElBQUlBLFVBQVUsRUFBRTtZQUM5QyxPQUFPL00sT0FBTyxDQUFDalUsTUFBTSxDQUFDaWhCLGNBQWMsQ0FBQ3JYLEVBQUUsRUFBRW9YLFVBQVUsQ0FBQyxDQUFDLENBQUM7U0FDekQ7UUFDRCxPQUFPLElBQUksQ0FBQztLQUNmLENBQUM7SUFDRixPQUFPYix3QkFBdUIsQ0FBQztDQUNsQyxFQUFFO0FBQ0gsb0RBQW9EO0FBQ3BELHVHQUF1RztBQUN2RyxTQUFTTyx1QkFBdUIsQ0FBQ2hOLFFBQVEsRUFBRTRNLFFBQVEsRUFBRXhNLE9BQU8sRUFBRTtJQUMxRCxJQUFJb04sUUFBUSxHQUFHaGhCLEtBQUssQ0FBQ3NVLFFBQVEsQ0FBQyxFQUFFLEVBQUU4TCxRQUFRLENBQUNhLGFBQWEsQ0FBQztJQUN6RCxJQUFLLElBQUl2VixFQUFFLEdBQUcsQ0FBQyxFQUFFQyxFQUFFLEdBQUdpSSxPQUFPLENBQUNPLFdBQVcsQ0FBQytNLHFCQUFxQixFQUFFeFYsRUFBRSxHQUFHQyxFQUFFLENBQUNwSCxNQUFNLEVBQUVtSCxFQUFFLEVBQUUsQ0FBRTtRQUNuRixJQUFJMkksU0FBUyxHQUFHMUksRUFBRSxDQUFDRCxFQUFFLENBQUM7UUFDdEIxTCxLQUFLLENBQUNzVSxRQUFRLENBQUMwTSxRQUFRLEVBQUUzTSxTQUFTLENBQUNiLFFBQVEsRUFBRTRNLFFBQVEsQ0FBQyxDQUFDLENBQUM7S0FDM0Q7SUFDRCxJQUFJekUsRUFBRSxHQUFHN2IsTUFBTSxDQUFDcWhCLGNBQWMsQ0FBQ0gsUUFBUSxFQUFFcE4sT0FBTyxDQUFDLEVBQUV3TixPQUFPLEdBQUd6RixFQUFFLENBQUN5RixPQUFPLEVBQUVDLEtBQUssR0FBRzFGLEVBQUUsQ0FBQzBGLEtBQUs7SUFDekYsSUFBSTlILEdBQUcsR0FBR3paLE1BQU0sQ0FBQ3doQixhQUFhLENBQUNGLE9BQU8sRUFBRUMsS0FBSyxFQUFFakIsUUFBUSxDQUFDbUIsUUFBUSxFQUFFL04sUUFBUSxDQUFDdUIsTUFBTSxFQUFFbkIsT0FBTyxDQUFDa0MsT0FBTyxDQUFDMEwsa0JBQWtCLElBQUl6TixPQUFPLENBQUNxTSxRQUFRLENBQUNxQixRQUFRLENBQUMsRUFDbko3TixPQUFPLENBQUM7SUFDUixJQUFJdE8sS0FBSyxHQUFHa08sUUFBUSxDQUFDQyxLQUFLLENBQUNuTyxLQUFLO0lBQ2hDLGtEQUFrRDtJQUNsRCxzQ0FBc0M7SUFDdEMsSUFBSWtPLFFBQVEsQ0FBQ3VCLE1BQU0sSUFBSXFMLFFBQVEsQ0FBQ3NCLFNBQVMsRUFBRTtRQUN2Q3BjLEtBQUssR0FBR3NPLE9BQU8sQ0FBQ1ksT0FBTyxDQUFDek4sR0FBRyxDQUFDekIsS0FBSyxFQUFFOGEsUUFBUSxDQUFDc0IsU0FBUyxDQUFDLENBQUM7S0FDMUQ7SUFDRCxJQUFJbkssR0FBRyxHQUFHNkksUUFBUSxDQUFDcUIsUUFBUSxHQUN2QjdOLE9BQU8sQ0FBQ1ksT0FBTyxDQUFDek4sR0FBRyxDQUFDekIsS0FBSyxFQUFFOGEsUUFBUSxDQUFDcUIsUUFBUSxDQUFDLEdBQzdDM2hCLE1BQU0sQ0FBQzZoQixrQkFBa0IsQ0FBQ25PLFFBQVEsQ0FBQ3VCLE1BQU0sRUFBRXpQLEtBQUssRUFBRXNPLE9BQU8sQ0FBQztJQUM5RCxJQUFJNEUsUUFBUSxHQUFHMVksTUFBTSxDQUFDOGhCLG1CQUFtQixDQUFDckksR0FBRyxDQUFDNEIsS0FBSyxFQUFFO1FBQUU3VixLQUFLLEVBQUVBLEtBQUs7UUFBRWlTLEdBQUcsRUFBRUEsR0FBRztLQUFFLENBQUM7SUFDaEYsT0FBTztRQUFFZ0MsR0FBRyxFQUFFQSxHQUFHO1FBQUVmLFFBQVEsRUFBRUEsUUFBUTtLQUFFLENBQUM7Q0FDM0M7QUFDRCx5Q0FBeUM7QUFDekMsdUdBQXVHO0FBQ3ZHLFNBQVNxSSxpQkFBaUIsQ0FBQ25YLEVBQUUsRUFBRTtJQUMzQixJQUFJbVksR0FBRyxHQUFHQyxpQkFBaUIsQ0FBQ3BZLEVBQUUsRUFBRSxPQUFPLENBQUM7SUFDeEMsSUFBSXFZLEdBQUcsR0FBR0YsR0FBRyxHQUNURyxJQUFJLENBQUNDLEtBQUssQ0FBQ0osR0FBRyxDQUFDLEdBQ2Y7UUFBRXZCLE1BQU0sRUFBRSxLQUFLO0tBQUUsRUFBRSxnREFBZ0Q7SUFDdkUsT0FBT3hnQixNQUFNLENBQUM4Z0IsYUFBYSxDQUFDbUIsR0FBRyxDQUFDLENBQUM7Q0FDcEM7QUFDRGppQixNQUFNLENBQUNHLE1BQU0sQ0FBQ2lpQixjQUFjLEdBQUcsRUFBRSxDQUFDO0FBQ2xDLFNBQVNKLGlCQUFpQixDQUFDcFksRUFBRSxFQUFFeUMsSUFBSSxFQUFFO0lBQ2pDLElBQUlnVyxNQUFNLEdBQUdyaUIsTUFBTSxDQUFDRyxNQUFNLENBQUNpaUIsY0FBYztJQUN6QyxJQUFJRSxZQUFZLEdBQUcsQ0FBQ0QsTUFBTSxHQUFHQSxNQUFNLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHaFcsSUFBSTtJQUN0RCxPQUFPekMsRUFBRSxDQUFDMlksWUFBWSxDQUFDLE9BQU8sR0FBR0QsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDO0NBQ3hEO0FBRUQ7Ozs7RUFJRSxDQUNGLElBQUlFLGlCQUFpQixHQUFHLGFBQWEsQ0FBRSxXQUFZO0lBQy9DLFNBQVNBLGtCQUFpQixDQUFDNVksRUFBRSxFQUFFdUwsUUFBUSxFQUFFO1FBQ3JDLElBQUl6VSxLQUFLLEdBQUcsSUFBSTtRQUNoQixJQUFJeVUsUUFBUSxLQUFLLEtBQUssQ0FBQyxFQUFFO1lBQUVBLFFBQVEsR0FBRyxFQUFFLENBQUM7U0FBRTtRQUMzQyxJQUFJLENBQUNoRSxpQkFBaUIsR0FBRyxTQUFVL1AsRUFBRSxFQUFFO1lBQ25DLElBQUl3UCxRQUFRLEdBQUdsUSxLQUFLLENBQUNrUSxRQUFRO1lBQzdCLElBQUkvRSxFQUFFLEdBQUduTCxLQUFLLENBQUN5VSxRQUFRLEVBQUV0SCxXQUFXLEdBQUdoQyxFQUFFLENBQUNnQyxXQUFXLEVBQUV3SixjQUFjLEdBQUd4TCxFQUFFLENBQUN3TCxjQUFjO1lBQ3pGekcsUUFBUSxDQUFDL0MsV0FBVyxHQUNoQkEsV0FBVyxJQUFJLElBQUksR0FDZkEsV0FBVyxHQUNWek0sRUFBRSxDQUFDbUMsT0FBTyxHQUFHLENBQUMsR0FBR3ZELE1BQU0sQ0FBQ3lpQixvQkFBb0IsQ0FBQzFKLG9CQUFvQixDQUFFO1lBQzVFbkksUUFBUSxDQUFDaEQsS0FBSyxHQUNWeE0sRUFBRSxDQUFDbUMsT0FBTyxHQUNMOFQsY0FBYyxJQUFJLElBQUksR0FBR0EsY0FBYyxHQUFHclgsTUFBTSxDQUFDeWlCLG9CQUFvQixDQUFDcEwsY0FBYyxHQUNyRixDQUFDLENBQUM7U0FDYixDQUFDO1FBQ0YsSUFBSSxDQUFDL0YsZUFBZSxHQUFHLFNBQVVsUSxFQUFFLEVBQUU7WUFDakMsSUFBSUEsRUFBRSxDQUFDbUMsT0FBTyxJQUNWN0MsS0FBSyxDQUFDa1EsUUFBUSxDQUFDaEQsS0FBSyxJQUNwQnhNLEVBQUUsQ0FBQ1QsU0FBUyxDQUFDcUcsU0FBUyxDQUFDc1MsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFFO2dCQUM3QzVZLEtBQUssQ0FBQ2tRLFFBQVEsQ0FBQ3BDLE1BQU0sQ0FBQzFILFdBQVcsRUFBRSxDQUFDRSxTQUFTLENBQUNDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO2FBQzFFO1NBQ0osQ0FBQztRQUNGLElBQUksQ0FBQ2tPLFFBQVEsR0FBR0EsUUFBUSxDQUFDO1FBQ3pCLElBQUl2RSxTQUFRLEdBQUcsSUFBSSxDQUFDQSxRQUFRLEdBQUcsSUFBSWpELHlCQUF5QixDQUFDL0QsRUFBRSxDQUFDO1FBQ2hFZ0gsU0FBUSxDQUFDOUMsa0JBQWtCLEdBQUcsS0FBSyxDQUFDO1FBQ3BDLElBQUlxSCxRQUFRLENBQUN1TixZQUFZLElBQUksSUFBSSxFQUFFO1lBQy9COVIsU0FBUSxDQUFDckMsT0FBTyxDQUFDM04sUUFBUSxHQUFHdVUsUUFBUSxDQUFDdU4sWUFBWSxDQUFDO1NBQ3JEO1FBQ0QsSUFBSXZOLFFBQVEsQ0FBQ3dOLFFBQVEsSUFBSSxJQUFJLEVBQUU7WUFDM0IvUixTQUFRLENBQUNwQyxNQUFNLENBQUNwSixVQUFVLEdBQUcrUCxRQUFRLENBQUN3TixRQUFRLENBQUMsQ0FBQyxvQkFBb0I7U0FDdkU7UUFDRC9SLFNBQVEsQ0FBQ2xQLE9BQU8sQ0FBQzBOLEVBQUUsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDK0IsaUJBQWlCLENBQUMsQ0FBQztRQUMzRFAsU0FBUSxDQUFDbFAsT0FBTyxDQUFDME4sRUFBRSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUNrQyxlQUFlLENBQUMsQ0FBQztRQUN2RCxJQUFJNk8sdUJBQXVCLENBQUN2UCxTQUFRLEVBQUV1RSxRQUFRLENBQUN5TixTQUFTLENBQUMsQ0FBQyxDQUFDLDZCQUE2QjtLQUMzRjtJQUNESixrQkFBaUIsQ0FBQ3plLFNBQVMsQ0FBQ0MsT0FBTyxHQUFHLFdBQVk7UUFDOUMsSUFBSSxDQUFDNE0sUUFBUSxDQUFDNU0sT0FBTyxFQUFFLENBQUM7S0FDM0IsQ0FBQztJQUNGLE9BQU93ZSxrQkFBaUIsQ0FBQztDQUM1QixFQUFFO0FBRUg7Ozs7O0VBS0UsQ0FDRixJQUFJSyx1QkFBdUIsR0FBRyxhQUFhLENBQUUsU0FBVWpiLE1BQU0sRUFBRTtJQUMzRDFILEtBQUssQ0FBQzJILFNBQVMsQ0FBQ2diLHdCQUF1QixFQUFFamIsTUFBTSxDQUFDLENBQUM7SUFDakQsU0FBU2liLHdCQUF1QixDQUFDcGlCLFdBQVcsRUFBRTtRQUMxQyxJQUFJQyxLQUFLLEdBQUdrSCxNQUFNLENBQUNJLElBQUksQ0FBQyxJQUFJLEVBQUV2SCxXQUFXLENBQUMsSUFBSSxJQUFJO1FBQ2xEQyxLQUFLLENBQUNJLGdCQUFnQixHQUFHLEtBQUssQ0FBQztRQUMvQkosS0FBSyxDQUFDb2lCLGNBQWMsR0FBRyxFQUFFLENBQUM7UUFDMUJwaUIsS0FBSyxDQUFDcWlCLGVBQWUsR0FBRyxJQUFJLENBQUM7UUFDN0JyaUIsS0FBSyxDQUFDeVEsaUJBQWlCLEdBQUcsU0FBVS9QLEVBQUUsRUFBRTtZQUNwQ1YsS0FBSyxDQUFDZ0IsT0FBTyxDQUFDQyxPQUFPLENBQUMsYUFBYSxFQUFFUCxFQUFFLENBQUMsQ0FBQztZQUN6QyxJQUFJLENBQUNWLEtBQUssQ0FBQ0ksZ0JBQWdCLEVBQUU7Z0JBQ3pCLG9FQUFvRTtnQkFDcEVKLEtBQUssQ0FBQ2dCLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDLFdBQVcsRUFBRVAsRUFBRSxDQUFDLENBQUM7YUFDMUM7U0FDSixDQUFDO1FBQ0ZWLEtBQUssQ0FBQ3NpQixpQkFBaUIsR0FBRyxTQUFVNWhCLEVBQUUsRUFBRTtZQUNwQyxJQUFJLENBQUNWLEtBQUssQ0FBQ0ksZ0JBQWdCLEVBQUU7Z0JBQ3pCSixLQUFLLENBQUNnQixPQUFPLENBQUNDLE9BQU8sQ0FBQyxVQUFVLEVBQUVQLEVBQUUsQ0FBQyxDQUFDO2FBQ3pDO1NBQ0osQ0FBQztRQUNGVixLQUFLLENBQUM4USxlQUFlLEdBQUcsU0FBVXBRLEVBQUUsRUFBRTtZQUNsQ1YsS0FBSyxDQUFDZ0IsT0FBTyxDQUFDQyxPQUFPLENBQUMsV0FBVyxFQUFFUCxFQUFFLENBQUMsQ0FBQztZQUN2QyxJQUFJLENBQUNWLEtBQUssQ0FBQ0ksZ0JBQWdCLEVBQUU7Z0JBQ3pCLCtEQUErRDtnQkFDL0RKLEtBQUssQ0FBQ2dCLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDLFNBQVMsRUFBRVAsRUFBRSxDQUFDLENBQUM7YUFDeEM7U0FDSixDQUFDO1FBQ0YsSUFBSW1OLE9BQU8sR0FBRzdOLEtBQUssQ0FBQzZOLE9BQU8sR0FBRyxJQUFJL04sZUFBZSxDQUFDQyxXQUFXLENBQUM7UUFDOUQ4TixPQUFPLENBQUM3TSxPQUFPLENBQUMwTixFQUFFLENBQUMsYUFBYSxFQUFFMU8sS0FBSyxDQUFDeVEsaUJBQWlCLENBQUMsQ0FBQztRQUMzRDVDLE9BQU8sQ0FBQzdNLE9BQU8sQ0FBQzBOLEVBQUUsQ0FBQyxhQUFhLEVBQUUxTyxLQUFLLENBQUNzaUIsaUJBQWlCLENBQUMsQ0FBQztRQUMzRHpVLE9BQU8sQ0FBQzdNLE9BQU8sQ0FBQzBOLEVBQUUsQ0FBQyxXQUFXLEVBQUUxTyxLQUFLLENBQUM4USxlQUFlLENBQUMsQ0FBQztRQUN2RCxPQUFPOVEsS0FBSyxDQUFDO0tBQ2hCO0lBQ0RtaUIsd0JBQXVCLENBQUM5ZSxTQUFTLENBQUNDLE9BQU8sR0FBRyxXQUFZO1FBQ3BELElBQUksQ0FBQ3VLLE9BQU8sQ0FBQ3ZLLE9BQU8sRUFBRSxDQUFDO0tBQzFCLENBQUM7SUFDRjZlLHdCQUF1QixDQUFDOWUsU0FBUyxDQUFDMEwsYUFBYSxHQUFHLFNBQVUxSixJQUFJLEVBQUU7UUFDOUQsSUFBSSxDQUFDakYsZ0JBQWdCLEdBQUdpRixJQUFJLENBQUM7S0FDaEMsQ0FBQztJQUNGOGMsd0JBQXVCLENBQUM5ZSxTQUFTLENBQUMyTCxrQkFBa0IsR0FBRyxTQUFVM0osSUFBSSxFQUFFO1FBQ25FLElBQUlBLElBQUksRUFBRTtZQUNOLHVDQUF1QztZQUN2Qyx5RUFBeUU7WUFDekUsSUFBSSxJQUFJLENBQUNnZCxlQUFlLEVBQUU7Z0JBQ3RCLElBQUksQ0FBQ0EsZUFBZSxDQUFDL2MsS0FBSyxDQUFDbUIsVUFBVSxHQUFHLEVBQUUsQ0FBQztnQkFDM0MsSUFBSSxDQUFDNGIsZUFBZSxHQUFHLElBQUksQ0FBQzthQUMvQjtTQUNKLE1BQ0k7WUFDRCxJQUFJN2QsUUFBUSxHQUFHLElBQUksQ0FBQzRkLGNBQWMsR0FFNUJqaEIsUUFBUSxDQUFDNFksYUFBYSxDQUFDLElBQUksQ0FBQ3FJLGNBQWMsQ0FBQyxHQUMzQyxJQUFJO1lBQ1YsSUFBSTVkLFFBQVEsRUFBRTtnQkFDVixJQUFJLENBQUM2ZCxlQUFlLEdBQUc3ZCxRQUFRLENBQUM7Z0JBQ2hDQSxRQUFRLENBQUNjLEtBQUssQ0FBQ21CLFVBQVUsR0FBRyxRQUFRLENBQUM7YUFDeEM7U0FDSjtLQUNKLENBQUM7SUFDRixPQUFPMGIsd0JBQXVCLENBQUM7Q0FDbEMsQ0FBQzdpQixNQUFNLENBQUM2UCxlQUFlLENBQUM7QUFFekI7OztFQUdFLENBQ0YsSUFBSW9ULG1CQUFtQixHQUFHLGFBQWEsQ0FBRSxXQUFZO0lBQ2pELFNBQVNBLG9CQUFtQixDQUFDQyxtQkFBbUIsRUFBRS9OLFFBQVEsRUFBRTtRQUN4RCxJQUFJMVUsV0FBVyxHQUFHb0IsUUFBUTtRQUMxQixJQUNBLDJFQUEyRTtRQUMzRXFoQixtQkFBbUIsS0FBS3JoQixRQUFRLElBQzVCcWhCLG1CQUFtQixZQUFZQyxPQUFPLEVBQUU7WUFDeEMxaUIsV0FBVyxHQUFHeWlCLG1CQUFtQixDQUFDO1lBQ2xDL04sUUFBUSxHQUFHQSxRQUFRLElBQUksRUFBRSxDQUFDO1NBQzdCLE1BQ0k7WUFDREEsUUFBUSxHQUFJK04sbUJBQW1CLElBQUksRUFBRSxDQUFFO1NBQzFDO1FBQ0QsSUFBSXRTLFFBQVEsR0FBRyxJQUFJLENBQUNBLFFBQVEsR0FBRyxJQUFJaVMsdUJBQXVCLENBQUNwaUIsV0FBVyxDQUFDO1FBQ3ZFLElBQUksT0FBTzBVLFFBQVEsQ0FBQ3VOLFlBQVksS0FBSyxRQUFRLEVBQUU7WUFDM0M5UixRQUFRLENBQUNyQyxPQUFPLENBQUMzTixRQUFRLEdBQUd1VSxRQUFRLENBQUN1TixZQUFZLENBQUM7U0FDckQsTUFDSSxJQUFJamlCLFdBQVcsS0FBS29CLFFBQVEsRUFBRTtZQUMvQitPLFFBQVEsQ0FBQ3JDLE9BQU8sQ0FBQzNOLFFBQVEsR0FBRyxjQUFjLENBQUM7U0FDOUM7UUFDRCxJQUFJLE9BQU91VSxRQUFRLENBQUMyTixjQUFjLEtBQUssUUFBUSxFQUFFO1lBQzdDbFMsUUFBUSxDQUFDa1MsY0FBYyxHQUFHM04sUUFBUSxDQUFDMk4sY0FBYyxDQUFDO1NBQ3JEO1FBQ0QsSUFBSTNDLHVCQUF1QixDQUFDdlAsUUFBUSxFQUFFdUUsUUFBUSxDQUFDeU4sU0FBUyxDQUFDLENBQUMsQ0FBQyw2QkFBNkI7S0FDM0Y7SUFDREssb0JBQW1CLENBQUNsZixTQUFTLENBQUNDLE9BQU8sR0FBRyxXQUFZO1FBQ2hELElBQUksQ0FBQzRNLFFBQVEsQ0FBQzVNLE9BQU8sRUFBRSxDQUFDO0tBQzNCLENBQUM7SUFDRixPQUFPaWYsb0JBQW1CLENBQUM7Q0FDOUIsRUFBRTtBQUVILElBQUlHLElBQUksR0FBR3BqQixNQUFNLENBQUNxakIsWUFBWSxDQUFDO0lBQzNCQyxxQkFBcUIsRUFBRTtRQUFDcE8sWUFBWTtRQUFFWSxhQUFhO1FBQUVpQyxhQUFhO1FBQUU0RixhQUFhO0tBQUM7SUFDbEY0RixvQkFBb0IsRUFBRTtRQUFDaEYsWUFBWTtLQUFDO0lBQ3BDaUYsbUJBQW1CLEVBQUU3Vix5QkFBeUI7SUFDOUM4VixjQUFjLEVBQUVuRSxlQUFlO0lBQy9Cb0UsZ0JBQWdCLEVBQUVsRSxpQkFBaUI7Q0FDdEMsQ0FBQztBQUVGMWYsaUJBQWlCLEdBQUcwaUIsaUJBQWlCLENBQUM7QUFDdEMxaUIsaUNBQWlDLEdBQUc2Tix5QkFBeUIsQ0FBQztBQUM5RDdOLHVCQUF1QixHQUFHVSxlQUFlLENBQUM7QUFDMUNWLDJCQUEyQixHQUFHbWpCLG1CQUFtQixDQUFDO0FBQ2xEbmpCLGtCQUFlLEdBQUdzakIsSUFBSSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG9uZ2p1bmUvLi9ub2RlX21vZHVsZXMvQGZ1bGxjYWxlbmRhci9pbnRlcmFjdGlvbi9tYWluLmNqcy5qcz85OGY1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuRnVsbENhbGVuZGFyIHY1LjEwLjJcbkRvY3MgJiBMaWNlbnNlOiBodHRwczovL2Z1bGxjYWxlbmRhci5pby9cbihjKSAyMDIxIEFkYW0gU2hhd1xuKi9cbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxudmFyIGNvbW1vbiA9IHJlcXVpcmUoJ0BmdWxsY2FsZW5kYXIvY29tbW9uJyk7XG52YXIgdHNsaWIgPSByZXF1aXJlKCd0c2xpYicpO1xuXG5jb21tb24uY29uZmlnLnRvdWNoTW91c2VJZ25vcmVXYWl0ID0gNTAwO1xudmFyIGlnbm9yZU1vdXNlRGVwdGggPSAwO1xudmFyIGxpc3RlbmVyQ250ID0gMDtcbnZhciBpc1dpbmRvd1RvdWNoTW92ZUNhbmNlbGxlZCA9IGZhbHNlO1xuLypcblVzZXMgYSBcInBvaW50ZXJcIiBhYnN0cmFjdGlvbiwgd2hpY2ggbW9uaXRvcnMgVUkgZXZlbnRzIGZvciBib3RoIG1vdXNlIGFuZCB0b3VjaC5cblRyYWNrcyB3aGVuIHRoZSBwb2ludGVyIFwiZHJhZ3NcIiBvbiBhIGNlcnRhaW4gZWxlbWVudCwgbWVhbmluZyBkb3duK21vdmUrdXAuXG5cbkFsc28sIHRyYWNrcyBpZiB0aGVyZSB3YXMgdG91Y2gtc2Nyb2xsaW5nLlxuQWxzbywgY2FuIHByZXZlbnQgdG91Y2gtc2Nyb2xsaW5nIGZyb20gaGFwcGVuaW5nLlxuQWxzbywgY2FuIGZpcmUgcG9pbnRlcm1vdmUgZXZlbnRzIHdoZW4gc2Nyb2xsaW5nIGhhcHBlbnMgdW5kZXJuZWF0aCwgZXZlbiB3aGVuIG5vIHJlYWwgcG9pbnRlciBtb3ZlbWVudC5cblxuZW1pdHM6XG4tIHBvaW50ZXJkb3duXG4tIHBvaW50ZXJtb3ZlXG4tIHBvaW50ZXJ1cFxuKi9cbnZhciBQb2ludGVyRHJhZ2dpbmcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUG9pbnRlckRyYWdnaW5nKGNvbnRhaW5lckVsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuc3ViamVjdEVsID0gbnVsbDtcbiAgICAgICAgLy8gb3B0aW9ucyB0aGF0IGNhbiBiZSBkaXJlY3RseSBhc3NpZ25lZCBieSBjYWxsZXJcbiAgICAgICAgdGhpcy5zZWxlY3RvciA9ICcnOyAvLyB3aWxsIGNhdXNlIHN1YmplY3RFbCBpbiBhbGwgZW1pdHRlZCBldmVudHMgdG8gYmUgdGhpcyBlbGVtZW50XG4gICAgICAgIHRoaXMuaGFuZGxlU2VsZWN0b3IgPSAnJztcbiAgICAgICAgdGhpcy5zaG91bGRJZ25vcmVNb3ZlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2hvdWxkV2F0Y2hTY3JvbGwgPSB0cnVlOyAvLyBmb3Igc2ltdWxhdGluZyBwb2ludGVybW92ZSBvbiBzY3JvbGxcbiAgICAgICAgLy8gaW50ZXJuYWwgc3RhdGVzXG4gICAgICAgIHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzVG91Y2hEcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLndhc1RvdWNoU2Nyb2xsID0gZmFsc2U7XG4gICAgICAgIC8vIE1vdXNlXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgdGhpcy5oYW5kbGVNb3VzZURvd24gPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIGlmICghX3RoaXMuc2hvdWxkSWdub3JlTW91c2UoKSAmJlxuICAgICAgICAgICAgICAgIGlzUHJpbWFyeU1vdXNlQnV0dG9uKGV2KSAmJlxuICAgICAgICAgICAgICAgIF90aGlzLnRyeVN0YXJ0KGV2KSkge1xuICAgICAgICAgICAgICAgIHZhciBwZXYgPSBfdGhpcy5jcmVhdGVFdmVudEZyb21Nb3VzZShldiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgX3RoaXMuZW1pdHRlci50cmlnZ2VyKCdwb2ludGVyZG93bicsIHBldik7XG4gICAgICAgICAgICAgICAgX3RoaXMuaW5pdFNjcm9sbFdhdGNoKHBldik7XG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5zaG91bGRJZ25vcmVNb3ZlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIF90aGlzLmhhbmRsZU1vdXNlTW92ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBfdGhpcy5oYW5kbGVNb3VzZVVwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVNb3VzZU1vdmUgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBwZXYgPSBfdGhpcy5jcmVhdGVFdmVudEZyb21Nb3VzZShldik7XG4gICAgICAgICAgICBfdGhpcy5yZWNvcmRDb29yZHMocGV2KTtcbiAgICAgICAgICAgIF90aGlzLmVtaXR0ZXIudHJpZ2dlcigncG9pbnRlcm1vdmUnLCBwZXYpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmhhbmRsZU1vdXNlVXAgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIF90aGlzLmhhbmRsZU1vdXNlTW92ZSk7XG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgX3RoaXMuaGFuZGxlTW91c2VVcCk7XG4gICAgICAgICAgICBfdGhpcy5lbWl0dGVyLnRyaWdnZXIoJ3BvaW50ZXJ1cCcsIF90aGlzLmNyZWF0ZUV2ZW50RnJvbU1vdXNlKGV2KSk7XG4gICAgICAgICAgICBfdGhpcy5jbGVhbnVwKCk7IC8vIGNhbGwgbGFzdCBzbyB0aGF0IHBvaW50ZXJ1cCBoYXMgYWNjZXNzIHRvIHByb3BzXG4gICAgICAgIH07XG4gICAgICAgIC8vIFRvdWNoXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgdGhpcy5oYW5kbGVUb3VjaFN0YXJ0ID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMudHJ5U3RhcnQoZXYpKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuaXNUb3VjaERyYWdnaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB2YXIgcGV2ID0gX3RoaXMuY3JlYXRlRXZlbnRGcm9tVG91Y2goZXYsIHRydWUpO1xuICAgICAgICAgICAgICAgIF90aGlzLmVtaXR0ZXIudHJpZ2dlcigncG9pbnRlcmRvd24nLCBwZXYpO1xuICAgICAgICAgICAgICAgIF90aGlzLmluaXRTY3JvbGxXYXRjaChwZXYpO1xuICAgICAgICAgICAgICAgIC8vIHVubGlrZSBtb3VzZSwgbmVlZCB0byBhdHRhY2ggdG8gdGFyZ2V0LCBub3QgZG9jdW1lbnRcbiAgICAgICAgICAgICAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNDU3NjAwMTRcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0RWwgPSBldi50YXJnZXQ7XG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5zaG91bGRJZ25vcmVNb3ZlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldEVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIF90aGlzLmhhbmRsZVRvdWNoTW92ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRhcmdldEVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgX3RoaXMuaGFuZGxlVG91Y2hFbmQpO1xuICAgICAgICAgICAgICAgIHRhcmdldEVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoY2FuY2VsJywgX3RoaXMuaGFuZGxlVG91Y2hFbmQpOyAvLyB0cmVhdCBpdCBhcyBhIHRvdWNoIGVuZFxuICAgICAgICAgICAgICAgIC8vIGF0dGFjaCBhIGhhbmRsZXIgdG8gZ2V0IGNhbGxlZCB3aGVuIEFOWSBzY3JvbGwgYWN0aW9uIGhhcHBlbnMgb24gdGhlIHBhZ2UuXG4gICAgICAgICAgICAgICAgLy8gdGhpcyB3YXMgaW1wb3NzaWJsZSB0byBkbyB3aXRoIG5vcm1hbCBvbi9vZmYgYmVjYXVzZSAnc2Nyb2xsJyBkb2Vzbid0IGJ1YmJsZS5cbiAgICAgICAgICAgICAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zMjk1NDU2NS85NjM0MlxuICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBfdGhpcy5oYW5kbGVUb3VjaFNjcm9sbCwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGFuZGxlVG91Y2hNb3ZlID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgcGV2ID0gX3RoaXMuY3JlYXRlRXZlbnRGcm9tVG91Y2goZXYpO1xuICAgICAgICAgICAgX3RoaXMucmVjb3JkQ29vcmRzKHBldik7XG4gICAgICAgICAgICBfdGhpcy5lbWl0dGVyLnRyaWdnZXIoJ3BvaW50ZXJtb3ZlJywgcGV2KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVUb3VjaEVuZCA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgaWYgKF90aGlzLmlzRHJhZ2dpbmcpIHsgLy8gZG9uZSB0byBndWFyZCBhZ2FpbnN0IHRvdWNoZW5kIGZvbGxvd2VkIGJ5IHRvdWNoY2FuY2VsXG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldEVsID0gZXYudGFyZ2V0O1xuICAgICAgICAgICAgICAgIHRhcmdldEVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIF90aGlzLmhhbmRsZVRvdWNoTW92ZSk7XG4gICAgICAgICAgICAgICAgdGFyZ2V0RWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBfdGhpcy5oYW5kbGVUb3VjaEVuZCk7XG4gICAgICAgICAgICAgICAgdGFyZ2V0RWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hjYW5jZWwnLCBfdGhpcy5oYW5kbGVUb3VjaEVuZCk7XG4gICAgICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIF90aGlzLmhhbmRsZVRvdWNoU2Nyb2xsLCB0cnVlKTsgLy8gdXNlQ2FwdHVyZWQ9dHJ1ZVxuICAgICAgICAgICAgICAgIF90aGlzLmVtaXR0ZXIudHJpZ2dlcigncG9pbnRlcnVwJywgX3RoaXMuY3JlYXRlRXZlbnRGcm9tVG91Y2goZXYpKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5jbGVhbnVwKCk7IC8vIGNhbGwgbGFzdCBzbyB0aGF0IHBvaW50ZXJ1cCBoYXMgYWNjZXNzIHRvIHByb3BzXG4gICAgICAgICAgICAgICAgX3RoaXMuaXNUb3VjaERyYWdnaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgc3RhcnRJZ25vcmluZ01vdXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGFuZGxlVG91Y2hTY3JvbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy53YXNUb3VjaFNjcm9sbCA9IHRydWU7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGFuZGxlU2Nyb2xsID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICBpZiAoIV90aGlzLnNob3VsZElnbm9yZU1vdmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFnZVggPSAod2luZG93LnBhZ2VYT2Zmc2V0IC0gX3RoaXMucHJldlNjcm9sbFgpICsgX3RoaXMucHJldlBhZ2VYO1xuICAgICAgICAgICAgICAgIHZhciBwYWdlWSA9ICh3aW5kb3cucGFnZVlPZmZzZXQgLSBfdGhpcy5wcmV2U2Nyb2xsWSkgKyBfdGhpcy5wcmV2UGFnZVk7XG4gICAgICAgICAgICAgICAgX3RoaXMuZW1pdHRlci50cmlnZ2VyKCdwb2ludGVybW92ZScsIHtcbiAgICAgICAgICAgICAgICAgICAgb3JpZ0V2ZW50OiBldixcbiAgICAgICAgICAgICAgICAgICAgaXNUb3VjaDogX3RoaXMuaXNUb3VjaERyYWdnaW5nLFxuICAgICAgICAgICAgICAgICAgICBzdWJqZWN0RWw6IF90aGlzLnN1YmplY3RFbCxcbiAgICAgICAgICAgICAgICAgICAgcGFnZVg6IHBhZ2VYLFxuICAgICAgICAgICAgICAgICAgICBwYWdlWTogcGFnZVksXG4gICAgICAgICAgICAgICAgICAgIGRlbHRhWDogcGFnZVggLSBfdGhpcy5vcmlnUGFnZVgsXG4gICAgICAgICAgICAgICAgICAgIGRlbHRhWTogcGFnZVkgLSBfdGhpcy5vcmlnUGFnZVksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwgPSBjb250YWluZXJFbDtcbiAgICAgICAgdGhpcy5lbWl0dGVyID0gbmV3IGNvbW1vbi5FbWl0dGVyKCk7XG4gICAgICAgIGNvbnRhaW5lckVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMuaGFuZGxlTW91c2VEb3duKTtcbiAgICAgICAgY29udGFpbmVyRWwuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMuaGFuZGxlVG91Y2hTdGFydCwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuICAgICAgICBsaXN0ZW5lckNyZWF0ZWQoKTtcbiAgICB9XG4gICAgUG9pbnRlckRyYWdnaW5nLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmNvbnRhaW5lckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMuaGFuZGxlTW91c2VEb3duKTtcbiAgICAgICAgdGhpcy5jb250YWluZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5oYW5kbGVUb3VjaFN0YXJ0LCB7IHBhc3NpdmU6IHRydWUgfSk7XG4gICAgICAgIGxpc3RlbmVyRGVzdHJveWVkKCk7XG4gICAgfTtcbiAgICBQb2ludGVyRHJhZ2dpbmcucHJvdG90eXBlLnRyeVN0YXJ0ID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgIHZhciBzdWJqZWN0RWwgPSB0aGlzLnF1ZXJ5U3ViamVjdEVsKGV2KTtcbiAgICAgICAgdmFyIGRvd25FbCA9IGV2LnRhcmdldDtcbiAgICAgICAgaWYgKHN1YmplY3RFbCAmJlxuICAgICAgICAgICAgKCF0aGlzLmhhbmRsZVNlbGVjdG9yIHx8IGNvbW1vbi5lbGVtZW50Q2xvc2VzdChkb3duRWwsIHRoaXMuaGFuZGxlU2VsZWN0b3IpKSkge1xuICAgICAgICAgICAgdGhpcy5zdWJqZWN0RWwgPSBzdWJqZWN0RWw7XG4gICAgICAgICAgICB0aGlzLmlzRHJhZ2dpbmcgPSB0cnVlOyAvLyBkbyB0aGlzIGZpcnN0IHNvIGNhbmNlbFRvdWNoU2Nyb2xsIHdpbGwgd29ya1xuICAgICAgICAgICAgdGhpcy53YXNUb3VjaFNjcm9sbCA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgUG9pbnRlckRyYWdnaW5nLnByb3RvdHlwZS5jbGVhbnVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpc1dpbmRvd1RvdWNoTW92ZUNhbmNlbGxlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zdWJqZWN0RWwgPSBudWxsO1xuICAgICAgICAvLyBrZWVwIHdhc1RvdWNoU2Nyb2xsIGFyb3VuZCBmb3IgbGF0ZXIgYWNjZXNzXG4gICAgICAgIHRoaXMuZGVzdHJveVNjcm9sbFdhdGNoKCk7XG4gICAgfTtcbiAgICBQb2ludGVyRHJhZ2dpbmcucHJvdG90eXBlLnF1ZXJ5U3ViamVjdEVsID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdG9yKSB7XG4gICAgICAgICAgICByZXR1cm4gY29tbW9uLmVsZW1lbnRDbG9zZXN0KGV2LnRhcmdldCwgdGhpcy5zZWxlY3Rvcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyRWw7XG4gICAgfTtcbiAgICBQb2ludGVyRHJhZ2dpbmcucHJvdG90eXBlLnNob3VsZElnbm9yZU1vdXNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gaWdub3JlTW91c2VEZXB0aCB8fCB0aGlzLmlzVG91Y2hEcmFnZ2luZztcbiAgICB9O1xuICAgIC8vIGNhbiBiZSBjYWxsZWQgYnkgdXNlciBvZiB0aGlzIGNsYXNzLCB0byBjYW5jZWwgdG91Y2gtYmFzZWQgc2Nyb2xsaW5nIGZvciB0aGUgY3VycmVudCBkcmFnXG4gICAgUG9pbnRlckRyYWdnaW5nLnByb3RvdHlwZS5jYW5jZWxUb3VjaFNjcm9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNEcmFnZ2luZykge1xuICAgICAgICAgICAgaXNXaW5kb3dUb3VjaE1vdmVDYW5jZWxsZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBTY3JvbGxpbmcgdGhhdCBzaW11bGF0ZXMgcG9pbnRlcm1vdmVzXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIFBvaW50ZXJEcmFnZ2luZy5wcm90b3R5cGUuaW5pdFNjcm9sbFdhdGNoID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgIGlmICh0aGlzLnNob3VsZFdhdGNoU2Nyb2xsKSB7XG4gICAgICAgICAgICB0aGlzLnJlY29yZENvb3Jkcyhldik7XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5oYW5kbGVTY3JvbGwsIHRydWUpOyAvLyB1c2VDYXB0dXJlPXRydWVcbiAgICAgICAgfVxuICAgIH07XG4gICAgUG9pbnRlckRyYWdnaW5nLnByb3RvdHlwZS5yZWNvcmRDb29yZHMgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkV2F0Y2hTY3JvbGwpIHtcbiAgICAgICAgICAgIHRoaXMucHJldlBhZ2VYID0gZXYucGFnZVg7XG4gICAgICAgICAgICB0aGlzLnByZXZQYWdlWSA9IGV2LnBhZ2VZO1xuICAgICAgICAgICAgdGhpcy5wcmV2U2Nyb2xsWCA9IHdpbmRvdy5wYWdlWE9mZnNldDtcbiAgICAgICAgICAgIHRoaXMucHJldlNjcm9sbFkgPSB3aW5kb3cucGFnZVlPZmZzZXQ7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFBvaW50ZXJEcmFnZ2luZy5wcm90b3R5cGUuZGVzdHJveVNjcm9sbFdhdGNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5zaG91bGRXYXRjaFNjcm9sbCkge1xuICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuaGFuZGxlU2Nyb2xsLCB0cnVlKTsgLy8gdXNlQ2FwdHVyZWQ9dHJ1ZVxuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBFdmVudCBOb3JtYWxpemF0aW9uXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIFBvaW50ZXJEcmFnZ2luZy5wcm90b3R5cGUuY3JlYXRlRXZlbnRGcm9tTW91c2UgPSBmdW5jdGlvbiAoZXYsIGlzRmlyc3QpIHtcbiAgICAgICAgdmFyIGRlbHRhWCA9IDA7XG4gICAgICAgIHZhciBkZWx0YVkgPSAwO1xuICAgICAgICAvLyBUT0RPOiByZXBlYXQgY29kZVxuICAgICAgICBpZiAoaXNGaXJzdCkge1xuICAgICAgICAgICAgdGhpcy5vcmlnUGFnZVggPSBldi5wYWdlWDtcbiAgICAgICAgICAgIHRoaXMub3JpZ1BhZ2VZID0gZXYucGFnZVk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkZWx0YVggPSBldi5wYWdlWCAtIHRoaXMub3JpZ1BhZ2VYO1xuICAgICAgICAgICAgZGVsdGFZID0gZXYucGFnZVkgLSB0aGlzLm9yaWdQYWdlWTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgb3JpZ0V2ZW50OiBldixcbiAgICAgICAgICAgIGlzVG91Y2g6IGZhbHNlLFxuICAgICAgICAgICAgc3ViamVjdEVsOiB0aGlzLnN1YmplY3RFbCxcbiAgICAgICAgICAgIHBhZ2VYOiBldi5wYWdlWCxcbiAgICAgICAgICAgIHBhZ2VZOiBldi5wYWdlWSxcbiAgICAgICAgICAgIGRlbHRhWDogZGVsdGFYLFxuICAgICAgICAgICAgZGVsdGFZOiBkZWx0YVksXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBQb2ludGVyRHJhZ2dpbmcucHJvdG90eXBlLmNyZWF0ZUV2ZW50RnJvbVRvdWNoID0gZnVuY3Rpb24gKGV2LCBpc0ZpcnN0KSB7XG4gICAgICAgIHZhciB0b3VjaGVzID0gZXYudG91Y2hlcztcbiAgICAgICAgdmFyIHBhZ2VYO1xuICAgICAgICB2YXIgcGFnZVk7XG4gICAgICAgIHZhciBkZWx0YVggPSAwO1xuICAgICAgICB2YXIgZGVsdGFZID0gMDtcbiAgICAgICAgLy8gaWYgdG91Y2ggY29vcmRzIGF2YWlsYWJsZSwgcHJlZmVyLFxuICAgICAgICAvLyBiZWNhdXNlIEZGIHdvdWxkIGdpdmUgYmFkIGV2LnBhZ2VYIGV2LnBhZ2VZXG4gICAgICAgIGlmICh0b3VjaGVzICYmIHRvdWNoZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBwYWdlWCA9IHRvdWNoZXNbMF0ucGFnZVg7XG4gICAgICAgICAgICBwYWdlWSA9IHRvdWNoZXNbMF0ucGFnZVk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwYWdlWCA9IGV2LnBhZ2VYO1xuICAgICAgICAgICAgcGFnZVkgPSBldi5wYWdlWTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUT0RPOiByZXBlYXQgY29kZVxuICAgICAgICBpZiAoaXNGaXJzdCkge1xuICAgICAgICAgICAgdGhpcy5vcmlnUGFnZVggPSBwYWdlWDtcbiAgICAgICAgICAgIHRoaXMub3JpZ1BhZ2VZID0gcGFnZVk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkZWx0YVggPSBwYWdlWCAtIHRoaXMub3JpZ1BhZ2VYO1xuICAgICAgICAgICAgZGVsdGFZID0gcGFnZVkgLSB0aGlzLm9yaWdQYWdlWTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgb3JpZ0V2ZW50OiBldixcbiAgICAgICAgICAgIGlzVG91Y2g6IHRydWUsXG4gICAgICAgICAgICBzdWJqZWN0RWw6IHRoaXMuc3ViamVjdEVsLFxuICAgICAgICAgICAgcGFnZVg6IHBhZ2VYLFxuICAgICAgICAgICAgcGFnZVk6IHBhZ2VZLFxuICAgICAgICAgICAgZGVsdGFYOiBkZWx0YVgsXG4gICAgICAgICAgICBkZWx0YVk6IGRlbHRhWSxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiBQb2ludGVyRHJhZ2dpbmc7XG59KCkpO1xuLy8gUmV0dXJucyBhIGJvb2xlYW4gd2hldGhlciB0aGlzIHdhcyBhIGxlZnQgbW91c2UgY2xpY2sgYW5kIG5vIGN0cmwga2V5ICh3aGljaCBtZWFucyByaWdodCBjbGljayBvbiBNYWMpXG5mdW5jdGlvbiBpc1ByaW1hcnlNb3VzZUJ1dHRvbihldikge1xuICAgIHJldHVybiBldi5idXR0b24gPT09IDAgJiYgIWV2LmN0cmxLZXk7XG59XG4vLyBJZ25vcmluZyBmYWtlIG1vdXNlIGV2ZW50cyBnZW5lcmF0ZWQgYnkgdG91Y2hcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIHN0YXJ0SWdub3JpbmdNb3VzZSgpIHtcbiAgICBpZ25vcmVNb3VzZURlcHRoICs9IDE7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlnbm9yZU1vdXNlRGVwdGggLT0gMTtcbiAgICB9LCBjb21tb24uY29uZmlnLnRvdWNoTW91c2VJZ25vcmVXYWl0KTtcbn1cbi8vIFdlIHdhbnQgdG8gYXR0YWNoIHRvdWNobW92ZSBhcyBlYXJseSBhcyBwb3NzaWJsZSBmb3IgU2FmYXJpXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5mdW5jdGlvbiBsaXN0ZW5lckNyZWF0ZWQoKSB7XG4gICAgbGlzdGVuZXJDbnQgKz0gMTtcbiAgICBpZiAobGlzdGVuZXJDbnQgPT09IDEpIHtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9uV2luZG93VG91Y2hNb3ZlLCB7IHBhc3NpdmU6IGZhbHNlIH0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGxpc3RlbmVyRGVzdHJveWVkKCkge1xuICAgIGxpc3RlbmVyQ250IC09IDE7XG4gICAgaWYgKCFsaXN0ZW5lckNudCkge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgb25XaW5kb3dUb3VjaE1vdmUsIHsgcGFzc2l2ZTogZmFsc2UgfSk7XG4gICAgfVxufVxuZnVuY3Rpb24gb25XaW5kb3dUb3VjaE1vdmUoZXYpIHtcbiAgICBpZiAoaXNXaW5kb3dUb3VjaE1vdmVDYW5jZWxsZWQpIHtcbiAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG59XG5cbi8qXG5BbiBlZmZlY3QgaW4gd2hpY2ggYW4gZWxlbWVudCBmb2xsb3dzIHRoZSBtb3ZlbWVudCBvZiBhIHBvaW50ZXIgYWNyb3NzIHRoZSBzY3JlZW4uXG5UaGUgbW92aW5nIGVsZW1lbnQgaXMgYSBjbG9uZSBvZiBzb21lIG90aGVyIGVsZW1lbnQuXG5NdXN0IGNhbGwgc3RhcnQgKyBoYW5kbGVNb3ZlICsgc3RvcC5cbiovXG52YXIgRWxlbWVudE1pcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBFbGVtZW50TWlycm9yKCkge1xuICAgICAgICB0aGlzLmlzVmlzaWJsZSA9IGZhbHNlOyAvLyBtdXN0IGJlIGV4cGxpY2l0bHkgZW5hYmxlZFxuICAgICAgICB0aGlzLnNvdXJjZUVsID0gbnVsbDtcbiAgICAgICAgdGhpcy5taXJyb3JFbCA9IG51bGw7XG4gICAgICAgIHRoaXMuc291cmNlRWxSZWN0ID0gbnVsbDsgLy8gc2NyZWVuIGNvb3JkcyByZWxhdGl2ZSB0byB2aWV3cG9ydFxuICAgICAgICAvLyBvcHRpb25zIHRoYXQgY2FuIGJlIHNldCBkaXJlY3RseSBieSBjYWxsZXJcbiAgICAgICAgdGhpcy5wYXJlbnROb2RlID0gZG9jdW1lbnQuYm9keTsgLy8gSElHSExZIFNVR0dFU1RFRCB0byBzZXQgdGhpcyB0byBzaWRlc3RlcCBTaGFkb3dET00gaXNzdWVzXG4gICAgICAgIHRoaXMuekluZGV4ID0gOTk5OTtcbiAgICAgICAgdGhpcy5yZXZlcnREdXJhdGlvbiA9IDA7XG4gICAgfVxuICAgIEVsZW1lbnRNaXJyb3IucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKHNvdXJjZUVsLCBwYWdlWCwgcGFnZVkpIHtcbiAgICAgICAgdGhpcy5zb3VyY2VFbCA9IHNvdXJjZUVsO1xuICAgICAgICB0aGlzLnNvdXJjZUVsUmVjdCA9IHRoaXMuc291cmNlRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHRoaXMub3JpZ1NjcmVlblggPSBwYWdlWCAtIHdpbmRvdy5wYWdlWE9mZnNldDtcbiAgICAgICAgdGhpcy5vcmlnU2NyZWVuWSA9IHBhZ2VZIC0gd2luZG93LnBhZ2VZT2Zmc2V0O1xuICAgICAgICB0aGlzLmRlbHRhWCA9IDA7XG4gICAgICAgIHRoaXMuZGVsdGFZID0gMDtcbiAgICAgICAgdGhpcy51cGRhdGVFbFBvc2l0aW9uKCk7XG4gICAgfTtcbiAgICBFbGVtZW50TWlycm9yLnByb3RvdHlwZS5oYW5kbGVNb3ZlID0gZnVuY3Rpb24gKHBhZ2VYLCBwYWdlWSkge1xuICAgICAgICB0aGlzLmRlbHRhWCA9IChwYWdlWCAtIHdpbmRvdy5wYWdlWE9mZnNldCkgLSB0aGlzLm9yaWdTY3JlZW5YO1xuICAgICAgICB0aGlzLmRlbHRhWSA9IChwYWdlWSAtIHdpbmRvdy5wYWdlWU9mZnNldCkgLSB0aGlzLm9yaWdTY3JlZW5ZO1xuICAgICAgICB0aGlzLnVwZGF0ZUVsUG9zaXRpb24oKTtcbiAgICB9O1xuICAgIC8vIGNhbiBiZSBjYWxsZWQgYmVmb3JlIHN0YXJ0XG4gICAgRWxlbWVudE1pcnJvci5wcm90b3R5cGUuc2V0SXNWaXNpYmxlID0gZnVuY3Rpb24gKGJvb2wpIHtcbiAgICAgICAgaWYgKGJvb2wpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5pc1Zpc2libGUpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5taXJyb3JFbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1pcnJvckVsLnN0eWxlLmRpc3BsYXkgPSAnJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5pc1Zpc2libGUgPSBib29sOyAvLyBuZWVkcyB0byBoYXBwZW4gYmVmb3JlIHVwZGF0ZUVsUG9zaXRpb25cbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUVsUG9zaXRpb24oKTsgLy8gYmVjYXVzZSB3YXMgbm90IHVwZGF0aW5nIHRoZSBwb3NpdGlvbiB3aGlsZSBpbnZpc2libGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmlzVmlzaWJsZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMubWlycm9yRWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1pcnJvckVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmlzVmlzaWJsZSA9IGJvb2w7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIGFsd2F5cyBhc3luY1xuICAgIEVsZW1lbnRNaXJyb3IucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAobmVlZHNSZXZlcnRBbmltYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBkb25lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuY2xlYW51cCgpO1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKG5lZWRzUmV2ZXJ0QW5pbWF0aW9uICYmXG4gICAgICAgICAgICB0aGlzLm1pcnJvckVsICYmXG4gICAgICAgICAgICB0aGlzLmlzVmlzaWJsZSAmJlxuICAgICAgICAgICAgdGhpcy5yZXZlcnREdXJhdGlvbiAmJiAvLyBpZiAwLCB0cmFuc2l0aW9uIHdvbid0IHdvcmtcbiAgICAgICAgICAgICh0aGlzLmRlbHRhWCB8fCB0aGlzLmRlbHRhWSkgLy8gaWYgc2FtZSBjb29yZHMsIHRyYW5zaXRpb24gd29uJ3Qgd29ya1xuICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMuZG9SZXZlcnRBbmltYXRpb24oZG9uZSwgdGhpcy5yZXZlcnREdXJhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGRvbmUsIDApO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBFbGVtZW50TWlycm9yLnByb3RvdHlwZS5kb1JldmVydEFuaW1hdGlvbiA9IGZ1bmN0aW9uIChjYWxsYmFjaywgcmV2ZXJ0RHVyYXRpb24pIHtcbiAgICAgICAgdmFyIG1pcnJvckVsID0gdGhpcy5taXJyb3JFbDtcbiAgICAgICAgdmFyIGZpbmFsU291cmNlRWxSZWN0ID0gdGhpcy5zb3VyY2VFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsgLy8gYmVjYXVzZSBhdXRvc2Nyb2xsaW5nIG1pZ2h0IGhhdmUgaGFwcGVuZWRcbiAgICAgICAgbWlycm9yRWwuc3R5bGUudHJhbnNpdGlvbiA9XG4gICAgICAgICAgICAndG9wICcgKyByZXZlcnREdXJhdGlvbiArICdtcywnICtcbiAgICAgICAgICAgICAgICAnbGVmdCAnICsgcmV2ZXJ0RHVyYXRpb24gKyAnbXMnO1xuICAgICAgICBjb21tb24uYXBwbHlTdHlsZShtaXJyb3JFbCwge1xuICAgICAgICAgICAgbGVmdDogZmluYWxTb3VyY2VFbFJlY3QubGVmdCxcbiAgICAgICAgICAgIHRvcDogZmluYWxTb3VyY2VFbFJlY3QudG9wLFxuICAgICAgICB9KTtcbiAgICAgICAgY29tbW9uLndoZW5UcmFuc2l0aW9uRG9uZShtaXJyb3JFbCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbWlycm9yRWwuc3R5bGUudHJhbnNpdGlvbiA9ICcnO1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBFbGVtZW50TWlycm9yLnByb3RvdHlwZS5jbGVhbnVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5taXJyb3JFbCkge1xuICAgICAgICAgICAgY29tbW9uLnJlbW92ZUVsZW1lbnQodGhpcy5taXJyb3JFbCk7XG4gICAgICAgICAgICB0aGlzLm1pcnJvckVsID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNvdXJjZUVsID0gbnVsbDtcbiAgICB9O1xuICAgIEVsZW1lbnRNaXJyb3IucHJvdG90eXBlLnVwZGF0ZUVsUG9zaXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnNvdXJjZUVsICYmIHRoaXMuaXNWaXNpYmxlKSB7XG4gICAgICAgICAgICBjb21tb24uYXBwbHlTdHlsZSh0aGlzLmdldE1pcnJvckVsKCksIHtcbiAgICAgICAgICAgICAgICBsZWZ0OiB0aGlzLnNvdXJjZUVsUmVjdC5sZWZ0ICsgdGhpcy5kZWx0YVgsXG4gICAgICAgICAgICAgICAgdG9wOiB0aGlzLnNvdXJjZUVsUmVjdC50b3AgKyB0aGlzLmRlbHRhWSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBFbGVtZW50TWlycm9yLnByb3RvdHlwZS5nZXRNaXJyb3JFbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNvdXJjZUVsUmVjdCA9IHRoaXMuc291cmNlRWxSZWN0O1xuICAgICAgICB2YXIgbWlycm9yRWwgPSB0aGlzLm1pcnJvckVsO1xuICAgICAgICBpZiAoIW1pcnJvckVsKSB7XG4gICAgICAgICAgICBtaXJyb3JFbCA9IHRoaXMubWlycm9yRWwgPSB0aGlzLnNvdXJjZUVsLmNsb25lTm9kZSh0cnVlKTsgLy8gY2xvbmVDaGlsZHJlbj10cnVlXG4gICAgICAgICAgICAvLyB3ZSBkb24ndCB3YW50IGxvbmcgdGFwcyBvciBhbnkgbW91c2UgaW50ZXJhY3Rpb24gY2F1c2luZyBzZWxlY3Rpb24vbWVudXMuXG4gICAgICAgICAgICAvLyB3b3VsZCB1c2UgcHJldmVudFNlbGVjdGlvbigpLCBidXQgdGhhdCBwcmV2ZW50cyBzZWxlY3RzdGFydCwgY2F1c2luZyBwcm9ibGVtcy5cbiAgICAgICAgICAgIG1pcnJvckVsLmNsYXNzTGlzdC5hZGQoJ2ZjLXVuc2VsZWN0YWJsZScpO1xuICAgICAgICAgICAgbWlycm9yRWwuY2xhc3NMaXN0LmFkZCgnZmMtZXZlbnQtZHJhZ2dpbmcnKTtcbiAgICAgICAgICAgIGNvbW1vbi5hcHBseVN0eWxlKG1pcnJvckVsLCB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICAgICAgICAgICAgekluZGV4OiB0aGlzLnpJbmRleCxcbiAgICAgICAgICAgICAgICB2aXNpYmlsaXR5OiAnJyxcbiAgICAgICAgICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgICAgICAgICB3aWR0aDogc291cmNlRWxSZWN0LnJpZ2h0IC0gc291cmNlRWxSZWN0LmxlZnQsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBzb3VyY2VFbFJlY3QuYm90dG9tIC0gc291cmNlRWxSZWN0LnRvcCxcbiAgICAgICAgICAgICAgICByaWdodDogJ2F1dG8nLFxuICAgICAgICAgICAgICAgIGJvdHRvbTogJ2F1dG8nLFxuICAgICAgICAgICAgICAgIG1hcmdpbjogMCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5wYXJlbnROb2RlLmFwcGVuZENoaWxkKG1pcnJvckVsKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWlycm9yRWw7XG4gICAgfTtcbiAgICByZXR1cm4gRWxlbWVudE1pcnJvcjtcbn0oKSk7XG5cbi8qXG5JcyBhIGNhY2hlIGZvciBhIGdpdmVuIGVsZW1lbnQncyBzY3JvbGwgaW5mb3JtYXRpb24gKGFsbCB0aGUgaW5mbyB0aGF0IFNjcm9sbENvbnRyb2xsZXIgc3RvcmVzKVxuaW4gYWRkaXRpb24gdGhlIFwiY2xpZW50IHJlY3RhbmdsZVwiIG9mIHRoZSBlbGVtZW50Li4gdGhlIGFyZWEgd2l0aGluIHRoZSBzY3JvbGxiYXJzLlxuXG5UaGUgY2FjaGUgY2FuIGJlIGluIG9uZSBvZiB0d28gbW9kZXM6XG4tIGRvZXNMaXN0ZW5pbmc6ZmFsc2UgLSBpZ25vcmVzIHdoZW4gdGhlIGNvbnRhaW5lciBpcyBzY3JvbGxlZCBieSBzb21lb25lIGVsc2Vcbi0gZG9lc0xpc3RlbmluZzp0cnVlIC0gd2F0Y2ggZm9yIHNjcm9sbGluZyBhbmQgdXBkYXRlIHRoZSBjYWNoZVxuKi9cbnZhciBTY3JvbGxHZW9tQ2FjaGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWIuX19leHRlbmRzKFNjcm9sbEdlb21DYWNoZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTY3JvbGxHZW9tQ2FjaGUoc2Nyb2xsQ29udHJvbGxlciwgZG9lc0xpc3RlbmluZykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5oYW5kbGVTY3JvbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5zY3JvbGxUb3AgPSBfdGhpcy5zY3JvbGxDb250cm9sbGVyLmdldFNjcm9sbFRvcCgpO1xuICAgICAgICAgICAgX3RoaXMuc2Nyb2xsTGVmdCA9IF90aGlzLnNjcm9sbENvbnRyb2xsZXIuZ2V0U2Nyb2xsTGVmdCgpO1xuICAgICAgICAgICAgX3RoaXMuaGFuZGxlU2Nyb2xsQ2hhbmdlKCk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLnNjcm9sbENvbnRyb2xsZXIgPSBzY3JvbGxDb250cm9sbGVyO1xuICAgICAgICBfdGhpcy5kb2VzTGlzdGVuaW5nID0gZG9lc0xpc3RlbmluZztcbiAgICAgICAgX3RoaXMuc2Nyb2xsVG9wID0gX3RoaXMub3JpZ1Njcm9sbFRvcCA9IHNjcm9sbENvbnRyb2xsZXIuZ2V0U2Nyb2xsVG9wKCk7XG4gICAgICAgIF90aGlzLnNjcm9sbExlZnQgPSBfdGhpcy5vcmlnU2Nyb2xsTGVmdCA9IHNjcm9sbENvbnRyb2xsZXIuZ2V0U2Nyb2xsTGVmdCgpO1xuICAgICAgICBfdGhpcy5zY3JvbGxXaWR0aCA9IHNjcm9sbENvbnRyb2xsZXIuZ2V0U2Nyb2xsV2lkdGgoKTtcbiAgICAgICAgX3RoaXMuc2Nyb2xsSGVpZ2h0ID0gc2Nyb2xsQ29udHJvbGxlci5nZXRTY3JvbGxIZWlnaHQoKTtcbiAgICAgICAgX3RoaXMuY2xpZW50V2lkdGggPSBzY3JvbGxDb250cm9sbGVyLmdldENsaWVudFdpZHRoKCk7XG4gICAgICAgIF90aGlzLmNsaWVudEhlaWdodCA9IHNjcm9sbENvbnRyb2xsZXIuZ2V0Q2xpZW50SGVpZ2h0KCk7XG4gICAgICAgIF90aGlzLmNsaWVudFJlY3QgPSBfdGhpcy5jb21wdXRlQ2xpZW50UmVjdCgpOyAvLyBkbyBsYXN0IGluIGNhc2UgaXQgbmVlZHMgY2FjaGVkIHZhbHVlc1xuICAgICAgICBpZiAoX3RoaXMuZG9lc0xpc3RlbmluZykge1xuICAgICAgICAgICAgX3RoaXMuZ2V0RXZlbnRUYXJnZXQoKS5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBfdGhpcy5oYW5kbGVTY3JvbGwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU2Nyb2xsR2VvbUNhY2hlLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5kb2VzTGlzdGVuaW5nKSB7XG4gICAgICAgICAgICB0aGlzLmdldEV2ZW50VGFyZ2V0KCkucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5oYW5kbGVTY3JvbGwpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTY3JvbGxHZW9tQ2FjaGUucHJvdG90eXBlLmdldFNjcm9sbFRvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2Nyb2xsVG9wO1xuICAgIH07XG4gICAgU2Nyb2xsR2VvbUNhY2hlLnByb3RvdHlwZS5nZXRTY3JvbGxMZWZ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zY3JvbGxMZWZ0O1xuICAgIH07XG4gICAgU2Nyb2xsR2VvbUNhY2hlLnByb3RvdHlwZS5zZXRTY3JvbGxUb3AgPSBmdW5jdGlvbiAodG9wKSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsQ29udHJvbGxlci5zZXRTY3JvbGxUb3AodG9wKTtcbiAgICAgICAgaWYgKCF0aGlzLmRvZXNMaXN0ZW5pbmcpIHtcbiAgICAgICAgICAgIC8vIHdlIGFyZSBub3QgcmVseWluZyBvbiB0aGUgZWxlbWVudCB0byBub3JtYWxpemUgb3V0LW9mLWJvdW5kcyBzY3JvbGwgdmFsdWVzXG4gICAgICAgICAgICAvLyBzbyB3ZSBuZWVkIHRvIHNhbml0aXplIG91cnNlbHZlc1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxUb3AgPSBNYXRoLm1heChNYXRoLm1pbih0b3AsIHRoaXMuZ2V0TWF4U2Nyb2xsVG9wKCkpLCAwKTtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlU2Nyb2xsQ2hhbmdlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNjcm9sbEdlb21DYWNoZS5wcm90b3R5cGUuc2V0U2Nyb2xsTGVmdCA9IGZ1bmN0aW9uICh0b3ApIHtcbiAgICAgICAgdGhpcy5zY3JvbGxDb250cm9sbGVyLnNldFNjcm9sbExlZnQodG9wKTtcbiAgICAgICAgaWYgKCF0aGlzLmRvZXNMaXN0ZW5pbmcpIHtcbiAgICAgICAgICAgIC8vIHdlIGFyZSBub3QgcmVseWluZyBvbiB0aGUgZWxlbWVudCB0byBub3JtYWxpemUgb3V0LW9mLWJvdW5kcyBzY3JvbGwgdmFsdWVzXG4gICAgICAgICAgICAvLyBzbyB3ZSBuZWVkIHRvIHNhbml0aXplIG91cnNlbHZlc1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxMZWZ0ID0gTWF0aC5tYXgoTWF0aC5taW4odG9wLCB0aGlzLmdldE1heFNjcm9sbExlZnQoKSksIDApO1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVTY3JvbGxDaGFuZ2UoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2Nyb2xsR2VvbUNhY2hlLnByb3RvdHlwZS5nZXRDbGllbnRXaWR0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50V2lkdGg7XG4gICAgfTtcbiAgICBTY3JvbGxHZW9tQ2FjaGUucHJvdG90eXBlLmdldENsaWVudEhlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50SGVpZ2h0O1xuICAgIH07XG4gICAgU2Nyb2xsR2VvbUNhY2hlLnByb3RvdHlwZS5nZXRTY3JvbGxXaWR0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2Nyb2xsV2lkdGg7XG4gICAgfTtcbiAgICBTY3JvbGxHZW9tQ2FjaGUucHJvdG90eXBlLmdldFNjcm9sbEhlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2Nyb2xsSGVpZ2h0O1xuICAgIH07XG4gICAgU2Nyb2xsR2VvbUNhY2hlLnByb3RvdHlwZS5oYW5kbGVTY3JvbGxDaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgfTtcbiAgICByZXR1cm4gU2Nyb2xsR2VvbUNhY2hlO1xufShjb21tb24uU2Nyb2xsQ29udHJvbGxlcikpO1xuXG52YXIgRWxlbWVudFNjcm9sbEdlb21DYWNoZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYi5fX2V4dGVuZHMoRWxlbWVudFNjcm9sbEdlb21DYWNoZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBFbGVtZW50U2Nyb2xsR2VvbUNhY2hlKGVsLCBkb2VzTGlzdGVuaW5nKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBuZXcgY29tbW9uLkVsZW1lbnRTY3JvbGxDb250cm9sbGVyKGVsKSwgZG9lc0xpc3RlbmluZykgfHwgdGhpcztcbiAgICB9XG4gICAgRWxlbWVudFNjcm9sbEdlb21DYWNoZS5wcm90b3R5cGUuZ2V0RXZlbnRUYXJnZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNjcm9sbENvbnRyb2xsZXIuZWw7XG4gICAgfTtcbiAgICBFbGVtZW50U2Nyb2xsR2VvbUNhY2hlLnByb3RvdHlwZS5jb21wdXRlQ2xpZW50UmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGNvbW1vbi5jb21wdXRlSW5uZXJSZWN0KHRoaXMuc2Nyb2xsQ29udHJvbGxlci5lbCk7XG4gICAgfTtcbiAgICByZXR1cm4gRWxlbWVudFNjcm9sbEdlb21DYWNoZTtcbn0oU2Nyb2xsR2VvbUNhY2hlKSk7XG5cbnZhciBXaW5kb3dTY3JvbGxHZW9tQ2FjaGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWIuX19leHRlbmRzKFdpbmRvd1Njcm9sbEdlb21DYWNoZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBXaW5kb3dTY3JvbGxHZW9tQ2FjaGUoZG9lc0xpc3RlbmluZykge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgbmV3IGNvbW1vbi5XaW5kb3dTY3JvbGxDb250cm9sbGVyKCksIGRvZXNMaXN0ZW5pbmcpIHx8IHRoaXM7XG4gICAgfVxuICAgIFdpbmRvd1Njcm9sbEdlb21DYWNoZS5wcm90b3R5cGUuZ2V0RXZlbnRUYXJnZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgfTtcbiAgICBXaW5kb3dTY3JvbGxHZW9tQ2FjaGUucHJvdG90eXBlLmNvbXB1dGVDbGllbnRSZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGVmdDogdGhpcy5zY3JvbGxMZWZ0LFxuICAgICAgICAgICAgcmlnaHQ6IHRoaXMuc2Nyb2xsTGVmdCArIHRoaXMuY2xpZW50V2lkdGgsXG4gICAgICAgICAgICB0b3A6IHRoaXMuc2Nyb2xsVG9wLFxuICAgICAgICAgICAgYm90dG9tOiB0aGlzLnNjcm9sbFRvcCArIHRoaXMuY2xpZW50SGVpZ2h0LFxuICAgICAgICB9O1xuICAgIH07XG4gICAgLy8gdGhlIHdpbmRvdyBpcyB0aGUgb25seSBzY3JvbGwgb2JqZWN0IHRoYXQgY2hhbmdlcyBpdCdzIHJlY3RhbmdsZSByZWxhdGl2ZVxuICAgIC8vIHRvIHRoZSBkb2N1bWVudCdzIHRvcGxlZnQgYXMgaXQgc2Nyb2xsc1xuICAgIFdpbmRvd1Njcm9sbEdlb21DYWNoZS5wcm90b3R5cGUuaGFuZGxlU2Nyb2xsQ2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmNsaWVudFJlY3QgPSB0aGlzLmNvbXB1dGVDbGllbnRSZWN0KCk7XG4gICAgfTtcbiAgICByZXR1cm4gV2luZG93U2Nyb2xsR2VvbUNhY2hlO1xufShTY3JvbGxHZW9tQ2FjaGUpKTtcblxuLy8gSWYgYXZhaWxhYmxlIHdlIGFyZSB1c2luZyBuYXRpdmUgXCJwZXJmb3JtYW5jZVwiIEFQSSBpbnN0ZWFkIG9mIFwiRGF0ZVwiXG4vLyBSZWFkIG1vcmUgYWJvdXQgaXQgb24gTUROOlxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1BlcmZvcm1hbmNlXG52YXIgZ2V0VGltZSA9IHR5cGVvZiBwZXJmb3JtYW5jZSA9PT0gJ2Z1bmN0aW9uJyA/IHBlcmZvcm1hbmNlLm5vdyA6IERhdGUubm93O1xuLypcbkZvciBhIHBvaW50ZXIgaW50ZXJhY3Rpb24sIGF1dG9tYXRpY2FsbHkgc2Nyb2xscyBjZXJ0YWluIHNjcm9sbCBjb250YWluZXJzIHdoZW4gdGhlIHBvaW50ZXJcbmFwcHJvYWNoZXMgdGhlIGVkZ2UuXG5cblRoZSBjYWxsZXIgbXVzdCBjYWxsIHN0YXJ0ICsgaGFuZGxlTW92ZSArIHN0b3AuXG4qL1xudmFyIEF1dG9TY3JvbGxlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBdXRvU2Nyb2xsZXIoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIC8vIG9wdGlvbnMgdGhhdCBjYW4gYmUgc2V0IGJ5IGNhbGxlclxuICAgICAgICB0aGlzLmlzRW5hYmxlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuc2Nyb2xsUXVlcnkgPSBbd2luZG93LCAnLmZjLXNjcm9sbGVyJ107XG4gICAgICAgIHRoaXMuZWRnZVRocmVzaG9sZCA9IDUwOyAvLyBwaXhlbHNcbiAgICAgICAgdGhpcy5tYXhWZWxvY2l0eSA9IDMwMDsgLy8gcGl4ZWxzIHBlciBzZWNvbmRcbiAgICAgICAgLy8gaW50ZXJuYWwgc3RhdGVcbiAgICAgICAgdGhpcy5wb2ludGVyU2NyZWVuWCA9IG51bGw7XG4gICAgICAgIHRoaXMucG9pbnRlclNjcmVlblkgPSBudWxsO1xuICAgICAgICB0aGlzLmlzQW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2Nyb2xsQ2FjaGVzID0gbnVsbDtcbiAgICAgICAgLy8gcHJvdGVjdCBhZ2FpbnN0IHRoZSBpbml0aWFsIHBvaW50ZXJkb3duIGJlaW5nIHRvbyBjbG9zZSB0byBhbiBlZGdlIGFuZCBzdGFydGluZyB0aGUgc2Nyb2xsXG4gICAgICAgIHRoaXMuZXZlck1vdmVkVXAgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5ldmVyTW92ZWREb3duID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZXZlck1vdmVkTGVmdCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmV2ZXJNb3ZlZFJpZ2h0ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYW5pbWF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5pc0FuaW1hdGluZykgeyAvLyB3YXNuJ3QgY2FuY2VsbGVkIGJldHdlZW4gYW5pbWF0aW9uIGNhbGxzXG4gICAgICAgICAgICAgICAgdmFyIGVkZ2UgPSBfdGhpcy5jb21wdXRlQmVzdEVkZ2UoX3RoaXMucG9pbnRlclNjcmVlblggKyB3aW5kb3cucGFnZVhPZmZzZXQsIF90aGlzLnBvaW50ZXJTY3JlZW5ZICsgd2luZG93LnBhZ2VZT2Zmc2V0KTtcbiAgICAgICAgICAgICAgICBpZiAoZWRnZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbm93ID0gZ2V0VGltZSgpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5oYW5kbGVTaWRlKGVkZ2UsIChub3cgLSBfdGhpcy5tc1NpbmNlUmVxdWVzdCkgLyAxMDAwKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVxdWVzdEFuaW1hdGlvbihub3cpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuaXNBbmltYXRpbmcgPSBmYWxzZTsgLy8gd2lsbCBzdG9wIGFuaW1hdGlvblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgQXV0b1Njcm9sbGVyLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uIChwYWdlWCwgcGFnZVksIHNjcm9sbFN0YXJ0RWwpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNFbmFibGVkKSB7XG4gICAgICAgICAgICB0aGlzLnNjcm9sbENhY2hlcyA9IHRoaXMuYnVpbGRDYWNoZXMoc2Nyb2xsU3RhcnRFbCk7XG4gICAgICAgICAgICB0aGlzLnBvaW50ZXJTY3JlZW5YID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMucG9pbnRlclNjcmVlblkgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5ldmVyTW92ZWRVcCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5ldmVyTW92ZWREb3duID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmV2ZXJNb3ZlZExlZnQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuZXZlck1vdmVkUmlnaHQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlTW92ZShwYWdlWCwgcGFnZVkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBdXRvU2Nyb2xsZXIucHJvdG90eXBlLmhhbmRsZU1vdmUgPSBmdW5jdGlvbiAocGFnZVgsIHBhZ2VZKSB7XG4gICAgICAgIGlmICh0aGlzLmlzRW5hYmxlZCkge1xuICAgICAgICAgICAgdmFyIHBvaW50ZXJTY3JlZW5YID0gcGFnZVggLSB3aW5kb3cucGFnZVhPZmZzZXQ7XG4gICAgICAgICAgICB2YXIgcG9pbnRlclNjcmVlblkgPSBwYWdlWSAtIHdpbmRvdy5wYWdlWU9mZnNldDtcbiAgICAgICAgICAgIHZhciB5RGVsdGEgPSB0aGlzLnBvaW50ZXJTY3JlZW5ZID09PSBudWxsID8gMCA6IHBvaW50ZXJTY3JlZW5ZIC0gdGhpcy5wb2ludGVyU2NyZWVuWTtcbiAgICAgICAgICAgIHZhciB4RGVsdGEgPSB0aGlzLnBvaW50ZXJTY3JlZW5YID09PSBudWxsID8gMCA6IHBvaW50ZXJTY3JlZW5YIC0gdGhpcy5wb2ludGVyU2NyZWVuWDtcbiAgICAgICAgICAgIGlmICh5RGVsdGEgPCAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ldmVyTW92ZWRVcCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh5RGVsdGEgPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ldmVyTW92ZWREb3duID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh4RGVsdGEgPCAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ldmVyTW92ZWRMZWZ0ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHhEZWx0YSA+IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmV2ZXJNb3ZlZFJpZ2h0ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucG9pbnRlclNjcmVlblggPSBwb2ludGVyU2NyZWVuWDtcbiAgICAgICAgICAgIHRoaXMucG9pbnRlclNjcmVlblkgPSBwb2ludGVyU2NyZWVuWTtcbiAgICAgICAgICAgIGlmICghdGhpcy5pc0FuaW1hdGluZykge1xuICAgICAgICAgICAgICAgIHRoaXMuaXNBbmltYXRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMucmVxdWVzdEFuaW1hdGlvbihnZXRUaW1lKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBBdXRvU2Nyb2xsZXIucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzRW5hYmxlZCkge1xuICAgICAgICAgICAgdGhpcy5pc0FuaW1hdGluZyA9IGZhbHNlOyAvLyB3aWxsIHN0b3AgYW5pbWF0aW9uXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5zY3JvbGxDYWNoZXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNjcm9sbENhY2hlID0gX2FbX2ldO1xuICAgICAgICAgICAgICAgIHNjcm9sbENhY2hlLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsQ2FjaGVzID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQXV0b1Njcm9sbGVyLnByb3RvdHlwZS5yZXF1ZXN0QW5pbWF0aW9uID0gZnVuY3Rpb24gKG5vdykge1xuICAgICAgICB0aGlzLm1zU2luY2VSZXF1ZXN0ID0gbm93O1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5hbmltYXRlKTtcbiAgICB9O1xuICAgIEF1dG9TY3JvbGxlci5wcm90b3R5cGUuaGFuZGxlU2lkZSA9IGZ1bmN0aW9uIChlZGdlLCBzZWNvbmRzKSB7XG4gICAgICAgIHZhciBzY3JvbGxDYWNoZSA9IGVkZ2Uuc2Nyb2xsQ2FjaGU7XG4gICAgICAgIHZhciBlZGdlVGhyZXNob2xkID0gdGhpcy5lZGdlVGhyZXNob2xkO1xuICAgICAgICB2YXIgaW52RGlzdGFuY2UgPSBlZGdlVGhyZXNob2xkIC0gZWRnZS5kaXN0YW5jZTtcbiAgICAgICAgdmFyIHZlbG9jaXR5ID0gLy8gdGhlIGNsb3NlciB0byB0aGUgZWRnZSwgdGhlIGZhc3RlciB3ZSBzY3JvbGxcbiAgICAgICAgICgoaW52RGlzdGFuY2UgKiBpbnZEaXN0YW5jZSkgLyAoZWRnZVRocmVzaG9sZCAqIGVkZ2VUaHJlc2hvbGQpKSAqIC8vIHF1YWRyYXRpY1xuICAgICAgICAgICAgdGhpcy5tYXhWZWxvY2l0eSAqIHNlY29uZHM7XG4gICAgICAgIHZhciBzaWduID0gMTtcbiAgICAgICAgc3dpdGNoIChlZGdlLm5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgICAgICAgIHNpZ24gPSAtMTtcbiAgICAgICAgICAgIC8vIGZhbGxzIHRocm91Z2hcbiAgICAgICAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgICAgICAgICBzY3JvbGxDYWNoZS5zZXRTY3JvbGxMZWZ0KHNjcm9sbENhY2hlLmdldFNjcm9sbExlZnQoKSArIHZlbG9jaXR5ICogc2lnbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd0b3AnOlxuICAgICAgICAgICAgICAgIHNpZ24gPSAtMTtcbiAgICAgICAgICAgIC8vIGZhbGxzIHRocm91Z2hcbiAgICAgICAgICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAgICAgICAgICAgc2Nyb2xsQ2FjaGUuc2V0U2Nyb2xsVG9wKHNjcm9sbENhY2hlLmdldFNjcm9sbFRvcCgpICsgdmVsb2NpdHkgKiBzaWduKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gbGVmdC90b3AgYXJlIHJlbGF0aXZlIHRvIGRvY3VtZW50IHRvcGxlZnRcbiAgICBBdXRvU2Nyb2xsZXIucHJvdG90eXBlLmNvbXB1dGVCZXN0RWRnZSA9IGZ1bmN0aW9uIChsZWZ0LCB0b3ApIHtcbiAgICAgICAgdmFyIGVkZ2VUaHJlc2hvbGQgPSB0aGlzLmVkZ2VUaHJlc2hvbGQ7XG4gICAgICAgIHZhciBiZXN0U2lkZSA9IG51bGw7XG4gICAgICAgIHZhciBzY3JvbGxDYWNoZXMgPSB0aGlzLnNjcm9sbENhY2hlcyB8fCBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBzY3JvbGxDYWNoZXNfMSA9IHNjcm9sbENhY2hlczsgX2kgPCBzY3JvbGxDYWNoZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBzY3JvbGxDYWNoZSA9IHNjcm9sbENhY2hlc18xW19pXTtcbiAgICAgICAgICAgIHZhciByZWN0ID0gc2Nyb2xsQ2FjaGUuY2xpZW50UmVjdDtcbiAgICAgICAgICAgIHZhciBsZWZ0RGlzdCA9IGxlZnQgLSByZWN0LmxlZnQ7XG4gICAgICAgICAgICB2YXIgcmlnaHREaXN0ID0gcmVjdC5yaWdodCAtIGxlZnQ7XG4gICAgICAgICAgICB2YXIgdG9wRGlzdCA9IHRvcCAtIHJlY3QudG9wO1xuICAgICAgICAgICAgdmFyIGJvdHRvbURpc3QgPSByZWN0LmJvdHRvbSAtIHRvcDtcbiAgICAgICAgICAgIC8vIGNvbXBsZXRlbHkgd2l0aGluIHRoZSByZWN0P1xuICAgICAgICAgICAgaWYgKGxlZnREaXN0ID49IDAgJiYgcmlnaHREaXN0ID49IDAgJiYgdG9wRGlzdCA+PSAwICYmIGJvdHRvbURpc3QgPj0gMCkge1xuICAgICAgICAgICAgICAgIGlmICh0b3BEaXN0IDw9IGVkZ2VUaHJlc2hvbGQgJiYgdGhpcy5ldmVyTW92ZWRVcCAmJiBzY3JvbGxDYWNoZS5jYW5TY3JvbGxVcCgpICYmXG4gICAgICAgICAgICAgICAgICAgICghYmVzdFNpZGUgfHwgYmVzdFNpZGUuZGlzdGFuY2UgPiB0b3BEaXN0KSkge1xuICAgICAgICAgICAgICAgICAgICBiZXN0U2lkZSA9IHsgc2Nyb2xsQ2FjaGU6IHNjcm9sbENhY2hlLCBuYW1lOiAndG9wJywgZGlzdGFuY2U6IHRvcERpc3QgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGJvdHRvbURpc3QgPD0gZWRnZVRocmVzaG9sZCAmJiB0aGlzLmV2ZXJNb3ZlZERvd24gJiYgc2Nyb2xsQ2FjaGUuY2FuU2Nyb2xsRG93bigpICYmXG4gICAgICAgICAgICAgICAgICAgICghYmVzdFNpZGUgfHwgYmVzdFNpZGUuZGlzdGFuY2UgPiBib3R0b21EaXN0KSkge1xuICAgICAgICAgICAgICAgICAgICBiZXN0U2lkZSA9IHsgc2Nyb2xsQ2FjaGU6IHNjcm9sbENhY2hlLCBuYW1lOiAnYm90dG9tJywgZGlzdGFuY2U6IGJvdHRvbURpc3QgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGxlZnREaXN0IDw9IGVkZ2VUaHJlc2hvbGQgJiYgdGhpcy5ldmVyTW92ZWRMZWZ0ICYmIHNjcm9sbENhY2hlLmNhblNjcm9sbExlZnQoKSAmJlxuICAgICAgICAgICAgICAgICAgICAoIWJlc3RTaWRlIHx8IGJlc3RTaWRlLmRpc3RhbmNlID4gbGVmdERpc3QpKSB7XG4gICAgICAgICAgICAgICAgICAgIGJlc3RTaWRlID0geyBzY3JvbGxDYWNoZTogc2Nyb2xsQ2FjaGUsIG5hbWU6ICdsZWZ0JywgZGlzdGFuY2U6IGxlZnREaXN0IH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChyaWdodERpc3QgPD0gZWRnZVRocmVzaG9sZCAmJiB0aGlzLmV2ZXJNb3ZlZFJpZ2h0ICYmIHNjcm9sbENhY2hlLmNhblNjcm9sbFJpZ2h0KCkgJiZcbiAgICAgICAgICAgICAgICAgICAgKCFiZXN0U2lkZSB8fCBiZXN0U2lkZS5kaXN0YW5jZSA+IHJpZ2h0RGlzdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgYmVzdFNpZGUgPSB7IHNjcm9sbENhY2hlOiBzY3JvbGxDYWNoZSwgbmFtZTogJ3JpZ2h0JywgZGlzdGFuY2U6IHJpZ2h0RGlzdCB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYmVzdFNpZGU7XG4gICAgfTtcbiAgICBBdXRvU2Nyb2xsZXIucHJvdG90eXBlLmJ1aWxkQ2FjaGVzID0gZnVuY3Rpb24gKHNjcm9sbFN0YXJ0RWwpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucXVlcnlTY3JvbGxFbHMoc2Nyb2xsU3RhcnRFbCkubWFwKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgaWYgKGVsID09PSB3aW5kb3cpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFdpbmRvd1Njcm9sbEdlb21DYWNoZShmYWxzZSk7IC8vIGZhbHNlID0gZG9uJ3QgbGlzdGVuIHRvIHVzZXItZ2VuZXJhdGVkIHNjcm9sbHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgRWxlbWVudFNjcm9sbEdlb21DYWNoZShlbCwgZmFsc2UpOyAvLyBmYWxzZSA9IGRvbid0IGxpc3RlbiB0byB1c2VyLWdlbmVyYXRlZCBzY3JvbGxzXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQXV0b1Njcm9sbGVyLnByb3RvdHlwZS5xdWVyeVNjcm9sbEVscyA9IGZ1bmN0aW9uIChzY3JvbGxTdGFydEVsKSB7XG4gICAgICAgIHZhciBlbHMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuc2Nyb2xsUXVlcnk7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgcXVlcnkgPSBfYVtfaV07XG4gICAgICAgICAgICBpZiAodHlwZW9mIHF1ZXJ5ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIGVscy5wdXNoKHF1ZXJ5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGVscy5wdXNoLmFwcGx5KGVscywgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoY29tbW9uLmdldEVsUm9vdChzY3JvbGxTdGFydEVsKS5xdWVyeVNlbGVjdG9yQWxsKHF1ZXJ5KSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbHM7XG4gICAgfTtcbiAgICByZXR1cm4gQXV0b1Njcm9sbGVyO1xufSgpKTtcblxuLypcbk1vbml0b3JzIGRyYWdnaW5nIG9uIGFuIGVsZW1lbnQuIEhhcyBhIG51bWJlciBvZiBoaWdoLWxldmVsIGZlYXR1cmVzOlxuLSBtaW5pbXVtIGRpc3RhbmNlIHJlcXVpcmVkIGJlZm9yZSBkcmFnZ2luZ1xuLSBtaW5pbXVtIHdhaXQgdGltZSAoXCJkZWxheVwiKSBiZWZvcmUgZHJhZ2dpbmdcbi0gYSBtaXJyb3IgZWxlbWVudCB0aGF0IGZvbGxvd3MgdGhlIHBvaW50ZXJcbiovXG52YXIgRmVhdHVyZWZ1bEVsZW1lbnREcmFnZ2luZyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYi5fX2V4dGVuZHMoRmVhdHVyZWZ1bEVsZW1lbnREcmFnZ2luZywgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBGZWF0dXJlZnVsRWxlbWVudERyYWdnaW5nKGNvbnRhaW5lckVsLCBzZWxlY3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBjb250YWluZXJFbCkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuY29udGFpbmVyRWwgPSBjb250YWluZXJFbDtcbiAgICAgICAgLy8gb3B0aW9ucyB0aGF0IGNhbiBiZSBkaXJlY3RseSBzZXQgYnkgY2FsbGVyXG4gICAgICAgIC8vIHRoZSBjYWxsZXIgY2FuIGFsc28gc2V0IHRoZSBQb2ludGVyRHJhZ2dpbmcncyBvcHRpb25zIGFzIHdlbGxcbiAgICAgICAgX3RoaXMuZGVsYXkgPSBudWxsO1xuICAgICAgICBfdGhpcy5taW5EaXN0YW5jZSA9IDA7XG4gICAgICAgIF90aGlzLnRvdWNoU2Nyb2xsQWxsb3dlZCA9IHRydWU7IC8vIHByZXZlbnRzIGRyYWcgZnJvbSBzdGFydGluZyBhbmQgYmxvY2tzIHNjcm9sbGluZyBkdXJpbmcgZHJhZ1xuICAgICAgICBfdGhpcy5taXJyb3JOZWVkc1JldmVydCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5pc0ludGVyYWN0aW5nID0gZmFsc2U7IC8vIGlzIHRoZSB1c2VyIHZhbGlkbHkgbW92aW5nIHRoZSBwb2ludGVyPyBsYXN0cyB1bnRpbCBwb2ludGVydXBcbiAgICAgICAgX3RoaXMuaXNEcmFnZ2luZyA9IGZhbHNlOyAvLyBpcyBpdCBJTlRFTlRGVUxMWSBkcmFnZ2luZz8gbGFzdHMgdW50aWwgYWZ0ZXIgcmV2ZXJ0IGFuaW1hdGlvblxuICAgICAgICBfdGhpcy5pc0RlbGF5RW5kZWQgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaXNEaXN0YW5jZVN1cnBhc3NlZCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5kZWxheVRpbWVvdXRJZCA9IG51bGw7XG4gICAgICAgIF90aGlzLm9uUG9pbnRlckRvd24gPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIGlmICghX3RoaXMuaXNEcmFnZ2luZykgeyAvLyBzbyBuZXcgZHJhZyBkb2Vzbid0IGhhcHBlbiB3aGlsZSByZXZlcnQgYW5pbWF0aW9uIGlzIGdvaW5nXG4gICAgICAgICAgICAgICAgX3RoaXMuaXNJbnRlcmFjdGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgX3RoaXMuaXNEZWxheUVuZGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgX3RoaXMuaXNEaXN0YW5jZVN1cnBhc3NlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGNvbW1vbi5wcmV2ZW50U2VsZWN0aW9uKGRvY3VtZW50LmJvZHkpO1xuICAgICAgICAgICAgICAgIGNvbW1vbi5wcmV2ZW50Q29udGV4dE1lbnUoZG9jdW1lbnQuYm9keSk7XG4gICAgICAgICAgICAgICAgLy8gcHJldmVudCBsaW5rcyBmcm9tIGJlaW5nIHZpc2l0ZWQgaWYgdGhlcmUncyBhbiBldmVudHVhbCBkcmFnLlxuICAgICAgICAgICAgICAgIC8vIGFsc28gcHJldmVudHMgc2VsZWN0aW9uIGluIG9sZGVyIGJyb3dzZXJzIChtYXliZT8pLlxuICAgICAgICAgICAgICAgIC8vIG5vdCBuZWNlc3NhcnkgZm9yIHRvdWNoLCBiZXNpZGVzLCBicm93c2VyIHdvdWxkIGNvbXBsYWluIGFib3V0IHBhc3NpdmVuZXNzLlxuICAgICAgICAgICAgICAgIGlmICghZXYuaXNUb3VjaCkge1xuICAgICAgICAgICAgICAgICAgICBldi5vcmlnRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX3RoaXMuZW1pdHRlci50cmlnZ2VyKCdwb2ludGVyZG93bicsIGV2KTtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuaXNJbnRlcmFjdGluZyAmJiAvLyBub3QgZGVzdHJveWVkIHZpYSBwb2ludGVyZG93biBoYW5kbGVyXG4gICAgICAgICAgICAgICAgICAgICFfdGhpcy5wb2ludGVyLnNob3VsZElnbm9yZU1vdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gYWN0aW9ucyByZWxhdGVkIHRvIGluaXRpYXRpbmcgZHJhZ3N0YXJ0K2RyYWdtb3ZlK2RyYWdlbmQuLi5cbiAgICAgICAgICAgICAgICAgICAgX3RoaXMubWlycm9yLnNldElzVmlzaWJsZShmYWxzZSk7IC8vIHJlc2V0LiBjYWxsZXIgbXVzdCBzZXQtdmlzaWJsZVxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5taXJyb3Iuc3RhcnQoZXYuc3ViamVjdEVsLCBldi5wYWdlWCwgZXYucGFnZVkpOyAvLyBtdXN0IGhhcHBlbiBvbiBmaXJzdCBwb2ludGVyIGRvd25cbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuc3RhcnREZWxheShldik7XG4gICAgICAgICAgICAgICAgICAgIGlmICghX3RoaXMubWluRGlzdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmhhbmRsZURpc3RhbmNlU3VycGFzc2VkKGV2KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMub25Qb2ludGVyTW92ZSA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgaWYgKF90aGlzLmlzSW50ZXJhY3RpbmcpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5lbWl0dGVyLnRyaWdnZXIoJ3BvaW50ZXJtb3ZlJywgZXYpO1xuICAgICAgICAgICAgICAgIGlmICghX3RoaXMuaXNEaXN0YW5jZVN1cnBhc3NlZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWluRGlzdGFuY2UgPSBfdGhpcy5taW5EaXN0YW5jZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRpc3RhbmNlU3EgPSB2b2lkIDA7IC8vIGN1cnJlbnQgZGlzdGFuY2UgZnJvbSB0aGUgb3JpZ2luLCBzcXVhcmVkXG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWx0YVggPSBldi5kZWx0YVgsIGRlbHRhWSA9IGV2LmRlbHRhWTtcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2VTcSA9IGRlbHRhWCAqIGRlbHRhWCArIGRlbHRhWSAqIGRlbHRhWTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpc3RhbmNlU3EgPj0gbWluRGlzdGFuY2UgKiBtaW5EaXN0YW5jZSkgeyAvLyB1c2UgcHl0aGFnb3JlYW4gdGhlb3JlbVxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuaGFuZGxlRGlzdGFuY2VTdXJwYXNzZWQoZXYpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5pc0RyYWdnaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGEgcmVhbCBwb2ludGVyIG1vdmU/IChub3Qgb25lIHNpbXVsYXRlZCBieSBzY3JvbGxpbmcpXG4gICAgICAgICAgICAgICAgICAgIGlmIChldi5vcmlnRXZlbnQudHlwZSAhPT0gJ3Njcm9sbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm1pcnJvci5oYW5kbGVNb3ZlKGV2LnBhZ2VYLCBldi5wYWdlWSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5hdXRvU2Nyb2xsZXIuaGFuZGxlTW92ZShldi5wYWdlWCwgZXYucGFnZVkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmVtaXR0ZXIudHJpZ2dlcignZHJhZ21vdmUnLCBldik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5vblBvaW50ZXJVcCA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgaWYgKF90aGlzLmlzSW50ZXJhY3RpbmcpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5pc0ludGVyYWN0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgY29tbW9uLmFsbG93U2VsZWN0aW9uKGRvY3VtZW50LmJvZHkpO1xuICAgICAgICAgICAgICAgIGNvbW1vbi5hbGxvd0NvbnRleHRNZW51KGRvY3VtZW50LmJvZHkpO1xuICAgICAgICAgICAgICAgIF90aGlzLmVtaXR0ZXIudHJpZ2dlcigncG9pbnRlcnVwJywgZXYpOyAvLyBjYW4gcG90ZW50aWFsbHkgc2V0IG1pcnJvck5lZWRzUmV2ZXJ0XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLmlzRHJhZ2dpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuYXV0b1Njcm9sbGVyLnN0b3AoKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMudHJ5U3RvcERyYWcoZXYpOyAvLyB3aGljaCB3aWxsIHN0b3AgdGhlIG1pcnJvclxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuZGVsYXlUaW1lb3V0SWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLmRlbGF5VGltZW91dElkKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZGVsYXlUaW1lb3V0SWQgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHBvaW50ZXIgPSBfdGhpcy5wb2ludGVyID0gbmV3IFBvaW50ZXJEcmFnZ2luZyhjb250YWluZXJFbCk7XG4gICAgICAgIHBvaW50ZXIuZW1pdHRlci5vbigncG9pbnRlcmRvd24nLCBfdGhpcy5vblBvaW50ZXJEb3duKTtcbiAgICAgICAgcG9pbnRlci5lbWl0dGVyLm9uKCdwb2ludGVybW92ZScsIF90aGlzLm9uUG9pbnRlck1vdmUpO1xuICAgICAgICBwb2ludGVyLmVtaXR0ZXIub24oJ3BvaW50ZXJ1cCcsIF90aGlzLm9uUG9pbnRlclVwKTtcbiAgICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgICAgICBwb2ludGVyLnNlbGVjdG9yID0gc2VsZWN0b3I7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMubWlycm9yID0gbmV3IEVsZW1lbnRNaXJyb3IoKTtcbiAgICAgICAgX3RoaXMuYXV0b1Njcm9sbGVyID0gbmV3IEF1dG9TY3JvbGxlcigpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEZlYXR1cmVmdWxFbGVtZW50RHJhZ2dpbmcucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucG9pbnRlci5kZXN0cm95KCk7XG4gICAgICAgIC8vIEhBQ0s6IHNpbXVsYXRlIGEgcG9pbnRlci11cCB0byBlbmQgdGhlIGN1cnJlbnQgZHJhZ1xuICAgICAgICAvLyBUT0RPOiBmaXJlICdkcmFnZW5kJyBkaXJlY3RseSBhbmQgc3RvcCBpbnRlcmFjdGlvbi4gZGlzY291cmFnZSB1c2Ugb2YgcG9pbnRlcnVwIGV2ZW50IChiL2MgbWlnaHQgbm90IGZpcmUpXG4gICAgICAgIHRoaXMub25Qb2ludGVyVXAoe30pO1xuICAgIH07XG4gICAgRmVhdHVyZWZ1bEVsZW1lbnREcmFnZ2luZy5wcm90b3R5cGUuc3RhcnREZWxheSA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuZGVsYXkgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aGlzLmRlbGF5VGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZGVsYXlUaW1lb3V0SWQgPSBudWxsO1xuICAgICAgICAgICAgICAgIF90aGlzLmhhbmRsZURlbGF5RW5kKGV2KTtcbiAgICAgICAgICAgIH0sIHRoaXMuZGVsYXkpOyAvLyBub3QgYXNzaWduYWJsZSB0byBudW1iZXIhXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZURlbGF5RW5kKGV2KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRmVhdHVyZWZ1bEVsZW1lbnREcmFnZ2luZy5wcm90b3R5cGUuaGFuZGxlRGVsYXlFbmQgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgdGhpcy5pc0RlbGF5RW5kZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnRyeVN0YXJ0RHJhZyhldik7XG4gICAgfTtcbiAgICBGZWF0dXJlZnVsRWxlbWVudERyYWdnaW5nLnByb3RvdHlwZS5oYW5kbGVEaXN0YW5jZVN1cnBhc3NlZCA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICB0aGlzLmlzRGlzdGFuY2VTdXJwYXNzZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnRyeVN0YXJ0RHJhZyhldik7XG4gICAgfTtcbiAgICBGZWF0dXJlZnVsRWxlbWVudERyYWdnaW5nLnByb3RvdHlwZS50cnlTdGFydERyYWcgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNEZWxheUVuZGVkICYmIHRoaXMuaXNEaXN0YW5jZVN1cnBhc3NlZCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnBvaW50ZXIud2FzVG91Y2hTY3JvbGwgfHwgdGhpcy50b3VjaFNjcm9sbEFsbG93ZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzRHJhZ2dpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMubWlycm9yTmVlZHNSZXZlcnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmF1dG9TY3JvbGxlci5zdGFydChldi5wYWdlWCwgZXYucGFnZVksIHRoaXMuY29udGFpbmVyRWwpO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdHRlci50cmlnZ2VyKCdkcmFnc3RhcnQnLCBldik7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudG91Y2hTY3JvbGxBbGxvd2VkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvaW50ZXIuY2FuY2VsVG91Y2hTY3JvbGwoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEZlYXR1cmVmdWxFbGVtZW50RHJhZ2dpbmcucHJvdG90eXBlLnRyeVN0b3BEcmFnID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgIC8vIC5zdG9wKCkgaXMgQUxXQVlTIGFzeW5jaHJvbm91cywgd2hpY2ggd2UgTkVFRCBiZWNhdXNlIHdlIHdhbnQgYWxsIHBvaW50ZXJ1cCBldmVudHNcbiAgICAgICAgLy8gdGhhdCBjb21lIGZyb20gdGhlIGRvY3VtZW50IHRvIGZpcmUgYmVmb3JlaGFuZC4gbXVjaCBtb3JlIGNvbnZlbmllbnQgdGhpcyB3YXkuXG4gICAgICAgIHRoaXMubWlycm9yLnN0b3AodGhpcy5taXJyb3JOZWVkc1JldmVydCwgdGhpcy5zdG9wRHJhZy5iaW5kKHRoaXMsIGV2KSk7XG4gICAgfTtcbiAgICBGZWF0dXJlZnVsRWxlbWVudERyYWdnaW5nLnByb3RvdHlwZS5zdG9wRHJhZyA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICB0aGlzLmlzRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5lbWl0dGVyLnRyaWdnZXIoJ2RyYWdlbmQnLCBldik7XG4gICAgfTtcbiAgICAvLyBmaWxsIGluIHRoZSBpbXBsZW1lbnRhdGlvbnMuLi5cbiAgICBGZWF0dXJlZnVsRWxlbWVudERyYWdnaW5nLnByb3RvdHlwZS5zZXRJZ25vcmVNb3ZlID0gZnVuY3Rpb24gKGJvb2wpIHtcbiAgICAgICAgdGhpcy5wb2ludGVyLnNob3VsZElnbm9yZU1vdmUgPSBib29sO1xuICAgIH07XG4gICAgRmVhdHVyZWZ1bEVsZW1lbnREcmFnZ2luZy5wcm90b3R5cGUuc2V0TWlycm9ySXNWaXNpYmxlID0gZnVuY3Rpb24gKGJvb2wpIHtcbiAgICAgICAgdGhpcy5taXJyb3Iuc2V0SXNWaXNpYmxlKGJvb2wpO1xuICAgIH07XG4gICAgRmVhdHVyZWZ1bEVsZW1lbnREcmFnZ2luZy5wcm90b3R5cGUuc2V0TWlycm9yTmVlZHNSZXZlcnQgPSBmdW5jdGlvbiAoYm9vbCkge1xuICAgICAgICB0aGlzLm1pcnJvck5lZWRzUmV2ZXJ0ID0gYm9vbDtcbiAgICB9O1xuICAgIEZlYXR1cmVmdWxFbGVtZW50RHJhZ2dpbmcucHJvdG90eXBlLnNldEF1dG9TY3JvbGxFbmFibGVkID0gZnVuY3Rpb24gKGJvb2wpIHtcbiAgICAgICAgdGhpcy5hdXRvU2Nyb2xsZXIuaXNFbmFibGVkID0gYm9vbDtcbiAgICB9O1xuICAgIHJldHVybiBGZWF0dXJlZnVsRWxlbWVudERyYWdnaW5nO1xufShjb21tb24uRWxlbWVudERyYWdnaW5nKSk7XG5cbi8qXG5XaGVuIHRoaXMgY2xhc3MgaXMgaW5zdGFudGlhdGVkLCBpdCByZWNvcmRzIHRoZSBvZmZzZXQgb2YgYW4gZWxlbWVudCAocmVsYXRpdmUgdG8gdGhlIGRvY3VtZW50IHRvcGxlZnQpLFxuYW5kIGNvbnRpbnVlcyB0byBtb25pdG9yIHNjcm9sbGluZywgdXBkYXRpbmcgdGhlIGNhY2hlZCBjb29yZGluYXRlcyBpZiBpdCBuZWVkcyB0by5cbkRvZXMgbm90IGFjY2VzcyB0aGUgRE9NIGFmdGVyIGluc3RhbnRpYXRpb24sIHNvIGhpZ2hseSBwZXJmb3JtYW50LlxuXG5BbHNvIGtlZXBzIHRyYWNrIG9mIGFsbCBzY3JvbGxpbmcvb3ZlcmZsb3c6aGlkZGVuIGNvbnRhaW5lcnMgdGhhdCBhcmUgcGFyZW50cyBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuYW5kIGFuIGRldGVybWluZSBpZiBhIGdpdmVuIHBvaW50IGlzIGluc2lkZSB0aGUgY29tYmluZWQgY2xpcHBpbmcgcmVjdGFuZ2xlLlxuKi9cbnZhciBPZmZzZXRUcmFja2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE9mZnNldFRyYWNrZXIoZWwpIHtcbiAgICAgICAgdGhpcy5vcmlnUmVjdCA9IGNvbW1vbi5jb21wdXRlUmVjdChlbCk7XG4gICAgICAgIC8vIHdpbGwgd29yayBmaW5lIGZvciBkaXZzIHRoYXQgaGF2ZSBvdmVyZmxvdzpoaWRkZW5cbiAgICAgICAgdGhpcy5zY3JvbGxDYWNoZXMgPSBjb21tb24uZ2V0Q2xpcHBpbmdQYXJlbnRzKGVsKS5tYXAoZnVuY3Rpb24gKHNjcm9sbEVsKSB7IHJldHVybiBuZXcgRWxlbWVudFNjcm9sbEdlb21DYWNoZShzY3JvbGxFbCwgdHJ1ZSk7IH0pO1xuICAgIH1cbiAgICBPZmZzZXRUcmFja2VyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5zY3JvbGxDYWNoZXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgc2Nyb2xsQ2FjaGUgPSBfYVtfaV07XG4gICAgICAgICAgICBzY3JvbGxDYWNoZS5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9mZnNldFRyYWNrZXIucHJvdG90eXBlLmNvbXB1dGVMZWZ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbGVmdCA9IHRoaXMub3JpZ1JlY3QubGVmdDtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuc2Nyb2xsQ2FjaGVzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIHNjcm9sbENhY2hlID0gX2FbX2ldO1xuICAgICAgICAgICAgbGVmdCArPSBzY3JvbGxDYWNoZS5vcmlnU2Nyb2xsTGVmdCAtIHNjcm9sbENhY2hlLmdldFNjcm9sbExlZnQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGVmdDtcbiAgICB9O1xuICAgIE9mZnNldFRyYWNrZXIucHJvdG90eXBlLmNvbXB1dGVUb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b3AgPSB0aGlzLm9yaWdSZWN0LnRvcDtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuc2Nyb2xsQ2FjaGVzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIHNjcm9sbENhY2hlID0gX2FbX2ldO1xuICAgICAgICAgICAgdG9wICs9IHNjcm9sbENhY2hlLm9yaWdTY3JvbGxUb3AgLSBzY3JvbGxDYWNoZS5nZXRTY3JvbGxUb3AoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9wO1xuICAgIH07XG4gICAgT2Zmc2V0VHJhY2tlci5wcm90b3R5cGUuaXNXaXRoaW5DbGlwcGluZyA9IGZ1bmN0aW9uIChwYWdlWCwgcGFnZVkpIHtcbiAgICAgICAgdmFyIHBvaW50ID0geyBsZWZ0OiBwYWdlWCwgdG9wOiBwYWdlWSB9O1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5zY3JvbGxDYWNoZXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgc2Nyb2xsQ2FjaGUgPSBfYVtfaV07XG4gICAgICAgICAgICBpZiAoIWlzSWdub3JlZENsaXBwaW5nKHNjcm9sbENhY2hlLmdldEV2ZW50VGFyZ2V0KCkpICYmXG4gICAgICAgICAgICAgICAgIWNvbW1vbi5wb2ludEluc2lkZVJlY3QocG9pbnQsIHNjcm9sbENhY2hlLmNsaWVudFJlY3QpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgcmV0dXJuIE9mZnNldFRyYWNrZXI7XG59KCkpO1xuLy8gY2VydGFpbiBjbGlwcGluZyBjb250YWluZXJzIHNob3VsZCBuZXZlciBjb25zdHJhaW4gaW50ZXJhY3Rpb25zLCBsaWtlIDxodG1sPiBhbmQgPGJvZHk+XG4vLyBodHRwczovL2dpdGh1Yi5jb20vZnVsbGNhbGVuZGFyL2Z1bGxjYWxlbmRhci9pc3N1ZXMvMzYxNVxuZnVuY3Rpb24gaXNJZ25vcmVkQ2xpcHBpbmcobm9kZSkge1xuICAgIHZhciB0YWdOYW1lID0gbm9kZS50YWdOYW1lO1xuICAgIHJldHVybiB0YWdOYW1lID09PSAnSFRNTCcgfHwgdGFnTmFtZSA9PT0gJ0JPRFknO1xufVxuXG4vKlxuVHJhY2tzIG1vdmVtZW50IG92ZXIgbXVsdGlwbGUgZHJvcHBhYmxlIGFyZWFzIChha2EgXCJoaXRzXCIpXG50aGF0IGV4aXN0IGluIG9uZSBvciBtb3JlIERhdGVDb21wb25lbnRzLlxuUmVsaWVzIG9uIGFuIGV4aXN0aW5nIGRyYWdnYWJsZS5cblxuZW1pdHM6XG4tIHBvaW50ZXJkb3duXG4tIGRyYWdzdGFydFxuLSBoaXRjaGFuZ2UgLSBmaXJlcyBpbml0aWFsbHksIGV2ZW4gaWYgbm90IG92ZXIgYSBoaXRcbi0gcG9pbnRlcnVwXG4tIChoaXRjaGFuZ2UgLSBhZ2FpbiwgdG8gbnVsbCwgaWYgZW5kZWQgb3ZlciBhIGhpdClcbi0gZHJhZ2VuZFxuKi9cbnZhciBIaXREcmFnZ2luZyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBIaXREcmFnZ2luZyhkcmFnZ2luZywgZHJvcHBhYmxlU3RvcmUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLy8gb3B0aW9ucyB0aGF0IGNhbiBiZSBzZXQgYnkgY2FsbGVyXG4gICAgICAgIHRoaXMudXNlU3ViamVjdENlbnRlciA9IGZhbHNlO1xuICAgICAgICB0aGlzLnJlcXVpcmVJbml0aWFsID0gdHJ1ZTsgLy8gaWYgZG9lc24ndCBzdGFydCBvdXQgb24gYSBoaXQsIHdvbid0IGVtaXQgYW55IGV2ZW50c1xuICAgICAgICB0aGlzLmluaXRpYWxIaXQgPSBudWxsO1xuICAgICAgICB0aGlzLm1vdmluZ0hpdCA9IG51bGw7XG4gICAgICAgIHRoaXMuZmluYWxIaXQgPSBudWxsOyAvLyB3b24ndCBldmVyIGJlIHBvcHVsYXRlZCBpZiBzaG91bGRJZ25vcmVNb3ZlXG4gICAgICAgIHRoaXMuaGFuZGxlUG9pbnRlckRvd24gPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBkcmFnZ2luZyA9IF90aGlzLmRyYWdnaW5nO1xuICAgICAgICAgICAgX3RoaXMuaW5pdGlhbEhpdCA9IG51bGw7XG4gICAgICAgICAgICBfdGhpcy5tb3ZpbmdIaXQgPSBudWxsO1xuICAgICAgICAgICAgX3RoaXMuZmluYWxIaXQgPSBudWxsO1xuICAgICAgICAgICAgX3RoaXMucHJlcGFyZUhpdHMoKTtcbiAgICAgICAgICAgIF90aGlzLnByb2Nlc3NGaXJzdENvb3JkKGV2KTtcbiAgICAgICAgICAgIGlmIChfdGhpcy5pbml0aWFsSGl0IHx8ICFfdGhpcy5yZXF1aXJlSW5pdGlhbCkge1xuICAgICAgICAgICAgICAgIGRyYWdnaW5nLnNldElnbm9yZU1vdmUoZmFsc2UpO1xuICAgICAgICAgICAgICAgIC8vIFRPRE86IGZpcmUgdGhpcyBiZWZvcmUgY29tcHV0aW5nIHByb2Nlc3NGaXJzdENvb3JkLCBzbyBsaXN0ZW5lcnMgY2FuIGNhbmNlbC4gdGhpcyBnZXRzIGZpcmVkIGJ5IGFsbW9zdCBldmVyeSBoYW5kbGVyIDooXG4gICAgICAgICAgICAgICAgX3RoaXMuZW1pdHRlci50cmlnZ2VyKCdwb2ludGVyZG93bicsIGV2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGRyYWdnaW5nLnNldElnbm9yZU1vdmUodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGFuZGxlRHJhZ1N0YXJ0ID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICBfdGhpcy5lbWl0dGVyLnRyaWdnZXIoJ2RyYWdzdGFydCcsIGV2KTtcbiAgICAgICAgICAgIF90aGlzLmhhbmRsZU1vdmUoZXYsIHRydWUpOyAvLyBmb3JjZSA9IGZpcmUgZXZlbiBpZiBpbml0aWFsbHkgbnVsbFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmhhbmRsZURyYWdNb3ZlID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICBfdGhpcy5lbWl0dGVyLnRyaWdnZXIoJ2RyYWdtb3ZlJywgZXYpO1xuICAgICAgICAgICAgX3RoaXMuaGFuZGxlTW92ZShldik7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGFuZGxlUG9pbnRlclVwID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICBfdGhpcy5yZWxlYXNlSGl0cygpO1xuICAgICAgICAgICAgX3RoaXMuZW1pdHRlci50cmlnZ2VyKCdwb2ludGVydXAnLCBldik7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGFuZGxlRHJhZ0VuZCA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgaWYgKF90aGlzLm1vdmluZ0hpdCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmVtaXR0ZXIudHJpZ2dlcignaGl0dXBkYXRlJywgbnVsbCwgdHJ1ZSwgZXYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMuZmluYWxIaXQgPSBfdGhpcy5tb3ZpbmdIaXQ7XG4gICAgICAgICAgICBfdGhpcy5tb3ZpbmdIaXQgPSBudWxsO1xuICAgICAgICAgICAgX3RoaXMuZW1pdHRlci50cmlnZ2VyKCdkcmFnZW5kJywgZXYpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmRyb3BwYWJsZVN0b3JlID0gZHJvcHBhYmxlU3RvcmU7XG4gICAgICAgIGRyYWdnaW5nLmVtaXR0ZXIub24oJ3BvaW50ZXJkb3duJywgdGhpcy5oYW5kbGVQb2ludGVyRG93bik7XG4gICAgICAgIGRyYWdnaW5nLmVtaXR0ZXIub24oJ2RyYWdzdGFydCcsIHRoaXMuaGFuZGxlRHJhZ1N0YXJ0KTtcbiAgICAgICAgZHJhZ2dpbmcuZW1pdHRlci5vbignZHJhZ21vdmUnLCB0aGlzLmhhbmRsZURyYWdNb3ZlKTtcbiAgICAgICAgZHJhZ2dpbmcuZW1pdHRlci5vbigncG9pbnRlcnVwJywgdGhpcy5oYW5kbGVQb2ludGVyVXApO1xuICAgICAgICBkcmFnZ2luZy5lbWl0dGVyLm9uKCdkcmFnZW5kJywgdGhpcy5oYW5kbGVEcmFnRW5kKTtcbiAgICAgICAgdGhpcy5kcmFnZ2luZyA9IGRyYWdnaW5nO1xuICAgICAgICB0aGlzLmVtaXR0ZXIgPSBuZXcgY29tbW9uLkVtaXR0ZXIoKTtcbiAgICB9XG4gICAgLy8gc2V0cyBpbml0aWFsSGl0XG4gICAgLy8gc2V0cyBjb29yZEFkanVzdFxuICAgIEhpdERyYWdnaW5nLnByb3RvdHlwZS5wcm9jZXNzRmlyc3RDb29yZCA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICB2YXIgb3JpZ1BvaW50ID0geyBsZWZ0OiBldi5wYWdlWCwgdG9wOiBldi5wYWdlWSB9O1xuICAgICAgICB2YXIgYWRqdXN0ZWRQb2ludCA9IG9yaWdQb2ludDtcbiAgICAgICAgdmFyIHN1YmplY3RFbCA9IGV2LnN1YmplY3RFbDtcbiAgICAgICAgdmFyIHN1YmplY3RSZWN0O1xuICAgICAgICBpZiAoc3ViamVjdEVsIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHsgLy8gaS5lLiBub3QgYSBEb2N1bWVudC9TaGFkb3dSb290XG4gICAgICAgICAgICBzdWJqZWN0UmVjdCA9IGNvbW1vbi5jb21wdXRlUmVjdChzdWJqZWN0RWwpO1xuICAgICAgICAgICAgYWRqdXN0ZWRQb2ludCA9IGNvbW1vbi5jb25zdHJhaW5Qb2ludChhZGp1c3RlZFBvaW50LCBzdWJqZWN0UmVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGluaXRpYWxIaXQgPSB0aGlzLmluaXRpYWxIaXQgPSB0aGlzLnF1ZXJ5SGl0Rm9yT2Zmc2V0KGFkanVzdGVkUG9pbnQubGVmdCwgYWRqdXN0ZWRQb2ludC50b3ApO1xuICAgICAgICBpZiAoaW5pdGlhbEhpdCkge1xuICAgICAgICAgICAgaWYgKHRoaXMudXNlU3ViamVjdENlbnRlciAmJiBzdWJqZWN0UmVjdCkge1xuICAgICAgICAgICAgICAgIHZhciBzbGljZWRTdWJqZWN0UmVjdCA9IGNvbW1vbi5pbnRlcnNlY3RSZWN0cyhzdWJqZWN0UmVjdCwgaW5pdGlhbEhpdC5yZWN0KTtcbiAgICAgICAgICAgICAgICBpZiAoc2xpY2VkU3ViamVjdFJlY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRqdXN0ZWRQb2ludCA9IGNvbW1vbi5nZXRSZWN0Q2VudGVyKHNsaWNlZFN1YmplY3RSZWN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNvb3JkQWRqdXN0ID0gY29tbW9uLmRpZmZQb2ludHMoYWRqdXN0ZWRQb2ludCwgb3JpZ1BvaW50KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY29vcmRBZGp1c3QgPSB7IGxlZnQ6IDAsIHRvcDogMCB9O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBIaXREcmFnZ2luZy5wcm90b3R5cGUuaGFuZGxlTW92ZSA9IGZ1bmN0aW9uIChldiwgZm9yY2VIYW5kbGUpIHtcbiAgICAgICAgdmFyIGhpdCA9IHRoaXMucXVlcnlIaXRGb3JPZmZzZXQoZXYucGFnZVggKyB0aGlzLmNvb3JkQWRqdXN0LmxlZnQsIGV2LnBhZ2VZICsgdGhpcy5jb29yZEFkanVzdC50b3ApO1xuICAgICAgICBpZiAoZm9yY2VIYW5kbGUgfHwgIWlzSGl0c0VxdWFsKHRoaXMubW92aW5nSGl0LCBoaXQpKSB7XG4gICAgICAgICAgICB0aGlzLm1vdmluZ0hpdCA9IGhpdDtcbiAgICAgICAgICAgIHRoaXMuZW1pdHRlci50cmlnZ2VyKCdoaXR1cGRhdGUnLCBoaXQsIGZhbHNlLCBldik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEhpdERyYWdnaW5nLnByb3RvdHlwZS5wcmVwYXJlSGl0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5vZmZzZXRUcmFja2VycyA9IGNvbW1vbi5tYXBIYXNoKHRoaXMuZHJvcHBhYmxlU3RvcmUsIGZ1bmN0aW9uIChpbnRlcmFjdGlvblNldHRpbmdzKSB7XG4gICAgICAgICAgICBpbnRlcmFjdGlvblNldHRpbmdzLmNvbXBvbmVudC5wcmVwYXJlSGl0cygpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBPZmZzZXRUcmFja2VyKGludGVyYWN0aW9uU2V0dGluZ3MuZWwpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEhpdERyYWdnaW5nLnByb3RvdHlwZS5yZWxlYXNlSGl0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9mZnNldFRyYWNrZXJzID0gdGhpcy5vZmZzZXRUcmFja2VycztcbiAgICAgICAgZm9yICh2YXIgaWQgaW4gb2Zmc2V0VHJhY2tlcnMpIHtcbiAgICAgICAgICAgIG9mZnNldFRyYWNrZXJzW2lkXS5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vZmZzZXRUcmFja2VycyA9IHt9O1xuICAgIH07XG4gICAgSGl0RHJhZ2dpbmcucHJvdG90eXBlLnF1ZXJ5SGl0Rm9yT2Zmc2V0ID0gZnVuY3Rpb24gKG9mZnNldExlZnQsIG9mZnNldFRvcCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBkcm9wcGFibGVTdG9yZSA9IF9hLmRyb3BwYWJsZVN0b3JlLCBvZmZzZXRUcmFja2VycyA9IF9hLm9mZnNldFRyYWNrZXJzO1xuICAgICAgICB2YXIgYmVzdEhpdCA9IG51bGw7XG4gICAgICAgIGZvciAodmFyIGlkIGluIGRyb3BwYWJsZVN0b3JlKSB7XG4gICAgICAgICAgICB2YXIgY29tcG9uZW50ID0gZHJvcHBhYmxlU3RvcmVbaWRdLmNvbXBvbmVudDtcbiAgICAgICAgICAgIHZhciBvZmZzZXRUcmFja2VyID0gb2Zmc2V0VHJhY2tlcnNbaWRdO1xuICAgICAgICAgICAgaWYgKG9mZnNldFRyYWNrZXIgJiYgLy8gd2Fzbid0IGRlc3Ryb3llZCBtaWQtZHJhZ1xuICAgICAgICAgICAgICAgIG9mZnNldFRyYWNrZXIuaXNXaXRoaW5DbGlwcGluZyhvZmZzZXRMZWZ0LCBvZmZzZXRUb3ApKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9yaWdpbkxlZnQgPSBvZmZzZXRUcmFja2VyLmNvbXB1dGVMZWZ0KCk7XG4gICAgICAgICAgICAgICAgdmFyIG9yaWdpblRvcCA9IG9mZnNldFRyYWNrZXIuY29tcHV0ZVRvcCgpO1xuICAgICAgICAgICAgICAgIHZhciBwb3NpdGlvbkxlZnQgPSBvZmZzZXRMZWZ0IC0gb3JpZ2luTGVmdDtcbiAgICAgICAgICAgICAgICB2YXIgcG9zaXRpb25Ub3AgPSBvZmZzZXRUb3AgLSBvcmlnaW5Ub3A7XG4gICAgICAgICAgICAgICAgdmFyIG9yaWdSZWN0ID0gb2Zmc2V0VHJhY2tlci5vcmlnUmVjdDtcbiAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSBvcmlnUmVjdC5yaWdodCAtIG9yaWdSZWN0LmxlZnQ7XG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IG9yaWdSZWN0LmJvdHRvbSAtIG9yaWdSZWN0LnRvcDtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgLy8gbXVzdCBiZSB3aXRoaW4gdGhlIGVsZW1lbnQncyBib3VuZHNcbiAgICAgICAgICAgICAgICBwb3NpdGlvbkxlZnQgPj0gMCAmJiBwb3NpdGlvbkxlZnQgPCB3aWR0aCAmJlxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvblRvcCA+PSAwICYmIHBvc2l0aW9uVG9wIDwgaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoaXQgPSBjb21wb25lbnQucXVlcnlIaXQocG9zaXRpb25MZWZ0LCBwb3NpdGlvblRvcCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChoaXQgJiYgKFxuICAgICAgICAgICAgICAgICAgICAvLyBtYWtlIHN1cmUgdGhlIGhpdCBpcyB3aXRoaW4gYWN0aXZlUmFuZ2UsIG1lYW5pbmcgaXQncyBub3QgYSBkZWFkIGNlbGxcbiAgICAgICAgICAgICAgICAgICAgY29tbW9uLnJhbmdlQ29udGFpbnNSYW5nZShoaXQuZGF0ZVByb2ZpbGUuYWN0aXZlUmFuZ2UsIGhpdC5kYXRlU3Bhbi5yYW5nZSkpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoIWJlc3RIaXQgfHwgaGl0LmxheWVyID4gYmVzdEhpdC5sYXllcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhpdC5jb21wb25lbnRJZCA9IGlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGl0LmNvbnRleHQgPSBjb21wb25lbnQuY29udGV4dDtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IGJldHRlciB3YXkgdG8gcmUtb3JpZW50IHJlY3RhbmdsZVxuICAgICAgICAgICAgICAgICAgICAgICAgaGl0LnJlY3QubGVmdCArPSBvcmlnaW5MZWZ0O1xuICAgICAgICAgICAgICAgICAgICAgICAgaGl0LnJlY3QucmlnaHQgKz0gb3JpZ2luTGVmdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhpdC5yZWN0LnRvcCArPSBvcmlnaW5Ub3A7XG4gICAgICAgICAgICAgICAgICAgICAgICBoaXQucmVjdC5ib3R0b20gKz0gb3JpZ2luVG9wO1xuICAgICAgICAgICAgICAgICAgICAgICAgYmVzdEhpdCA9IGhpdDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYmVzdEhpdDtcbiAgICB9O1xuICAgIHJldHVybiBIaXREcmFnZ2luZztcbn0oKSk7XG5mdW5jdGlvbiBpc0hpdHNFcXVhbChoaXQwLCBoaXQxKSB7XG4gICAgaWYgKCFoaXQwICYmICFoaXQxKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoQm9vbGVhbihoaXQwKSAhPT0gQm9vbGVhbihoaXQxKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBjb21tb24uaXNEYXRlU3BhbnNFcXVhbChoaXQwLmRhdGVTcGFuLCBoaXQxLmRhdGVTcGFuKTtcbn1cblxuZnVuY3Rpb24gYnVpbGREYXRlUG9pbnRBcGlXaXRoQ29udGV4dChkYXRlU3BhbiwgY29udGV4dCkge1xuICAgIHZhciBwcm9wcyA9IHt9O1xuICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBjb250ZXh0LnBsdWdpbkhvb2tzLmRhdGVQb2ludFRyYW5zZm9ybXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciB0cmFuc2Zvcm0gPSBfYVtfaV07XG4gICAgICAgIHRzbGliLl9fYXNzaWduKHByb3BzLCB0cmFuc2Zvcm0oZGF0ZVNwYW4sIGNvbnRleHQpKTtcbiAgICB9XG4gICAgdHNsaWIuX19hc3NpZ24ocHJvcHMsIGJ1aWxkRGF0ZVBvaW50QXBpKGRhdGVTcGFuLCBjb250ZXh0LmRhdGVFbnYpKTtcbiAgICByZXR1cm4gcHJvcHM7XG59XG5mdW5jdGlvbiBidWlsZERhdGVQb2ludEFwaShzcGFuLCBkYXRlRW52KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGF0ZTogZGF0ZUVudi50b0RhdGUoc3Bhbi5yYW5nZS5zdGFydCksXG4gICAgICAgIGRhdGVTdHI6IGRhdGVFbnYuZm9ybWF0SXNvKHNwYW4ucmFuZ2Uuc3RhcnQsIHsgb21pdFRpbWU6IHNwYW4uYWxsRGF5IH0pLFxuICAgICAgICBhbGxEYXk6IHNwYW4uYWxsRGF5LFxuICAgIH07XG59XG5cbi8qXG5Nb25pdG9ycyB3aGVuIHRoZSB1c2VyIGNsaWNrcyBvbiBhIHNwZWNpZmljIGRhdGUvdGltZSBvZiBhIGNvbXBvbmVudC5cbkEgcG9pbnRlcmRvd24rcG9pbnRlcnVwIG9uIHRoZSBzYW1lIFwiaGl0XCIgY29uc3RpdHV0ZXMgYSBjbGljay5cbiovXG52YXIgRGF0ZUNsaWNraW5nID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliLl9fZXh0ZW5kcyhEYXRlQ2xpY2tpbmcsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRGF0ZUNsaWNraW5nKHNldHRpbmdzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHNldHRpbmdzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5oYW5kbGVQb2ludGVyRG93biA9IGZ1bmN0aW9uIChwZXYpIHtcbiAgICAgICAgICAgIHZhciBkcmFnZ2luZyA9IF90aGlzLmRyYWdnaW5nO1xuICAgICAgICAgICAgdmFyIGRvd25FbCA9IHBldi5vcmlnRXZlbnQudGFyZ2V0O1xuICAgICAgICAgICAgLy8gZG8gdGhpcyBpbiBwb2ludGVyZG93biAobm90IGRyYWdlbmQpIGJlY2F1c2UgRE9NIG1pZ2h0IGJlIG11dGF0ZWQgYnkgdGhlIHRpbWUgZHJhZ2VuZCBpcyBmaXJlZFxuICAgICAgICAgICAgZHJhZ2dpbmcuc2V0SWdub3JlTW92ZSghX3RoaXMuY29tcG9uZW50LmlzVmFsaWREYXRlRG93bkVsKGRvd25FbCkpO1xuICAgICAgICB9O1xuICAgICAgICAvLyB3b24ndCBldmVuIGZpcmUgaWYgbW92aW5nIHdhcyBpZ25vcmVkXG4gICAgICAgIF90aGlzLmhhbmRsZURyYWdFbmQgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBjb21wb25lbnQgPSBfdGhpcy5jb21wb25lbnQ7XG4gICAgICAgICAgICB2YXIgcG9pbnRlciA9IF90aGlzLmRyYWdnaW5nLnBvaW50ZXI7XG4gICAgICAgICAgICBpZiAoIXBvaW50ZXIud2FzVG91Y2hTY3JvbGwpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2EgPSBfdGhpcy5oaXREcmFnZ2luZywgaW5pdGlhbEhpdCA9IF9hLmluaXRpYWxIaXQsIGZpbmFsSGl0ID0gX2EuZmluYWxIaXQ7XG4gICAgICAgICAgICAgICAgaWYgKGluaXRpYWxIaXQgJiYgZmluYWxIaXQgJiYgaXNIaXRzRXF1YWwoaW5pdGlhbEhpdCwgZmluYWxIaXQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb250ZXh0ID0gY29tcG9uZW50LmNvbnRleHQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhcmcgPSB0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgYnVpbGREYXRlUG9pbnRBcGlXaXRoQ29udGV4dChpbml0aWFsSGl0LmRhdGVTcGFuLCBjb250ZXh0KSksIHsgZGF5RWw6IGluaXRpYWxIaXQuZGF5RWwsIGpzRXZlbnQ6IGV2Lm9yaWdFdmVudCwgdmlldzogY29udGV4dC52aWV3QXBpIHx8IGNvbnRleHQuY2FsZW5kYXJBcGkudmlldyB9KTtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5lbWl0dGVyLnRyaWdnZXIoJ2RhdGVDbGljaycsIGFyZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvLyB3ZSBETyB3YW50IHRvIHdhdGNoIHBvaW50ZXIgbW92ZXMgYmVjYXVzZSBvdGhlcndpc2UgZmluYWxIaXQgd29uJ3QgZ2V0IHBvcHVsYXRlZFxuICAgICAgICBfdGhpcy5kcmFnZ2luZyA9IG5ldyBGZWF0dXJlZnVsRWxlbWVudERyYWdnaW5nKHNldHRpbmdzLmVsKTtcbiAgICAgICAgX3RoaXMuZHJhZ2dpbmcuYXV0b1Njcm9sbGVyLmlzRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgaGl0RHJhZ2dpbmcgPSBfdGhpcy5oaXREcmFnZ2luZyA9IG5ldyBIaXREcmFnZ2luZyhfdGhpcy5kcmFnZ2luZywgY29tbW9uLmludGVyYWN0aW9uU2V0dGluZ3NUb1N0b3JlKHNldHRpbmdzKSk7XG4gICAgICAgIGhpdERyYWdnaW5nLmVtaXR0ZXIub24oJ3BvaW50ZXJkb3duJywgX3RoaXMuaGFuZGxlUG9pbnRlckRvd24pO1xuICAgICAgICBoaXREcmFnZ2luZy5lbWl0dGVyLm9uKCdkcmFnZW5kJywgX3RoaXMuaGFuZGxlRHJhZ0VuZCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRGF0ZUNsaWNraW5nLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmRyYWdnaW5nLmRlc3Ryb3koKTtcbiAgICB9O1xuICAgIHJldHVybiBEYXRlQ2xpY2tpbmc7XG59KGNvbW1vbi5JbnRlcmFjdGlvbikpO1xuXG4vKlxuVHJhY2tzIHdoZW4gdGhlIHVzZXIgc2VsZWN0cyBhIHBvcnRpb24gb2YgdGltZSBvZiBhIGNvbXBvbmVudCxcbmNvbnN0aXR1dGVkIGJ5IGEgZHJhZyBvdmVyIGRhdGUgY2VsbHMsIHdpdGggYSBwb3NzaWJsZSBkZWxheSBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBkcmFnLlxuKi9cbnZhciBEYXRlU2VsZWN0aW5nID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliLl9fZXh0ZW5kcyhEYXRlU2VsZWN0aW5nLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIERhdGVTZWxlY3Rpbmcoc2V0dGluZ3MpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgc2V0dGluZ3MpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmRyYWdTZWxlY3Rpb24gPSBudWxsO1xuICAgICAgICBfdGhpcy5oYW5kbGVQb2ludGVyRG93biA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMsIGNvbXBvbmVudCA9IF9hLmNvbXBvbmVudCwgZHJhZ2dpbmcgPSBfYS5kcmFnZ2luZztcbiAgICAgICAgICAgIHZhciBvcHRpb25zID0gY29tcG9uZW50LmNvbnRleHQub3B0aW9ucztcbiAgICAgICAgICAgIHZhciBjYW5TZWxlY3QgPSBvcHRpb25zLnNlbGVjdGFibGUgJiZcbiAgICAgICAgICAgICAgICBjb21wb25lbnQuaXNWYWxpZERhdGVEb3duRWwoZXYub3JpZ0V2ZW50LnRhcmdldCk7XG4gICAgICAgICAgICAvLyBkb24ndCBib3RoZXIgdG8gd2F0Y2ggZXhwZW5zaXZlIG1vdmVzIGlmIGNvbXBvbmVudCB3b24ndCBkbyBzZWxlY3Rpb25cbiAgICAgICAgICAgIGRyYWdnaW5nLnNldElnbm9yZU1vdmUoIWNhblNlbGVjdCk7XG4gICAgICAgICAgICAvLyBpZiB0b3VjaCwgcmVxdWlyZSB1c2VyIHRvIGhvbGQgZG93blxuICAgICAgICAgICAgZHJhZ2dpbmcuZGVsYXkgPSBldi5pc1RvdWNoID8gZ2V0Q29tcG9uZW50VG91Y2hEZWxheSQxKGNvbXBvbmVudCkgOiBudWxsO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5oYW5kbGVEcmFnU3RhcnQgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIF90aGlzLmNvbXBvbmVudC5jb250ZXh0LmNhbGVuZGFyQXBpLnVuc2VsZWN0KGV2KTsgLy8gdW5zZWxlY3QgcHJldmlvdXMgc2VsZWN0aW9uc1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5oYW5kbGVIaXRVcGRhdGUgPSBmdW5jdGlvbiAoaGl0LCBpc0ZpbmFsKSB7XG4gICAgICAgICAgICB2YXIgY29udGV4dCA9IF90aGlzLmNvbXBvbmVudC5jb250ZXh0O1xuICAgICAgICAgICAgdmFyIGRyYWdTZWxlY3Rpb24gPSBudWxsO1xuICAgICAgICAgICAgdmFyIGlzSW52YWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGhpdCkge1xuICAgICAgICAgICAgICAgIHZhciBpbml0aWFsSGl0ID0gX3RoaXMuaGl0RHJhZ2dpbmcuaW5pdGlhbEhpdDtcbiAgICAgICAgICAgICAgICB2YXIgZGlzYWxsb3dlZCA9IGhpdC5jb21wb25lbnRJZCA9PT0gaW5pdGlhbEhpdC5jb21wb25lbnRJZFxuICAgICAgICAgICAgICAgICAgICAmJiBfdGhpcy5pc0hpdENvbWJvQWxsb3dlZFxuICAgICAgICAgICAgICAgICAgICAmJiAhX3RoaXMuaXNIaXRDb21ib0FsbG93ZWQoaW5pdGlhbEhpdCwgaGl0KTtcbiAgICAgICAgICAgICAgICBpZiAoIWRpc2FsbG93ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZHJhZ1NlbGVjdGlvbiA9IGpvaW5IaXRzSW50b1NlbGVjdGlvbihpbml0aWFsSGl0LCBoaXQsIGNvbnRleHQucGx1Z2luSG9va3MuZGF0ZVNlbGVjdGlvblRyYW5zZm9ybWVycyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghZHJhZ1NlbGVjdGlvbiB8fCAhY29tbW9uLmlzRGF0ZVNlbGVjdGlvblZhbGlkKGRyYWdTZWxlY3Rpb24sIGhpdC5kYXRlUHJvZmlsZSwgY29udGV4dCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNJbnZhbGlkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgZHJhZ1NlbGVjdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRyYWdTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoKHsgdHlwZTogJ1NFTEVDVF9EQVRFUycsIHNlbGVjdGlvbjogZHJhZ1NlbGVjdGlvbiB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCFpc0ZpbmFsKSB7IC8vIG9ubHkgdW5zZWxlY3QgaWYgbW92ZWQgYXdheSB3aGlsZSBkcmFnZ2luZ1xuICAgICAgICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2goeyB0eXBlOiAnVU5TRUxFQ1RfREFURVMnIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc0ludmFsaWQpIHtcbiAgICAgICAgICAgICAgICBjb21tb24uZW5hYmxlQ3Vyc29yKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb21tb24uZGlzYWJsZUN1cnNvcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc0ZpbmFsKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZHJhZ1NlbGVjdGlvbiA9IGRyYWdTZWxlY3Rpb247IC8vIG9ubHkgY2xlYXIgaWYgbW92ZWQgYXdheSBmcm9tIGFsbCBoaXRzIHdoaWxlIGRyYWdnaW5nXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLmhhbmRsZVBvaW50ZXJVcCA9IGZ1bmN0aW9uIChwZXYpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5kcmFnU2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgLy8gc2VsZWN0aW9uIGlzIGFscmVhZHkgcmVuZGVyZWQsIHNvIGp1c3QgbmVlZCB0byByZXBvcnQgc2VsZWN0aW9uXG4gICAgICAgICAgICAgICAgY29tbW9uLnRyaWdnZXJEYXRlU2VsZWN0KF90aGlzLmRyYWdTZWxlY3Rpb24sIHBldiwgX3RoaXMuY29tcG9uZW50LmNvbnRleHQpO1xuICAgICAgICAgICAgICAgIF90aGlzLmRyYWdTZWxlY3Rpb24gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgY29tcG9uZW50ID0gc2V0dGluZ3MuY29tcG9uZW50O1xuICAgICAgICB2YXIgb3B0aW9ucyA9IGNvbXBvbmVudC5jb250ZXh0Lm9wdGlvbnM7XG4gICAgICAgIHZhciBkcmFnZ2luZyA9IF90aGlzLmRyYWdnaW5nID0gbmV3IEZlYXR1cmVmdWxFbGVtZW50RHJhZ2dpbmcoc2V0dGluZ3MuZWwpO1xuICAgICAgICBkcmFnZ2luZy50b3VjaFNjcm9sbEFsbG93ZWQgPSBmYWxzZTtcbiAgICAgICAgZHJhZ2dpbmcubWluRGlzdGFuY2UgPSBvcHRpb25zLnNlbGVjdE1pbkRpc3RhbmNlIHx8IDA7XG4gICAgICAgIGRyYWdnaW5nLmF1dG9TY3JvbGxlci5pc0VuYWJsZWQgPSBvcHRpb25zLmRyYWdTY3JvbGw7XG4gICAgICAgIHZhciBoaXREcmFnZ2luZyA9IF90aGlzLmhpdERyYWdnaW5nID0gbmV3IEhpdERyYWdnaW5nKF90aGlzLmRyYWdnaW5nLCBjb21tb24uaW50ZXJhY3Rpb25TZXR0aW5nc1RvU3RvcmUoc2V0dGluZ3MpKTtcbiAgICAgICAgaGl0RHJhZ2dpbmcuZW1pdHRlci5vbigncG9pbnRlcmRvd24nLCBfdGhpcy5oYW5kbGVQb2ludGVyRG93bik7XG4gICAgICAgIGhpdERyYWdnaW5nLmVtaXR0ZXIub24oJ2RyYWdzdGFydCcsIF90aGlzLmhhbmRsZURyYWdTdGFydCk7XG4gICAgICAgIGhpdERyYWdnaW5nLmVtaXR0ZXIub24oJ2hpdHVwZGF0ZScsIF90aGlzLmhhbmRsZUhpdFVwZGF0ZSk7XG4gICAgICAgIGhpdERyYWdnaW5nLmVtaXR0ZXIub24oJ3BvaW50ZXJ1cCcsIF90aGlzLmhhbmRsZVBvaW50ZXJVcCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRGF0ZVNlbGVjdGluZy5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5kcmFnZ2luZy5kZXN0cm95KCk7XG4gICAgfTtcbiAgICByZXR1cm4gRGF0ZVNlbGVjdGluZztcbn0oY29tbW9uLkludGVyYWN0aW9uKSk7XG5mdW5jdGlvbiBnZXRDb21wb25lbnRUb3VjaERlbGF5JDEoY29tcG9uZW50KSB7XG4gICAgdmFyIG9wdGlvbnMgPSBjb21wb25lbnQuY29udGV4dC5vcHRpb25zO1xuICAgIHZhciBkZWxheSA9IG9wdGlvbnMuc2VsZWN0TG9uZ1ByZXNzRGVsYXk7XG4gICAgaWYgKGRlbGF5ID09IG51bGwpIHtcbiAgICAgICAgZGVsYXkgPSBvcHRpb25zLmxvbmdQcmVzc0RlbGF5O1xuICAgIH1cbiAgICByZXR1cm4gZGVsYXk7XG59XG5mdW5jdGlvbiBqb2luSGl0c0ludG9TZWxlY3Rpb24oaGl0MCwgaGl0MSwgZGF0ZVNlbGVjdGlvblRyYW5zZm9ybWVycykge1xuICAgIHZhciBkYXRlU3BhbjAgPSBoaXQwLmRhdGVTcGFuO1xuICAgIHZhciBkYXRlU3BhbjEgPSBoaXQxLmRhdGVTcGFuO1xuICAgIHZhciBtcyA9IFtcbiAgICAgICAgZGF0ZVNwYW4wLnJhbmdlLnN0YXJ0LFxuICAgICAgICBkYXRlU3BhbjAucmFuZ2UuZW5kLFxuICAgICAgICBkYXRlU3BhbjEucmFuZ2Uuc3RhcnQsXG4gICAgICAgIGRhdGVTcGFuMS5yYW5nZS5lbmQsXG4gICAgXTtcbiAgICBtcy5zb3J0KGNvbW1vbi5jb21wYXJlTnVtYmVycyk7XG4gICAgdmFyIHByb3BzID0ge307XG4gICAgZm9yICh2YXIgX2kgPSAwLCBkYXRlU2VsZWN0aW9uVHJhbnNmb3JtZXJzXzEgPSBkYXRlU2VsZWN0aW9uVHJhbnNmb3JtZXJzOyBfaSA8IGRhdGVTZWxlY3Rpb25UcmFuc2Zvcm1lcnNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIHRyYW5zZm9ybWVyID0gZGF0ZVNlbGVjdGlvblRyYW5zZm9ybWVyc18xW19pXTtcbiAgICAgICAgdmFyIHJlcyA9IHRyYW5zZm9ybWVyKGhpdDAsIGhpdDEpO1xuICAgICAgICBpZiAocmVzID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcykge1xuICAgICAgICAgICAgdHNsaWIuX19hc3NpZ24ocHJvcHMsIHJlcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHJvcHMucmFuZ2UgPSB7IHN0YXJ0OiBtc1swXSwgZW5kOiBtc1szXSB9O1xuICAgIHByb3BzLmFsbERheSA9IGRhdGVTcGFuMC5hbGxEYXk7XG4gICAgcmV0dXJuIHByb3BzO1xufVxuXG52YXIgRXZlbnREcmFnZ2luZyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYi5fX2V4dGVuZHMoRXZlbnREcmFnZ2luZywgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBFdmVudERyYWdnaW5nKHNldHRpbmdzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHNldHRpbmdzKSB8fCB0aGlzO1xuICAgICAgICAvLyBpbnRlcm5hbCBzdGF0ZVxuICAgICAgICBfdGhpcy5zdWJqZWN0RWwgPSBudWxsO1xuICAgICAgICBfdGhpcy5zdWJqZWN0U2VnID0gbnVsbDsgLy8gdGhlIHNlZyBiZWluZyBzZWxlY3RlZC9kcmFnZ2VkXG4gICAgICAgIF90aGlzLmlzRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuZXZlbnRSYW5nZSA9IG51bGw7XG4gICAgICAgIF90aGlzLnJlbGV2YW50RXZlbnRzID0gbnVsbDsgLy8gdGhlIGV2ZW50cyBiZWluZyBkcmFnZ2VkXG4gICAgICAgIF90aGlzLnJlY2VpdmluZ0NvbnRleHQgPSBudWxsO1xuICAgICAgICBfdGhpcy52YWxpZE11dGF0aW9uID0gbnVsbDtcbiAgICAgICAgX3RoaXMubXV0YXRlZFJlbGV2YW50RXZlbnRzID0gbnVsbDtcbiAgICAgICAgX3RoaXMuaGFuZGxlUG9pbnRlckRvd24gPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBvcmlnVGFyZ2V0ID0gZXYub3JpZ0V2ZW50LnRhcmdldDtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLCBjb21wb25lbnQgPSBfYS5jb21wb25lbnQsIGRyYWdnaW5nID0gX2EuZHJhZ2dpbmc7XG4gICAgICAgICAgICB2YXIgbWlycm9yID0gZHJhZ2dpbmcubWlycm9yO1xuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBjb21wb25lbnQuY29udGV4dC5vcHRpb25zO1xuICAgICAgICAgICAgdmFyIGluaXRpYWxDb250ZXh0ID0gY29tcG9uZW50LmNvbnRleHQ7XG4gICAgICAgICAgICBfdGhpcy5zdWJqZWN0RWwgPSBldi5zdWJqZWN0RWw7XG4gICAgICAgICAgICB2YXIgc3ViamVjdFNlZyA9IF90aGlzLnN1YmplY3RTZWcgPSBjb21tb24uZ2V0RWxTZWcoZXYuc3ViamVjdEVsKTtcbiAgICAgICAgICAgIHZhciBldmVudFJhbmdlID0gX3RoaXMuZXZlbnRSYW5nZSA9IHN1YmplY3RTZWcuZXZlbnRSYW5nZTtcbiAgICAgICAgICAgIHZhciBldmVudEluc3RhbmNlSWQgPSBldmVudFJhbmdlLmluc3RhbmNlLmluc3RhbmNlSWQ7XG4gICAgICAgICAgICBfdGhpcy5yZWxldmFudEV2ZW50cyA9IGNvbW1vbi5nZXRSZWxldmFudEV2ZW50cyhpbml0aWFsQ29udGV4dC5nZXRDdXJyZW50RGF0YSgpLmV2ZW50U3RvcmUsIGV2ZW50SW5zdGFuY2VJZCk7XG4gICAgICAgICAgICBkcmFnZ2luZy5taW5EaXN0YW5jZSA9IGV2LmlzVG91Y2ggPyAwIDogb3B0aW9ucy5ldmVudERyYWdNaW5EaXN0YW5jZTtcbiAgICAgICAgICAgIGRyYWdnaW5nLmRlbGF5ID1cbiAgICAgICAgICAgICAgICAvLyBvbmx5IGRvIGEgdG91Y2ggZGVsYXkgaWYgdG91Y2ggYW5kIHRoaXMgZXZlbnQgaGFzbid0IGJlZW4gc2VsZWN0ZWQgeWV0XG4gICAgICAgICAgICAgICAgKGV2LmlzVG91Y2ggJiYgZXZlbnRJbnN0YW5jZUlkICE9PSBjb21wb25lbnQucHJvcHMuZXZlbnRTZWxlY3Rpb24pID9cbiAgICAgICAgICAgICAgICAgICAgZ2V0Q29tcG9uZW50VG91Y2hEZWxheShjb21wb25lbnQpIDpcbiAgICAgICAgICAgICAgICAgICAgbnVsbDtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmZpeGVkTWlycm9yUGFyZW50KSB7XG4gICAgICAgICAgICAgICAgbWlycm9yLnBhcmVudE5vZGUgPSBvcHRpb25zLmZpeGVkTWlycm9yUGFyZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbWlycm9yLnBhcmVudE5vZGUgPSBjb21tb24uZWxlbWVudENsb3Nlc3Qob3JpZ1RhcmdldCwgJy5mYycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWlycm9yLnJldmVydER1cmF0aW9uID0gb3B0aW9ucy5kcmFnUmV2ZXJ0RHVyYXRpb247XG4gICAgICAgICAgICB2YXIgaXNWYWxpZCA9IGNvbXBvbmVudC5pc1ZhbGlkU2VnRG93bkVsKG9yaWdUYXJnZXQpICYmXG4gICAgICAgICAgICAgICAgIWNvbW1vbi5lbGVtZW50Q2xvc2VzdChvcmlnVGFyZ2V0LCAnLmZjLWV2ZW50LXJlc2l6ZXInKTsgLy8gTk9UIG9uIGEgcmVzaXplclxuICAgICAgICAgICAgZHJhZ2dpbmcuc2V0SWdub3JlTW92ZSghaXNWYWxpZCk7XG4gICAgICAgICAgICAvLyBkaXNhYmxlIGRyYWdnaW5nIGZvciBlbGVtZW50cyB0aGF0IGFyZSByZXNpemFibGUgKGllLCBzZWxlY3RhYmxlKVxuICAgICAgICAgICAgLy8gYnV0IGFyZSBub3QgZHJhZ2dhYmxlXG4gICAgICAgICAgICBfdGhpcy5pc0RyYWdnaW5nID0gaXNWYWxpZCAmJlxuICAgICAgICAgICAgICAgIGV2LnN1YmplY3RFbC5jbGFzc0xpc3QuY29udGFpbnMoJ2ZjLWV2ZW50LWRyYWdnYWJsZScpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5oYW5kbGVEcmFnU3RhcnQgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBpbml0aWFsQ29udGV4dCA9IF90aGlzLmNvbXBvbmVudC5jb250ZXh0O1xuICAgICAgICAgICAgdmFyIGV2ZW50UmFuZ2UgPSBfdGhpcy5ldmVudFJhbmdlO1xuICAgICAgICAgICAgdmFyIGV2ZW50SW5zdGFuY2VJZCA9IGV2ZW50UmFuZ2UuaW5zdGFuY2UuaW5zdGFuY2VJZDtcbiAgICAgICAgICAgIGlmIChldi5pc1RvdWNoKSB7XG4gICAgICAgICAgICAgICAgLy8gbmVlZCB0byBzZWxlY3QgYSBkaWZmZXJlbnQgZXZlbnQ/XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50SW5zdGFuY2VJZCAhPT0gX3RoaXMuY29tcG9uZW50LnByb3BzLmV2ZW50U2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxDb250ZXh0LmRpc3BhdGNoKHsgdHlwZTogJ1NFTEVDVF9FVkVOVCcsIGV2ZW50SW5zdGFuY2VJZDogZXZlbnRJbnN0YW5jZUlkIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGlmIG5vdyB1c2luZyBtb3VzZSwgYnV0IHdhcyBwcmV2aW91cyB0b3VjaCBpbnRlcmFjdGlvbiwgY2xlYXIgc2VsZWN0ZWQgZXZlbnRcbiAgICAgICAgICAgICAgICBpbml0aWFsQ29udGV4dC5kaXNwYXRjaCh7IHR5cGU6ICdVTlNFTEVDVF9FVkVOVCcgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoX3RoaXMuaXNEcmFnZ2luZykge1xuICAgICAgICAgICAgICAgIGluaXRpYWxDb250ZXh0LmNhbGVuZGFyQXBpLnVuc2VsZWN0KGV2KTsgLy8gdW5zZWxlY3QgKmRhdGUqIHNlbGVjdGlvblxuICAgICAgICAgICAgICAgIGluaXRpYWxDb250ZXh0LmVtaXR0ZXIudHJpZ2dlcignZXZlbnREcmFnU3RhcnQnLCB7XG4gICAgICAgICAgICAgICAgICAgIGVsOiBfdGhpcy5zdWJqZWN0RWwsXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50OiBuZXcgY29tbW9uLkV2ZW50QXBpKGluaXRpYWxDb250ZXh0LCBldmVudFJhbmdlLmRlZiwgZXZlbnRSYW5nZS5pbnN0YW5jZSksXG4gICAgICAgICAgICAgICAgICAgIGpzRXZlbnQ6IGV2Lm9yaWdFdmVudCxcbiAgICAgICAgICAgICAgICAgICAgdmlldzogaW5pdGlhbENvbnRleHQudmlld0FwaSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuaGFuZGxlSGl0VXBkYXRlID0gZnVuY3Rpb24gKGhpdCwgaXNGaW5hbCkge1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5pc0RyYWdnaW5nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHJlbGV2YW50RXZlbnRzID0gX3RoaXMucmVsZXZhbnRFdmVudHM7XG4gICAgICAgICAgICB2YXIgaW5pdGlhbEhpdCA9IF90aGlzLmhpdERyYWdnaW5nLmluaXRpYWxIaXQ7XG4gICAgICAgICAgICB2YXIgaW5pdGlhbENvbnRleHQgPSBfdGhpcy5jb21wb25lbnQuY29udGV4dDtcbiAgICAgICAgICAgIC8vIHN0YXRlcyBiYXNlZCBvbiBuZXcgaGl0XG4gICAgICAgICAgICB2YXIgcmVjZWl2aW5nQ29udGV4dCA9IG51bGw7XG4gICAgICAgICAgICB2YXIgbXV0YXRpb24gPSBudWxsO1xuICAgICAgICAgICAgdmFyIG11dGF0ZWRSZWxldmFudEV2ZW50cyA9IG51bGw7XG4gICAgICAgICAgICB2YXIgaXNJbnZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgaW50ZXJhY3Rpb24gPSB7XG4gICAgICAgICAgICAgICAgYWZmZWN0ZWRFdmVudHM6IHJlbGV2YW50RXZlbnRzLFxuICAgICAgICAgICAgICAgIG11dGF0ZWRFdmVudHM6IGNvbW1vbi5jcmVhdGVFbXB0eUV2ZW50U3RvcmUoKSxcbiAgICAgICAgICAgICAgICBpc0V2ZW50OiB0cnVlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChoaXQpIHtcbiAgICAgICAgICAgICAgICByZWNlaXZpbmdDb250ZXh0ID0gaGl0LmNvbnRleHQ7XG4gICAgICAgICAgICAgICAgdmFyIHJlY2VpdmluZ09wdGlvbnMgPSByZWNlaXZpbmdDb250ZXh0Lm9wdGlvbnM7XG4gICAgICAgICAgICAgICAgaWYgKGluaXRpYWxDb250ZXh0ID09PSByZWNlaXZpbmdDb250ZXh0IHx8XG4gICAgICAgICAgICAgICAgICAgIChyZWNlaXZpbmdPcHRpb25zLmVkaXRhYmxlICYmIHJlY2VpdmluZ09wdGlvbnMuZHJvcHBhYmxlKSkge1xuICAgICAgICAgICAgICAgICAgICBtdXRhdGlvbiA9IGNvbXB1dGVFdmVudE11dGF0aW9uKGluaXRpYWxIaXQsIGhpdCwgcmVjZWl2aW5nQ29udGV4dC5nZXRDdXJyZW50RGF0YSgpLnBsdWdpbkhvb2tzLmV2ZW50RHJhZ011dGF0aW9uTWFzc2FnZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG11dGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtdXRhdGVkUmVsZXZhbnRFdmVudHMgPSBjb21tb24uYXBwbHlNdXRhdGlvblRvRXZlbnRTdG9yZShyZWxldmFudEV2ZW50cywgcmVjZWl2aW5nQ29udGV4dC5nZXRDdXJyZW50RGF0YSgpLmV2ZW50VWlCYXNlcywgbXV0YXRpb24sIHJlY2VpdmluZ0NvbnRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJhY3Rpb24ubXV0YXRlZEV2ZW50cyA9IG11dGF0ZWRSZWxldmFudEV2ZW50cztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY29tbW9uLmlzSW50ZXJhY3Rpb25WYWxpZChpbnRlcmFjdGlvbiwgaGl0LmRhdGVQcm9maWxlLCByZWNlaXZpbmdDb250ZXh0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzSW52YWxpZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbXV0YXRpb24gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG11dGF0ZWRSZWxldmFudEV2ZW50cyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJhY3Rpb24ubXV0YXRlZEV2ZW50cyA9IGNvbW1vbi5jcmVhdGVFbXB0eUV2ZW50U3RvcmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVjZWl2aW5nQ29udGV4dCA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMuZGlzcGxheURyYWcocmVjZWl2aW5nQ29udGV4dCwgaW50ZXJhY3Rpb24pO1xuICAgICAgICAgICAgaWYgKCFpc0ludmFsaWQpIHtcbiAgICAgICAgICAgICAgICBjb21tb24uZW5hYmxlQ3Vyc29yKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb21tb24uZGlzYWJsZUN1cnNvcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc0ZpbmFsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGluaXRpYWxDb250ZXh0ID09PSByZWNlaXZpbmdDb250ZXh0ICYmIC8vIFRPRE86IHdyaXRlIHRlc3QgZm9yIHRoaXNcbiAgICAgICAgICAgICAgICAgICAgaXNIaXRzRXF1YWwoaW5pdGlhbEhpdCwgaGl0KSkge1xuICAgICAgICAgICAgICAgICAgICBtdXRhdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF90aGlzLmRyYWdnaW5nLnNldE1pcnJvck5lZWRzUmV2ZXJ0KCFtdXRhdGlvbik7XG4gICAgICAgICAgICAgICAgLy8gcmVuZGVyIHRoZSBtaXJyb3IgaWYgbm8gYWxyZWFkeS1yZW5kZXJlZCBtaXJyb3JcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiB3aXNoIHdlIGNvdWxkIHNvbWVob3cgd2FpdCBmb3IgZGlzcGF0Y2ggdG8gZ3VhcmFudGVlIHJlbmRlclxuICAgICAgICAgICAgICAgIF90aGlzLmRyYWdnaW5nLnNldE1pcnJvcklzVmlzaWJsZSghaGl0IHx8ICFjb21tb24uZ2V0RWxSb290KF90aGlzLnN1YmplY3RFbCkucXVlcnlTZWxlY3RvcignLmZjLWV2ZW50LW1pcnJvcicpKTtcbiAgICAgICAgICAgICAgICAvLyBhc3NpZ24gc3RhdGVzIGJhc2VkIG9uIG5ldyBoaXRcbiAgICAgICAgICAgICAgICBfdGhpcy5yZWNlaXZpbmdDb250ZXh0ID0gcmVjZWl2aW5nQ29udGV4dDtcbiAgICAgICAgICAgICAgICBfdGhpcy52YWxpZE11dGF0aW9uID0gbXV0YXRpb247XG4gICAgICAgICAgICAgICAgX3RoaXMubXV0YXRlZFJlbGV2YW50RXZlbnRzID0gbXV0YXRlZFJlbGV2YW50RXZlbnRzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5oYW5kbGVQb2ludGVyVXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIV90aGlzLmlzRHJhZ2dpbmcpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5jbGVhbnVwKCk7IC8vIGJlY2F1c2UgaGFuZGxlRHJhZ0VuZCB3b24ndCBmaXJlXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLmhhbmRsZURyYWdFbmQgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5pc0RyYWdnaW5nKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluaXRpYWxDb250ZXh0XzEgPSBfdGhpcy5jb21wb25lbnQuY29udGV4dDtcbiAgICAgICAgICAgICAgICB2YXIgaW5pdGlhbFZpZXcgPSBpbml0aWFsQ29udGV4dF8xLnZpZXdBcGk7XG4gICAgICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMsIHJlY2VpdmluZ0NvbnRleHRfMSA9IF9hLnJlY2VpdmluZ0NvbnRleHQsIHZhbGlkTXV0YXRpb24gPSBfYS52YWxpZE11dGF0aW9uO1xuICAgICAgICAgICAgICAgIHZhciBldmVudERlZiA9IF90aGlzLmV2ZW50UmFuZ2UuZGVmO1xuICAgICAgICAgICAgICAgIHZhciBldmVudEluc3RhbmNlID0gX3RoaXMuZXZlbnRSYW5nZS5pbnN0YW5jZTtcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnRBcGkgPSBuZXcgY29tbW9uLkV2ZW50QXBpKGluaXRpYWxDb250ZXh0XzEsIGV2ZW50RGVmLCBldmVudEluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB2YXIgcmVsZXZhbnRFdmVudHNfMSA9IF90aGlzLnJlbGV2YW50RXZlbnRzO1xuICAgICAgICAgICAgICAgIHZhciBtdXRhdGVkUmVsZXZhbnRFdmVudHNfMSA9IF90aGlzLm11dGF0ZWRSZWxldmFudEV2ZW50cztcbiAgICAgICAgICAgICAgICB2YXIgZmluYWxIaXQgPSBfdGhpcy5oaXREcmFnZ2luZy5maW5hbEhpdDtcbiAgICAgICAgICAgICAgICBfdGhpcy5jbGVhckRyYWcoKTsgLy8gbXVzdCBoYXBwZW4gYWZ0ZXIgcmV2ZXJ0IGFuaW1hdGlvblxuICAgICAgICAgICAgICAgIGluaXRpYWxDb250ZXh0XzEuZW1pdHRlci50cmlnZ2VyKCdldmVudERyYWdTdG9wJywge1xuICAgICAgICAgICAgICAgICAgICBlbDogX3RoaXMuc3ViamVjdEVsLFxuICAgICAgICAgICAgICAgICAgICBldmVudDogZXZlbnRBcGksXG4gICAgICAgICAgICAgICAgICAgIGpzRXZlbnQ6IGV2Lm9yaWdFdmVudCxcbiAgICAgICAgICAgICAgICAgICAgdmlldzogaW5pdGlhbFZpZXcsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHZhbGlkTXV0YXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZHJvcHBlZCB3aXRoaW4gc2FtZSBjYWxlbmRhclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVjZWl2aW5nQ29udGV4dF8xID09PSBpbml0aWFsQ29udGV4dF8xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXBkYXRlZEV2ZW50QXBpID0gbmV3IGNvbW1vbi5FdmVudEFwaShpbml0aWFsQ29udGV4dF8xLCBtdXRhdGVkUmVsZXZhbnRFdmVudHNfMS5kZWZzW2V2ZW50RGVmLmRlZklkXSwgZXZlbnRJbnN0YW5jZSA/IG11dGF0ZWRSZWxldmFudEV2ZW50c18xLmluc3RhbmNlc1tldmVudEluc3RhbmNlLmluc3RhbmNlSWRdIDogbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsQ29udGV4dF8xLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnTUVSR0VfRVZFTlRTJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFN0b3JlOiBtdXRhdGVkUmVsZXZhbnRFdmVudHNfMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50Q2hhbmdlQXJnID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9sZEV2ZW50OiBldmVudEFwaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudDogdXBkYXRlZEV2ZW50QXBpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbGF0ZWRFdmVudHM6IGNvbW1vbi5idWlsZEV2ZW50QXBpcyhtdXRhdGVkUmVsZXZhbnRFdmVudHNfMSwgaW5pdGlhbENvbnRleHRfMSwgZXZlbnRJbnN0YW5jZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV2ZXJ0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxDb250ZXh0XzEuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ01FUkdFX0VWRU5UUycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFN0b3JlOiByZWxldmFudEV2ZW50c18xLCAvLyB0aGUgcHJlLWNoYW5nZSBkYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRyYW5zZm9ybWVkID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9iID0gaW5pdGlhbENvbnRleHRfMS5nZXRDdXJyZW50RGF0YSgpLnBsdWdpbkhvb2tzLmV2ZW50RHJvcFRyYW5zZm9ybWVyczsgX2kgPCBfYi5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHJhbnNmb3JtZXIgPSBfYltfaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHNsaWIuX19hc3NpZ24odHJhbnNmb3JtZWQsIHRyYW5zZm9ybWVyKHZhbGlkTXV0YXRpb24sIGluaXRpYWxDb250ZXh0XzEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxDb250ZXh0XzEuZW1pdHRlci50cmlnZ2VyKCdldmVudERyb3AnLCB0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgZXZlbnRDaGFuZ2VBcmcpLCB0cmFuc2Zvcm1lZCksIHsgZWw6IGV2LnN1YmplY3RFbCwgZGVsdGE6IHZhbGlkTXV0YXRpb24uZGF0ZXNEZWx0YSwganNFdmVudDogZXYub3JpZ0V2ZW50LCB2aWV3OiBpbml0aWFsVmlldyB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsQ29udGV4dF8xLmVtaXR0ZXIudHJpZ2dlcignZXZlbnRDaGFuZ2UnLCBldmVudENoYW5nZUFyZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkcm9wcGVkIGluIGRpZmZlcmVudCBjYWxlbmRhclxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlY2VpdmluZ0NvbnRleHRfMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50UmVtb3ZlQXJnID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBldmVudEFwaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWxhdGVkRXZlbnRzOiBjb21tb24uYnVpbGRFdmVudEFwaXMocmVsZXZhbnRFdmVudHNfMSwgaW5pdGlhbENvbnRleHRfMSwgZXZlbnRJbnN0YW5jZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV2ZXJ0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxDb250ZXh0XzEuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ01FUkdFX0VWRU5UUycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFN0b3JlOiByZWxldmFudEV2ZW50c18xLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxDb250ZXh0XzEuZW1pdHRlci50cmlnZ2VyKCdldmVudExlYXZlJywgdHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24oe30sIGV2ZW50UmVtb3ZlQXJnKSwgeyBkcmFnZ2VkRWw6IGV2LnN1YmplY3RFbCwgdmlldzogaW5pdGlhbFZpZXcgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbENvbnRleHRfMS5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1JFTU9WRV9FVkVOVFMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50U3RvcmU6IHJlbGV2YW50RXZlbnRzXzEsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxDb250ZXh0XzEuZW1pdHRlci50cmlnZ2VyKCdldmVudFJlbW92ZScsIGV2ZW50UmVtb3ZlQXJnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhZGRlZEV2ZW50RGVmID0gbXV0YXRlZFJlbGV2YW50RXZlbnRzXzEuZGVmc1tldmVudERlZi5kZWZJZF07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWRkZWRFdmVudEluc3RhbmNlID0gbXV0YXRlZFJlbGV2YW50RXZlbnRzXzEuaW5zdGFuY2VzW2V2ZW50SW5zdGFuY2UuaW5zdGFuY2VJZF07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWRkZWRFdmVudEFwaSA9IG5ldyBjb21tb24uRXZlbnRBcGkocmVjZWl2aW5nQ29udGV4dF8xLCBhZGRlZEV2ZW50RGVmLCBhZGRlZEV2ZW50SW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVjZWl2aW5nQ29udGV4dF8xLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnTUVSR0VfRVZFTlRTJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFN0b3JlOiBtdXRhdGVkUmVsZXZhbnRFdmVudHNfMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50QWRkQXJnID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBhZGRlZEV2ZW50QXBpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbGF0ZWRFdmVudHM6IGNvbW1vbi5idWlsZEV2ZW50QXBpcyhtdXRhdGVkUmVsZXZhbnRFdmVudHNfMSwgcmVjZWl2aW5nQ29udGV4dF8xLCBhZGRlZEV2ZW50SW5zdGFuY2UpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldmVydDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNlaXZpbmdDb250ZXh0XzEuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1JFTU9WRV9FVkVOVFMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRTdG9yZTogbXV0YXRlZFJlbGV2YW50RXZlbnRzXzEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVjZWl2aW5nQ29udGV4dF8xLmVtaXR0ZXIudHJpZ2dlcignZXZlbnRBZGQnLCBldmVudEFkZEFyZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXYuaXNUb3VjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY2VpdmluZ0NvbnRleHRfMS5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdTRUxFQ1RfRVZFTlQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudEluc3RhbmNlSWQ6IGV2ZW50SW5zdGFuY2UuaW5zdGFuY2VJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY2VpdmluZ0NvbnRleHRfMS5lbWl0dGVyLnRyaWdnZXIoJ2Ryb3AnLCB0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgYnVpbGREYXRlUG9pbnRBcGlXaXRoQ29udGV4dChmaW5hbEhpdC5kYXRlU3BhbiwgcmVjZWl2aW5nQ29udGV4dF8xKSksIHsgZHJhZ2dlZEVsOiBldi5zdWJqZWN0RWwsIGpzRXZlbnQ6IGV2Lm9yaWdFdmVudCwgdmlldzogZmluYWxIaXQuY29udGV4dC52aWV3QXBpIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY2VpdmluZ0NvbnRleHRfMS5lbWl0dGVyLnRyaWdnZXIoJ2V2ZW50UmVjZWl2ZScsIHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHt9LCBldmVudEFkZEFyZyksIHsgZHJhZ2dlZEVsOiBldi5zdWJqZWN0RWwsIHZpZXc6IGZpbmFsSGl0LmNvbnRleHQudmlld0FwaSB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxDb250ZXh0XzEuZW1pdHRlci50cmlnZ2VyKCdfbm9FdmVudERyb3AnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5jbGVhbnVwKCk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBjb21wb25lbnQgPSBfdGhpcy5jb21wb25lbnQ7XG4gICAgICAgIHZhciBvcHRpb25zID0gY29tcG9uZW50LmNvbnRleHQub3B0aW9ucztcbiAgICAgICAgdmFyIGRyYWdnaW5nID0gX3RoaXMuZHJhZ2dpbmcgPSBuZXcgRmVhdHVyZWZ1bEVsZW1lbnREcmFnZ2luZyhzZXR0aW5ncy5lbCk7XG4gICAgICAgIGRyYWdnaW5nLnBvaW50ZXIuc2VsZWN0b3IgPSBFdmVudERyYWdnaW5nLlNFTEVDVE9SO1xuICAgICAgICBkcmFnZ2luZy50b3VjaFNjcm9sbEFsbG93ZWQgPSBmYWxzZTtcbiAgICAgICAgZHJhZ2dpbmcuYXV0b1Njcm9sbGVyLmlzRW5hYmxlZCA9IG9wdGlvbnMuZHJhZ1Njcm9sbDtcbiAgICAgICAgdmFyIGhpdERyYWdnaW5nID0gX3RoaXMuaGl0RHJhZ2dpbmcgPSBuZXcgSGl0RHJhZ2dpbmcoX3RoaXMuZHJhZ2dpbmcsIGNvbW1vbi5pbnRlcmFjdGlvblNldHRpbmdzU3RvcmUpO1xuICAgICAgICBoaXREcmFnZ2luZy51c2VTdWJqZWN0Q2VudGVyID0gc2V0dGluZ3MudXNlRXZlbnRDZW50ZXI7XG4gICAgICAgIGhpdERyYWdnaW5nLmVtaXR0ZXIub24oJ3BvaW50ZXJkb3duJywgX3RoaXMuaGFuZGxlUG9pbnRlckRvd24pO1xuICAgICAgICBoaXREcmFnZ2luZy5lbWl0dGVyLm9uKCdkcmFnc3RhcnQnLCBfdGhpcy5oYW5kbGVEcmFnU3RhcnQpO1xuICAgICAgICBoaXREcmFnZ2luZy5lbWl0dGVyLm9uKCdoaXR1cGRhdGUnLCBfdGhpcy5oYW5kbGVIaXRVcGRhdGUpO1xuICAgICAgICBoaXREcmFnZ2luZy5lbWl0dGVyLm9uKCdwb2ludGVydXAnLCBfdGhpcy5oYW5kbGVQb2ludGVyVXApO1xuICAgICAgICBoaXREcmFnZ2luZy5lbWl0dGVyLm9uKCdkcmFnZW5kJywgX3RoaXMuaGFuZGxlRHJhZ0VuZCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRXZlbnREcmFnZ2luZy5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5kcmFnZ2luZy5kZXN0cm95KCk7XG4gICAgfTtcbiAgICAvLyByZW5kZXIgYSBkcmFnIHN0YXRlIG9uIHRoZSBuZXh0IHJlY2VpdmluZ0NhbGVuZGFyXG4gICAgRXZlbnREcmFnZ2luZy5wcm90b3R5cGUuZGlzcGxheURyYWcgPSBmdW5jdGlvbiAobmV4dENvbnRleHQsIHN0YXRlKSB7XG4gICAgICAgIHZhciBpbml0aWFsQ29udGV4dCA9IHRoaXMuY29tcG9uZW50LmNvbnRleHQ7XG4gICAgICAgIHZhciBwcmV2Q29udGV4dCA9IHRoaXMucmVjZWl2aW5nQ29udGV4dDtcbiAgICAgICAgLy8gZG9lcyB0aGUgcHJldmlvdXMgY2FsZW5kYXIgbmVlZCB0byBiZSBjbGVhcmVkP1xuICAgICAgICBpZiAocHJldkNvbnRleHQgJiYgcHJldkNvbnRleHQgIT09IG5leHRDb250ZXh0KSB7XG4gICAgICAgICAgICAvLyBkb2VzIHRoZSBpbml0aWFsIGNhbGVuZGFyIG5lZWQgdG8gYmUgY2xlYXJlZD9cbiAgICAgICAgICAgIC8vIGlmIHNvLCBkb24ndCBjbGVhciBhbGwgdGhlIHdheS4gd2Ugc3RpbGwgbmVlZCB0byB0byBoaWRlIHRoZSBhZmZlY3RlZEV2ZW50c1xuICAgICAgICAgICAgaWYgKHByZXZDb250ZXh0ID09PSBpbml0aWFsQ29udGV4dCkge1xuICAgICAgICAgICAgICAgIHByZXZDb250ZXh0LmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1NFVF9FVkVOVF9EUkFHJyxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFmZmVjdGVkRXZlbnRzOiBzdGF0ZS5hZmZlY3RlZEV2ZW50cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG11dGF0ZWRFdmVudHM6IGNvbW1vbi5jcmVhdGVFbXB0eUV2ZW50U3RvcmUoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRXZlbnQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgLy8gY29tcGxldGVseSBjbGVhciB0aGUgb2xkIGNhbGVuZGFyIGlmIGl0IHdhc24ndCB0aGUgaW5pdGlhbFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcHJldkNvbnRleHQuZGlzcGF0Y2goeyB0eXBlOiAnVU5TRVRfRVZFTlRfRFJBRycgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5leHRDb250ZXh0KSB7XG4gICAgICAgICAgICBuZXh0Q29udGV4dC5kaXNwYXRjaCh7IHR5cGU6ICdTRVRfRVZFTlRfRFJBRycsIHN0YXRlOiBzdGF0ZSB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRXZlbnREcmFnZ2luZy5wcm90b3R5cGUuY2xlYXJEcmFnID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaW5pdGlhbENhbGVuZGFyID0gdGhpcy5jb21wb25lbnQuY29udGV4dDtcbiAgICAgICAgdmFyIHJlY2VpdmluZ0NvbnRleHQgPSB0aGlzLnJlY2VpdmluZ0NvbnRleHQ7XG4gICAgICAgIGlmIChyZWNlaXZpbmdDb250ZXh0KSB7XG4gICAgICAgICAgICByZWNlaXZpbmdDb250ZXh0LmRpc3BhdGNoKHsgdHlwZTogJ1VOU0VUX0VWRU5UX0RSQUcnIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIHRoZSBpbml0aWFsIGNhbGVuZGFyIG1pZ2h0IGhhdmUgYW4gZHVtbXkgZHJhZyBzdGF0ZSBmcm9tIGRpc3BsYXlEcmFnXG4gICAgICAgIGlmIChpbml0aWFsQ2FsZW5kYXIgIT09IHJlY2VpdmluZ0NvbnRleHQpIHtcbiAgICAgICAgICAgIGluaXRpYWxDYWxlbmRhci5kaXNwYXRjaCh7IHR5cGU6ICdVTlNFVF9FVkVOVF9EUkFHJyB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRXZlbnREcmFnZ2luZy5wcm90b3R5cGUuY2xlYW51cCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zdWJqZWN0U2VnID0gbnVsbDtcbiAgICAgICAgdGhpcy5pc0RyYWdnaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZXZlbnRSYW5nZSA9IG51bGw7XG4gICAgICAgIHRoaXMucmVsZXZhbnRFdmVudHMgPSBudWxsO1xuICAgICAgICB0aGlzLnJlY2VpdmluZ0NvbnRleHQgPSBudWxsO1xuICAgICAgICB0aGlzLnZhbGlkTXV0YXRpb24gPSBudWxsO1xuICAgICAgICB0aGlzLm11dGF0ZWRSZWxldmFudEV2ZW50cyA9IG51bGw7XG4gICAgfTtcbiAgICAvLyBUT0RPOiB0ZXN0IHRoaXMgaW4gSUUxMVxuICAgIC8vIFFVRVNUSU9OOiB3aHkgZG8gd2UgbmVlZCBpdCBvbiB0aGUgcmVzaXphYmxlPz8/XG4gICAgRXZlbnREcmFnZ2luZy5TRUxFQ1RPUiA9ICcuZmMtZXZlbnQtZHJhZ2dhYmxlLCAuZmMtZXZlbnQtcmVzaXphYmxlJztcbiAgICByZXR1cm4gRXZlbnREcmFnZ2luZztcbn0oY29tbW9uLkludGVyYWN0aW9uKSk7XG5mdW5jdGlvbiBjb21wdXRlRXZlbnRNdXRhdGlvbihoaXQwLCBoaXQxLCBtYXNzYWdlcnMpIHtcbiAgICB2YXIgZGF0ZVNwYW4wID0gaGl0MC5kYXRlU3BhbjtcbiAgICB2YXIgZGF0ZVNwYW4xID0gaGl0MS5kYXRlU3BhbjtcbiAgICB2YXIgZGF0ZTAgPSBkYXRlU3BhbjAucmFuZ2Uuc3RhcnQ7XG4gICAgdmFyIGRhdGUxID0gZGF0ZVNwYW4xLnJhbmdlLnN0YXJ0O1xuICAgIHZhciBzdGFuZGFyZFByb3BzID0ge307XG4gICAgaWYgKGRhdGVTcGFuMC5hbGxEYXkgIT09IGRhdGVTcGFuMS5hbGxEYXkpIHtcbiAgICAgICAgc3RhbmRhcmRQcm9wcy5hbGxEYXkgPSBkYXRlU3BhbjEuYWxsRGF5O1xuICAgICAgICBzdGFuZGFyZFByb3BzLmhhc0VuZCA9IGhpdDEuY29udGV4dC5vcHRpb25zLmFsbERheU1haW50YWluRHVyYXRpb247XG4gICAgICAgIGlmIChkYXRlU3BhbjEuYWxsRGF5KSB7XG4gICAgICAgICAgICAvLyBtZWFucyBkYXRlMSBpcyBhbHJlYWR5IHN0YXJ0LW9mLWRheSxcbiAgICAgICAgICAgIC8vIGJ1dCBkYXRlMCBuZWVkcyB0byBiZSBjb252ZXJ0ZWRcbiAgICAgICAgICAgIGRhdGUwID0gY29tbW9uLnN0YXJ0T2ZEYXkoZGF0ZTApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhciBkZWx0YSA9IGNvbW1vbi5kaWZmRGF0ZXMoZGF0ZTAsIGRhdGUxLCBoaXQwLmNvbnRleHQuZGF0ZUVudiwgaGl0MC5jb21wb25lbnRJZCA9PT0gaGl0MS5jb21wb25lbnRJZCA/XG4gICAgICAgIGhpdDAubGFyZ2VVbml0IDpcbiAgICAgICAgbnVsbCk7XG4gICAgaWYgKGRlbHRhLm1pbGxpc2Vjb25kcykgeyAvLyBoYXMgaG91cnMvbWludXRlcy9zZWNvbmRzXG4gICAgICAgIHN0YW5kYXJkUHJvcHMuYWxsRGF5ID0gZmFsc2U7XG4gICAgfVxuICAgIHZhciBtdXRhdGlvbiA9IHtcbiAgICAgICAgZGF0ZXNEZWx0YTogZGVsdGEsXG4gICAgICAgIHN0YW5kYXJkUHJvcHM6IHN0YW5kYXJkUHJvcHMsXG4gICAgfTtcbiAgICBmb3IgKHZhciBfaSA9IDAsIG1hc3NhZ2Vyc18xID0gbWFzc2FnZXJzOyBfaSA8IG1hc3NhZ2Vyc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgbWFzc2FnZXIgPSBtYXNzYWdlcnNfMVtfaV07XG4gICAgICAgIG1hc3NhZ2VyKG11dGF0aW9uLCBoaXQwLCBoaXQxKTtcbiAgICB9XG4gICAgcmV0dXJuIG11dGF0aW9uO1xufVxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50VG91Y2hEZWxheShjb21wb25lbnQpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGNvbXBvbmVudC5jb250ZXh0Lm9wdGlvbnM7XG4gICAgdmFyIGRlbGF5ID0gb3B0aW9ucy5ldmVudExvbmdQcmVzc0RlbGF5O1xuICAgIGlmIChkZWxheSA9PSBudWxsKSB7XG4gICAgICAgIGRlbGF5ID0gb3B0aW9ucy5sb25nUHJlc3NEZWxheTtcbiAgICB9XG4gICAgcmV0dXJuIGRlbGF5O1xufVxuXG52YXIgRXZlbnRSZXNpemluZyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYi5fX2V4dGVuZHMoRXZlbnRSZXNpemluZywgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBFdmVudFJlc2l6aW5nKHNldHRpbmdzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHNldHRpbmdzKSB8fCB0aGlzO1xuICAgICAgICAvLyBpbnRlcm5hbCBzdGF0ZVxuICAgICAgICBfdGhpcy5kcmFnZ2luZ1NlZ0VsID0gbnVsbDtcbiAgICAgICAgX3RoaXMuZHJhZ2dpbmdTZWcgPSBudWxsOyAvLyBUT0RPOiByZW5hbWUgdG8gcmVzaXppbmdTZWc/IHN1YmplY3RTZWc/XG4gICAgICAgIF90aGlzLmV2ZW50UmFuZ2UgPSBudWxsO1xuICAgICAgICBfdGhpcy5yZWxldmFudEV2ZW50cyA9IG51bGw7XG4gICAgICAgIF90aGlzLnZhbGlkTXV0YXRpb24gPSBudWxsO1xuICAgICAgICBfdGhpcy5tdXRhdGVkUmVsZXZhbnRFdmVudHMgPSBudWxsO1xuICAgICAgICBfdGhpcy5oYW5kbGVQb2ludGVyRG93biA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgdmFyIGNvbXBvbmVudCA9IF90aGlzLmNvbXBvbmVudDtcbiAgICAgICAgICAgIHZhciBzZWdFbCA9IF90aGlzLnF1ZXJ5U2VnRWwoZXYpO1xuICAgICAgICAgICAgdmFyIHNlZyA9IGNvbW1vbi5nZXRFbFNlZyhzZWdFbCk7XG4gICAgICAgICAgICB2YXIgZXZlbnRSYW5nZSA9IF90aGlzLmV2ZW50UmFuZ2UgPSBzZWcuZXZlbnRSYW5nZTtcbiAgICAgICAgICAgIF90aGlzLmRyYWdnaW5nLm1pbkRpc3RhbmNlID0gY29tcG9uZW50LmNvbnRleHQub3B0aW9ucy5ldmVudERyYWdNaW5EaXN0YW5jZTtcbiAgICAgICAgICAgIC8vIGlmIHRvdWNoLCBuZWVkIHRvIGJlIHdvcmtpbmcgd2l0aCBhIHNlbGVjdGVkIGV2ZW50XG4gICAgICAgICAgICBfdGhpcy5kcmFnZ2luZy5zZXRJZ25vcmVNb3ZlKCFfdGhpcy5jb21wb25lbnQuaXNWYWxpZFNlZ0Rvd25FbChldi5vcmlnRXZlbnQudGFyZ2V0KSB8fFxuICAgICAgICAgICAgICAgIChldi5pc1RvdWNoICYmIF90aGlzLmNvbXBvbmVudC5wcm9wcy5ldmVudFNlbGVjdGlvbiAhPT0gZXZlbnRSYW5nZS5pbnN0YW5jZS5pbnN0YW5jZUlkKSk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLmhhbmRsZURyYWdTdGFydCA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBfdGhpcy5jb21wb25lbnQuY29udGV4dDtcbiAgICAgICAgICAgIHZhciBldmVudFJhbmdlID0gX3RoaXMuZXZlbnRSYW5nZTtcbiAgICAgICAgICAgIF90aGlzLnJlbGV2YW50RXZlbnRzID0gY29tbW9uLmdldFJlbGV2YW50RXZlbnRzKGNvbnRleHQuZ2V0Q3VycmVudERhdGEoKS5ldmVudFN0b3JlLCBfdGhpcy5ldmVudFJhbmdlLmluc3RhbmNlLmluc3RhbmNlSWQpO1xuICAgICAgICAgICAgdmFyIHNlZ0VsID0gX3RoaXMucXVlcnlTZWdFbChldik7XG4gICAgICAgICAgICBfdGhpcy5kcmFnZ2luZ1NlZ0VsID0gc2VnRWw7XG4gICAgICAgICAgICBfdGhpcy5kcmFnZ2luZ1NlZyA9IGNvbW1vbi5nZXRFbFNlZyhzZWdFbCk7XG4gICAgICAgICAgICBjb250ZXh0LmNhbGVuZGFyQXBpLnVuc2VsZWN0KCk7XG4gICAgICAgICAgICBjb250ZXh0LmVtaXR0ZXIudHJpZ2dlcignZXZlbnRSZXNpemVTdGFydCcsIHtcbiAgICAgICAgICAgICAgICBlbDogc2VnRWwsXG4gICAgICAgICAgICAgICAgZXZlbnQ6IG5ldyBjb21tb24uRXZlbnRBcGkoY29udGV4dCwgZXZlbnRSYW5nZS5kZWYsIGV2ZW50UmFuZ2UuaW5zdGFuY2UpLFxuICAgICAgICAgICAgICAgIGpzRXZlbnQ6IGV2Lm9yaWdFdmVudCxcbiAgICAgICAgICAgICAgICB2aWV3OiBjb250ZXh0LnZpZXdBcGksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuaGFuZGxlSGl0VXBkYXRlID0gZnVuY3Rpb24gKGhpdCwgaXNGaW5hbCwgZXYpIHtcbiAgICAgICAgICAgIHZhciBjb250ZXh0ID0gX3RoaXMuY29tcG9uZW50LmNvbnRleHQ7XG4gICAgICAgICAgICB2YXIgcmVsZXZhbnRFdmVudHMgPSBfdGhpcy5yZWxldmFudEV2ZW50cztcbiAgICAgICAgICAgIHZhciBpbml0aWFsSGl0ID0gX3RoaXMuaGl0RHJhZ2dpbmcuaW5pdGlhbEhpdDtcbiAgICAgICAgICAgIHZhciBldmVudEluc3RhbmNlID0gX3RoaXMuZXZlbnRSYW5nZS5pbnN0YW5jZTtcbiAgICAgICAgICAgIHZhciBtdXRhdGlvbiA9IG51bGw7XG4gICAgICAgICAgICB2YXIgbXV0YXRlZFJlbGV2YW50RXZlbnRzID0gbnVsbDtcbiAgICAgICAgICAgIHZhciBpc0ludmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBpbnRlcmFjdGlvbiA9IHtcbiAgICAgICAgICAgICAgICBhZmZlY3RlZEV2ZW50czogcmVsZXZhbnRFdmVudHMsXG4gICAgICAgICAgICAgICAgbXV0YXRlZEV2ZW50czogY29tbW9uLmNyZWF0ZUVtcHR5RXZlbnRTdG9yZSgpLFxuICAgICAgICAgICAgICAgIGlzRXZlbnQ6IHRydWUsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGhpdCkge1xuICAgICAgICAgICAgICAgIHZhciBkaXNhbGxvd2VkID0gaGl0LmNvbXBvbmVudElkID09PSBpbml0aWFsSGl0LmNvbXBvbmVudElkXG4gICAgICAgICAgICAgICAgICAgICYmIF90aGlzLmlzSGl0Q29tYm9BbGxvd2VkXG4gICAgICAgICAgICAgICAgICAgICYmICFfdGhpcy5pc0hpdENvbWJvQWxsb3dlZChpbml0aWFsSGl0LCBoaXQpO1xuICAgICAgICAgICAgICAgIGlmICghZGlzYWxsb3dlZCkge1xuICAgICAgICAgICAgICAgICAgICBtdXRhdGlvbiA9IGNvbXB1dGVNdXRhdGlvbihpbml0aWFsSGl0LCBoaXQsIGV2LnN1YmplY3RFbC5jbGFzc0xpc3QuY29udGFpbnMoJ2ZjLWV2ZW50LXJlc2l6ZXItc3RhcnQnKSwgZXZlbnRJbnN0YW5jZS5yYW5nZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG11dGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgbXV0YXRlZFJlbGV2YW50RXZlbnRzID0gY29tbW9uLmFwcGx5TXV0YXRpb25Ub0V2ZW50U3RvcmUocmVsZXZhbnRFdmVudHMsIGNvbnRleHQuZ2V0Q3VycmVudERhdGEoKS5ldmVudFVpQmFzZXMsIG11dGF0aW9uLCBjb250ZXh0KTtcbiAgICAgICAgICAgICAgICBpbnRlcmFjdGlvbi5tdXRhdGVkRXZlbnRzID0gbXV0YXRlZFJlbGV2YW50RXZlbnRzO1xuICAgICAgICAgICAgICAgIGlmICghY29tbW9uLmlzSW50ZXJhY3Rpb25WYWxpZChpbnRlcmFjdGlvbiwgaGl0LmRhdGVQcm9maWxlLCBjb250ZXh0KSkge1xuICAgICAgICAgICAgICAgICAgICBpc0ludmFsaWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBtdXRhdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIG11dGF0ZWRSZWxldmFudEV2ZW50cyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGludGVyYWN0aW9uLm11dGF0ZWRFdmVudHMgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtdXRhdGVkUmVsZXZhbnRFdmVudHMpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1NFVF9FVkVOVF9SRVNJWkUnLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZTogaW50ZXJhY3Rpb24sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoKHsgdHlwZTogJ1VOU0VUX0VWRU5UX1JFU0laRScgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzSW52YWxpZCkge1xuICAgICAgICAgICAgICAgIGNvbW1vbi5lbmFibGVDdXJzb3IoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbW1vbi5kaXNhYmxlQ3Vyc29yKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzRmluYWwpIHtcbiAgICAgICAgICAgICAgICBpZiAobXV0YXRpb24gJiYgaXNIaXRzRXF1YWwoaW5pdGlhbEhpdCwgaGl0KSkge1xuICAgICAgICAgICAgICAgICAgICBtdXRhdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF90aGlzLnZhbGlkTXV0YXRpb24gPSBtdXRhdGlvbjtcbiAgICAgICAgICAgICAgICBfdGhpcy5tdXRhdGVkUmVsZXZhbnRFdmVudHMgPSBtdXRhdGVkUmVsZXZhbnRFdmVudHM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLmhhbmRsZURyYWdFbmQgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBjb250ZXh0ID0gX3RoaXMuY29tcG9uZW50LmNvbnRleHQ7XG4gICAgICAgICAgICB2YXIgZXZlbnREZWYgPSBfdGhpcy5ldmVudFJhbmdlLmRlZjtcbiAgICAgICAgICAgIHZhciBldmVudEluc3RhbmNlID0gX3RoaXMuZXZlbnRSYW5nZS5pbnN0YW5jZTtcbiAgICAgICAgICAgIHZhciBldmVudEFwaSA9IG5ldyBjb21tb24uRXZlbnRBcGkoY29udGV4dCwgZXZlbnREZWYsIGV2ZW50SW5zdGFuY2UpO1xuICAgICAgICAgICAgdmFyIHJlbGV2YW50RXZlbnRzID0gX3RoaXMucmVsZXZhbnRFdmVudHM7XG4gICAgICAgICAgICB2YXIgbXV0YXRlZFJlbGV2YW50RXZlbnRzID0gX3RoaXMubXV0YXRlZFJlbGV2YW50RXZlbnRzO1xuICAgICAgICAgICAgY29udGV4dC5lbWl0dGVyLnRyaWdnZXIoJ2V2ZW50UmVzaXplU3RvcCcsIHtcbiAgICAgICAgICAgICAgICBlbDogX3RoaXMuZHJhZ2dpbmdTZWdFbCxcbiAgICAgICAgICAgICAgICBldmVudDogZXZlbnRBcGksXG4gICAgICAgICAgICAgICAganNFdmVudDogZXYub3JpZ0V2ZW50LFxuICAgICAgICAgICAgICAgIHZpZXc6IGNvbnRleHQudmlld0FwaSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKF90aGlzLnZhbGlkTXV0YXRpb24pIHtcbiAgICAgICAgICAgICAgICB2YXIgdXBkYXRlZEV2ZW50QXBpID0gbmV3IGNvbW1vbi5FdmVudEFwaShjb250ZXh0LCBtdXRhdGVkUmVsZXZhbnRFdmVudHMuZGVmc1tldmVudERlZi5kZWZJZF0sIGV2ZW50SW5zdGFuY2UgPyBtdXRhdGVkUmVsZXZhbnRFdmVudHMuaW5zdGFuY2VzW2V2ZW50SW5zdGFuY2UuaW5zdGFuY2VJZF0gOiBudWxsKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ01FUkdFX0VWRU5UUycsXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50U3RvcmU6IG11dGF0ZWRSZWxldmFudEV2ZW50cyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnRDaGFuZ2VBcmcgPSB7XG4gICAgICAgICAgICAgICAgICAgIG9sZEV2ZW50OiBldmVudEFwaSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IHVwZGF0ZWRFdmVudEFwaSxcbiAgICAgICAgICAgICAgICAgICAgcmVsYXRlZEV2ZW50czogY29tbW9uLmJ1aWxkRXZlbnRBcGlzKG11dGF0ZWRSZWxldmFudEV2ZW50cywgY29udGV4dCwgZXZlbnRJbnN0YW5jZSksXG4gICAgICAgICAgICAgICAgICAgIHJldmVydDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ01FUkdFX0VWRU5UUycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRTdG9yZTogcmVsZXZhbnRFdmVudHMsIC8vIHRoZSBwcmUtY2hhbmdlIGV2ZW50c1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmVtaXR0ZXIudHJpZ2dlcignZXZlbnRSZXNpemUnLCB0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgZXZlbnRDaGFuZ2VBcmcpLCB7IGVsOiBfdGhpcy5kcmFnZ2luZ1NlZ0VsLCBzdGFydERlbHRhOiBfdGhpcy52YWxpZE11dGF0aW9uLnN0YXJ0RGVsdGEgfHwgY29tbW9uLmNyZWF0ZUR1cmF0aW9uKDApLCBlbmREZWx0YTogX3RoaXMudmFsaWRNdXRhdGlvbi5lbmREZWx0YSB8fCBjb21tb24uY3JlYXRlRHVyYXRpb24oMCksIGpzRXZlbnQ6IGV2Lm9yaWdFdmVudCwgdmlldzogY29udGV4dC52aWV3QXBpIH0pKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmVtaXR0ZXIudHJpZ2dlcignZXZlbnRDaGFuZ2UnLCBldmVudENoYW5nZUFyZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmVtaXR0ZXIudHJpZ2dlcignX25vRXZlbnRSZXNpemUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHJlc2V0IGFsbCBpbnRlcm5hbCBzdGF0ZVxuICAgICAgICAgICAgX3RoaXMuZHJhZ2dpbmdTZWcgPSBudWxsO1xuICAgICAgICAgICAgX3RoaXMucmVsZXZhbnRFdmVudHMgPSBudWxsO1xuICAgICAgICAgICAgX3RoaXMudmFsaWRNdXRhdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAvLyBva2F5IHRvIGtlZXAgZXZlbnRJbnN0YW5jZSBhcm91bmQuIHVzZWZ1bCB0byBzZXQgaXQgaW4gaGFuZGxlUG9pbnRlckRvd25cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGNvbXBvbmVudCA9IHNldHRpbmdzLmNvbXBvbmVudDtcbiAgICAgICAgdmFyIGRyYWdnaW5nID0gX3RoaXMuZHJhZ2dpbmcgPSBuZXcgRmVhdHVyZWZ1bEVsZW1lbnREcmFnZ2luZyhzZXR0aW5ncy5lbCk7XG4gICAgICAgIGRyYWdnaW5nLnBvaW50ZXIuc2VsZWN0b3IgPSAnLmZjLWV2ZW50LXJlc2l6ZXInO1xuICAgICAgICBkcmFnZ2luZy50b3VjaFNjcm9sbEFsbG93ZWQgPSBmYWxzZTtcbiAgICAgICAgZHJhZ2dpbmcuYXV0b1Njcm9sbGVyLmlzRW5hYmxlZCA9IGNvbXBvbmVudC5jb250ZXh0Lm9wdGlvbnMuZHJhZ1Njcm9sbDtcbiAgICAgICAgdmFyIGhpdERyYWdnaW5nID0gX3RoaXMuaGl0RHJhZ2dpbmcgPSBuZXcgSGl0RHJhZ2dpbmcoX3RoaXMuZHJhZ2dpbmcsIGNvbW1vbi5pbnRlcmFjdGlvblNldHRpbmdzVG9TdG9yZShzZXR0aW5ncykpO1xuICAgICAgICBoaXREcmFnZ2luZy5lbWl0dGVyLm9uKCdwb2ludGVyZG93bicsIF90aGlzLmhhbmRsZVBvaW50ZXJEb3duKTtcbiAgICAgICAgaGl0RHJhZ2dpbmcuZW1pdHRlci5vbignZHJhZ3N0YXJ0JywgX3RoaXMuaGFuZGxlRHJhZ1N0YXJ0KTtcbiAgICAgICAgaGl0RHJhZ2dpbmcuZW1pdHRlci5vbignaGl0dXBkYXRlJywgX3RoaXMuaGFuZGxlSGl0VXBkYXRlKTtcbiAgICAgICAgaGl0RHJhZ2dpbmcuZW1pdHRlci5vbignZHJhZ2VuZCcsIF90aGlzLmhhbmRsZURyYWdFbmQpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEV2ZW50UmVzaXppbmcucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZHJhZ2dpbmcuZGVzdHJveSgpO1xuICAgIH07XG4gICAgRXZlbnRSZXNpemluZy5wcm90b3R5cGUucXVlcnlTZWdFbCA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICByZXR1cm4gY29tbW9uLmVsZW1lbnRDbG9zZXN0KGV2LnN1YmplY3RFbCwgJy5mYy1ldmVudCcpO1xuICAgIH07XG4gICAgcmV0dXJuIEV2ZW50UmVzaXppbmc7XG59KGNvbW1vbi5JbnRlcmFjdGlvbikpO1xuZnVuY3Rpb24gY29tcHV0ZU11dGF0aW9uKGhpdDAsIGhpdDEsIGlzRnJvbVN0YXJ0LCBpbnN0YW5jZVJhbmdlKSB7XG4gICAgdmFyIGRhdGVFbnYgPSBoaXQwLmNvbnRleHQuZGF0ZUVudjtcbiAgICB2YXIgZGF0ZTAgPSBoaXQwLmRhdGVTcGFuLnJhbmdlLnN0YXJ0O1xuICAgIHZhciBkYXRlMSA9IGhpdDEuZGF0ZVNwYW4ucmFuZ2Uuc3RhcnQ7XG4gICAgdmFyIGRlbHRhID0gY29tbW9uLmRpZmZEYXRlcyhkYXRlMCwgZGF0ZTEsIGRhdGVFbnYsIGhpdDAubGFyZ2VVbml0KTtcbiAgICBpZiAoaXNGcm9tU3RhcnQpIHtcbiAgICAgICAgaWYgKGRhdGVFbnYuYWRkKGluc3RhbmNlUmFuZ2Uuc3RhcnQsIGRlbHRhKSA8IGluc3RhbmNlUmFuZ2UuZW5kKSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdGFydERlbHRhOiBkZWx0YSB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGRhdGVFbnYuYWRkKGluc3RhbmNlUmFuZ2UuZW5kLCBkZWx0YSkgPiBpbnN0YW5jZVJhbmdlLnN0YXJ0KSB7XG4gICAgICAgIHJldHVybiB7IGVuZERlbHRhOiBkZWx0YSB9O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cblxudmFyIFVuc2VsZWN0QXV0byA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBVbnNlbGVjdEF1dG8oY29udGV4dCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICB0aGlzLmlzUmVjZW50UG9pbnRlckRhdGVTZWxlY3QgPSBmYWxzZTsgLy8gd2lzaCB3ZSBjb3VsZCB1c2UgYSBzZWxlY3RvciB0byBkZXRlY3QgZGF0ZSBzZWxlY3Rpb24sIGJ1dCB1c2VzIGhpdCBzeXN0ZW1cbiAgICAgICAgdGhpcy5tYXRjaGVzQ2FuY2VsID0gZmFsc2U7XG4gICAgICAgIHRoaXMubWF0Y2hlc0V2ZW50ID0gZmFsc2U7XG4gICAgICAgIHRoaXMub25TZWxlY3QgPSBmdW5jdGlvbiAoc2VsZWN0SW5mbykge1xuICAgICAgICAgICAgaWYgKHNlbGVjdEluZm8uanNFdmVudCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmlzUmVjZW50UG9pbnRlckRhdGVTZWxlY3QgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9uRG9jdW1lbnRQb2ludGVyRG93biA9IGZ1bmN0aW9uIChwZXYpIHtcbiAgICAgICAgICAgIHZhciB1bnNlbGVjdENhbmNlbCA9IF90aGlzLmNvbnRleHQub3B0aW9ucy51bnNlbGVjdENhbmNlbDtcbiAgICAgICAgICAgIHZhciBkb3duRWwgPSBjb21tb24uZ2V0RXZlbnRUYXJnZXRWaWFSb290KHBldi5vcmlnRXZlbnQpO1xuICAgICAgICAgICAgX3RoaXMubWF0Y2hlc0NhbmNlbCA9ICEhY29tbW9uLmVsZW1lbnRDbG9zZXN0KGRvd25FbCwgdW5zZWxlY3RDYW5jZWwpO1xuICAgICAgICAgICAgX3RoaXMubWF0Y2hlc0V2ZW50ID0gISFjb21tb24uZWxlbWVudENsb3Nlc3QoZG93bkVsLCBFdmVudERyYWdnaW5nLlNFTEVDVE9SKTsgLy8gaW50ZXJhY3Rpb24gc3RhcnRlZCBvbiBhbiBldmVudD9cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbkRvY3VtZW50UG9pbnRlclVwID0gZnVuY3Rpb24gKHBldikge1xuICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBfdGhpcy5jb250ZXh0O1xuICAgICAgICAgICAgdmFyIGRvY3VtZW50UG9pbnRlciA9IF90aGlzLmRvY3VtZW50UG9pbnRlcjtcbiAgICAgICAgICAgIHZhciBjYWxlbmRhclN0YXRlID0gY29udGV4dC5nZXRDdXJyZW50RGF0YSgpO1xuICAgICAgICAgICAgLy8gdG91Y2gtc2Nyb2xsaW5nIHNob3VsZCBuZXZlciB1bmZvY3VzIGFueSB0eXBlIG9mIHNlbGVjdGlvblxuICAgICAgICAgICAgaWYgKCFkb2N1bWVudFBvaW50ZXIud2FzVG91Y2hTY3JvbGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2FsZW5kYXJTdGF0ZS5kYXRlU2VsZWN0aW9uICYmIC8vIGFuIGV4aXN0aW5nIGRhdGUgc2VsZWN0aW9uP1xuICAgICAgICAgICAgICAgICAgICAhX3RoaXMuaXNSZWNlbnRQb2ludGVyRGF0ZVNlbGVjdCAvLyBhIG5ldyBwb2ludGVyLWluaXRpYXRlZCBkYXRlIHNlbGVjdGlvbiBzaW5jZSBsYXN0IG9uRG9jdW1lbnRQb2ludGVyVXA/XG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB1bnNlbGVjdEF1dG8gPSBjb250ZXh0Lm9wdGlvbnMudW5zZWxlY3RBdXRvO1xuICAgICAgICAgICAgICAgICAgICBpZiAodW5zZWxlY3RBdXRvICYmICghdW5zZWxlY3RBdXRvIHx8ICFfdGhpcy5tYXRjaGVzQ2FuY2VsKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5jYWxlbmRhckFwaS51bnNlbGVjdChwZXYpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjYWxlbmRhclN0YXRlLmV2ZW50U2VsZWN0aW9uICYmIC8vIGFuIGV4aXN0aW5nIGV2ZW50IHNlbGVjdGVkP1xuICAgICAgICAgICAgICAgICAgICAhX3RoaXMubWF0Y2hlc0V2ZW50IC8vIGludGVyYWN0aW9uIERJRE4nVCBzdGFydCBvbiBhbiBldmVudFxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoKHsgdHlwZTogJ1VOU0VMRUNUX0VWRU5UJyB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5pc1JlY2VudFBvaW50ZXJEYXRlU2VsZWN0ID0gZmFsc2U7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBkb2N1bWVudFBvaW50ZXIgPSB0aGlzLmRvY3VtZW50UG9pbnRlciA9IG5ldyBQb2ludGVyRHJhZ2dpbmcoZG9jdW1lbnQpO1xuICAgICAgICBkb2N1bWVudFBvaW50ZXIuc2hvdWxkSWdub3JlTW92ZSA9IHRydWU7XG4gICAgICAgIGRvY3VtZW50UG9pbnRlci5zaG91bGRXYXRjaFNjcm9sbCA9IGZhbHNlO1xuICAgICAgICBkb2N1bWVudFBvaW50ZXIuZW1pdHRlci5vbigncG9pbnRlcmRvd24nLCB0aGlzLm9uRG9jdW1lbnRQb2ludGVyRG93bik7XG4gICAgICAgIGRvY3VtZW50UG9pbnRlci5lbWl0dGVyLm9uKCdwb2ludGVydXAnLCB0aGlzLm9uRG9jdW1lbnRQb2ludGVyVXApO1xuICAgICAgICAvKlxuICAgICAgICBUT0RPOiBiZXR0ZXIgd2F5IHRvIGtub3cgYWJvdXQgd2hldGhlciB0aGVyZSB3YXMgYSBzZWxlY3Rpb24gd2l0aCB0aGUgcG9pbnRlclxuICAgICAgICAqL1xuICAgICAgICBjb250ZXh0LmVtaXR0ZXIub24oJ3NlbGVjdCcsIHRoaXMub25TZWxlY3QpO1xuICAgIH1cbiAgICBVbnNlbGVjdEF1dG8ucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY29udGV4dC5lbWl0dGVyLm9mZignc2VsZWN0JywgdGhpcy5vblNlbGVjdCk7XG4gICAgICAgIHRoaXMuZG9jdW1lbnRQb2ludGVyLmRlc3Ryb3koKTtcbiAgICB9O1xuICAgIHJldHVybiBVbnNlbGVjdEF1dG87XG59KCkpO1xuXG52YXIgT1BUSU9OX1JFRklORVJTID0ge1xuICAgIGZpeGVkTWlycm9yUGFyZW50OiBjb21tb24uaWRlbnRpdHksXG59O1xudmFyIExJU1RFTkVSX1JFRklORVJTID0ge1xuICAgIGRhdGVDbGljazogY29tbW9uLmlkZW50aXR5LFxuICAgIGV2ZW50RHJhZ1N0YXJ0OiBjb21tb24uaWRlbnRpdHksXG4gICAgZXZlbnREcmFnU3RvcDogY29tbW9uLmlkZW50aXR5LFxuICAgIGV2ZW50RHJvcDogY29tbW9uLmlkZW50aXR5LFxuICAgIGV2ZW50UmVzaXplU3RhcnQ6IGNvbW1vbi5pZGVudGl0eSxcbiAgICBldmVudFJlc2l6ZVN0b3A6IGNvbW1vbi5pZGVudGl0eSxcbiAgICBldmVudFJlc2l6ZTogY29tbW9uLmlkZW50aXR5LFxuICAgIGRyb3A6IGNvbW1vbi5pZGVudGl0eSxcbiAgICBldmVudFJlY2VpdmU6IGNvbW1vbi5pZGVudGl0eSxcbiAgICBldmVudExlYXZlOiBjb21tb24uaWRlbnRpdHksXG59O1xuXG4vKlxuR2l2ZW4gYW4gYWxyZWFkeSBpbnN0YW50aWF0ZWQgZHJhZ2dhYmxlIG9iamVjdCBmb3Igb25lLW9yLW1vcmUgZWxlbWVudHMsXG5JbnRlcnByZXRzIGFueSBkcmFnZ2luZyBhcyBhbiBhdHRlbXB0IHRvIGRyYWcgYW4gZXZlbnRzIHRoYXQgbGl2ZXMgb3V0c2lkZVxub2YgYSBjYWxlbmRhciBvbnRvIGEgY2FsZW5kYXIuXG4qL1xudmFyIEV4dGVybmFsRWxlbWVudERyYWdnaW5nID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEV4dGVybmFsRWxlbWVudERyYWdnaW5nKGRyYWdnaW5nLCBzdXBwbGllZERyYWdNZXRhKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMucmVjZWl2aW5nQ29udGV4dCA9IG51bGw7XG4gICAgICAgIHRoaXMuZHJvcHBhYmxlRXZlbnQgPSBudWxsOyAvLyB3aWxsIGV4aXN0IGZvciBhbGwgZHJhZ3MsIGV2ZW4gaWYgY3JlYXRlOmZhbHNlXG4gICAgICAgIHRoaXMuc3VwcGxpZWREcmFnTWV0YSA9IG51bGw7XG4gICAgICAgIHRoaXMuZHJhZ01ldGEgPSBudWxsO1xuICAgICAgICB0aGlzLmhhbmRsZURyYWdTdGFydCA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgX3RoaXMuZHJhZ01ldGEgPSBfdGhpcy5idWlsZERyYWdNZXRhKGV2LnN1YmplY3RFbCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGFuZGxlSGl0VXBkYXRlID0gZnVuY3Rpb24gKGhpdCwgaXNGaW5hbCwgZXYpIHtcbiAgICAgICAgICAgIHZhciBkcmFnZ2luZyA9IF90aGlzLmhpdERyYWdnaW5nLmRyYWdnaW5nO1xuICAgICAgICAgICAgdmFyIHJlY2VpdmluZ0NvbnRleHQgPSBudWxsO1xuICAgICAgICAgICAgdmFyIGRyb3BwYWJsZUV2ZW50ID0gbnVsbDtcbiAgICAgICAgICAgIHZhciBpc0ludmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBpbnRlcmFjdGlvbiA9IHtcbiAgICAgICAgICAgICAgICBhZmZlY3RlZEV2ZW50czogY29tbW9uLmNyZWF0ZUVtcHR5RXZlbnRTdG9yZSgpLFxuICAgICAgICAgICAgICAgIG11dGF0ZWRFdmVudHM6IGNvbW1vbi5jcmVhdGVFbXB0eUV2ZW50U3RvcmUoKSxcbiAgICAgICAgICAgICAgICBpc0V2ZW50OiBfdGhpcy5kcmFnTWV0YS5jcmVhdGUsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGhpdCkge1xuICAgICAgICAgICAgICAgIHJlY2VpdmluZ0NvbnRleHQgPSBoaXQuY29udGV4dDtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuY2FuRHJvcEVsT25DYWxlbmRhcihldi5zdWJqZWN0RWwsIHJlY2VpdmluZ0NvbnRleHQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRyb3BwYWJsZUV2ZW50ID0gY29tcHV0ZUV2ZW50Rm9yRGF0ZVNwYW4oaGl0LmRhdGVTcGFuLCBfdGhpcy5kcmFnTWV0YSwgcmVjZWl2aW5nQ29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIGludGVyYWN0aW9uLm11dGF0ZWRFdmVudHMgPSBjb21tb24uZXZlbnRUdXBsZVRvU3RvcmUoZHJvcHBhYmxlRXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICBpc0ludmFsaWQgPSAhY29tbW9uLmlzSW50ZXJhY3Rpb25WYWxpZChpbnRlcmFjdGlvbiwgaGl0LmRhdGVQcm9maWxlLCByZWNlaXZpbmdDb250ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzSW52YWxpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJhY3Rpb24ubXV0YXRlZEV2ZW50cyA9IGNvbW1vbi5jcmVhdGVFbXB0eUV2ZW50U3RvcmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3BwYWJsZUV2ZW50ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzLmRpc3BsYXlEcmFnKHJlY2VpdmluZ0NvbnRleHQsIGludGVyYWN0aW9uKTtcbiAgICAgICAgICAgIC8vIHNob3cgbWlycm9yIGlmIG5vIGFscmVhZHktcmVuZGVyZWQgbWlycm9yIGVsZW1lbnQgT1IgaWYgd2UgYXJlIHNodXR0aW5nIGRvd24gdGhlIG1pcnJvciAoPylcbiAgICAgICAgICAgIC8vIFRPRE86IHdpc2ggd2UgY291bGQgc29tZWhvdyB3YWl0IGZvciBkaXNwYXRjaCB0byBndWFyYW50ZWUgcmVuZGVyXG4gICAgICAgICAgICBkcmFnZ2luZy5zZXRNaXJyb3JJc1Zpc2libGUoaXNGaW5hbCB8fCAhZHJvcHBhYmxlRXZlbnQgfHwgIWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mYy1ldmVudC1taXJyb3InKSk7XG4gICAgICAgICAgICBpZiAoIWlzSW52YWxpZCkge1xuICAgICAgICAgICAgICAgIGNvbW1vbi5lbmFibGVDdXJzb3IoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbW1vbi5kaXNhYmxlQ3Vyc29yKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzRmluYWwpIHtcbiAgICAgICAgICAgICAgICBkcmFnZ2luZy5zZXRNaXJyb3JOZWVkc1JldmVydCghZHJvcHBhYmxlRXZlbnQpO1xuICAgICAgICAgICAgICAgIF90aGlzLnJlY2VpdmluZ0NvbnRleHQgPSByZWNlaXZpbmdDb250ZXh0O1xuICAgICAgICAgICAgICAgIF90aGlzLmRyb3BwYWJsZUV2ZW50ID0gZHJvcHBhYmxlRXZlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGFuZGxlRHJhZ0VuZCA9IGZ1bmN0aW9uIChwZXYpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLCByZWNlaXZpbmdDb250ZXh0ID0gX2EucmVjZWl2aW5nQ29udGV4dCwgZHJvcHBhYmxlRXZlbnQgPSBfYS5kcm9wcGFibGVFdmVudDtcbiAgICAgICAgICAgIF90aGlzLmNsZWFyRHJhZygpO1xuICAgICAgICAgICAgaWYgKHJlY2VpdmluZ0NvbnRleHQgJiYgZHJvcHBhYmxlRXZlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZmluYWxIaXQgPSBfdGhpcy5oaXREcmFnZ2luZy5maW5hbEhpdDtcbiAgICAgICAgICAgICAgICB2YXIgZmluYWxWaWV3ID0gZmluYWxIaXQuY29udGV4dC52aWV3QXBpO1xuICAgICAgICAgICAgICAgIHZhciBkcmFnTWV0YSA9IF90aGlzLmRyYWdNZXRhO1xuICAgICAgICAgICAgICAgIHJlY2VpdmluZ0NvbnRleHQuZW1pdHRlci50cmlnZ2VyKCdkcm9wJywgdHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24oe30sIGJ1aWxkRGF0ZVBvaW50QXBpV2l0aENvbnRleHQoZmluYWxIaXQuZGF0ZVNwYW4sIHJlY2VpdmluZ0NvbnRleHQpKSwgeyBkcmFnZ2VkRWw6IHBldi5zdWJqZWN0RWwsIGpzRXZlbnQ6IHBldi5vcmlnRXZlbnQsIHZpZXc6IGZpbmFsVmlldyB9KSk7XG4gICAgICAgICAgICAgICAgaWYgKGRyYWdNZXRhLmNyZWF0ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYWRkaW5nRXZlbnRzXzEgPSBjb21tb24uZXZlbnRUdXBsZVRvU3RvcmUoZHJvcHBhYmxlRXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICByZWNlaXZpbmdDb250ZXh0LmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdNRVJHRV9FVkVOVFMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRTdG9yZTogYWRkaW5nRXZlbnRzXzEsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGV2LmlzVG91Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY2VpdmluZ0NvbnRleHQuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdTRUxFQ1RfRVZFTlQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50SW5zdGFuY2VJZDogZHJvcHBhYmxlRXZlbnQuaW5zdGFuY2UuaW5zdGFuY2VJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIHNpZ25hbCB0aGF0IGFuIGV4dGVybmFsIGV2ZW50IGxhbmRlZFxuICAgICAgICAgICAgICAgICAgICByZWNlaXZpbmdDb250ZXh0LmVtaXR0ZXIudHJpZ2dlcignZXZlbnRSZWNlaXZlJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IG5ldyBjb21tb24uRXZlbnRBcGkocmVjZWl2aW5nQ29udGV4dCwgZHJvcHBhYmxlRXZlbnQuZGVmLCBkcm9wcGFibGVFdmVudC5pbnN0YW5jZSksXG4gICAgICAgICAgICAgICAgICAgICAgICByZWxhdGVkRXZlbnRzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldmVydDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY2VpdmluZ0NvbnRleHQuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnUkVNT1ZFX0VWRU5UUycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50U3RvcmU6IGFkZGluZ0V2ZW50c18xLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyYWdnZWRFbDogcGV2LnN1YmplY3RFbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXc6IGZpbmFsVmlldyxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMucmVjZWl2aW5nQ29udGV4dCA9IG51bGw7XG4gICAgICAgICAgICBfdGhpcy5kcm9wcGFibGVFdmVudCA9IG51bGw7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBoaXREcmFnZ2luZyA9IHRoaXMuaGl0RHJhZ2dpbmcgPSBuZXcgSGl0RHJhZ2dpbmcoZHJhZ2dpbmcsIGNvbW1vbi5pbnRlcmFjdGlvblNldHRpbmdzU3RvcmUpO1xuICAgICAgICBoaXREcmFnZ2luZy5yZXF1aXJlSW5pdGlhbCA9IGZhbHNlOyAvLyB3aWxsIHN0YXJ0IG91dHNpZGUgb2YgYSBjb21wb25lbnRcbiAgICAgICAgaGl0RHJhZ2dpbmcuZW1pdHRlci5vbignZHJhZ3N0YXJ0JywgdGhpcy5oYW5kbGVEcmFnU3RhcnQpO1xuICAgICAgICBoaXREcmFnZ2luZy5lbWl0dGVyLm9uKCdoaXR1cGRhdGUnLCB0aGlzLmhhbmRsZUhpdFVwZGF0ZSk7XG4gICAgICAgIGhpdERyYWdnaW5nLmVtaXR0ZXIub24oJ2RyYWdlbmQnLCB0aGlzLmhhbmRsZURyYWdFbmQpO1xuICAgICAgICB0aGlzLnN1cHBsaWVkRHJhZ01ldGEgPSBzdXBwbGllZERyYWdNZXRhO1xuICAgIH1cbiAgICBFeHRlcm5hbEVsZW1lbnREcmFnZ2luZy5wcm90b3R5cGUuYnVpbGREcmFnTWV0YSA9IGZ1bmN0aW9uIChzdWJqZWN0RWwpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnN1cHBsaWVkRHJhZ01ldGEgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICByZXR1cm4gY29tbW9uLnBhcnNlRHJhZ01ldGEodGhpcy5zdXBwbGllZERyYWdNZXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuc3VwcGxpZWREcmFnTWV0YSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIGNvbW1vbi5wYXJzZURyYWdNZXRhKHRoaXMuc3VwcGxpZWREcmFnTWV0YShzdWJqZWN0RWwpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ2V0RHJhZ01ldGFGcm9tRWwoc3ViamVjdEVsKTtcbiAgICB9O1xuICAgIEV4dGVybmFsRWxlbWVudERyYWdnaW5nLnByb3RvdHlwZS5kaXNwbGF5RHJhZyA9IGZ1bmN0aW9uIChuZXh0Q29udGV4dCwgc3RhdGUpIHtcbiAgICAgICAgdmFyIHByZXZDb250ZXh0ID0gdGhpcy5yZWNlaXZpbmdDb250ZXh0O1xuICAgICAgICBpZiAocHJldkNvbnRleHQgJiYgcHJldkNvbnRleHQgIT09IG5leHRDb250ZXh0KSB7XG4gICAgICAgICAgICBwcmV2Q29udGV4dC5kaXNwYXRjaCh7IHR5cGU6ICdVTlNFVF9FVkVOVF9EUkFHJyB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmV4dENvbnRleHQpIHtcbiAgICAgICAgICAgIG5leHRDb250ZXh0LmRpc3BhdGNoKHsgdHlwZTogJ1NFVF9FVkVOVF9EUkFHJywgc3RhdGU6IHN0YXRlIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBFeHRlcm5hbEVsZW1lbnREcmFnZ2luZy5wcm90b3R5cGUuY2xlYXJEcmFnID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5yZWNlaXZpbmdDb250ZXh0KSB7XG4gICAgICAgICAgICB0aGlzLnJlY2VpdmluZ0NvbnRleHQuZGlzcGF0Y2goeyB0eXBlOiAnVU5TRVRfRVZFTlRfRFJBRycgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEV4dGVybmFsRWxlbWVudERyYWdnaW5nLnByb3RvdHlwZS5jYW5Ecm9wRWxPbkNhbGVuZGFyID0gZnVuY3Rpb24gKGVsLCByZWNlaXZpbmdDb250ZXh0KSB7XG4gICAgICAgIHZhciBkcm9wQWNjZXB0ID0gcmVjZWl2aW5nQ29udGV4dC5vcHRpb25zLmRyb3BBY2NlcHQ7XG4gICAgICAgIGlmICh0eXBlb2YgZHJvcEFjY2VwdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIGRyb3BBY2NlcHQuY2FsbChyZWNlaXZpbmdDb250ZXh0LmNhbGVuZGFyQXBpLCBlbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBkcm9wQWNjZXB0ID09PSAnc3RyaW5nJyAmJiBkcm9wQWNjZXB0KSB7XG4gICAgICAgICAgICByZXR1cm4gQm9vbGVhbihjb21tb24uZWxlbWVudE1hdGNoZXMoZWwsIGRyb3BBY2NlcHQpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIHJldHVybiBFeHRlcm5hbEVsZW1lbnREcmFnZ2luZztcbn0oKSk7XG4vLyBVdGlscyBmb3IgY29tcHV0aW5nIGV2ZW50IHN0b3JlIGZyb20gdGhlIERyYWdNZXRhXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5mdW5jdGlvbiBjb21wdXRlRXZlbnRGb3JEYXRlU3BhbihkYXRlU3BhbiwgZHJhZ01ldGEsIGNvbnRleHQpIHtcbiAgICB2YXIgZGVmUHJvcHMgPSB0c2xpYi5fX2Fzc2lnbih7fSwgZHJhZ01ldGEubGVmdG92ZXJQcm9wcyk7XG4gICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IGNvbnRleHQucGx1Z2luSG9va3MuZXh0ZXJuYWxEZWZUcmFuc2Zvcm1zOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgdHJhbnNmb3JtID0gX2FbX2ldO1xuICAgICAgICB0c2xpYi5fX2Fzc2lnbihkZWZQcm9wcywgdHJhbnNmb3JtKGRhdGVTcGFuLCBkcmFnTWV0YSkpO1xuICAgIH1cbiAgICB2YXIgX2IgPSBjb21tb24ucmVmaW5lRXZlbnREZWYoZGVmUHJvcHMsIGNvbnRleHQpLCByZWZpbmVkID0gX2IucmVmaW5lZCwgZXh0cmEgPSBfYi5leHRyYTtcbiAgICB2YXIgZGVmID0gY29tbW9uLnBhcnNlRXZlbnREZWYocmVmaW5lZCwgZXh0cmEsIGRyYWdNZXRhLnNvdXJjZUlkLCBkYXRlU3Bhbi5hbGxEYXksIGNvbnRleHQub3B0aW9ucy5mb3JjZUV2ZW50RHVyYXRpb24gfHwgQm9vbGVhbihkcmFnTWV0YS5kdXJhdGlvbiksIC8vIGhhc0VuZFxuICAgIGNvbnRleHQpO1xuICAgIHZhciBzdGFydCA9IGRhdGVTcGFuLnJhbmdlLnN0YXJ0O1xuICAgIC8vIG9ubHkgcmVseSBvbiB0aW1lIGluZm8gaWYgZHJvcCB6b25lIGlzIGFsbC1kYXksXG4gICAgLy8gb3RoZXJ3aXNlLCB3ZSBhbHJlYWR5IGtub3cgdGhlIHRpbWVcbiAgICBpZiAoZGF0ZVNwYW4uYWxsRGF5ICYmIGRyYWdNZXRhLnN0YXJ0VGltZSkge1xuICAgICAgICBzdGFydCA9IGNvbnRleHQuZGF0ZUVudi5hZGQoc3RhcnQsIGRyYWdNZXRhLnN0YXJ0VGltZSk7XG4gICAgfVxuICAgIHZhciBlbmQgPSBkcmFnTWV0YS5kdXJhdGlvbiA/XG4gICAgICAgIGNvbnRleHQuZGF0ZUVudi5hZGQoc3RhcnQsIGRyYWdNZXRhLmR1cmF0aW9uKSA6XG4gICAgICAgIGNvbW1vbi5nZXREZWZhdWx0RXZlbnRFbmQoZGF0ZVNwYW4uYWxsRGF5LCBzdGFydCwgY29udGV4dCk7XG4gICAgdmFyIGluc3RhbmNlID0gY29tbW9uLmNyZWF0ZUV2ZW50SW5zdGFuY2UoZGVmLmRlZklkLCB7IHN0YXJ0OiBzdGFydCwgZW5kOiBlbmQgfSk7XG4gICAgcmV0dXJuIHsgZGVmOiBkZWYsIGluc3RhbmNlOiBpbnN0YW5jZSB9O1xufVxuLy8gVXRpbHMgZm9yIGV4dHJhY3RpbmcgZGF0YSBmcm9tIGVsZW1lbnRcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIGdldERyYWdNZXRhRnJvbUVsKGVsKSB7XG4gICAgdmFyIHN0ciA9IGdldEVtYmVkZGVkRWxEYXRhKGVsLCAnZXZlbnQnKTtcbiAgICB2YXIgb2JqID0gc3RyID9cbiAgICAgICAgSlNPTi5wYXJzZShzdHIpIDpcbiAgICAgICAgeyBjcmVhdGU6IGZhbHNlIH07IC8vIGlmIG5vIGVtYmVkZGVkIGRhdGEsIGFzc3VtZSBubyBldmVudCBjcmVhdGlvblxuICAgIHJldHVybiBjb21tb24ucGFyc2VEcmFnTWV0YShvYmopO1xufVxuY29tbW9uLmNvbmZpZy5kYXRhQXR0clByZWZpeCA9ICcnO1xuZnVuY3Rpb24gZ2V0RW1iZWRkZWRFbERhdGEoZWwsIG5hbWUpIHtcbiAgICB2YXIgcHJlZml4ID0gY29tbW9uLmNvbmZpZy5kYXRhQXR0clByZWZpeDtcbiAgICB2YXIgcHJlZml4ZWROYW1lID0gKHByZWZpeCA/IHByZWZpeCArICctJyA6ICcnKSArIG5hbWU7XG4gICAgcmV0dXJuIGVsLmdldEF0dHJpYnV0ZSgnZGF0YS0nICsgcHJlZml4ZWROYW1lKSB8fCAnJztcbn1cblxuLypcbk1ha2VzIGFuIGVsZW1lbnQgKHRoYXQgaXMgKmV4dGVybmFsKiB0byBhbnkgY2FsZW5kYXIpIGRyYWdnYWJsZS5cbkNhbiBwYXNzIGluIGRhdGEgdGhhdCBkZXRlcm1pbmVzIGhvdyBhbiBldmVudCB3aWxsIGJlIGNyZWF0ZWQgd2hlbiBkcm9wcGVkIG9udG8gYSBjYWxlbmRhci5cbkxldmVyYWdlcyBGdWxsQ2FsZW5kYXIncyBpbnRlcm5hbCBkcmFnLW4tZHJvcCBmdW5jdGlvbmFsaXR5IFdJVEhPVVQgYSB0aGlyZC1wYXJ0eSBkcmFnIHN5c3RlbS5cbiovXG52YXIgRXh0ZXJuYWxEcmFnZ2FibGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRXh0ZXJuYWxEcmFnZ2FibGUoZWwsIHNldHRpbmdzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChzZXR0aW5ncyA9PT0gdm9pZCAwKSB7IHNldHRpbmdzID0ge307IH1cbiAgICAgICAgdGhpcy5oYW5kbGVQb2ludGVyRG93biA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgdmFyIGRyYWdnaW5nID0gX3RoaXMuZHJhZ2dpbmc7XG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcy5zZXR0aW5ncywgbWluRGlzdGFuY2UgPSBfYS5taW5EaXN0YW5jZSwgbG9uZ1ByZXNzRGVsYXkgPSBfYS5sb25nUHJlc3NEZWxheTtcbiAgICAgICAgICAgIGRyYWdnaW5nLm1pbkRpc3RhbmNlID1cbiAgICAgICAgICAgICAgICBtaW5EaXN0YW5jZSAhPSBudWxsID9cbiAgICAgICAgICAgICAgICAgICAgbWluRGlzdGFuY2UgOlxuICAgICAgICAgICAgICAgICAgICAoZXYuaXNUb3VjaCA/IDAgOiBjb21tb24uQkFTRV9PUFRJT05fREVGQVVMVFMuZXZlbnREcmFnTWluRGlzdGFuY2UpO1xuICAgICAgICAgICAgZHJhZ2dpbmcuZGVsYXkgPVxuICAgICAgICAgICAgICAgIGV2LmlzVG91Y2ggPyAvLyBUT0RPOiBldmVudHVhbGx5IHJlYWQgZXZlbnRMb25nUHJlc3NEZWxheSBpbnN0ZWFkIHZ2dlxuICAgICAgICAgICAgICAgICAgICAobG9uZ1ByZXNzRGVsYXkgIT0gbnVsbCA/IGxvbmdQcmVzc0RlbGF5IDogY29tbW9uLkJBU0VfT1BUSU9OX0RFRkFVTFRTLmxvbmdQcmVzc0RlbGF5KSA6XG4gICAgICAgICAgICAgICAgICAgIDA7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGFuZGxlRHJhZ1N0YXJ0ID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICBpZiAoZXYuaXNUb3VjaCAmJlxuICAgICAgICAgICAgICAgIF90aGlzLmRyYWdnaW5nLmRlbGF5ICYmXG4gICAgICAgICAgICAgICAgZXYuc3ViamVjdEVsLmNsYXNzTGlzdC5jb250YWlucygnZmMtZXZlbnQnKSkge1xuICAgICAgICAgICAgICAgIF90aGlzLmRyYWdnaW5nLm1pcnJvci5nZXRNaXJyb3JFbCgpLmNsYXNzTGlzdC5hZGQoJ2ZjLWV2ZW50LXNlbGVjdGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBzZXR0aW5ncztcbiAgICAgICAgdmFyIGRyYWdnaW5nID0gdGhpcy5kcmFnZ2luZyA9IG5ldyBGZWF0dXJlZnVsRWxlbWVudERyYWdnaW5nKGVsKTtcbiAgICAgICAgZHJhZ2dpbmcudG91Y2hTY3JvbGxBbGxvd2VkID0gZmFsc2U7XG4gICAgICAgIGlmIChzZXR0aW5ncy5pdGVtU2VsZWN0b3IgIT0gbnVsbCkge1xuICAgICAgICAgICAgZHJhZ2dpbmcucG9pbnRlci5zZWxlY3RvciA9IHNldHRpbmdzLml0ZW1TZWxlY3RvcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2V0dGluZ3MuYXBwZW5kVG8gIT0gbnVsbCkge1xuICAgICAgICAgICAgZHJhZ2dpbmcubWlycm9yLnBhcmVudE5vZGUgPSBzZXR0aW5ncy5hcHBlbmRUbzsgLy8gVE9ETzogd3JpdGUgdGVzdHNcbiAgICAgICAgfVxuICAgICAgICBkcmFnZ2luZy5lbWl0dGVyLm9uKCdwb2ludGVyZG93bicsIHRoaXMuaGFuZGxlUG9pbnRlckRvd24pO1xuICAgICAgICBkcmFnZ2luZy5lbWl0dGVyLm9uKCdkcmFnc3RhcnQnLCB0aGlzLmhhbmRsZURyYWdTdGFydCk7XG4gICAgICAgIG5ldyBFeHRlcm5hbEVsZW1lbnREcmFnZ2luZyhkcmFnZ2luZywgc2V0dGluZ3MuZXZlbnREYXRhKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9XG4gICAgRXh0ZXJuYWxEcmFnZ2FibGUucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZHJhZ2dpbmcuZGVzdHJveSgpO1xuICAgIH07XG4gICAgcmV0dXJuIEV4dGVybmFsRHJhZ2dhYmxlO1xufSgpKTtcblxuLypcbkRldGVjdHMgd2hlbiBhICpUSElSRC1QQVJUWSogZHJhZy1uLWRyb3Agc3lzdGVtIGludGVyYWN0cyB3aXRoIGVsZW1lbnRzLlxuVGhlIHRoaXJkLXBhcnR5IHN5c3RlbSBpcyByZXNwb25zaWJsZSBmb3IgZHJhd2luZyB0aGUgdmlzdWFscyBlZmZlY3RzIG9mIHRoZSBkcmFnLlxuVGhpcyBjbGFzcyBzaW1wbHkgbW9uaXRvcnMgZm9yIHBvaW50ZXIgbW92ZW1lbnRzIGFuZCBmaXJlcyBldmVudHMuXG5JdCBhbHNvIGhhcyB0aGUgYWJpbGl0eSB0byBoaWRlIHRoZSBtb3ZpbmcgZWxlbWVudCAodGhlIFwibWlycm9yXCIpIGR1cmluZyB0aGUgZHJhZy5cbiovXG52YXIgSW5mZXJyZWRFbGVtZW50RHJhZ2dpbmcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWIuX19leHRlbmRzKEluZmVycmVkRWxlbWVudERyYWdnaW5nLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEluZmVycmVkRWxlbWVudERyYWdnaW5nKGNvbnRhaW5lckVsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGNvbnRhaW5lckVsKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zaG91bGRJZ25vcmVNb3ZlID0gZmFsc2U7XG4gICAgICAgIF90aGlzLm1pcnJvclNlbGVjdG9yID0gJyc7XG4gICAgICAgIF90aGlzLmN1cnJlbnRNaXJyb3JFbCA9IG51bGw7XG4gICAgICAgIF90aGlzLmhhbmRsZVBvaW50ZXJEb3duID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICBfdGhpcy5lbWl0dGVyLnRyaWdnZXIoJ3BvaW50ZXJkb3duJywgZXYpO1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5zaG91bGRJZ25vcmVNb3ZlKSB7XG4gICAgICAgICAgICAgICAgLy8gZmlyZSBkcmFnc3RhcnQgcmlnaHQgYXdheS4gZG9lcyBub3Qgc3VwcG9ydCBkZWxheSBvciBtaW4tZGlzdGFuY2VcbiAgICAgICAgICAgICAgICBfdGhpcy5lbWl0dGVyLnRyaWdnZXIoJ2RyYWdzdGFydCcsIGV2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuaGFuZGxlUG9pbnRlck1vdmUgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIGlmICghX3RoaXMuc2hvdWxkSWdub3JlTW92ZSkge1xuICAgICAgICAgICAgICAgIF90aGlzLmVtaXR0ZXIudHJpZ2dlcignZHJhZ21vdmUnLCBldik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLmhhbmRsZVBvaW50ZXJVcCA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgX3RoaXMuZW1pdHRlci50cmlnZ2VyKCdwb2ludGVydXAnLCBldik7XG4gICAgICAgICAgICBpZiAoIV90aGlzLnNob3VsZElnbm9yZU1vdmUpIHtcbiAgICAgICAgICAgICAgICAvLyBmaXJlIGRyYWdlbmQgcmlnaHQgYXdheS4gZG9lcyBub3Qgc3VwcG9ydCBhIHJldmVydCBhbmltYXRpb25cbiAgICAgICAgICAgICAgICBfdGhpcy5lbWl0dGVyLnRyaWdnZXIoJ2RyYWdlbmQnLCBldik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHZhciBwb2ludGVyID0gX3RoaXMucG9pbnRlciA9IG5ldyBQb2ludGVyRHJhZ2dpbmcoY29udGFpbmVyRWwpO1xuICAgICAgICBwb2ludGVyLmVtaXR0ZXIub24oJ3BvaW50ZXJkb3duJywgX3RoaXMuaGFuZGxlUG9pbnRlckRvd24pO1xuICAgICAgICBwb2ludGVyLmVtaXR0ZXIub24oJ3BvaW50ZXJtb3ZlJywgX3RoaXMuaGFuZGxlUG9pbnRlck1vdmUpO1xuICAgICAgICBwb2ludGVyLmVtaXR0ZXIub24oJ3BvaW50ZXJ1cCcsIF90aGlzLmhhbmRsZVBvaW50ZXJVcCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgSW5mZXJyZWRFbGVtZW50RHJhZ2dpbmcucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucG9pbnRlci5kZXN0cm95KCk7XG4gICAgfTtcbiAgICBJbmZlcnJlZEVsZW1lbnREcmFnZ2luZy5wcm90b3R5cGUuc2V0SWdub3JlTW92ZSA9IGZ1bmN0aW9uIChib29sKSB7XG4gICAgICAgIHRoaXMuc2hvdWxkSWdub3JlTW92ZSA9IGJvb2w7XG4gICAgfTtcbiAgICBJbmZlcnJlZEVsZW1lbnREcmFnZ2luZy5wcm90b3R5cGUuc2V0TWlycm9ySXNWaXNpYmxlID0gZnVuY3Rpb24gKGJvb2wpIHtcbiAgICAgICAgaWYgKGJvb2wpIHtcbiAgICAgICAgICAgIC8vIHJlc3RvcmUgYSBwcmV2aW91c2x5IGhpZGRlbiBlbGVtZW50LlxuICAgICAgICAgICAgLy8gdXNlIHRoZSByZWZlcmVuY2UgaW4gY2FzZSB0aGUgc2VsZWN0b3IgY2xhc3MgaGFzIGFscmVhZHkgYmVlbiByZW1vdmVkLlxuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudE1pcnJvckVsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50TWlycm9yRWwuc3R5bGUudmlzaWJpbGl0eSA9ICcnO1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudE1pcnJvckVsID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBtaXJyb3JFbCA9IHRoaXMubWlycm9yU2VsZWN0b3JcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBzb21laG93IHF1ZXJ5IEZ1bGxDYWxlbmRhcnMgV0lUSElOIHNoYWRvdy1yb290c1xuICAgICAgICAgICAgICAgID8gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLm1pcnJvclNlbGVjdG9yKVxuICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgICAgIGlmIChtaXJyb3JFbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudE1pcnJvckVsID0gbWlycm9yRWw7XG4gICAgICAgICAgICAgICAgbWlycm9yRWwuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gSW5mZXJyZWRFbGVtZW50RHJhZ2dpbmc7XG59KGNvbW1vbi5FbGVtZW50RHJhZ2dpbmcpKTtcblxuLypcbkJyaWRnZXMgdGhpcmQtcGFydHkgZHJhZy1uLWRyb3Agc3lzdGVtcyB3aXRoIEZ1bGxDYWxlbmRhci5cbk11c3QgYmUgaW5zdGFudGlhdGVkIGFuZCBkZXN0cm95ZWQgYnkgY2FsbGVyLlxuKi9cbnZhciBUaGlyZFBhcnR5RHJhZ2dhYmxlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRoaXJkUGFydHlEcmFnZ2FibGUoY29udGFpbmVyT3JTZXR0aW5ncywgc2V0dGluZ3MpIHtcbiAgICAgICAgdmFyIGNvbnRhaW5lckVsID0gZG9jdW1lbnQ7XG4gICAgICAgIGlmIChcbiAgICAgICAgLy8gd2lzaCB3ZSBjb3VsZCBqdXN0IHRlc3QgaW5zdGFuY2VvZiBFdmVudFRhcmdldCwgYnV0IGRvZXNuJ3Qgd29yayBpbiBJRTExXG4gICAgICAgIGNvbnRhaW5lck9yU2V0dGluZ3MgPT09IGRvY3VtZW50IHx8XG4gICAgICAgICAgICBjb250YWluZXJPclNldHRpbmdzIGluc3RhbmNlb2YgRWxlbWVudCkge1xuICAgICAgICAgICAgY29udGFpbmVyRWwgPSBjb250YWluZXJPclNldHRpbmdzO1xuICAgICAgICAgICAgc2V0dGluZ3MgPSBzZXR0aW5ncyB8fCB7fTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNldHRpbmdzID0gKGNvbnRhaW5lck9yU2V0dGluZ3MgfHwge30pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkcmFnZ2luZyA9IHRoaXMuZHJhZ2dpbmcgPSBuZXcgSW5mZXJyZWRFbGVtZW50RHJhZ2dpbmcoY29udGFpbmVyRWwpO1xuICAgICAgICBpZiAodHlwZW9mIHNldHRpbmdzLml0ZW1TZWxlY3RvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGRyYWdnaW5nLnBvaW50ZXIuc2VsZWN0b3IgPSBzZXR0aW5ncy5pdGVtU2VsZWN0b3I7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY29udGFpbmVyRWwgPT09IGRvY3VtZW50KSB7XG4gICAgICAgICAgICBkcmFnZ2luZy5wb2ludGVyLnNlbGVjdG9yID0gJ1tkYXRhLWV2ZW50XSc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBzZXR0aW5ncy5taXJyb3JTZWxlY3RvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGRyYWdnaW5nLm1pcnJvclNlbGVjdG9yID0gc2V0dGluZ3MubWlycm9yU2VsZWN0b3I7XG4gICAgICAgIH1cbiAgICAgICAgbmV3IEV4dGVybmFsRWxlbWVudERyYWdnaW5nKGRyYWdnaW5nLCBzZXR0aW5ncy5ldmVudERhdGEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIH1cbiAgICBUaGlyZFBhcnR5RHJhZ2dhYmxlLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmRyYWdnaW5nLmRlc3Ryb3koKTtcbiAgICB9O1xuICAgIHJldHVybiBUaGlyZFBhcnR5RHJhZ2dhYmxlO1xufSgpKTtcblxudmFyIG1haW4gPSBjb21tb24uY3JlYXRlUGx1Z2luKHtcbiAgICBjb21wb25lbnRJbnRlcmFjdGlvbnM6IFtEYXRlQ2xpY2tpbmcsIERhdGVTZWxlY3RpbmcsIEV2ZW50RHJhZ2dpbmcsIEV2ZW50UmVzaXppbmddLFxuICAgIGNhbGVuZGFySW50ZXJhY3Rpb25zOiBbVW5zZWxlY3RBdXRvXSxcbiAgICBlbGVtZW50RHJhZ2dpbmdJbXBsOiBGZWF0dXJlZnVsRWxlbWVudERyYWdnaW5nLFxuICAgIG9wdGlvblJlZmluZXJzOiBPUFRJT05fUkVGSU5FUlMsXG4gICAgbGlzdGVuZXJSZWZpbmVyczogTElTVEVORVJfUkVGSU5FUlMsXG59KTtcblxuZXhwb3J0cy5EcmFnZ2FibGUgPSBFeHRlcm5hbERyYWdnYWJsZTtcbmV4cG9ydHMuRmVhdHVyZWZ1bEVsZW1lbnREcmFnZ2luZyA9IEZlYXR1cmVmdWxFbGVtZW50RHJhZ2dpbmc7XG5leHBvcnRzLlBvaW50ZXJEcmFnZ2luZyA9IFBvaW50ZXJEcmFnZ2luZztcbmV4cG9ydHMuVGhpcmRQYXJ0eURyYWdnYWJsZSA9IFRoaXJkUGFydHlEcmFnZ2FibGU7XG5leHBvcnRzLmRlZmF1bHQgPSBtYWluO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY29tbW9uIiwicmVxdWlyZSIsInRzbGliIiwiY29uZmlnIiwidG91Y2hNb3VzZUlnbm9yZVdhaXQiLCJpZ25vcmVNb3VzZURlcHRoIiwibGlzdGVuZXJDbnQiLCJpc1dpbmRvd1RvdWNoTW92ZUNhbmNlbGxlZCIsIlBvaW50ZXJEcmFnZ2luZyIsImNvbnRhaW5lckVsIiwiX3RoaXMiLCJzdWJqZWN0RWwiLCJzZWxlY3RvciIsImhhbmRsZVNlbGVjdG9yIiwic2hvdWxkSWdub3JlTW92ZSIsInNob3VsZFdhdGNoU2Nyb2xsIiwiaXNEcmFnZ2luZyIsImlzVG91Y2hEcmFnZ2luZyIsIndhc1RvdWNoU2Nyb2xsIiwiaGFuZGxlTW91c2VEb3duIiwiZXYiLCJzaG91bGRJZ25vcmVNb3VzZSIsImlzUHJpbWFyeU1vdXNlQnV0dG9uIiwidHJ5U3RhcnQiLCJwZXYiLCJjcmVhdGVFdmVudEZyb21Nb3VzZSIsImVtaXR0ZXIiLCJ0cmlnZ2VyIiwiaW5pdFNjcm9sbFdhdGNoIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiaGFuZGxlTW91c2VNb3ZlIiwiaGFuZGxlTW91c2VVcCIsInJlY29yZENvb3JkcyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjbGVhbnVwIiwiaGFuZGxlVG91Y2hTdGFydCIsImNyZWF0ZUV2ZW50RnJvbVRvdWNoIiwidGFyZ2V0RWwiLCJ0YXJnZXQiLCJoYW5kbGVUb3VjaE1vdmUiLCJoYW5kbGVUb3VjaEVuZCIsIndpbmRvdyIsImhhbmRsZVRvdWNoU2Nyb2xsIiwic3RhcnRJZ25vcmluZ01vdXNlIiwiaGFuZGxlU2Nyb2xsIiwicGFnZVgiLCJwYWdlWE9mZnNldCIsInByZXZTY3JvbGxYIiwicHJldlBhZ2VYIiwicGFnZVkiLCJwYWdlWU9mZnNldCIsInByZXZTY3JvbGxZIiwicHJldlBhZ2VZIiwib3JpZ0V2ZW50IiwiaXNUb3VjaCIsImRlbHRhWCIsIm9yaWdQYWdlWCIsImRlbHRhWSIsIm9yaWdQYWdlWSIsIkVtaXR0ZXIiLCJwYXNzaXZlIiwibGlzdGVuZXJDcmVhdGVkIiwicHJvdG90eXBlIiwiZGVzdHJveSIsImxpc3RlbmVyRGVzdHJveWVkIiwicXVlcnlTdWJqZWN0RWwiLCJkb3duRWwiLCJlbGVtZW50Q2xvc2VzdCIsImRlc3Ryb3lTY3JvbGxXYXRjaCIsImNhbmNlbFRvdWNoU2Nyb2xsIiwiaXNGaXJzdCIsInRvdWNoZXMiLCJsZW5ndGgiLCJidXR0b24iLCJjdHJsS2V5Iiwic2V0VGltZW91dCIsIm9uV2luZG93VG91Y2hNb3ZlIiwicHJldmVudERlZmF1bHQiLCJFbGVtZW50TWlycm9yIiwiaXNWaXNpYmxlIiwic291cmNlRWwiLCJtaXJyb3JFbCIsInNvdXJjZUVsUmVjdCIsInBhcmVudE5vZGUiLCJib2R5IiwiekluZGV4IiwicmV2ZXJ0RHVyYXRpb24iLCJzdGFydCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIm9yaWdTY3JlZW5YIiwib3JpZ1NjcmVlblkiLCJ1cGRhdGVFbFBvc2l0aW9uIiwiaGFuZGxlTW92ZSIsInNldElzVmlzaWJsZSIsImJvb2wiLCJzdHlsZSIsImRpc3BsYXkiLCJzdG9wIiwibmVlZHNSZXZlcnRBbmltYXRpb24iLCJjYWxsYmFjayIsImRvbmUiLCJkb1JldmVydEFuaW1hdGlvbiIsImZpbmFsU291cmNlRWxSZWN0IiwidHJhbnNpdGlvbiIsImFwcGx5U3R5bGUiLCJsZWZ0IiwidG9wIiwid2hlblRyYW5zaXRpb25Eb25lIiwicmVtb3ZlRWxlbWVudCIsImdldE1pcnJvckVsIiwiY2xvbmVOb2RlIiwiY2xhc3NMaXN0IiwiYWRkIiwicG9zaXRpb24iLCJ2aXNpYmlsaXR5IiwiYm94U2l6aW5nIiwid2lkdGgiLCJyaWdodCIsImhlaWdodCIsImJvdHRvbSIsIm1hcmdpbiIsImFwcGVuZENoaWxkIiwiU2Nyb2xsR2VvbUNhY2hlIiwiX3N1cGVyIiwiX19leHRlbmRzIiwic2Nyb2xsQ29udHJvbGxlciIsImRvZXNMaXN0ZW5pbmciLCJjYWxsIiwic2Nyb2xsVG9wIiwiZ2V0U2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsImdldFNjcm9sbExlZnQiLCJoYW5kbGVTY3JvbGxDaGFuZ2UiLCJvcmlnU2Nyb2xsVG9wIiwib3JpZ1Njcm9sbExlZnQiLCJzY3JvbGxXaWR0aCIsImdldFNjcm9sbFdpZHRoIiwic2Nyb2xsSGVpZ2h0IiwiZ2V0U2Nyb2xsSGVpZ2h0IiwiY2xpZW50V2lkdGgiLCJnZXRDbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImdldENsaWVudEhlaWdodCIsImNsaWVudFJlY3QiLCJjb21wdXRlQ2xpZW50UmVjdCIsImdldEV2ZW50VGFyZ2V0Iiwic2V0U2Nyb2xsVG9wIiwiTWF0aCIsIm1heCIsIm1pbiIsImdldE1heFNjcm9sbFRvcCIsInNldFNjcm9sbExlZnQiLCJnZXRNYXhTY3JvbGxMZWZ0IiwiU2Nyb2xsQ29udHJvbGxlciIsIkVsZW1lbnRTY3JvbGxHZW9tQ2FjaGUiLCJlbCIsIkVsZW1lbnRTY3JvbGxDb250cm9sbGVyIiwiY29tcHV0ZUlubmVyUmVjdCIsIldpbmRvd1Njcm9sbEdlb21DYWNoZSIsIldpbmRvd1Njcm9sbENvbnRyb2xsZXIiLCJnZXRUaW1lIiwicGVyZm9ybWFuY2UiLCJub3ciLCJEYXRlIiwiQXV0b1Njcm9sbGVyIiwiaXNFbmFibGVkIiwic2Nyb2xsUXVlcnkiLCJlZGdlVGhyZXNob2xkIiwibWF4VmVsb2NpdHkiLCJwb2ludGVyU2NyZWVuWCIsInBvaW50ZXJTY3JlZW5ZIiwiaXNBbmltYXRpbmciLCJzY3JvbGxDYWNoZXMiLCJldmVyTW92ZWRVcCIsImV2ZXJNb3ZlZERvd24iLCJldmVyTW92ZWRMZWZ0IiwiZXZlck1vdmVkUmlnaHQiLCJhbmltYXRlIiwiZWRnZSIsImNvbXB1dGVCZXN0RWRnZSIsImhhbmRsZVNpZGUiLCJtc1NpbmNlUmVxdWVzdCIsInJlcXVlc3RBbmltYXRpb24iLCJzY3JvbGxTdGFydEVsIiwiYnVpbGRDYWNoZXMiLCJ5RGVsdGEiLCJ4RGVsdGEiLCJfaSIsIl9hIiwic2Nyb2xsQ2FjaGUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzZWNvbmRzIiwiaW52RGlzdGFuY2UiLCJkaXN0YW5jZSIsInZlbG9jaXR5Iiwic2lnbiIsIm5hbWUiLCJiZXN0U2lkZSIsInNjcm9sbENhY2hlc18xIiwicmVjdCIsImxlZnREaXN0IiwicmlnaHREaXN0IiwidG9wRGlzdCIsImJvdHRvbURpc3QiLCJjYW5TY3JvbGxVcCIsImNhblNjcm9sbERvd24iLCJjYW5TY3JvbGxMZWZ0IiwiY2FuU2Nyb2xsUmlnaHQiLCJxdWVyeVNjcm9sbEVscyIsIm1hcCIsImVscyIsInF1ZXJ5IiwicHVzaCIsImFwcGx5IiwiQXJyYXkiLCJzbGljZSIsImdldEVsUm9vdCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJGZWF0dXJlZnVsRWxlbWVudERyYWdnaW5nIiwiZGVsYXkiLCJtaW5EaXN0YW5jZSIsInRvdWNoU2Nyb2xsQWxsb3dlZCIsIm1pcnJvck5lZWRzUmV2ZXJ0IiwiaXNJbnRlcmFjdGluZyIsImlzRGVsYXlFbmRlZCIsImlzRGlzdGFuY2VTdXJwYXNzZWQiLCJkZWxheVRpbWVvdXRJZCIsIm9uUG9pbnRlckRvd24iLCJwcmV2ZW50U2VsZWN0aW9uIiwicHJldmVudENvbnRleHRNZW51IiwicG9pbnRlciIsIm1pcnJvciIsInN0YXJ0RGVsYXkiLCJoYW5kbGVEaXN0YW5jZVN1cnBhc3NlZCIsIm9uUG9pbnRlck1vdmUiLCJkaXN0YW5jZVNxIiwidHlwZSIsImF1dG9TY3JvbGxlciIsIm9uUG9pbnRlclVwIiwiYWxsb3dTZWxlY3Rpb24iLCJhbGxvd0NvbnRleHRNZW51IiwidHJ5U3RvcERyYWciLCJjbGVhclRpbWVvdXQiLCJvbiIsImhhbmRsZURlbGF5RW5kIiwidHJ5U3RhcnREcmFnIiwic3RvcERyYWciLCJiaW5kIiwic2V0SWdub3JlTW92ZSIsInNldE1pcnJvcklzVmlzaWJsZSIsInNldE1pcnJvck5lZWRzUmV2ZXJ0Iiwic2V0QXV0b1Njcm9sbEVuYWJsZWQiLCJFbGVtZW50RHJhZ2dpbmciLCJPZmZzZXRUcmFja2VyIiwib3JpZ1JlY3QiLCJjb21wdXRlUmVjdCIsImdldENsaXBwaW5nUGFyZW50cyIsInNjcm9sbEVsIiwiY29tcHV0ZUxlZnQiLCJjb21wdXRlVG9wIiwiaXNXaXRoaW5DbGlwcGluZyIsInBvaW50IiwiaXNJZ25vcmVkQ2xpcHBpbmciLCJwb2ludEluc2lkZVJlY3QiLCJub2RlIiwidGFnTmFtZSIsIkhpdERyYWdnaW5nIiwiZHJhZ2dpbmciLCJkcm9wcGFibGVTdG9yZSIsInVzZVN1YmplY3RDZW50ZXIiLCJyZXF1aXJlSW5pdGlhbCIsImluaXRpYWxIaXQiLCJtb3ZpbmdIaXQiLCJmaW5hbEhpdCIsImhhbmRsZVBvaW50ZXJEb3duIiwicHJlcGFyZUhpdHMiLCJwcm9jZXNzRmlyc3RDb29yZCIsImhhbmRsZURyYWdTdGFydCIsImhhbmRsZURyYWdNb3ZlIiwiaGFuZGxlUG9pbnRlclVwIiwicmVsZWFzZUhpdHMiLCJoYW5kbGVEcmFnRW5kIiwib3JpZ1BvaW50IiwiYWRqdXN0ZWRQb2ludCIsInN1YmplY3RSZWN0IiwiSFRNTEVsZW1lbnQiLCJjb25zdHJhaW5Qb2ludCIsInF1ZXJ5SGl0Rm9yT2Zmc2V0Iiwic2xpY2VkU3ViamVjdFJlY3QiLCJpbnRlcnNlY3RSZWN0cyIsImdldFJlY3RDZW50ZXIiLCJjb29yZEFkanVzdCIsImRpZmZQb2ludHMiLCJmb3JjZUhhbmRsZSIsImhpdCIsImlzSGl0c0VxdWFsIiwib2Zmc2V0VHJhY2tlcnMiLCJtYXBIYXNoIiwiaW50ZXJhY3Rpb25TZXR0aW5ncyIsImNvbXBvbmVudCIsImlkIiwib2Zmc2V0TGVmdCIsIm9mZnNldFRvcCIsImJlc3RIaXQiLCJvZmZzZXRUcmFja2VyIiwib3JpZ2luTGVmdCIsIm9yaWdpblRvcCIsInBvc2l0aW9uTGVmdCIsInBvc2l0aW9uVG9wIiwicXVlcnlIaXQiLCJyYW5nZUNvbnRhaW5zUmFuZ2UiLCJkYXRlUHJvZmlsZSIsImFjdGl2ZVJhbmdlIiwiZGF0ZVNwYW4iLCJyYW5nZSIsImxheWVyIiwiY29tcG9uZW50SWQiLCJjb250ZXh0IiwiaGl0MCIsImhpdDEiLCJCb29sZWFuIiwiaXNEYXRlU3BhbnNFcXVhbCIsImJ1aWxkRGF0ZVBvaW50QXBpV2l0aENvbnRleHQiLCJwcm9wcyIsInBsdWdpbkhvb2tzIiwiZGF0ZVBvaW50VHJhbnNmb3JtcyIsInRyYW5zZm9ybSIsIl9fYXNzaWduIiwiYnVpbGREYXRlUG9pbnRBcGkiLCJkYXRlRW52Iiwic3BhbiIsImRhdGUiLCJ0b0RhdGUiLCJkYXRlU3RyIiwiZm9ybWF0SXNvIiwib21pdFRpbWUiLCJhbGxEYXkiLCJEYXRlQ2xpY2tpbmciLCJzZXR0aW5ncyIsImlzVmFsaWREYXRlRG93bkVsIiwiaGl0RHJhZ2dpbmciLCJhcmciLCJkYXlFbCIsImpzRXZlbnQiLCJ2aWV3Iiwidmlld0FwaSIsImNhbGVuZGFyQXBpIiwiaW50ZXJhY3Rpb25TZXR0aW5nc1RvU3RvcmUiLCJJbnRlcmFjdGlvbiIsIkRhdGVTZWxlY3RpbmciLCJkcmFnU2VsZWN0aW9uIiwib3B0aW9ucyIsImNhblNlbGVjdCIsInNlbGVjdGFibGUiLCJnZXRDb21wb25lbnRUb3VjaERlbGF5JDEiLCJ1bnNlbGVjdCIsImhhbmRsZUhpdFVwZGF0ZSIsImlzRmluYWwiLCJpc0ludmFsaWQiLCJkaXNhbGxvd2VkIiwiaXNIaXRDb21ib0FsbG93ZWQiLCJqb2luSGl0c0ludG9TZWxlY3Rpb24iLCJkYXRlU2VsZWN0aW9uVHJhbnNmb3JtZXJzIiwiaXNEYXRlU2VsZWN0aW9uVmFsaWQiLCJkaXNwYXRjaCIsInNlbGVjdGlvbiIsImVuYWJsZUN1cnNvciIsImRpc2FibGVDdXJzb3IiLCJ0cmlnZ2VyRGF0ZVNlbGVjdCIsInNlbGVjdE1pbkRpc3RhbmNlIiwiZHJhZ1Njcm9sbCIsInNlbGVjdExvbmdQcmVzc0RlbGF5IiwibG9uZ1ByZXNzRGVsYXkiLCJkYXRlU3BhbjAiLCJkYXRlU3BhbjEiLCJtcyIsImVuZCIsInNvcnQiLCJjb21wYXJlTnVtYmVycyIsImRhdGVTZWxlY3Rpb25UcmFuc2Zvcm1lcnNfMSIsInRyYW5zZm9ybWVyIiwicmVzIiwiRXZlbnREcmFnZ2luZyIsInN1YmplY3RTZWciLCJldmVudFJhbmdlIiwicmVsZXZhbnRFdmVudHMiLCJyZWNlaXZpbmdDb250ZXh0IiwidmFsaWRNdXRhdGlvbiIsIm11dGF0ZWRSZWxldmFudEV2ZW50cyIsIm9yaWdUYXJnZXQiLCJpbml0aWFsQ29udGV4dCIsImdldEVsU2VnIiwiZXZlbnRJbnN0YW5jZUlkIiwiaW5zdGFuY2UiLCJpbnN0YW5jZUlkIiwiZ2V0UmVsZXZhbnRFdmVudHMiLCJnZXRDdXJyZW50RGF0YSIsImV2ZW50U3RvcmUiLCJldmVudERyYWdNaW5EaXN0YW5jZSIsImV2ZW50U2VsZWN0aW9uIiwiZ2V0Q29tcG9uZW50VG91Y2hEZWxheSIsImZpeGVkTWlycm9yUGFyZW50IiwiZHJhZ1JldmVydER1cmF0aW9uIiwiaXNWYWxpZCIsImlzVmFsaWRTZWdEb3duRWwiLCJjb250YWlucyIsImV2ZW50IiwiRXZlbnRBcGkiLCJkZWYiLCJtdXRhdGlvbiIsImludGVyYWN0aW9uIiwiYWZmZWN0ZWRFdmVudHMiLCJtdXRhdGVkRXZlbnRzIiwiY3JlYXRlRW1wdHlFdmVudFN0b3JlIiwiaXNFdmVudCIsInJlY2VpdmluZ09wdGlvbnMiLCJlZGl0YWJsZSIsImRyb3BwYWJsZSIsImNvbXB1dGVFdmVudE11dGF0aW9uIiwiZXZlbnREcmFnTXV0YXRpb25NYXNzYWdlcnMiLCJhcHBseU11dGF0aW9uVG9FdmVudFN0b3JlIiwiZXZlbnRVaUJhc2VzIiwiaXNJbnRlcmFjdGlvblZhbGlkIiwiZGlzcGxheURyYWciLCJxdWVyeVNlbGVjdG9yIiwiaW5pdGlhbENvbnRleHRfMSIsImluaXRpYWxWaWV3IiwicmVjZWl2aW5nQ29udGV4dF8xIiwiZXZlbnREZWYiLCJldmVudEluc3RhbmNlIiwiZXZlbnRBcGkiLCJyZWxldmFudEV2ZW50c18xIiwibXV0YXRlZFJlbGV2YW50RXZlbnRzXzEiLCJjbGVhckRyYWciLCJ1cGRhdGVkRXZlbnRBcGkiLCJkZWZzIiwiZGVmSWQiLCJpbnN0YW5jZXMiLCJldmVudENoYW5nZUFyZyIsIm9sZEV2ZW50IiwicmVsYXRlZEV2ZW50cyIsImJ1aWxkRXZlbnRBcGlzIiwicmV2ZXJ0IiwidHJhbnNmb3JtZWQiLCJfYiIsImV2ZW50RHJvcFRyYW5zZm9ybWVycyIsImRlbHRhIiwiZGF0ZXNEZWx0YSIsImV2ZW50UmVtb3ZlQXJnIiwiZHJhZ2dlZEVsIiwiYWRkZWRFdmVudERlZiIsImFkZGVkRXZlbnRJbnN0YW5jZSIsImFkZGVkRXZlbnRBcGkiLCJldmVudEFkZEFyZyIsIlNFTEVDVE9SIiwiaW50ZXJhY3Rpb25TZXR0aW5nc1N0b3JlIiwidXNlRXZlbnRDZW50ZXIiLCJuZXh0Q29udGV4dCIsInN0YXRlIiwicHJldkNvbnRleHQiLCJpbml0aWFsQ2FsZW5kYXIiLCJtYXNzYWdlcnMiLCJkYXRlMCIsImRhdGUxIiwic3RhbmRhcmRQcm9wcyIsImhhc0VuZCIsImFsbERheU1haW50YWluRHVyYXRpb24iLCJzdGFydE9mRGF5IiwiZGlmZkRhdGVzIiwibGFyZ2VVbml0IiwibWlsbGlzZWNvbmRzIiwibWFzc2FnZXJzXzEiLCJtYXNzYWdlciIsImV2ZW50TG9uZ1ByZXNzRGVsYXkiLCJFdmVudFJlc2l6aW5nIiwiZHJhZ2dpbmdTZWdFbCIsImRyYWdnaW5nU2VnIiwic2VnRWwiLCJxdWVyeVNlZ0VsIiwic2VnIiwiY29tcHV0ZU11dGF0aW9uIiwic3RhcnREZWx0YSIsImNyZWF0ZUR1cmF0aW9uIiwiZW5kRGVsdGEiLCJpc0Zyb21TdGFydCIsImluc3RhbmNlUmFuZ2UiLCJVbnNlbGVjdEF1dG8iLCJpc1JlY2VudFBvaW50ZXJEYXRlU2VsZWN0IiwibWF0Y2hlc0NhbmNlbCIsIm1hdGNoZXNFdmVudCIsIm9uU2VsZWN0Iiwic2VsZWN0SW5mbyIsIm9uRG9jdW1lbnRQb2ludGVyRG93biIsInVuc2VsZWN0Q2FuY2VsIiwiZ2V0RXZlbnRUYXJnZXRWaWFSb290Iiwib25Eb2N1bWVudFBvaW50ZXJVcCIsImRvY3VtZW50UG9pbnRlciIsImNhbGVuZGFyU3RhdGUiLCJkYXRlU2VsZWN0aW9uIiwidW5zZWxlY3RBdXRvIiwib2ZmIiwiT1BUSU9OX1JFRklORVJTIiwiaWRlbnRpdHkiLCJMSVNURU5FUl9SRUZJTkVSUyIsImRhdGVDbGljayIsImV2ZW50RHJhZ1N0YXJ0IiwiZXZlbnREcmFnU3RvcCIsImV2ZW50RHJvcCIsImV2ZW50UmVzaXplU3RhcnQiLCJldmVudFJlc2l6ZVN0b3AiLCJldmVudFJlc2l6ZSIsImRyb3AiLCJldmVudFJlY2VpdmUiLCJldmVudExlYXZlIiwiRXh0ZXJuYWxFbGVtZW50RHJhZ2dpbmciLCJzdXBwbGllZERyYWdNZXRhIiwiZHJvcHBhYmxlRXZlbnQiLCJkcmFnTWV0YSIsImJ1aWxkRHJhZ01ldGEiLCJjcmVhdGUiLCJjYW5Ecm9wRWxPbkNhbGVuZGFyIiwiY29tcHV0ZUV2ZW50Rm9yRGF0ZVNwYW4iLCJldmVudFR1cGxlVG9TdG9yZSIsImZpbmFsVmlldyIsImFkZGluZ0V2ZW50c18xIiwicGFyc2VEcmFnTWV0YSIsImdldERyYWdNZXRhRnJvbUVsIiwiZHJvcEFjY2VwdCIsImVsZW1lbnRNYXRjaGVzIiwiZGVmUHJvcHMiLCJsZWZ0b3ZlclByb3BzIiwiZXh0ZXJuYWxEZWZUcmFuc2Zvcm1zIiwicmVmaW5lRXZlbnREZWYiLCJyZWZpbmVkIiwiZXh0cmEiLCJwYXJzZUV2ZW50RGVmIiwic291cmNlSWQiLCJmb3JjZUV2ZW50RHVyYXRpb24iLCJkdXJhdGlvbiIsInN0YXJ0VGltZSIsImdldERlZmF1bHRFdmVudEVuZCIsImNyZWF0ZUV2ZW50SW5zdGFuY2UiLCJzdHIiLCJnZXRFbWJlZGRlZEVsRGF0YSIsIm9iaiIsIkpTT04iLCJwYXJzZSIsImRhdGFBdHRyUHJlZml4IiwicHJlZml4IiwicHJlZml4ZWROYW1lIiwiZ2V0QXR0cmlidXRlIiwiRXh0ZXJuYWxEcmFnZ2FibGUiLCJCQVNFX09QVElPTl9ERUZBVUxUUyIsIml0ZW1TZWxlY3RvciIsImFwcGVuZFRvIiwiZXZlbnREYXRhIiwiSW5mZXJyZWRFbGVtZW50RHJhZ2dpbmciLCJtaXJyb3JTZWxlY3RvciIsImN1cnJlbnRNaXJyb3JFbCIsImhhbmRsZVBvaW50ZXJNb3ZlIiwiVGhpcmRQYXJ0eURyYWdnYWJsZSIsImNvbnRhaW5lck9yU2V0dGluZ3MiLCJFbGVtZW50IiwibWFpbiIsImNyZWF0ZVBsdWdpbiIsImNvbXBvbmVudEludGVyYWN0aW9ucyIsImNhbGVuZGFySW50ZXJhY3Rpb25zIiwiZWxlbWVudERyYWdnaW5nSW1wbCIsIm9wdGlvblJlZmluZXJzIiwibGlzdGVuZXJSZWZpbmVycyIsIkRyYWdnYWJsZSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@fullcalendar/interaction/main.cjs.js\n");

/***/ }),

/***/ "./node_modules/@fullcalendar/react/dist/main.cjs.js":
/*!***********************************************************!*\
  !*** ./node_modules/@fullcalendar/react/dist/main.cjs.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar tslib = __webpack_require__(/*! tslib */ \"tslib\");\n__webpack_require__(/*! ./vdom.cjs */ \"./node_modules/@fullcalendar/react/dist/vdom.cjs.js\");\nvar React = __webpack_require__(/*! react */ \"react\");\nvar common = __webpack_require__(/*! @fullcalendar/common */ \"./node_modules/@fullcalendar/common/main.cjs.js\");\nvar FullCalendar = /** @class */ function(_super) {\n    tslib.__extends(FullCalendar1, _super);\n    function FullCalendar1() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._calendarApi = new common.CalendarApi();\n        return _this;\n    }\n    FullCalendar1.prototype.render = function() {\n        return React.createElement(common.CalendarDataProvider, {\n            optionOverrides: this.props,\n            calendarApi: this._calendarApi\n        }, function(data) {\n            return React.createElement(common.CalendarRoot, {\n                options: data.calendarOptions,\n                theme: data.theme,\n                emitter: data.emitter\n            }, function(classNames, height, isHeightAuto, forPrint) {\n                return React.createElement(\"div\", {\n                    className: classNames.join(\" \"),\n                    style: {\n                        height: height\n                    }\n                }, React.createElement(common.CalendarContent, tslib.__assign({\n                    isHeightAuto: isHeightAuto,\n                    forPrint: forPrint\n                }, data)));\n            });\n        });\n    };\n    FullCalendar1.prototype.getApi = function() {\n        return this._calendarApi;\n    };\n    return FullCalendar1;\n}(React.Component);\nObject.keys(common).forEach(function(k) {\n    if (k !== \"default\") Object.defineProperty(exports, k, {\n        enumerable: true,\n        get: function() {\n            return common[k];\n        }\n    });\n});\nexports[\"default\"] = FullCalendar;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGZ1bGxjYWxlbmRhci9yZWFjdC9kaXN0L21haW4uY2pzLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUFFRyxLQUFLLEVBQUUsSUFBSTtDQUFFLEVBQUMsQ0FBQztBQUU5RCxJQUFJQyxLQUFLLEdBQUdDLG1CQUFPLENBQUMsb0JBQU8sQ0FBQztBQUM1QkEsbUJBQU8sQ0FBQyx1RUFBWSxDQUFDLENBQUM7QUFDdEIsSUFBSUMsS0FBSyxHQUFHRCxtQkFBTyxDQUFDLG9CQUFPLENBQUM7QUFDNUIsSUFBSUUsTUFBTSxHQUFHRixtQkFBTyxDQUFDLDZFQUFzQixDQUFDO0FBRTVDLElBQUlHLFlBQVksR0FBRyxhQUFhLENBQUUsU0FBVUMsTUFBTSxFQUFFO0lBQ2hETCxLQUFLLENBQUNNLFNBQVMsQ0FBQ0YsYUFBWSxFQUFFQyxNQUFNLENBQUMsQ0FBQztJQUN0QyxTQUFTRCxhQUFZLEdBQUc7UUFDcEIsSUFBSUcsS0FBSyxHQUFHRixNQUFNLEtBQUssSUFBSSxJQUFJQSxNQUFNLENBQUNHLEtBQUssQ0FBQyxJQUFJLEVBQUVDLFNBQVMsQ0FBQyxJQUFJLElBQUk7UUFDcEVGLEtBQUssQ0FBQ0csWUFBWSxHQUFHLElBQUlQLE1BQU0sQ0FBQ1EsV0FBVyxFQUFFLENBQUM7UUFDOUMsT0FBT0osS0FBSyxDQUFDO0tBQ2hCO0lBQ0RILGFBQVksQ0FBQ1EsU0FBUyxDQUFDQyxNQUFNLEdBQUcsV0FBWTtRQUN4QyxPQUFRWCxLQUFLLENBQUNZLGFBQWEsQ0FBQ1gsTUFBTSxDQUFDWSxvQkFBb0IsRUFBRTtZQUFFQyxlQUFlLEVBQUUsSUFBSSxDQUFDQyxLQUFLO1lBQUVDLFdBQVcsRUFBRSxJQUFJLENBQUNSLFlBQVk7U0FBRSxFQUFFLFNBQVVTLElBQUksRUFBRTtZQUFFLE9BQVFqQixLQUFLLENBQUNZLGFBQWEsQ0FBQ1gsTUFBTSxDQUFDaUIsWUFBWSxFQUFFO2dCQUFFQyxPQUFPLEVBQUVGLElBQUksQ0FBQ0csZUFBZTtnQkFBRUMsS0FBSyxFQUFFSixJQUFJLENBQUNJLEtBQUs7Z0JBQUVDLE9BQU8sRUFBRUwsSUFBSSxDQUFDSyxPQUFPO2FBQUUsRUFBRSxTQUFVQyxVQUFVLEVBQUVDLE1BQU0sRUFBRUMsWUFBWSxFQUFFQyxRQUFRLEVBQUU7Z0JBQUUsT0FBUTFCLEtBQUssQ0FBQ1ksYUFBYSxDQUFDLEtBQUssRUFBRTtvQkFBRWUsU0FBUyxFQUFFSixVQUFVLENBQUNLLElBQUksQ0FBQyxHQUFHLENBQUM7b0JBQUVDLEtBQUssRUFBRTt3QkFBRUwsTUFBTSxFQUFFQSxNQUFNO3FCQUFFO2lCQUFFLEVBQy9aeEIsS0FBSyxDQUFDWSxhQUFhLENBQUNYLE1BQU0sQ0FBQzZCLGVBQWUsRUFBRWhDLEtBQUssQ0FBQ2lDLFFBQVEsQ0FBQztvQkFBRU4sWUFBWSxFQUFFQSxZQUFZO29CQUFFQyxRQUFRLEVBQUVBLFFBQVE7aUJBQUUsRUFBRVQsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFFO2FBQUUsQ0FBQyxDQUFFO1NBQUUsQ0FBQyxDQUFFO0tBQ3pJLENBQUM7SUFDRmYsYUFBWSxDQUFDUSxTQUFTLENBQUNzQixNQUFNLEdBQUcsV0FBWTtRQUN4QyxPQUFPLElBQUksQ0FBQ3hCLFlBQVksQ0FBQztLQUM1QixDQUFDO0lBQ0YsT0FBT04sYUFBWSxDQUFDO0NBQ3ZCLENBQUNGLEtBQUssQ0FBQ2lDLFNBQVMsQ0FBQztBQUVsQnZDLE1BQU0sQ0FBQ3dDLElBQUksQ0FBQ2pDLE1BQU0sQ0FBQyxDQUFDa0MsT0FBTyxDQUFDLFNBQVVDLENBQUMsRUFBRTtJQUNyQyxJQUFJQSxDQUFDLEtBQUssU0FBUyxFQUFFMUMsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRXdDLENBQUMsRUFBRTtRQUNuREMsVUFBVSxFQUFFLElBQUk7UUFDaEJDLEdBQUcsRUFBRSxXQUFZO1lBQ2IsT0FBT3JDLE1BQU0sQ0FBQ21DLENBQUMsQ0FBQyxDQUFDO1NBQ3BCO0tBQ0osQ0FBQyxDQUFDO0NBQ04sQ0FBQyxDQUFDO0FBQ0h4QyxrQkFBZSxHQUFHTSxZQUFZLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb25nanVuZS8uL25vZGVfbW9kdWxlcy9AZnVsbGNhbGVuZGFyL3JlYWN0L2Rpc3QvbWFpbi5janMuanM/ZWEyNyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciB0c2xpYiA9IHJlcXVpcmUoJ3RzbGliJyk7XG5yZXF1aXJlKCcuL3Zkb20uY2pzJyk7XG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIGNvbW1vbiA9IHJlcXVpcmUoJ0BmdWxsY2FsZW5kYXIvY29tbW9uJyk7XG5cbnZhciBGdWxsQ2FsZW5kYXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWIuX19leHRlbmRzKEZ1bGxDYWxlbmRhciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBGdWxsQ2FsZW5kYXIoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fY2FsZW5kYXJBcGkgPSBuZXcgY29tbW9uLkNhbGVuZGFyQXBpKCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRnVsbENhbGVuZGFyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChjb21tb24uQ2FsZW5kYXJEYXRhUHJvdmlkZXIsIHsgb3B0aW9uT3ZlcnJpZGVzOiB0aGlzLnByb3BzLCBjYWxlbmRhckFwaTogdGhpcy5fY2FsZW5kYXJBcGkgfSwgZnVuY3Rpb24gKGRhdGEpIHsgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KGNvbW1vbi5DYWxlbmRhclJvb3QsIHsgb3B0aW9uczogZGF0YS5jYWxlbmRhck9wdGlvbnMsIHRoZW1lOiBkYXRhLnRoZW1lLCBlbWl0dGVyOiBkYXRhLmVtaXR0ZXIgfSwgZnVuY3Rpb24gKGNsYXNzTmFtZXMsIGhlaWdodCwgaXNIZWlnaHRBdXRvLCBmb3JQcmludCkgeyByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IGNsYXNzTmFtZXMuam9pbignICcpLCBzdHlsZTogeyBoZWlnaHQ6IGhlaWdodCB9IH0sXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbW1vbi5DYWxlbmRhckNvbnRlbnQsIHRzbGliLl9fYXNzaWduKHsgaXNIZWlnaHRBdXRvOiBpc0hlaWdodEF1dG8sIGZvclByaW50OiBmb3JQcmludCB9LCBkYXRhKSkpKTsgfSkpOyB9KSk7XG4gICAgfTtcbiAgICBGdWxsQ2FsZW5kYXIucHJvdG90eXBlLmdldEFwaSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhbGVuZGFyQXBpO1xuICAgIH07XG4gICAgcmV0dXJuIEZ1bGxDYWxlbmRhcjtcbn0oUmVhY3QuQ29tcG9uZW50KSk7XG5cbk9iamVjdC5rZXlzKGNvbW1vbikuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICAgIGlmIChrICE9PSAnZGVmYXVsdCcpIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrLCB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbW1vbltrXTtcbiAgICAgICAgfVxuICAgIH0pO1xufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBGdWxsQ2FsZW5kYXI7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ0c2xpYiIsInJlcXVpcmUiLCJSZWFjdCIsImNvbW1vbiIsIkZ1bGxDYWxlbmRhciIsIl9zdXBlciIsIl9fZXh0ZW5kcyIsIl90aGlzIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJfY2FsZW5kYXJBcGkiLCJDYWxlbmRhckFwaSIsInByb3RvdHlwZSIsInJlbmRlciIsImNyZWF0ZUVsZW1lbnQiLCJDYWxlbmRhckRhdGFQcm92aWRlciIsIm9wdGlvbk92ZXJyaWRlcyIsInByb3BzIiwiY2FsZW5kYXJBcGkiLCJkYXRhIiwiQ2FsZW5kYXJSb290Iiwib3B0aW9ucyIsImNhbGVuZGFyT3B0aW9ucyIsInRoZW1lIiwiZW1pdHRlciIsImNsYXNzTmFtZXMiLCJoZWlnaHQiLCJpc0hlaWdodEF1dG8iLCJmb3JQcmludCIsImNsYXNzTmFtZSIsImpvaW4iLCJzdHlsZSIsIkNhbGVuZGFyQ29udGVudCIsIl9fYXNzaWduIiwiZ2V0QXBpIiwiQ29tcG9uZW50Iiwia2V5cyIsImZvckVhY2giLCJrIiwiZW51bWVyYWJsZSIsImdldCIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@fullcalendar/react/dist/main.cjs.js\n");

/***/ }),

/***/ "./node_modules/@fullcalendar/react/dist/vdom.cjs.js":
/*!***********************************************************!*\
  !*** ./node_modules/@fullcalendar/react/dist/vdom.cjs.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar React = __webpack_require__(/*! react */ \"react\");\nvar reactDom = __webpack_require__(/*! react-dom */ \"react-dom\");\n(typeof globalThis !== \"undefined\" ? globalThis : window).FullCalendarVDom = {\n    Component: React.Component,\n    createElement: React.createElement,\n    render: reactDom.render,\n    createRef: React.createRef,\n    Fragment: React.Fragment,\n    createContext: React.createContext,\n    createPortal: reactDom.createPortal,\n    flushSync: flushSync,\n    unmountComponentAtNode: reactDom.unmountComponentAtNode // never called by FullCalendar's React component\n};\nfunction flushSync(callback) {\n    // always sync from top-level\n    callback();\n}\nexports.flushSync = flushSync;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGZ1bGxjYWxlbmRhci9yZWFjdC9kaXN0L3Zkb20uY2pzLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUFFRyxLQUFLLEVBQUUsSUFBSTtDQUFFLEVBQUMsQ0FBQztBQUU5RCxJQUFJQyxLQUFLLEdBQUdDLG1CQUFPLENBQUMsb0JBQU8sQ0FBQztBQUM1QixJQUFJQyxRQUFRLEdBQUdELG1CQUFPLENBQUMsNEJBQVcsQ0FBQztBQUVuQyxDQUFDLE9BQU9FLFVBQVUsS0FBSyxXQUFXLEdBQUdBLFVBQVUsR0FBR0MsTUFBTSxDQUFDLENBQUNDLGdCQUFnQixHQUFHO0lBQ3pFQyxTQUFTLEVBQUVOLEtBQUssQ0FBQ00sU0FBUztJQUMxQkMsYUFBYSxFQUFFUCxLQUFLLENBQUNPLGFBQWE7SUFDbENDLE1BQU0sRUFBRU4sUUFBUSxDQUFDTSxNQUFNO0lBQ3ZCQyxTQUFTLEVBQUVULEtBQUssQ0FBQ1MsU0FBUztJQUMxQkMsUUFBUSxFQUFFVixLQUFLLENBQUNVLFFBQVE7SUFDeEJDLGFBQWEsRUFBRVgsS0FBSyxDQUFDVyxhQUFhO0lBQ2xDQyxZQUFZLEVBQUVWLFFBQVEsQ0FBQ1UsWUFBWTtJQUNuQ0MsU0FBUyxFQUFFQSxTQUFTO0lBQ3BCQyxzQkFBc0IsRUFBRVosUUFBUSxDQUFDWSxzQkFBc0IsQ0FBQyxpREFBaUQ7Q0FDNUcsQ0FBQztBQUNGLFNBQVNELFNBQVMsQ0FBQ0UsUUFBUSxFQUFFO0lBQ3pCLDZCQUE2QjtJQUM3QkEsUUFBUSxFQUFFLENBQUM7Q0FDZDtBQUVEakIsaUJBQWlCLEdBQUdlLFNBQVMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2RvbmdqdW5lLy4vbm9kZV9tb2R1bGVzL0BmdWxsY2FsZW5kYXIvcmVhY3QvZGlzdC92ZG9tLmNqcy5qcz81OTc3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciByZWFjdERvbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuXG4odHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IHdpbmRvdykuRnVsbENhbGVuZGFyVkRvbSA9IHtcbiAgICBDb21wb25lbnQ6IFJlYWN0LkNvbXBvbmVudCxcbiAgICBjcmVhdGVFbGVtZW50OiBSZWFjdC5jcmVhdGVFbGVtZW50LFxuICAgIHJlbmRlcjogcmVhY3REb20ucmVuZGVyLFxuICAgIGNyZWF0ZVJlZjogUmVhY3QuY3JlYXRlUmVmLFxuICAgIEZyYWdtZW50OiBSZWFjdC5GcmFnbWVudCxcbiAgICBjcmVhdGVDb250ZXh0OiBSZWFjdC5jcmVhdGVDb250ZXh0LFxuICAgIGNyZWF0ZVBvcnRhbDogcmVhY3REb20uY3JlYXRlUG9ydGFsLFxuICAgIGZsdXNoU3luYzogZmx1c2hTeW5jLFxuICAgIHVubW91bnRDb21wb25lbnRBdE5vZGU6IHJlYWN0RG9tLnVubW91bnRDb21wb25lbnRBdE5vZGUgLy8gbmV2ZXIgY2FsbGVkIGJ5IEZ1bGxDYWxlbmRhcidzIFJlYWN0IGNvbXBvbmVudFxufTtcbmZ1bmN0aW9uIGZsdXNoU3luYyhjYWxsYmFjaykge1xuICAgIC8vIGFsd2F5cyBzeW5jIGZyb20gdG9wLWxldmVsXG4gICAgY2FsbGJhY2soKTtcbn1cblxuZXhwb3J0cy5mbHVzaFN5bmMgPSBmbHVzaFN5bmM7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJSZWFjdCIsInJlcXVpcmUiLCJyZWFjdERvbSIsImdsb2JhbFRoaXMiLCJ3aW5kb3ciLCJGdWxsQ2FsZW5kYXJWRG9tIiwiQ29tcG9uZW50IiwiY3JlYXRlRWxlbWVudCIsInJlbmRlciIsImNyZWF0ZVJlZiIsIkZyYWdtZW50IiwiY3JlYXRlQ29udGV4dCIsImNyZWF0ZVBvcnRhbCIsImZsdXNoU3luYyIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJjYWxsYmFjayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@fullcalendar/react/dist/vdom.cjs.js\n");

/***/ }),

/***/ "./node_modules/@fullcalendar/timegrid/main.cjs.js":
/*!*********************************************************!*\
  !*** ./node_modules/@fullcalendar/timegrid/main.cjs.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*!\nFullCalendar v5.10.2\nDocs & License: https://fullcalendar.io/\n(c) 2021 Adam Shaw\n*/ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar common = __webpack_require__(/*! @fullcalendar/common */ \"./node_modules/@fullcalendar/common/main.cjs.js\");\nvar tslib = __webpack_require__(/*! tslib */ \"tslib\");\nvar daygrid = __webpack_require__(/*! @fullcalendar/daygrid */ \"./node_modules/@fullcalendar/daygrid/main.cjs.js\");\n;\nvar AllDaySplitter = /** @class */ function(_super) {\n    tslib.__extends(AllDaySplitter1, _super);\n    function AllDaySplitter1() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    AllDaySplitter1.prototype.getKeyInfo = function() {\n        return {\n            allDay: {},\n            timed: {}\n        };\n    };\n    AllDaySplitter1.prototype.getKeysForDateSpan = function(dateSpan) {\n        if (dateSpan.allDay) {\n            return [\n                \"allDay\"\n            ];\n        }\n        return [\n            \"timed\"\n        ];\n    };\n    AllDaySplitter1.prototype.getKeysForEventDef = function(eventDef) {\n        if (!eventDef.allDay) {\n            return [\n                \"timed\"\n            ];\n        }\n        if (common.hasBgRendering(eventDef)) {\n            return [\n                \"timed\",\n                \"allDay\"\n            ];\n        }\n        return [\n            \"allDay\"\n        ];\n    };\n    return AllDaySplitter1;\n}(common.Splitter);\nvar DEFAULT_SLAT_LABEL_FORMAT = common.createFormatter({\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    omitZeroMinute: true,\n    meridiem: \"short\"\n});\nfunction TimeColsAxisCell(props) {\n    var classNames = [\n        \"fc-timegrid-slot\",\n        \"fc-timegrid-slot-label\",\n        props.isLabeled ? \"fc-scrollgrid-shrink\" : \"fc-timegrid-slot-minor\", \n    ];\n    return common.createElement(common.ViewContextType.Consumer, null, function(context) {\n        if (!props.isLabeled) {\n            return common.createElement(\"td\", {\n                className: classNames.join(\" \"),\n                \"data-time\": props.isoTimeStr\n            });\n        }\n        var dateEnv = context.dateEnv, options = context.options, viewApi = context.viewApi;\n        var labelFormat = options.slotLabelFormat == null ? DEFAULT_SLAT_LABEL_FORMAT : Array.isArray(options.slotLabelFormat) ? common.createFormatter(options.slotLabelFormat[0]) : common.createFormatter(options.slotLabelFormat);\n        var hookProps = {\n            level: 0,\n            time: props.time,\n            date: dateEnv.toDate(props.date),\n            view: viewApi,\n            text: dateEnv.format(props.date, labelFormat)\n        };\n        return common.createElement(common.RenderHook, {\n            hookProps: hookProps,\n            classNames: options.slotLabelClassNames,\n            content: options.slotLabelContent,\n            defaultContent: renderInnerContent,\n            didMount: options.slotLabelDidMount,\n            willUnmount: options.slotLabelWillUnmount\n        }, function(rootElRef, customClassNames, innerElRef, innerContent) {\n            return common.createElement(\"td\", {\n                ref: rootElRef,\n                className: classNames.concat(customClassNames).join(\" \"),\n                \"data-time\": props.isoTimeStr\n            }, common.createElement(\"div\", {\n                className: \"fc-timegrid-slot-label-frame fc-scrollgrid-shrink-frame\"\n            }, common.createElement(\"div\", {\n                className: \"fc-timegrid-slot-label-cushion fc-scrollgrid-shrink-cushion\",\n                ref: innerElRef\n            }, innerContent)));\n        });\n    });\n}\nfunction renderInnerContent(props) {\n    return props.text;\n}\nvar TimeBodyAxis = /** @class */ function(_super) {\n    tslib.__extends(TimeBodyAxis1, _super);\n    function TimeBodyAxis1() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    TimeBodyAxis1.prototype.render = function() {\n        return this.props.slatMetas.map(function(slatMeta) {\n            return common.createElement(\"tr\", {\n                key: slatMeta.key\n            }, common.createElement(TimeColsAxisCell, tslib.__assign({}, slatMeta)));\n        });\n    };\n    return TimeBodyAxis1;\n}(common.BaseComponent);\nvar DEFAULT_WEEK_NUM_FORMAT = common.createFormatter({\n    week: \"short\"\n});\nvar AUTO_ALL_DAY_MAX_EVENT_ROWS = 5;\nvar TimeColsView = /** @class */ function(_super) {\n    tslib.__extends(TimeColsView1, _super);\n    function TimeColsView1() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.allDaySplitter = new AllDaySplitter(); // for use by subclasses\n        _this.headerElRef = common.createRef();\n        _this.rootElRef = common.createRef();\n        _this.scrollerElRef = common.createRef();\n        _this.state = {\n            slatCoords: null\n        };\n        _this.handleScrollTopRequest = function(scrollTop) {\n            var scrollerEl = _this.scrollerElRef.current;\n            if (scrollerEl) {\n                scrollerEl.scrollTop = scrollTop;\n            }\n        };\n        /* Header Render Methods\n        ------------------------------------------------------------------------------------------------------------------*/ _this.renderHeadAxis = function(rowKey, frameHeight) {\n            if (frameHeight === void 0) {\n                frameHeight = \"\";\n            }\n            var options = _this.context.options;\n            var dateProfile = _this.props.dateProfile;\n            var range = dateProfile.renderRange;\n            var dayCnt = common.diffDays(range.start, range.end);\n            var navLinkAttrs = dayCnt === 1 // only do in day views (to avoid doing in week views that dont need it)\n             ? common.buildNavLinkAttrs(_this.context, range.start, \"week\") : {};\n            if (options.weekNumbers && rowKey === \"day\") {\n                return common.createElement(common.WeekNumberRoot, {\n                    date: range.start,\n                    defaultFormat: DEFAULT_WEEK_NUM_FORMAT\n                }, function(rootElRef, classNames, innerElRef, innerContent) {\n                    return common.createElement(\"th\", {\n                        ref: rootElRef,\n                        \"aria-hidden\": true,\n                        className: [\n                            \"fc-timegrid-axis\",\n                            \"fc-scrollgrid-shrink\", \n                        ].concat(classNames).join(\" \")\n                    }, common.createElement(\"div\", {\n                        className: \"fc-timegrid-axis-frame fc-scrollgrid-shrink-frame fc-timegrid-axis-frame-liquid\",\n                        style: {\n                            height: frameHeight\n                        }\n                    }, common.createElement(\"a\", tslib.__assign({\n                        ref: innerElRef,\n                        className: \"fc-timegrid-axis-cushion fc-scrollgrid-shrink-cushion fc-scrollgrid-sync-inner\"\n                    }, navLinkAttrs), innerContent)));\n                });\n            }\n            return common.createElement(\"th\", {\n                \"aria-hidden\": true,\n                className: \"fc-timegrid-axis\"\n            }, common.createElement(\"div\", {\n                className: \"fc-timegrid-axis-frame\",\n                style: {\n                    height: frameHeight\n                }\n            }));\n        };\n        /* Table Component Render Methods\n        ------------------------------------------------------------------------------------------------------------------*/ // only a one-way height sync. we don't send the axis inner-content height to the DayGrid,\n        // but DayGrid still needs to have classNames on inner elements in order to measure.\n        _this.renderTableRowAxis = function(rowHeight) {\n            var _a = _this.context, options = _a.options, viewApi = _a.viewApi;\n            var hookProps = {\n                text: options.allDayText,\n                view: viewApi\n            };\n            return(// TODO: make reusable hook. used in list view too\n            common.createElement(common.RenderHook, {\n                hookProps: hookProps,\n                classNames: options.allDayClassNames,\n                content: options.allDayContent,\n                defaultContent: renderAllDayInner,\n                didMount: options.allDayDidMount,\n                willUnmount: options.allDayWillUnmount\n            }, function(rootElRef, classNames, innerElRef, innerContent) {\n                return common.createElement(\"td\", {\n                    ref: rootElRef,\n                    \"aria-hidden\": true,\n                    className: [\n                        \"fc-timegrid-axis\",\n                        \"fc-scrollgrid-shrink\", \n                    ].concat(classNames).join(\" \")\n                }, common.createElement(\"div\", {\n                    className: \"fc-timegrid-axis-frame fc-scrollgrid-shrink-frame\" + (rowHeight == null ? \" fc-timegrid-axis-frame-liquid\" : \"\"),\n                    style: {\n                        height: rowHeight\n                    }\n                }, common.createElement(\"span\", {\n                    className: \"fc-timegrid-axis-cushion fc-scrollgrid-shrink-cushion fc-scrollgrid-sync-inner\",\n                    ref: innerElRef\n                }, innerContent)));\n            }));\n        };\n        _this.handleSlatCoords = function(slatCoords) {\n            _this.setState({\n                slatCoords: slatCoords\n            });\n        };\n        return _this;\n    }\n    // rendering\n    // ----------------------------------------------------------------------------------------------------\n    TimeColsView1.prototype.renderSimpleLayout = function(headerRowContent, allDayContent, timeContent) {\n        var _a = this, context = _a.context, props = _a.props;\n        var sections = [];\n        var stickyHeaderDates = common.getStickyHeaderDates(context.options);\n        if (headerRowContent) {\n            sections.push({\n                type: \"header\",\n                key: \"header\",\n                isSticky: stickyHeaderDates,\n                chunk: {\n                    elRef: this.headerElRef,\n                    tableClassName: \"fc-col-header\",\n                    rowContent: headerRowContent\n                }\n            });\n        }\n        if (allDayContent) {\n            sections.push({\n                type: \"body\",\n                key: \"all-day\",\n                chunk: {\n                    content: allDayContent\n                }\n            });\n            sections.push({\n                type: \"body\",\n                key: \"all-day-divider\",\n                outerContent: common.createElement(\"tr\", {\n                    role: \"presentation\",\n                    className: \"fc-scrollgrid-section\"\n                }, common.createElement(\"td\", {\n                    className: \"fc-timegrid-divider \" + context.theme.getClass(\"tableCellShaded\")\n                }))\n            });\n        }\n        sections.push({\n            type: \"body\",\n            key: \"body\",\n            liquid: true,\n            expandRows: Boolean(context.options.expandRows),\n            chunk: {\n                scrollerElRef: this.scrollerElRef,\n                content: timeContent\n            }\n        });\n        return common.createElement(common.ViewRoot, {\n            viewSpec: context.viewSpec,\n            elRef: this.rootElRef\n        }, function(rootElRef, classNames) {\n            return common.createElement(\"div\", {\n                className: [\n                    \"fc-timegrid\"\n                ].concat(classNames).join(\" \"),\n                ref: rootElRef\n            }, common.createElement(common.SimpleScrollGrid, {\n                liquid: !props.isHeightAuto && !props.forPrint,\n                collapsibleWidth: props.forPrint,\n                cols: [\n                    {\n                        width: \"shrink\"\n                    }\n                ],\n                sections: sections\n            }));\n        });\n    };\n    TimeColsView1.prototype.renderHScrollLayout = function(headerRowContent, allDayContent, timeContent, colCnt, dayMinWidth, slatMetas, slatCoords) {\n        var _this = this;\n        var ScrollGrid = this.context.pluginHooks.scrollGridImpl;\n        if (!ScrollGrid) {\n            throw new Error(\"No ScrollGrid implementation\");\n        }\n        var _a = this, context = _a.context, props = _a.props;\n        var stickyHeaderDates = !props.forPrint && common.getStickyHeaderDates(context.options);\n        var stickyFooterScrollbar = !props.forPrint && common.getStickyFooterScrollbar(context.options);\n        var sections = [];\n        if (headerRowContent) {\n            sections.push({\n                type: \"header\",\n                key: \"header\",\n                isSticky: stickyHeaderDates,\n                syncRowHeights: true,\n                chunks: [\n                    {\n                        key: \"axis\",\n                        rowContent: function(arg) {\n                            return common.createElement(\"tr\", {\n                                role: \"presentation\"\n                            }, _this.renderHeadAxis(\"day\", arg.rowSyncHeights[0]));\n                        }\n                    },\n                    {\n                        key: \"cols\",\n                        elRef: this.headerElRef,\n                        tableClassName: \"fc-col-header\",\n                        rowContent: headerRowContent\n                    }, \n                ]\n            });\n        }\n        if (allDayContent) {\n            sections.push({\n                type: \"body\",\n                key: \"all-day\",\n                syncRowHeights: true,\n                chunks: [\n                    {\n                        key: \"axis\",\n                        rowContent: function(contentArg) {\n                            return common.createElement(\"tr\", {\n                                role: \"presentation\"\n                            }, _this.renderTableRowAxis(contentArg.rowSyncHeights[0]));\n                        }\n                    },\n                    {\n                        key: \"cols\",\n                        content: allDayContent\n                    }, \n                ]\n            });\n            sections.push({\n                key: \"all-day-divider\",\n                type: \"body\",\n                outerContent: common.createElement(\"tr\", {\n                    role: \"presentation\",\n                    className: \"fc-scrollgrid-section\"\n                }, common.createElement(\"td\", {\n                    colSpan: 2,\n                    className: \"fc-timegrid-divider \" + context.theme.getClass(\"tableCellShaded\")\n                }))\n            });\n        }\n        var isNowIndicator = context.options.nowIndicator;\n        sections.push({\n            type: \"body\",\n            key: \"body\",\n            liquid: true,\n            expandRows: Boolean(context.options.expandRows),\n            chunks: [\n                {\n                    key: \"axis\",\n                    content: function(arg) {\n                        return(// TODO: make this now-indicator arrow more DRY with TimeColsContent\n                        common.createElement(\"div\", {\n                            className: \"fc-timegrid-axis-chunk\"\n                        }, common.createElement(\"table\", {\n                            \"aria-hidden\": true,\n                            style: {\n                                height: arg.expandRows ? arg.clientHeight : \"\"\n                            }\n                        }, arg.tableColGroupNode, common.createElement(\"tbody\", null, common.createElement(TimeBodyAxis, {\n                            slatMetas: slatMetas\n                        }))), common.createElement(\"div\", {\n                            className: \"fc-timegrid-now-indicator-container\"\n                        }, common.createElement(common.NowTimer, {\n                            unit: isNowIndicator ? \"minute\" : \"day\" /* hacky */ \n                        }, function(nowDate) {\n                            var nowIndicatorTop = isNowIndicator && slatCoords && slatCoords.safeComputeTop(nowDate); // might return void\n                            if (typeof nowIndicatorTop === \"number\") {\n                                return common.createElement(common.NowIndicatorRoot, {\n                                    isAxis: true,\n                                    date: nowDate\n                                }, function(rootElRef, classNames, innerElRef, innerContent) {\n                                    return common.createElement(\"div\", {\n                                        ref: rootElRef,\n                                        className: [\n                                            \"fc-timegrid-now-indicator-arrow\"\n                                        ].concat(classNames).join(\" \"),\n                                        style: {\n                                            top: nowIndicatorTop\n                                        }\n                                    }, innerContent);\n                                });\n                            }\n                            return null;\n                        }))));\n                    }\n                },\n                {\n                    key: \"cols\",\n                    scrollerElRef: this.scrollerElRef,\n                    content: timeContent\n                }, \n            ]\n        });\n        if (stickyFooterScrollbar) {\n            sections.push({\n                key: \"footer\",\n                type: \"footer\",\n                isSticky: true,\n                chunks: [\n                    {\n                        key: \"axis\",\n                        content: common.renderScrollShim\n                    },\n                    {\n                        key: \"cols\",\n                        content: common.renderScrollShim\n                    }, \n                ]\n            });\n        }\n        return common.createElement(common.ViewRoot, {\n            viewSpec: context.viewSpec,\n            elRef: this.rootElRef\n        }, function(rootElRef, classNames) {\n            return common.createElement(\"div\", {\n                className: [\n                    \"fc-timegrid\"\n                ].concat(classNames).join(\" \"),\n                ref: rootElRef\n            }, common.createElement(ScrollGrid, {\n                liquid: !props.isHeightAuto && !props.forPrint,\n                collapsibleWidth: false,\n                colGroups: [\n                    {\n                        width: \"shrink\",\n                        cols: [\n                            {\n                                width: \"shrink\"\n                            }\n                        ]\n                    },\n                    {\n                        cols: [\n                            {\n                                span: colCnt,\n                                minWidth: dayMinWidth\n                            }\n                        ]\n                    }, \n                ],\n                sections: sections\n            }));\n        });\n    };\n    /* Dimensions\n    ------------------------------------------------------------------------------------------------------------------*/ TimeColsView1.prototype.getAllDayMaxEventProps = function() {\n        var _a = this.context.options, dayMaxEvents = _a.dayMaxEvents, dayMaxEventRows = _a.dayMaxEventRows;\n        if (dayMaxEvents === true || dayMaxEventRows === true) {\n            dayMaxEvents = undefined;\n            dayMaxEventRows = AUTO_ALL_DAY_MAX_EVENT_ROWS; // make sure \"auto\" goes to a real number\n        }\n        return {\n            dayMaxEvents: dayMaxEvents,\n            dayMaxEventRows: dayMaxEventRows\n        };\n    };\n    return TimeColsView1;\n}(common.DateComponent);\nfunction renderAllDayInner(hookProps) {\n    return hookProps.text;\n}\nvar TimeColsSlatsCoords = /** @class */ function() {\n    function TimeColsSlatsCoords1(positions, dateProfile, slotDuration) {\n        this.positions = positions;\n        this.dateProfile = dateProfile;\n        this.slotDuration = slotDuration;\n    }\n    TimeColsSlatsCoords1.prototype.safeComputeTop = function(date) {\n        var dateProfile = this.dateProfile;\n        if (common.rangeContainsMarker(dateProfile.currentRange, date)) {\n            var startOfDayDate = common.startOfDay(date);\n            var timeMs = date.valueOf() - startOfDayDate.valueOf();\n            if (timeMs >= common.asRoughMs(dateProfile.slotMinTime) && timeMs < common.asRoughMs(dateProfile.slotMaxTime)) {\n                return this.computeTimeTop(common.createDuration(timeMs));\n            }\n        }\n        return null;\n    };\n    // Computes the top coordinate, relative to the bounds of the grid, of the given date.\n    // A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.\n    TimeColsSlatsCoords1.prototype.computeDateTop = function(when, startOfDayDate) {\n        if (!startOfDayDate) {\n            startOfDayDate = common.startOfDay(when);\n        }\n        return this.computeTimeTop(common.createDuration(when.valueOf() - startOfDayDate.valueOf()));\n    };\n    // Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).\n    // This is a makeshify way to compute the time-top. Assumes all slatMetas dates are uniform.\n    // Eventually allow computation with arbirary slat dates.\n    TimeColsSlatsCoords1.prototype.computeTimeTop = function(duration) {\n        var _a = this, positions = _a.positions, dateProfile = _a.dateProfile;\n        var len = positions.els.length;\n        // floating-point value of # of slots covered\n        var slatCoverage = (duration.milliseconds - common.asRoughMs(dateProfile.slotMinTime)) / common.asRoughMs(this.slotDuration);\n        var slatIndex;\n        var slatRemainder;\n        // compute a floating-point number for how many slats should be progressed through.\n        // from 0 to number of slats (inclusive)\n        // constrained because slotMinTime/slotMaxTime might be customized.\n        slatCoverage = Math.max(0, slatCoverage);\n        slatCoverage = Math.min(len, slatCoverage);\n        // an integer index of the furthest whole slat\n        // from 0 to number slats (*exclusive*, so len-1)\n        slatIndex = Math.floor(slatCoverage);\n        slatIndex = Math.min(slatIndex, len - 1);\n        // how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.\n        // could be 1.0 if slatCoverage is covering *all* the slots\n        slatRemainder = slatCoverage - slatIndex;\n        return positions.tops[slatIndex] + positions.getHeight(slatIndex) * slatRemainder;\n    };\n    return TimeColsSlatsCoords1;\n}();\nvar TimeColsSlatsBody = /** @class */ function(_super) {\n    tslib.__extends(TimeColsSlatsBody1, _super);\n    function TimeColsSlatsBody1() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    TimeColsSlatsBody1.prototype.render = function() {\n        var _a = this, props = _a.props, context = _a.context;\n        var options = context.options;\n        var slatElRefs = props.slatElRefs;\n        return common.createElement(\"tbody\", null, props.slatMetas.map(function(slatMeta, i) {\n            var hookProps = {\n                time: slatMeta.time,\n                date: context.dateEnv.toDate(slatMeta.date),\n                view: context.viewApi\n            };\n            var classNames = [\n                \"fc-timegrid-slot\",\n                \"fc-timegrid-slot-lane\",\n                slatMeta.isLabeled ? \"\" : \"fc-timegrid-slot-minor\", \n            ];\n            return common.createElement(\"tr\", {\n                key: slatMeta.key,\n                ref: slatElRefs.createRef(slatMeta.key)\n            }, props.axis && common.createElement(TimeColsAxisCell, tslib.__assign({}, slatMeta)), common.createElement(common.RenderHook, {\n                hookProps: hookProps,\n                classNames: options.slotLaneClassNames,\n                content: options.slotLaneContent,\n                didMount: options.slotLaneDidMount,\n                willUnmount: options.slotLaneWillUnmount\n            }, function(rootElRef, customClassNames, innerElRef, innerContent) {\n                return common.createElement(\"td\", {\n                    ref: rootElRef,\n                    className: classNames.concat(customClassNames).join(\" \"),\n                    \"data-time\": slatMeta.isoTimeStr\n                }, innerContent);\n            }));\n        }));\n    };\n    return TimeColsSlatsBody1;\n}(common.BaseComponent);\n/*\nfor the horizontal \"slats\" that run width-wise. Has a time axis on a side. Depends on RTL.\n*/ var TimeColsSlats = /** @class */ function(_super) {\n    tslib.__extends(TimeColsSlats1, _super);\n    function TimeColsSlats1() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.rootElRef = common.createRef();\n        _this.slatElRefs = new common.RefMap();\n        return _this;\n    }\n    TimeColsSlats1.prototype.render = function() {\n        var _a = this, props = _a.props, context = _a.context;\n        return common.createElement(\"div\", {\n            ref: this.rootElRef,\n            className: \"fc-timegrid-slots\"\n        }, common.createElement(\"table\", {\n            \"aria-hidden\": true,\n            className: context.theme.getClass(\"table\"),\n            style: {\n                minWidth: props.tableMinWidth,\n                width: props.clientWidth,\n                height: props.minHeight\n            }\n        }, props.tableColGroupNode /* relies on there only being a single <col> for the axis */ , common.createElement(TimeColsSlatsBody, {\n            slatElRefs: this.slatElRefs,\n            axis: props.axis,\n            slatMetas: props.slatMetas\n        })));\n    };\n    TimeColsSlats1.prototype.componentDidMount = function() {\n        this.updateSizing();\n    };\n    TimeColsSlats1.prototype.componentDidUpdate = function() {\n        this.updateSizing();\n    };\n    TimeColsSlats1.prototype.componentWillUnmount = function() {\n        if (this.props.onCoords) {\n            this.props.onCoords(null);\n        }\n    };\n    TimeColsSlats1.prototype.updateSizing = function() {\n        var _a = this, context = _a.context, props = _a.props;\n        if (props.onCoords && props.clientWidth !== null // means sizing has stabilized\n        ) {\n            var rootEl = this.rootElRef.current;\n            if (rootEl.offsetHeight) {\n                props.onCoords(new TimeColsSlatsCoords(new common.PositionCache(this.rootElRef.current, collectSlatEls(this.slatElRefs.currentMap, props.slatMetas), false, true), this.props.dateProfile, context.options.slotDuration));\n            }\n        }\n    };\n    return TimeColsSlats1;\n}(common.BaseComponent);\nfunction collectSlatEls(elMap, slatMetas) {\n    return slatMetas.map(function(slatMeta) {\n        return elMap[slatMeta.key];\n    });\n}\nfunction splitSegsByCol(segs, colCnt) {\n    var segsByCol = [];\n    var i;\n    for(i = 0; i < colCnt; i += 1){\n        segsByCol.push([]);\n    }\n    if (segs) {\n        for(i = 0; i < segs.length; i += 1){\n            segsByCol[segs[i].col].push(segs[i]);\n        }\n    }\n    return segsByCol;\n}\nfunction splitInteractionByCol(ui, colCnt) {\n    var byRow = [];\n    if (!ui) {\n        for(var i = 0; i < colCnt; i += 1){\n            byRow[i] = null;\n        }\n    } else {\n        for(var i = 0; i < colCnt; i += 1){\n            byRow[i] = {\n                affectedInstances: ui.affectedInstances,\n                isEvent: ui.isEvent,\n                segs: []\n            };\n        }\n        for(var _i = 0, _a = ui.segs; _i < _a.length; _i++){\n            var seg = _a[_i];\n            byRow[seg.col].segs.push(seg);\n        }\n    }\n    return byRow;\n}\nvar TimeColMoreLink = /** @class */ function(_super) {\n    tslib.__extends(TimeColMoreLink1, _super);\n    function TimeColMoreLink1() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.rootElRef = common.createRef();\n        return _this;\n    }\n    TimeColMoreLink1.prototype.render = function() {\n        var _this = this;\n        var props = this.props;\n        return common.createElement(common.MoreLinkRoot, {\n            allDayDate: null,\n            moreCnt: props.hiddenSegs.length,\n            allSegs: props.hiddenSegs,\n            hiddenSegs: props.hiddenSegs,\n            alignmentElRef: this.rootElRef,\n            defaultContent: renderMoreLinkInner,\n            extraDateSpan: props.extraDateSpan,\n            dateProfile: props.dateProfile,\n            todayRange: props.todayRange,\n            popoverContent: function() {\n                return renderPlainFgSegs(props.hiddenSegs, props);\n            }\n        }, function(rootElRef, classNames, innerElRef, innerContent, handleClick, title, isExpanded, popoverId) {\n            return common.createElement(\"a\", {\n                ref: function(el) {\n                    common.setRef(rootElRef, el);\n                    common.setRef(_this.rootElRef, el);\n                },\n                className: [\n                    \"fc-timegrid-more-link\"\n                ].concat(classNames).join(\" \"),\n                style: {\n                    top: props.top,\n                    bottom: props.bottom\n                },\n                onClick: handleClick,\n                title: title,\n                \"aria-expanded\": isExpanded,\n                \"aria-controls\": popoverId\n            }, common.createElement(\"div\", {\n                ref: innerElRef,\n                className: \"fc-timegrid-more-link-inner fc-sticky\"\n            }, innerContent));\n        });\n    };\n    return TimeColMoreLink1;\n}(common.BaseComponent);\nfunction renderMoreLinkInner(props) {\n    return props.shortText;\n}\n// segInputs assumed sorted\nfunction buildPositioning(segInputs, strictOrder, maxStackCnt) {\n    var hierarchy = new common.SegHierarchy();\n    if (strictOrder != null) {\n        hierarchy.strictOrder = strictOrder;\n    }\n    if (maxStackCnt != null) {\n        hierarchy.maxStackCnt = maxStackCnt;\n    }\n    var hiddenEntries = hierarchy.addSegs(segInputs);\n    var hiddenGroups = common.groupIntersectingEntries(hiddenEntries);\n    var web = buildWeb(hierarchy);\n    web = stretchWeb(web, 1); // all levelCoords/thickness will have 0.0-1.0\n    var segRects = webToRects(web);\n    return {\n        segRects: segRects,\n        hiddenGroups: hiddenGroups\n    };\n}\nfunction buildWeb(hierarchy) {\n    var entriesByLevel = hierarchy.entriesByLevel;\n    var buildNode = cacheable(function(level, lateral) {\n        return level + \":\" + lateral;\n    }, function(level, lateral) {\n        var siblingRange = findNextLevelSegs(hierarchy, level, lateral);\n        var nextLevelRes = buildNodes(siblingRange, buildNode);\n        var entry = entriesByLevel[level][lateral];\n        return [\n            tslib.__assign(tslib.__assign({}, entry), {\n                nextLevelNodes: nextLevelRes[0]\n            }),\n            entry.thickness + nextLevelRes[1]\n        ];\n    });\n    return buildNodes(entriesByLevel.length ? {\n        level: 0,\n        lateralStart: 0,\n        lateralEnd: entriesByLevel[0].length\n    } : null, buildNode)[0];\n}\nfunction buildNodes(siblingRange, buildNode) {\n    if (!siblingRange) {\n        return [\n            [],\n            0\n        ];\n    }\n    var level = siblingRange.level, lateralStart = siblingRange.lateralStart, lateralEnd = siblingRange.lateralEnd;\n    var lateral = lateralStart;\n    var pairs = [];\n    while(lateral < lateralEnd){\n        pairs.push(buildNode(level, lateral));\n        lateral += 1;\n    }\n    pairs.sort(cmpDescPressures);\n    return [\n        pairs.map(extractNode),\n        pairs[0][1]\n    ];\n}\nfunction cmpDescPressures(a, b) {\n    return b[1] - a[1];\n}\nfunction extractNode(a) {\n    return a[0];\n}\nfunction findNextLevelSegs(hierarchy, subjectLevel, subjectLateral) {\n    var levelCoords = hierarchy.levelCoords, entriesByLevel = hierarchy.entriesByLevel;\n    var subjectEntry = entriesByLevel[subjectLevel][subjectLateral];\n    var afterSubject = levelCoords[subjectLevel] + subjectEntry.thickness;\n    var levelCnt = levelCoords.length;\n    var level = subjectLevel;\n    // skip past levels that are too high up\n    for(; level < levelCnt && levelCoords[level] < afterSubject; level += 1); // do nothing\n    for(; level < levelCnt; level += 1){\n        var entries = entriesByLevel[level];\n        var entry = void 0;\n        var searchIndex = common.binarySearch(entries, subjectEntry.span.start, common.getEntrySpanEnd);\n        var lateralStart = searchIndex[0] + searchIndex[1]; // if exact match (which doesn't collide), go to next one\n        var lateralEnd = lateralStart;\n        while((entry = entries[lateralEnd]) && entry.span.start < subjectEntry.span.end){\n            lateralEnd += 1;\n        }\n        if (lateralStart < lateralEnd) {\n            return {\n                level: level,\n                lateralStart: lateralStart,\n                lateralEnd: lateralEnd\n            };\n        }\n    }\n    return null;\n}\nfunction stretchWeb(topLevelNodes, totalThickness) {\n    var stretchNode = cacheable(function(node, startCoord, prevThickness) {\n        return common.buildEntryKey(node);\n    }, function(node, startCoord, prevThickness) {\n        var nextLevelNodes = node.nextLevelNodes, thickness = node.thickness;\n        var allThickness = thickness + prevThickness;\n        var thicknessFraction = thickness / allThickness;\n        var endCoord;\n        var newChildren = [];\n        if (!nextLevelNodes.length) {\n            endCoord = totalThickness;\n        } else {\n            for(var _i = 0, nextLevelNodes_1 = nextLevelNodes; _i < nextLevelNodes_1.length; _i++){\n                var childNode = nextLevelNodes_1[_i];\n                if (endCoord === undefined) {\n                    var res = stretchNode(childNode, startCoord, allThickness);\n                    endCoord = res[0];\n                    newChildren.push(res[1]);\n                } else {\n                    var res = stretchNode(childNode, endCoord, 0);\n                    newChildren.push(res[1]);\n                }\n            }\n        }\n        var newThickness = (endCoord - startCoord) * thicknessFraction;\n        return [\n            endCoord - newThickness,\n            tslib.__assign(tslib.__assign({}, node), {\n                thickness: newThickness,\n                nextLevelNodes: newChildren\n            })\n        ];\n    });\n    return topLevelNodes.map(function(node) {\n        return stretchNode(node, 0, 0)[1];\n    });\n}\n// not sorted in any particular order\nfunction webToRects(topLevelNodes) {\n    var rects = [];\n    var processNode = cacheable(function(node, levelCoord, stackDepth) {\n        return common.buildEntryKey(node);\n    }, function(node, levelCoord, stackDepth) {\n        var rect = tslib.__assign(tslib.__assign({}, node), {\n            levelCoord: levelCoord,\n            stackDepth: stackDepth,\n            stackForward: 0\n        });\n        rects.push(rect);\n        return rect.stackForward = processNodes(node.nextLevelNodes, levelCoord + node.thickness, stackDepth + 1) + 1;\n    });\n    function processNodes(nodes, levelCoord, stackDepth) {\n        var stackForward = 0;\n        for(var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++){\n            var node = nodes_1[_i];\n            stackForward = Math.max(processNode(node, levelCoord, stackDepth), stackForward);\n        }\n        return stackForward;\n    }\n    processNodes(topLevelNodes, 0, 0);\n    return rects; // TODO: sort rects by levelCoord to be consistent with toRects?\n}\n// TODO: move to general util\nfunction cacheable(keyFunc, workFunc) {\n    var cache = {};\n    return function() {\n        var args = [];\n        for(var _i = 0; _i < arguments.length; _i++){\n            args[_i] = arguments[_i];\n        }\n        var key = keyFunc.apply(void 0, args);\n        return key in cache ? cache[key] : cache[key] = workFunc.apply(void 0, args);\n    };\n}\nfunction computeSegVCoords(segs, colDate, slatCoords, eventMinHeight) {\n    if (slatCoords === void 0) {\n        slatCoords = null;\n    }\n    if (eventMinHeight === void 0) {\n        eventMinHeight = 0;\n    }\n    var vcoords = [];\n    if (slatCoords) {\n        for(var i = 0; i < segs.length; i += 1){\n            var seg = segs[i];\n            var spanStart = slatCoords.computeDateTop(seg.start, colDate);\n            var spanEnd = Math.max(spanStart + (eventMinHeight || 0), slatCoords.computeDateTop(seg.end, colDate));\n            vcoords.push({\n                start: Math.round(spanStart),\n                end: Math.round(spanEnd)\n            });\n        }\n    }\n    return vcoords;\n}\nfunction computeFgSegPlacements(segs, segVCoords, eventOrderStrict, eventMaxStack) {\n    var segInputs = [];\n    var dumbSegs = []; // segs without coords\n    for(var i = 0; i < segs.length; i += 1){\n        var vcoords = segVCoords[i];\n        if (vcoords) {\n            segInputs.push({\n                index: i,\n                thickness: 1,\n                span: vcoords\n            });\n        } else {\n            dumbSegs.push(segs[i]);\n        }\n    }\n    var _a = buildPositioning(segInputs, eventOrderStrict, eventMaxStack), segRects = _a.segRects, hiddenGroups = _a.hiddenGroups;\n    var segPlacements = [];\n    for(var _i = 0, segRects_1 = segRects; _i < segRects_1.length; _i++){\n        var segRect = segRects_1[_i];\n        segPlacements.push({\n            seg: segs[segRect.index],\n            rect: segRect\n        });\n    }\n    for(var _b = 0, dumbSegs_1 = dumbSegs; _b < dumbSegs_1.length; _b++){\n        var dumbSeg = dumbSegs_1[_b];\n        segPlacements.push({\n            seg: dumbSeg,\n            rect: null\n        });\n    }\n    return {\n        segPlacements: segPlacements,\n        hiddenGroups: hiddenGroups\n    };\n}\nvar DEFAULT_TIME_FORMAT = common.createFormatter({\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    meridiem: false\n});\nvar TimeColEvent = /** @class */ function(_super) {\n    tslib.__extends(TimeColEvent1, _super);\n    function TimeColEvent1() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    TimeColEvent1.prototype.render = function() {\n        var classNames = [\n            \"fc-timegrid-event\",\n            \"fc-v-event\", \n        ];\n        if (this.props.isShort) {\n            classNames.push(\"fc-timegrid-event-short\");\n        }\n        return common.createElement(common.StandardEvent, tslib.__assign({}, this.props, {\n            defaultTimeFormat: DEFAULT_TIME_FORMAT,\n            extraClassNames: classNames\n        }));\n    };\n    return TimeColEvent1;\n}(common.BaseComponent);\nvar TimeColMisc = /** @class */ function(_super) {\n    tslib.__extends(TimeColMisc1, _super);\n    function TimeColMisc1() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    TimeColMisc1.prototype.render = function() {\n        var props = this.props;\n        return common.createElement(common.DayCellContent, {\n            date: props.date,\n            dateProfile: props.dateProfile,\n            todayRange: props.todayRange,\n            extraHookProps: props.extraHookProps\n        }, function(innerElRef, innerContent) {\n            return innerContent && common.createElement(\"div\", {\n                className: \"fc-timegrid-col-misc\",\n                ref: innerElRef\n            }, innerContent);\n        });\n    };\n    return TimeColMisc1;\n}(common.BaseComponent);\nvar TimeCol = /** @class */ function(_super) {\n    tslib.__extends(TimeCol1, _super);\n    function TimeCol1() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.sortEventSegs = common.memoize(common.sortEventSegs);\n        return _this;\n    }\n    // TODO: memoize event-placement?\n    TimeCol1.prototype.render = function() {\n        var _this = this;\n        var _a = this, props = _a.props, context = _a.context;\n        var isSelectMirror = context.options.selectMirror;\n        var mirrorSegs = props.eventDrag && props.eventDrag.segs || props.eventResize && props.eventResize.segs || isSelectMirror && props.dateSelectionSegs || [];\n        var interactionAffectedInstances = props.eventDrag && props.eventDrag.affectedInstances || props.eventResize && props.eventResize.affectedInstances || {};\n        var sortedFgSegs = this.sortEventSegs(props.fgEventSegs, context.options.eventOrder);\n        return common.createElement(common.DayCellRoot, {\n            elRef: props.elRef,\n            date: props.date,\n            dateProfile: props.dateProfile,\n            todayRange: props.todayRange,\n            extraHookProps: props.extraHookProps\n        }, function(rootElRef, classNames, dataAttrs) {\n            return common.createElement(\"td\", tslib.__assign({\n                ref: rootElRef,\n                role: \"gridcell\",\n                className: [\n                    \"fc-timegrid-col\"\n                ].concat(classNames, props.extraClassNames || []).join(\" \")\n            }, dataAttrs, props.extraDataAttrs), common.createElement(\"div\", {\n                className: \"fc-timegrid-col-frame\"\n            }, common.createElement(\"div\", {\n                className: \"fc-timegrid-col-bg\"\n            }, _this.renderFillSegs(props.businessHourSegs, \"non-business\"), _this.renderFillSegs(props.bgEventSegs, \"bg-event\"), _this.renderFillSegs(props.dateSelectionSegs, \"highlight\")), common.createElement(\"div\", {\n                className: \"fc-timegrid-col-events\"\n            }, _this.renderFgSegs(sortedFgSegs, interactionAffectedInstances, false, false, false)), common.createElement(\"div\", {\n                className: \"fc-timegrid-col-events\"\n            }, _this.renderFgSegs(mirrorSegs, {}, Boolean(props.eventDrag), Boolean(props.eventResize), Boolean(isSelectMirror))), common.createElement(\"div\", {\n                className: \"fc-timegrid-now-indicator-container\"\n            }, _this.renderNowIndicator(props.nowIndicatorSegs)), common.createElement(TimeColMisc, {\n                date: props.date,\n                dateProfile: props.dateProfile,\n                todayRange: props.todayRange,\n                extraHookProps: props.extraHookProps\n            })));\n        });\n    };\n    TimeCol1.prototype.renderFgSegs = function(sortedFgSegs, segIsInvisible, isDragging, isResizing, isDateSelecting) {\n        var props = this.props;\n        if (props.forPrint) {\n            return renderPlainFgSegs(sortedFgSegs, props);\n        }\n        return this.renderPositionedFgSegs(sortedFgSegs, segIsInvisible, isDragging, isResizing, isDateSelecting);\n    };\n    TimeCol1.prototype.renderPositionedFgSegs = function(segs, segIsInvisible, isDragging, isResizing, isDateSelecting) {\n        var _this = this;\n        var _a = this.context.options, eventMaxStack = _a.eventMaxStack, eventShortHeight = _a.eventShortHeight, eventOrderStrict = _a.eventOrderStrict, eventMinHeight = _a.eventMinHeight;\n        var _b = this.props, date = _b.date, slatCoords = _b.slatCoords, eventSelection = _b.eventSelection, todayRange = _b.todayRange, nowDate = _b.nowDate;\n        var isMirror = isDragging || isResizing || isDateSelecting;\n        var segVCoords = computeSegVCoords(segs, date, slatCoords, eventMinHeight);\n        var _c = computeFgSegPlacements(segs, segVCoords, eventOrderStrict, eventMaxStack), segPlacements = _c.segPlacements, hiddenGroups = _c.hiddenGroups;\n        return common.createElement(common.Fragment, null, this.renderHiddenGroups(hiddenGroups, segs), segPlacements.map(function(segPlacement) {\n            var seg = segPlacement.seg, rect = segPlacement.rect;\n            var instanceId = seg.eventRange.instance.instanceId;\n            var isVisible = isMirror || Boolean(!segIsInvisible[instanceId] && rect);\n            var vStyle = computeSegVStyle(rect && rect.span);\n            var hStyle = !isMirror && rect ? _this.computeSegHStyle(rect) : {\n                left: 0,\n                right: 0\n            };\n            var isInset = Boolean(rect) && rect.stackForward > 0;\n            var isShort = Boolean(rect) && rect.span.end - rect.span.start < eventShortHeight; // look at other places for this problem\n            return common.createElement(\"div\", {\n                className: \"fc-timegrid-event-harness\" + (isInset ? \" fc-timegrid-event-harness-inset\" : \"\"),\n                key: instanceId,\n                style: tslib.__assign(tslib.__assign({\n                    visibility: isVisible ? \"\" : \"hidden\"\n                }, vStyle), hStyle)\n            }, common.createElement(TimeColEvent, tslib.__assign({\n                seg: seg,\n                isDragging: isDragging,\n                isResizing: isResizing,\n                isDateSelecting: isDateSelecting,\n                isSelected: instanceId === eventSelection,\n                isShort: isShort\n            }, common.getSegMeta(seg, todayRange, nowDate))));\n        }));\n    };\n    // will already have eventMinHeight applied because segInputs already had it\n    TimeCol1.prototype.renderHiddenGroups = function(hiddenGroups, segs) {\n        var _a = this.props, extraDateSpan = _a.extraDateSpan, dateProfile = _a.dateProfile, todayRange = _a.todayRange, nowDate = _a.nowDate, eventSelection = _a.eventSelection, eventDrag = _a.eventDrag, eventResize = _a.eventResize;\n        return common.createElement(common.Fragment, null, hiddenGroups.map(function(hiddenGroup) {\n            var positionCss = computeSegVStyle(hiddenGroup.span);\n            var hiddenSegs = compileSegsFromEntries(hiddenGroup.entries, segs);\n            return common.createElement(TimeColMoreLink, {\n                key: common.buildIsoString(common.computeEarliestSegStart(hiddenSegs)),\n                hiddenSegs: hiddenSegs,\n                top: positionCss.top,\n                bottom: positionCss.bottom,\n                extraDateSpan: extraDateSpan,\n                dateProfile: dateProfile,\n                todayRange: todayRange,\n                nowDate: nowDate,\n                eventSelection: eventSelection,\n                eventDrag: eventDrag,\n                eventResize: eventResize\n            });\n        }));\n    };\n    TimeCol1.prototype.renderFillSegs = function(segs, fillType) {\n        var _a = this, props = _a.props, context = _a.context;\n        var segVCoords = computeSegVCoords(segs, props.date, props.slatCoords, context.options.eventMinHeight); // don't assume all populated\n        var children = segVCoords.map(function(vcoords, i) {\n            var seg = segs[i];\n            return common.createElement(\"div\", {\n                key: common.buildEventRangeKey(seg.eventRange),\n                className: \"fc-timegrid-bg-harness\",\n                style: computeSegVStyle(vcoords)\n            }, fillType === \"bg-event\" ? common.createElement(common.BgEvent, tslib.__assign({\n                seg: seg\n            }, common.getSegMeta(seg, props.todayRange, props.nowDate))) : common.renderFill(fillType));\n        });\n        return common.createElement(common.Fragment, null, children);\n    };\n    TimeCol1.prototype.renderNowIndicator = function(segs) {\n        var _a = this.props, slatCoords = _a.slatCoords, date = _a.date;\n        if (!slatCoords) {\n            return null;\n        }\n        return segs.map(function(seg, i) {\n            return common.createElement(common.NowIndicatorRoot, {\n                isAxis: false,\n                date: date,\n                // key doesn't matter. will only ever be one\n                key: i\n            }, function(rootElRef, classNames, innerElRef, innerContent) {\n                return common.createElement(\"div\", {\n                    ref: rootElRef,\n                    className: [\n                        \"fc-timegrid-now-indicator-line\"\n                    ].concat(classNames).join(\" \"),\n                    style: {\n                        top: slatCoords.computeDateTop(seg.start, date)\n                    }\n                }, innerContent);\n            });\n        });\n    };\n    TimeCol1.prototype.computeSegHStyle = function(segHCoords) {\n        var _a = this.context, isRtl = _a.isRtl, options = _a.options;\n        var shouldOverlap = options.slotEventOverlap;\n        var nearCoord = segHCoords.levelCoord; // the left side if LTR. the right side if RTL. floating-point\n        var farCoord = segHCoords.levelCoord + segHCoords.thickness; // the right side if LTR. the left side if RTL. floating-point\n        var left; // amount of space from left edge, a fraction of the total width\n        var right; // amount of space from right edge, a fraction of the total width\n        if (shouldOverlap) {\n            // double the width, but don't go beyond the maximum forward coordinate (1.0)\n            farCoord = Math.min(1, nearCoord + (farCoord - nearCoord) * 2);\n        }\n        if (isRtl) {\n            left = 1 - farCoord;\n            right = nearCoord;\n        } else {\n            left = nearCoord;\n            right = 1 - farCoord;\n        }\n        var props = {\n            zIndex: segHCoords.stackDepth + 1,\n            left: left * 100 + \"%\",\n            right: right * 100 + \"%\"\n        };\n        if (shouldOverlap && !segHCoords.stackForward) {\n            // add padding to the edge so that forward stacked events don't cover the resizer's icon\n            props[isRtl ? \"marginLeft\" : \"marginRight\"] = 10 * 2; // 10 is a guesstimate of the icon's width\n        }\n        return props;\n    };\n    return TimeCol1;\n}(common.BaseComponent);\nfunction renderPlainFgSegs(sortedFgSegs, _a) {\n    var todayRange = _a.todayRange, nowDate = _a.nowDate, eventSelection = _a.eventSelection, eventDrag = _a.eventDrag, eventResize = _a.eventResize;\n    var hiddenInstances = (eventDrag ? eventDrag.affectedInstances : null) || (eventResize ? eventResize.affectedInstances : null) || {};\n    return common.createElement(common.Fragment, null, sortedFgSegs.map(function(seg) {\n        var instanceId = seg.eventRange.instance.instanceId;\n        return common.createElement(\"div\", {\n            key: instanceId,\n            style: {\n                visibility: hiddenInstances[instanceId] ? \"hidden\" : \"\"\n            }\n        }, common.createElement(TimeColEvent, tslib.__assign({\n            seg: seg,\n            isDragging: false,\n            isResizing: false,\n            isDateSelecting: false,\n            isSelected: instanceId === eventSelection,\n            isShort: false\n        }, common.getSegMeta(seg, todayRange, nowDate))));\n    }));\n}\nfunction computeSegVStyle(segVCoords) {\n    if (!segVCoords) {\n        return {\n            top: \"\",\n            bottom: \"\"\n        };\n    }\n    return {\n        top: segVCoords.start,\n        bottom: -segVCoords.end\n    };\n}\nfunction compileSegsFromEntries(segEntries, allSegs) {\n    return segEntries.map(function(segEntry) {\n        return allSegs[segEntry.index];\n    });\n}\nvar TimeColsContent = /** @class */ function(_super) {\n    tslib.__extends(TimeColsContent1, _super);\n    function TimeColsContent1() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.splitFgEventSegs = common.memoize(splitSegsByCol);\n        _this.splitBgEventSegs = common.memoize(splitSegsByCol);\n        _this.splitBusinessHourSegs = common.memoize(splitSegsByCol);\n        _this.splitNowIndicatorSegs = common.memoize(splitSegsByCol);\n        _this.splitDateSelectionSegs = common.memoize(splitSegsByCol);\n        _this.splitEventDrag = common.memoize(splitInteractionByCol);\n        _this.splitEventResize = common.memoize(splitInteractionByCol);\n        _this.rootElRef = common.createRef();\n        _this.cellElRefs = new common.RefMap();\n        return _this;\n    }\n    TimeColsContent1.prototype.render = function() {\n        var _this = this;\n        var _a = this, props = _a.props, context = _a.context;\n        var nowIndicatorTop = context.options.nowIndicator && props.slatCoords && props.slatCoords.safeComputeTop(props.nowDate); // might return void\n        var colCnt = props.cells.length;\n        var fgEventSegsByRow = this.splitFgEventSegs(props.fgEventSegs, colCnt);\n        var bgEventSegsByRow = this.splitBgEventSegs(props.bgEventSegs, colCnt);\n        var businessHourSegsByRow = this.splitBusinessHourSegs(props.businessHourSegs, colCnt);\n        var nowIndicatorSegsByRow = this.splitNowIndicatorSegs(props.nowIndicatorSegs, colCnt);\n        var dateSelectionSegsByRow = this.splitDateSelectionSegs(props.dateSelectionSegs, colCnt);\n        var eventDragByRow = this.splitEventDrag(props.eventDrag, colCnt);\n        var eventResizeByRow = this.splitEventResize(props.eventResize, colCnt);\n        return common.createElement(\"div\", {\n            className: \"fc-timegrid-cols\",\n            ref: this.rootElRef\n        }, common.createElement(\"table\", {\n            role: \"presentation\",\n            style: {\n                minWidth: props.tableMinWidth,\n                width: props.clientWidth\n            }\n        }, props.tableColGroupNode, common.createElement(\"tbody\", {\n            role: \"presentation\"\n        }, common.createElement(\"tr\", {\n            role: \"row\"\n        }, props.axis && common.createElement(\"td\", {\n            \"aria-hidden\": true,\n            className: \"fc-timegrid-col fc-timegrid-axis\"\n        }, common.createElement(\"div\", {\n            className: \"fc-timegrid-col-frame\"\n        }, common.createElement(\"div\", {\n            className: \"fc-timegrid-now-indicator-container\"\n        }, typeof nowIndicatorTop === \"number\" && common.createElement(common.NowIndicatorRoot, {\n            isAxis: true,\n            date: props.nowDate\n        }, function(rootElRef, classNames, innerElRef, innerContent) {\n            return common.createElement(\"div\", {\n                ref: rootElRef,\n                className: [\n                    \"fc-timegrid-now-indicator-arrow\"\n                ].concat(classNames).join(\" \"),\n                style: {\n                    top: nowIndicatorTop\n                }\n            }, innerContent);\n        })))), props.cells.map(function(cell, i) {\n            return common.createElement(TimeCol, {\n                key: cell.key,\n                elRef: _this.cellElRefs.createRef(cell.key),\n                dateProfile: props.dateProfile,\n                date: cell.date,\n                nowDate: props.nowDate,\n                todayRange: props.todayRange,\n                extraHookProps: cell.extraHookProps,\n                extraDataAttrs: cell.extraDataAttrs,\n                extraClassNames: cell.extraClassNames,\n                extraDateSpan: cell.extraDateSpan,\n                fgEventSegs: fgEventSegsByRow[i],\n                bgEventSegs: bgEventSegsByRow[i],\n                businessHourSegs: businessHourSegsByRow[i],\n                nowIndicatorSegs: nowIndicatorSegsByRow[i],\n                dateSelectionSegs: dateSelectionSegsByRow[i],\n                eventDrag: eventDragByRow[i],\n                eventResize: eventResizeByRow[i],\n                slatCoords: props.slatCoords,\n                eventSelection: props.eventSelection,\n                forPrint: props.forPrint\n            });\n        })))));\n    };\n    TimeColsContent1.prototype.componentDidMount = function() {\n        this.updateCoords();\n    };\n    TimeColsContent1.prototype.componentDidUpdate = function() {\n        this.updateCoords();\n    };\n    TimeColsContent1.prototype.updateCoords = function() {\n        var props = this.props;\n        if (props.onColCoords && props.clientWidth !== null // means sizing has stabilized\n        ) {\n            props.onColCoords(new common.PositionCache(this.rootElRef.current, collectCellEls(this.cellElRefs.currentMap, props.cells), true, false));\n        }\n    };\n    return TimeColsContent1;\n}(common.BaseComponent);\nfunction collectCellEls(elMap, cells) {\n    return cells.map(function(cell) {\n        return elMap[cell.key];\n    });\n}\n/* A component that renders one or more columns of vertical time slots\n----------------------------------------------------------------------------------------------------------------------*/ var TimeCols = /** @class */ function(_super) {\n    tslib.__extends(TimeCols1, _super);\n    function TimeCols1() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.processSlotOptions = common.memoize(processSlotOptions);\n        _this.state = {\n            slatCoords: null\n        };\n        _this.handleRootEl = function(el) {\n            if (el) {\n                _this.context.registerInteractiveComponent(_this, {\n                    el: el,\n                    isHitComboAllowed: _this.props.isHitComboAllowed\n                });\n            } else {\n                _this.context.unregisterInteractiveComponent(_this);\n            }\n        };\n        _this.handleScrollRequest = function(request) {\n            var onScrollTopRequest = _this.props.onScrollTopRequest;\n            var slatCoords = _this.state.slatCoords;\n            if (onScrollTopRequest && slatCoords) {\n                if (request.time) {\n                    var top_1 = slatCoords.computeTimeTop(request.time);\n                    top_1 = Math.ceil(top_1); // zoom can give weird floating-point values. rather scroll a little bit further\n                    if (top_1) {\n                        top_1 += 1; // to overcome top border that slots beyond the first have. looks better\n                    }\n                    onScrollTopRequest(top_1);\n                }\n                return true;\n            }\n            return false;\n        };\n        _this.handleColCoords = function(colCoords) {\n            _this.colCoords = colCoords;\n        };\n        _this.handleSlatCoords = function(slatCoords) {\n            _this.setState({\n                slatCoords: slatCoords\n            });\n            if (_this.props.onSlatCoords) {\n                _this.props.onSlatCoords(slatCoords);\n            }\n        };\n        return _this;\n    }\n    TimeCols1.prototype.render = function() {\n        var _a = this, props = _a.props, state = _a.state;\n        return common.createElement(\"div\", {\n            className: \"fc-timegrid-body\",\n            ref: this.handleRootEl,\n            style: {\n                // these props are important to give this wrapper correct dimensions for interactions\n                // TODO: if we set it here, can we avoid giving to inner tables?\n                width: props.clientWidth,\n                minWidth: props.tableMinWidth\n            }\n        }, common.createElement(TimeColsSlats, {\n            axis: props.axis,\n            dateProfile: props.dateProfile,\n            slatMetas: props.slatMetas,\n            clientWidth: props.clientWidth,\n            minHeight: props.expandRows ? props.clientHeight : \"\",\n            tableMinWidth: props.tableMinWidth,\n            tableColGroupNode: props.axis ? props.tableColGroupNode : null,\n            onCoords: this.handleSlatCoords\n        }), common.createElement(TimeColsContent, {\n            cells: props.cells,\n            axis: props.axis,\n            dateProfile: props.dateProfile,\n            businessHourSegs: props.businessHourSegs,\n            bgEventSegs: props.bgEventSegs,\n            fgEventSegs: props.fgEventSegs,\n            dateSelectionSegs: props.dateSelectionSegs,\n            eventSelection: props.eventSelection,\n            eventDrag: props.eventDrag,\n            eventResize: props.eventResize,\n            todayRange: props.todayRange,\n            nowDate: props.nowDate,\n            nowIndicatorSegs: props.nowIndicatorSegs,\n            clientWidth: props.clientWidth,\n            tableMinWidth: props.tableMinWidth,\n            tableColGroupNode: props.tableColGroupNode,\n            slatCoords: state.slatCoords,\n            onColCoords: this.handleColCoords,\n            forPrint: props.forPrint\n        }));\n    };\n    TimeCols1.prototype.componentDidMount = function() {\n        this.scrollResponder = this.context.createScrollResponder(this.handleScrollRequest);\n    };\n    TimeCols1.prototype.componentDidUpdate = function(prevProps) {\n        this.scrollResponder.update(prevProps.dateProfile !== this.props.dateProfile);\n    };\n    TimeCols1.prototype.componentWillUnmount = function() {\n        this.scrollResponder.detach();\n    };\n    TimeCols1.prototype.queryHit = function(positionLeft, positionTop) {\n        var _a = this.context, dateEnv = _a.dateEnv, options = _a.options;\n        var colCoords = this.colCoords;\n        var dateProfile = this.props.dateProfile;\n        var slatCoords = this.state.slatCoords;\n        var _b = this.processSlotOptions(this.props.slotDuration, options.snapDuration), snapDuration = _b.snapDuration, snapsPerSlot = _b.snapsPerSlot;\n        var colIndex = colCoords.leftToIndex(positionLeft);\n        var slatIndex = slatCoords.positions.topToIndex(positionTop);\n        if (colIndex != null && slatIndex != null) {\n            var cell = this.props.cells[colIndex];\n            var slatTop = slatCoords.positions.tops[slatIndex];\n            var slatHeight = slatCoords.positions.getHeight(slatIndex);\n            var partial = (positionTop - slatTop) / slatHeight; // floating point number between 0 and 1\n            var localSnapIndex = Math.floor(partial * snapsPerSlot); // the snap # relative to start of slat\n            var snapIndex = slatIndex * snapsPerSlot + localSnapIndex;\n            var dayDate = this.props.cells[colIndex].date;\n            var time = common.addDurations(dateProfile.slotMinTime, common.multiplyDuration(snapDuration, snapIndex));\n            var start = dateEnv.add(dayDate, time);\n            var end = dateEnv.add(start, snapDuration);\n            return {\n                dateProfile: dateProfile,\n                dateSpan: tslib.__assign({\n                    range: {\n                        start: start,\n                        end: end\n                    },\n                    allDay: false\n                }, cell.extraDateSpan),\n                dayEl: colCoords.els[colIndex],\n                rect: {\n                    left: colCoords.lefts[colIndex],\n                    right: colCoords.rights[colIndex],\n                    top: slatTop,\n                    bottom: slatTop + slatHeight\n                },\n                layer: 0\n            };\n        }\n        return null;\n    };\n    return TimeCols1;\n}(common.DateComponent);\nfunction processSlotOptions(slotDuration, snapDurationOverride) {\n    var snapDuration = snapDurationOverride || slotDuration;\n    var snapsPerSlot = common.wholeDivideDurations(slotDuration, snapDuration);\n    if (snapsPerSlot === null) {\n        snapDuration = slotDuration;\n        snapsPerSlot = 1;\n    // TODO: say warning?\n    }\n    return {\n        snapDuration: snapDuration,\n        snapsPerSlot: snapsPerSlot\n    };\n}\nvar DayTimeColsSlicer = /** @class */ function(_super) {\n    tslib.__extends(DayTimeColsSlicer1, _super);\n    function DayTimeColsSlicer1() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DayTimeColsSlicer1.prototype.sliceRange = function(range, dayRanges) {\n        var segs = [];\n        for(var col = 0; col < dayRanges.length; col += 1){\n            var segRange = common.intersectRanges(range, dayRanges[col]);\n            if (segRange) {\n                segs.push({\n                    start: segRange.start,\n                    end: segRange.end,\n                    isStart: segRange.start.valueOf() === range.start.valueOf(),\n                    isEnd: segRange.end.valueOf() === range.end.valueOf(),\n                    col: col\n                });\n            }\n        }\n        return segs;\n    };\n    return DayTimeColsSlicer1;\n}(common.Slicer);\nvar DayTimeCols = /** @class */ function(_super) {\n    tslib.__extends(DayTimeCols1, _super);\n    function DayTimeCols1() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.buildDayRanges = common.memoize(buildDayRanges);\n        _this.slicer = new DayTimeColsSlicer();\n        _this.timeColsRef = common.createRef();\n        return _this;\n    }\n    DayTimeCols1.prototype.render = function() {\n        var _this = this;\n        var _a = this, props = _a.props, context = _a.context;\n        var dateProfile = props.dateProfile, dayTableModel = props.dayTableModel;\n        var isNowIndicator = context.options.nowIndicator;\n        var dayRanges = this.buildDayRanges(dayTableModel, dateProfile, context.dateEnv);\n        // give it the first row of cells\n        // TODO: would move this further down hierarchy, but sliceNowDate needs it\n        return common.createElement(common.NowTimer, {\n            unit: isNowIndicator ? \"minute\" : \"day\"\n        }, function(nowDate, todayRange) {\n            return common.createElement(TimeCols, tslib.__assign({\n                ref: _this.timeColsRef\n            }, _this.slicer.sliceProps(props, dateProfile, null, context, dayRanges), {\n                forPrint: props.forPrint,\n                axis: props.axis,\n                dateProfile: dateProfile,\n                slatMetas: props.slatMetas,\n                slotDuration: props.slotDuration,\n                cells: dayTableModel.cells[0],\n                tableColGroupNode: props.tableColGroupNode,\n                tableMinWidth: props.tableMinWidth,\n                clientWidth: props.clientWidth,\n                clientHeight: props.clientHeight,\n                expandRows: props.expandRows,\n                nowDate: nowDate,\n                nowIndicatorSegs: isNowIndicator && _this.slicer.sliceNowDate(nowDate, context, dayRanges),\n                todayRange: todayRange,\n                onScrollTopRequest: props.onScrollTopRequest,\n                onSlatCoords: props.onSlatCoords\n            }));\n        });\n    };\n    return DayTimeCols1;\n}(common.DateComponent);\nfunction buildDayRanges(dayTableModel, dateProfile, dateEnv) {\n    var ranges = [];\n    for(var _i = 0, _a = dayTableModel.headerDates; _i < _a.length; _i++){\n        var date = _a[_i];\n        ranges.push({\n            start: dateEnv.add(date, dateProfile.slotMinTime),\n            end: dateEnv.add(date, dateProfile.slotMaxTime)\n        });\n    }\n    return ranges;\n}\n// potential nice values for the slot-duration and interval-duration\n// from largest to smallest\nvar STOCK_SUB_DURATIONS = [\n    {\n        hours: 1\n    },\n    {\n        minutes: 30\n    },\n    {\n        minutes: 15\n    },\n    {\n        seconds: 30\n    },\n    {\n        seconds: 15\n    }, \n];\nfunction buildSlatMetas(slotMinTime, slotMaxTime, explicitLabelInterval, slotDuration, dateEnv) {\n    var dayStart = new Date(0);\n    var slatTime = slotMinTime;\n    var slatIterator = common.createDuration(0);\n    var labelInterval = explicitLabelInterval || computeLabelInterval(slotDuration);\n    var metas = [];\n    while(common.asRoughMs(slatTime) < common.asRoughMs(slotMaxTime)){\n        var date = dateEnv.add(dayStart, slatTime);\n        var isLabeled = common.wholeDivideDurations(slatIterator, labelInterval) !== null;\n        metas.push({\n            date: date,\n            time: slatTime,\n            key: date.toISOString(),\n            isoTimeStr: common.formatIsoTimeString(date),\n            isLabeled: isLabeled\n        });\n        slatTime = common.addDurations(slatTime, slotDuration);\n        slatIterator = common.addDurations(slatIterator, slotDuration);\n    }\n    return metas;\n}\n// Computes an automatic value for slotLabelInterval\nfunction computeLabelInterval(slotDuration) {\n    var i;\n    var labelInterval;\n    var slotsPerLabel;\n    // find the smallest stock label interval that results in more than one slots-per-label\n    for(i = STOCK_SUB_DURATIONS.length - 1; i >= 0; i -= 1){\n        labelInterval = common.createDuration(STOCK_SUB_DURATIONS[i]);\n        slotsPerLabel = common.wholeDivideDurations(labelInterval, slotDuration);\n        if (slotsPerLabel !== null && slotsPerLabel > 1) {\n            return labelInterval;\n        }\n    }\n    return slotDuration; // fall back\n}\nvar DayTimeColsView = /** @class */ function(_super) {\n    tslib.__extends(DayTimeColsView1, _super);\n    function DayTimeColsView1() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.buildTimeColsModel = common.memoize(buildTimeColsModel);\n        _this.buildSlatMetas = common.memoize(buildSlatMetas);\n        return _this;\n    }\n    DayTimeColsView1.prototype.render = function() {\n        var _this = this;\n        var _a = this.context, options = _a.options, dateEnv = _a.dateEnv, dateProfileGenerator = _a.dateProfileGenerator;\n        var props = this.props;\n        var dateProfile = props.dateProfile;\n        var dayTableModel = this.buildTimeColsModel(dateProfile, dateProfileGenerator);\n        var splitProps = this.allDaySplitter.splitProps(props);\n        var slatMetas = this.buildSlatMetas(dateProfile.slotMinTime, dateProfile.slotMaxTime, options.slotLabelInterval, options.slotDuration, dateEnv);\n        var dayMinWidth = options.dayMinWidth;\n        var hasAttachedAxis = !dayMinWidth;\n        var hasDetachedAxis = dayMinWidth;\n        var headerContent = options.dayHeaders && common.createElement(common.DayHeader, {\n            dates: dayTableModel.headerDates,\n            dateProfile: dateProfile,\n            datesRepDistinctDays: true,\n            renderIntro: hasAttachedAxis ? this.renderHeadAxis : null\n        });\n        var allDayContent = options.allDaySlot !== false && function(contentArg) {\n            return common.createElement(daygrid.DayTable, tslib.__assign({}, splitProps.allDay, {\n                dateProfile: dateProfile,\n                dayTableModel: dayTableModel,\n                nextDayThreshold: options.nextDayThreshold,\n                tableMinWidth: contentArg.tableMinWidth,\n                colGroupNode: contentArg.tableColGroupNode,\n                renderRowIntro: hasAttachedAxis ? _this.renderTableRowAxis : null,\n                showWeekNumbers: false,\n                expandRows: false,\n                headerAlignElRef: _this.headerElRef,\n                clientWidth: contentArg.clientWidth,\n                clientHeight: contentArg.clientHeight,\n                forPrint: props.forPrint\n            }, _this.getAllDayMaxEventProps()));\n        };\n        var timeGridContent = function(contentArg) {\n            return common.createElement(DayTimeCols, tslib.__assign({}, splitProps.timed, {\n                dayTableModel: dayTableModel,\n                dateProfile: dateProfile,\n                axis: hasAttachedAxis,\n                slotDuration: options.slotDuration,\n                slatMetas: slatMetas,\n                forPrint: props.forPrint,\n                tableColGroupNode: contentArg.tableColGroupNode,\n                tableMinWidth: contentArg.tableMinWidth,\n                clientWidth: contentArg.clientWidth,\n                clientHeight: contentArg.clientHeight,\n                onSlatCoords: _this.handleSlatCoords,\n                expandRows: contentArg.expandRows,\n                onScrollTopRequest: _this.handleScrollTopRequest\n            }));\n        };\n        return hasDetachedAxis ? this.renderHScrollLayout(headerContent, allDayContent, timeGridContent, dayTableModel.colCnt, dayMinWidth, slatMetas, this.state.slatCoords) : this.renderSimpleLayout(headerContent, allDayContent, timeGridContent);\n    };\n    return DayTimeColsView1;\n}(TimeColsView);\nfunction buildTimeColsModel(dateProfile, dateProfileGenerator) {\n    var daySeries = new common.DaySeriesModel(dateProfile.renderRange, dateProfileGenerator);\n    return new common.DayTableModel(daySeries, false);\n}\nvar OPTION_REFINERS = {\n    allDaySlot: Boolean\n};\nvar main = common.createPlugin({\n    initialView: \"timeGridWeek\",\n    optionRefiners: OPTION_REFINERS,\n    views: {\n        timeGrid: {\n            component: DayTimeColsView,\n            usesMinMaxTime: true,\n            allDaySlot: true,\n            slotDuration: \"00:30:00\",\n            slotEventOverlap: true\n        },\n        timeGridDay: {\n            type: \"timeGrid\",\n            duration: {\n                days: 1\n            }\n        },\n        timeGridWeek: {\n            type: \"timeGrid\",\n            duration: {\n                weeks: 1\n            }\n        }\n    }\n});\nexports.DayTimeCols = DayTimeCols;\nexports.DayTimeColsSlicer = DayTimeColsSlicer;\nexports.DayTimeColsView = DayTimeColsView;\nexports.TimeCols = TimeCols;\nexports.TimeColsSlatsCoords = TimeColsSlatsCoords;\nexports.TimeColsView = TimeColsView;\nexports.buildDayRanges = buildDayRanges;\nexports.buildSlatMetas = buildSlatMetas;\nexports.buildTimeColsModel = buildTimeColsModel;\nexports[\"default\"] = main;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@fullcalendar/timegrid/main.cjs.js\n");

/***/ }),

/***/ "@ant-design/icons":
/*!************************************!*\
  !*** external "@ant-design/icons" ***!
  \************************************/
/***/ ((module) => {

module.exports = require("@ant-design/icons");

/***/ }),

/***/ "antd":
/*!***********************!*\
  !*** external "antd" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("antd");

/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

module.exports = require("axios");

/***/ }),

/***/ "faker":
/*!************************!*\
  !*** external "faker" ***!
  \************************/
/***/ ((module) => {

module.exports = require("faker");

/***/ }),

/***/ "immer":
/*!************************!*\
  !*** external "immer" ***!
  \************************/
/***/ ((module) => {

module.exports = require("immer");

/***/ }),

/***/ "moment":
/*!*************************!*\
  !*** external "moment" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("moment");

/***/ }),

/***/ "next-redux-wrapper":
/*!*************************************!*\
  !*** external "next-redux-wrapper" ***!
  \*************************************/
/***/ ((module) => {

module.exports = require("next-redux-wrapper");

/***/ }),

/***/ "next/router":
/*!******************************!*\
  !*** external "next/router" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("next/router");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

module.exports = require("react");

/***/ }),

/***/ "react-cookie":
/*!*******************************!*\
  !*** external "react-cookie" ***!
  \*******************************/
/***/ ((module) => {

module.exports = require("react-cookie");

/***/ }),

/***/ "react-cookies":
/*!********************************!*\
  !*** external "react-cookies" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("react-cookies");

/***/ }),

/***/ "react-dom":
/*!****************************!*\
  !*** external "react-dom" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("react-dom");

/***/ }),

/***/ "react-icons/fa":
/*!*********************************!*\
  !*** external "react-icons/fa" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("react-icons/fa");

/***/ }),

/***/ "react-redux":
/*!******************************!*\
  !*** external "react-redux" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("react-redux");

/***/ }),

/***/ "react/jsx-dev-runtime":
/*!****************************************!*\
  !*** external "react/jsx-dev-runtime" ***!
  \****************************************/
/***/ ((module) => {

module.exports = require("react/jsx-dev-runtime");

/***/ }),

/***/ "redux":
/*!************************!*\
  !*** external "redux" ***!
  \************************/
/***/ ((module) => {

module.exports = require("redux");

/***/ }),

/***/ "redux-devtools-extension":
/*!*******************************************!*\
  !*** external "redux-devtools-extension" ***!
  \*******************************************/
/***/ ((module) => {

module.exports = require("redux-devtools-extension");

/***/ }),

/***/ "redux-saga":
/*!*****************************!*\
  !*** external "redux-saga" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("redux-saga");

/***/ }),

/***/ "redux-saga/effects":
/*!*************************************!*\
  !*** external "redux-saga/effects" ***!
  \*************************************/
/***/ ((module) => {

module.exports = require("redux-saga/effects");

/***/ }),

/***/ "shortid":
/*!**************************!*\
  !*** external "shortid" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("shortid");

/***/ }),

/***/ "styled-components":
/*!************************************!*\
  !*** external "styled-components" ***!
  \************************************/
/***/ ((module) => {

module.exports = require("styled-components");

/***/ }),

/***/ "tslib":
/*!************************!*\
  !*** external "tslib" ***!
  \************************/
/***/ ((module) => {

module.exports = require("tslib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("./pages/musclePurpose.js"));
module.exports = __webpack_exports__;

})();