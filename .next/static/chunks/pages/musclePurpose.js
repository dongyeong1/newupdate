/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["pages/musclePurpose"],{

/***/ "./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2FmusclePurpose&absolutePagePath=%2FUsers%2Fdong%2FCAPSTONE_UPDATE%2Fpages%2FmusclePurpose.js!":
/*!***************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2FmusclePurpose&absolutePagePath=%2FUsers%2Fdong%2FCAPSTONE_UPDATE%2Fpages%2FmusclePurpose.js! ***!
  \***************************************************************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/musclePurpose\",\n      function () {\n        return __webpack_require__(/*! ./pages/musclePurpose.js */ \"./pages/musclePurpose.js\");\n      }\n    ]);\n    if(true) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/musclePurpose\"])\n      });\n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWNsaWVudC1wYWdlcy1sb2FkZXIuanM/cGFnZT0lMkZtdXNjbGVQdXJwb3NlJmFic29sdXRlUGFnZVBhdGg9JTJGVXNlcnMlMkZkb25nJTJGQ0FQU1RPTkVfVVBEQVRFJTJGcGFnZXMlMkZtdXNjbGVQdXJwb3NlLmpzIS5qcyIsIm1hcHBpbmdzIjoiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtQkFBTyxDQUFDLDBEQUEwQjtBQUNqRDtBQUNBO0FBQ0EsT0FBTyxJQUFVO0FBQ2pCLE1BQU0sVUFBVTtBQUNoQjtBQUNBLE9BQU87QUFDUDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8/ODk1OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbiAgICAod2luZG93Ll9fTkVYVF9QID0gd2luZG93Ll9fTkVYVF9QIHx8IFtdKS5wdXNoKFtcbiAgICAgIFwiL211c2NsZVB1cnBvc2VcIixcbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVpcmUoXCIuL3BhZ2VzL211c2NsZVB1cnBvc2UuanNcIik7XG4gICAgICB9XG4gICAgXSk7XG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2luZG93Ll9fTkVYVF9QLnB1c2goW1wiL211c2NsZVB1cnBvc2VcIl0pXG4gICAgICB9KTtcbiAgICB9XG4gICJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2FmusclePurpose&absolutePagePath=%2FUsers%2Fdong%2FCAPSTONE_UPDATE%2Fpages%2FmusclePurpose.js!\n");

/***/ }),

/***/ "./hooks/useInputTest.js":
/*!*******************************!*\
  !*** ./hooks/useInputTest.js ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nvar _s = $RefreshSig$();\n/* harmony default export */ __webpack_exports__[\"default\"] = (_s(function() {\n    var initialValue = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;\n    _s();\n    var ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initialValue), value = ref[0], setValue = ref[1];\n    var onChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function(e) {\n        setValue(e.target.value);\n    }, []);\n    return [\n        value,\n        onChange\n    ];\n}, \"2zBdqLguSCZTMGHcEtkUi4UKYXw=\"));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ob29rcy91c2VJbnB1dFRlc3QuanMuanMiLCJtYXBwaW5ncyI6Ijs7O0FBQThDOztBQUU5QywrREFBZSxjQUF5QjtRQUF4QkUsWUFBWSxvRUFBRyxJQUFJOztJQUNqQyxJQUEwQkYsR0FBc0IsR0FBdEJBLCtDQUFRLENBQUNFLFlBQVksQ0FBQyxFQUhsRCxLQUdjLEdBQWNGLEdBQXNCLEdBQXBDLEVBSGQsUUFHd0IsR0FBSUEsR0FBc0IsR0FBMUI7SUFDdEIsSUFBTUssUUFBUSxHQUFHSixrREFBVyxDQUFDLFNBQUNLLENBQUMsRUFBSztRQUNsQ0YsUUFBUSxDQUFDRSxDQUFDLENBQUNDLE1BQU0sQ0FBQ0osS0FBSyxDQUFDLENBQUM7S0FDMUIsRUFBRSxFQUFFLENBQUM7SUFDTixPQUFPO1FBQUNBLEtBQUs7UUFBRUUsUUFBUTtLQUFDLENBQUM7Q0FDMUIsbUNBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vaG9va3MvdXNlSW5wdXRUZXN0LmpzPzIyOWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUNhbGxiYWNrIH0gZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IChpbml0aWFsVmFsdWUgPSBudWxsKSA9PiB7XG4gIGNvbnN0IFt2YWx1ZSwgc2V0VmFsdWVdID0gdXNlU3RhdGUoaW5pdGlhbFZhbHVlKTtcbiAgY29uc3Qgb25DaGFuZ2UgPSB1c2VDYWxsYmFjaygoZSkgPT4ge1xuICAgIHNldFZhbHVlKGUudGFyZ2V0LnZhbHVlKTtcbiAgfSwgW10pO1xuICByZXR1cm4gW3ZhbHVlLCBvbkNoYW5nZV07XG59O1xuXG4iXSwibmFtZXMiOlsidXNlU3RhdGUiLCJ1c2VDYWxsYmFjayIsImluaXRpYWxWYWx1ZSIsInZhbHVlIiwic2V0VmFsdWUiLCJvbkNoYW5nZSIsImUiLCJ0YXJnZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./hooks/useInputTest.js\n");

/***/ }),

/***/ "./pages/musclePurpose.js":
/*!********************************!*\
  !*** ./pages/musclePurpose.js ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"__N_SSP\": function() { return /* binding */ __N_SSP; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! antd */ \"./node_modules/antd/es/index.js\");\n/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! moment */ \"./node_modules/moment/moment.js\");\n/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! styled-components */ \"./node_modules/styled-components/dist/styled-components.browser.esm.js\");\n/* harmony import */ var _purposeModal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./purposeModal */ \"./pages/purposeModal.js\");\n/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-redux */ \"./node_modules/react-redux/es/index.js\");\n/* harmony import */ var _fullcalendar_react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @fullcalendar/react */ \"./node_modules/@fullcalendar/react/dist/main.js\");\n/* harmony import */ var _fullcalendar_interaction__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @fullcalendar/interaction */ \"./node_modules/@fullcalendar/interaction/main.js\");\n/* harmony import */ var _fullcalendar_timegrid__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @fullcalendar/timegrid */ \"./node_modules/@fullcalendar/timegrid/main.js\");\n/* harmony import */ var _fullcalendar_daygrid__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @fullcalendar/daygrid */ \"./node_modules/@fullcalendar/daygrid/main.js\");\n/* harmony import */ var _purposeInformation__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./purposeInformation */ \"./pages/purposeInformation.js\");\nfunction _taggedTemplateLiteral(strings, raw) {\n    if (!raw) {\n        raw = strings.slice(0);\n    }\n    return Object.freeze(Object.defineProperties(strings, {\n        raw: {\n            value: Object.freeze(raw)\n        }\n    }));\n}\nvar _this = undefined;\nfunction _templateObject() {\n    var data = _taggedTemplateLiteral([\n        \"\\n  font-size: 30px;\\n  font-weight: bold;\\n  margin-bottom: 7px;\\n\"\n    ]);\n    _templateObject = function _templateObject() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject1() {\n    var data = _taggedTemplateLiteral([\n        \"\\n  // height: 100%;\\n  // padding: 0 100px;\\n  padding: 2% 5% 0 5%;\\n\\n  .ant-picker-calendar-header {\\n    padding-top: 0;\\n  }\\n\\n  .ant-picker-calendar-date {\\n    width: 90% !important;\\n  }\\n\\n  .ant-picker-calendar-date-content {\\n    height: 70px !important;\\n  }\\n\\n  .ant-card {\\n    width: 100%;\\n    border-radius: 9px;\\n    box-shadow: 0 1px 2px -2px rgb(0 0 0 / 16%), 0 3px 6px 0 rgb(0 0 0 / 12%);\\n  }\\n\\n  .ant-card-body {\\n    padding: 28px 28px 0 28px;\\n  }\\n\"\n    ]);\n    _templateObject1 = function _templateObject1() {\n        return data;\n    };\n    return data;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar _s = $RefreshSig$();\n// const [value, setValue] = useState(moment().format(\"2022-01-01\"));\n// const onSelect = (value) => {\n//   setValue(value);\n// };\n// const onPanelChange = (value) => {\n//   setValue(value);\n// };\nfunction onPanelChange(value, mode) {\n    console.log(value.format(\"YYYY-MM-DD\"), mode);\n}\nvar musclePurpose = function() {\n    _s();\n    var ref = (0,react_redux__WEBPACK_IMPORTED_MODULE_4__.useSelector)(function(state) {\n        return state.user;\n    }), goalpurpose = ref.goalpurpose, allPurpose = ref.allPurpose;\n    var calendarRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    // const [calendarEvent,setCalendarEvent]=useState([])\n    var calendarEvent = [];\n    if (allPurpose) {\n        for(var i = 0; i < allPurpose.length; i++){\n            if (allPurpose[i].event == \"B\") {\n                var tdate = new Date(allPurpose[i].lastDate);\n                calendarEvent.push({\n                    id: allPurpose[i].id,\n                    title: allPurpose[i].title,\n                    start: allPurpose[i].firstDate,\n                    end: tdate,\n                    color: \"#0000FF\",\n                    textColor: allPurpose[i].goalDistance\n                });\n            } else {\n                console.log(\"qqqqq\", allPurpose[i].lastDate);\n                var tdate = new Date(allPurpose[i].lastDate);\n                console.log(\"dddddd\", tdate);\n                calendarEvent.push({\n                    id: allPurpose[i].id,\n                    title: allPurpose[i].title,\n                    start: allPurpose[i].firstDate,\n                    end: tdate,\n                    color: \"#008000\",\n                    textColor: allPurpose[i].goalDistance\n                });\n            // calendarEvent.push({id:allPurpose[i].id,title:allPurpose[i].title,start:allPurpose[i].firstDate,end:allPurpose[i].lastDate,color:'#008000',textColor:allPurpose[i].goalDistance})\n            }\n        }\n    }\n    //   useEffect(()=>{\n    //     console.log('asdasdsa')\n    // Modal.destroyAll();\n    //   },[goalpurpose])\n    var ref1 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false), isModal = ref1[0], setIsModal = ref1[1];\n    var showModal = function() {\n        setIsModal(true);\n    };\n    var openModal = function() {\n        setIsModal(function(prev) {\n            return !prev;\n        });\n        console.log(isModal);\n    };\n    var ref2 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({}), information = ref2[0], setInformation = ref2[1];\n    var ref3 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false), informationModal = ref3[0], setInformationModal = ref3[1];\n    var showInformationModal = function() {\n        setInformationModal(true);\n    };\n    var openInformationModal = function() {\n        setInformationModal(function(prev) {\n            return !prev;\n        });\n    };\n    var asd = function(a) {\n        showInformationModal();\n        setInformation(a.event);\n        console.log(a);\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Container, {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_10__.Button, {\n                type: \"primary\",\n                onClick: showModal,\n                ghost: true,\n                children: \"\\uC6B4\\uB3D9\\uBAA9\\uD45C\\uC124\\uC815\"\n            }, void 0, false, {\n                fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/musclePurpose.js\",\n                lineNumber: 105,\n                columnNumber: 7\n            }, _this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_purposeModal__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                isModal: isModal,\n                openModal: openModal,\n                setIsModal: setIsModal\n            }, void 0, false, {\n                fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/musclePurpose.js\",\n                lineNumber: 108,\n                columnNumber: 13\n            }, _this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Title, {\n                children: \"\\uB098\\uC758 \\uC6B4\\uB3D9\\uBAA9\\uD45C\"\n            }, void 0, false, {\n                fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/musclePurpose.js\",\n                lineNumber: 109,\n                columnNumber: 7\n            }, _this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_10__.Card, {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_fullcalendar_react__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                        eventClick: asd,\n                        events: calendarEvent,\n                        innerRef: calendarRef,\n                        plugins: [\n                            _fullcalendar_daygrid__WEBPACK_IMPORTED_MODULE_8__[\"default\"]\n                        ],\n                        editable: true,\n                        selectable: true\n                    }, void 0, false, {\n                        fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/musclePurpose.js\",\n                        lineNumber: 112,\n                        columnNumber: 9\n                    }, _this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_purposeInformation__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                        informationModal: informationModal,\n                        openInformationModal: openInformationModal,\n                        setInformationModal: setInformationModal,\n                        information: information\n                    }, void 0, false, {\n                        fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/musclePurpose.js\",\n                        lineNumber: 120,\n                        columnNumber: 6\n                    }, _this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/musclePurpose.js\",\n                lineNumber: 110,\n                columnNumber: 7\n            }, _this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/musclePurpose.js\",\n        lineNumber: 104,\n        columnNumber: 5\n    }, _this);\n};\n_s(musclePurpose, \"vd+FfjNJl1HhL93NNXEqSTeO9YE=\", false, function() {\n    return [\n        react_redux__WEBPACK_IMPORTED_MODULE_4__.useSelector\n    ];\n});\nvar Title = styled_components__WEBPACK_IMPORTED_MODULE_11__[\"default\"].h1(_templateObject());\n_c = Title;\nvar Container = styled_components__WEBPACK_IMPORTED_MODULE_11__[\"default\"].div(_templateObject1());\n_c1 = Container;\nvar __N_SSP = true;\n/* harmony default export */ __webpack_exports__[\"default\"] = (musclePurpose);\nvar _c, _c1;\n$RefreshReg$(_c, \"Title\");\n$RefreshReg$(_c1, \"Container\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/musclePurpose.js\n");

/***/ }),

/***/ "./pages/purposeInformation.js":
/*!*************************************!*\
  !*** ./pages/purposeInformation.js ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! styled-components */ \"./node_modules/styled-components/dist/styled-components.browser.esm.js\");\n/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! antd */ \"./node_modules/antd/es/index.js\");\n/* harmony import */ var _hooks_useInputTest__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../hooks/useInputTest */ \"./hooks/useInputTest.js\");\n/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! moment */ \"./node_modules/moment/moment.js\");\n/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-redux */ \"./node_modules/react-redux/es/index.js\");\n/* harmony import */ var _reducers_user__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../reducers/user */ \"./reducers/user.js\");\nfunction _taggedTemplateLiteral(strings, raw) {\n    if (!raw) {\n        raw = strings.slice(0);\n    }\n    return Object.freeze(Object.defineProperties(strings, {\n        raw: {\n            value: Object.freeze(raw)\n        }\n    }));\n}\nvar _this = undefined;\nfunction _templateObject() {\n    var data = _taggedTemplateLiteral([\n        \"\\n  display: flex;\\n  justify-content: start;\\n  padding-left: 3px;\\n\"\n    ]);\n    _templateObject = function _templateObject() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject1() {\n    var data = _taggedTemplateLiteral([\n        \"\\n  .ant-picker {\\n    width: 132px;\\n    border-radius: 5px !important;\\n  }\\n\\n  .ant-select-single {\\n    width: 125px;\\n    border-radius: 5px;\\n    // color: rgba(0, 0, 0, 0.4);\\n  }\\n\\n  .ant-select-selector {\\n    border-radius: 5px !important;\\n  }\\n\"\n    ]);\n    _templateObject1 = function _templateObject1() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject2() {\n    var data = _taggedTemplateLiteral([\n        \"\\n  display: flex;\\n  justify-content: center;\\n  width: 100%;\\n  height: 470px;\\n  // vertical-align:middle;\\n  text-align: center;\\n  // max-width: 500px;\\n  padding: 16px;\\n\\n  // & Button { \\uC81C\\uAC70\\n  //   width: 100%;\\n  //   background: #1890ff;\\n  //   color: #fff;\\n  //   height: 40px;\\n  //   margin-top: 5px;\\n  // }\\n\\n  Button {\\n    width: 100%;\\n    background: #1890ff;\\n    color: #fff;\\n    height: 48px;\\n    margin-top: 5px;\\n    font-weight: bold;\\n    border-radius: 7px;\\n    margin-top: 20px;\\n  }\\n\\n  Button:hover {\\n    background: #1683e8;\\n    border-color: #1683e8;\\n    color: #fff;\\n  }\\n\\n  Button:focus {\\n    background: #1890ff;\\n    color: #fff;\\n  }\\n\\n  .ant-input,\\n  .ant-input-lg {\\n    border: 1px solid #ccd0d5;\\n    border-radius: 5px;\\n  }\\n\\n  .ant-form-item {\\n    margin-bottom: 10px;\\n  }\\n\\n  .ant-form {\\n    width: 400px;\\n  }\\n\\n  .ant-form-item-control-input-content {\\n    display: inline-block;\\n    width: 100%;\\n    height: 40.14px;\\n  }\\n\"\n    ]);\n    _templateObject2 = function _templateObject2() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject3() {\n    var data = _taggedTemplateLiteral([\n        \"\\n  display: inline-block;\\n  width: 154px;\\n\"\n    ]);\n    _templateObject3 = function _templateObject3() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject4() {\n    var data = _taggedTemplateLiteral([\n        \"\\n  margin-left: 8px;\\n\"\n    ]);\n    _templateObject4 = function _templateObject4() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject5() {\n    var data = _taggedTemplateLiteral([\n        \"\\n  width: 74px;\\n\\n  .ant-select-single {\\n    width: 75px;\\n    border-radius: 5px;\\n    // color: rgba(0, 0, 0, 0.4);\\n  }\\n\\n  .ant-select-selector {\\n    border-radius: 5px !important;\\n  }\\n\"\n    ]);\n    _templateObject5 = function _templateObject5() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject6() {\n    var data = _taggedTemplateLiteral([\n        \"\\n  display: block;\\n  text-align: center;\\n  border-bottom: solid 1px #dadde1;\\n  padding: 10px 15px 9px 15px;\\n\\n  div {\\n    margin-bottom: 0;\\n    font-size: 25px;\\n    font-weight: 700;\\n  }\\n\\n  span {\\n    font-size: 15px;\\n    color: #606770;\\n  }\\n\"\n    ]);\n    _templateObject6 = function _templateObject6() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject7() {\n    var data = _taggedTemplateLiteral([\n        \"\\n  top: 130px;\\n\\n  .ant-modal-content {\\n    width: 432px;\\n    margin: 0 auto;\\n    border-radius: 15px;\\n    box-shadow: 0 1px 2px -2px rgb(0 0 0 / 16%), 0 3px 6px 0 rgb(0 0 0 / 12%);\\n  }\\n  .ant-modal-header {\\n    border-radius: 15px;\\n  }\\n\\n  .ant-modal-body {\\n    padding: 0;\\n  }\\n\\n  .ant-input-affix-wrapper {\\n    // \\uCD94\\uAC00\\uD558\\uAE30\\n    border-radius: 5px;\\n  }\\n\"\n    ]);\n    _templateObject7 = function _templateObject7() {\n        return data;\n    };\n    return data;\n}\n\n\n\n\n\n\n\n\n\nvar _s = $RefreshSig$();\nvar Meta = antd__WEBPACK_IMPORTED_MODULE_6__.Card.Meta;\nvar Option = antd__WEBPACK_IMPORTED_MODULE_6__.Select.Option;\nvar Signup = function(param) {\n    var informationModal = param.informationModal, openInformationModal = param.openInformationModal, setInformationModal = param.setInformationModal, information = param.information;\n    _s();\n    var dispatch = (0,react_redux__WEBPACK_IMPORTED_MODULE_4__.useDispatch)();\n    var deletePurpose = function(datas) {\n        dispatch({\n            type: _reducers_user__WEBPACK_IMPORTED_MODULE_5__.DELETE_GOAL_REQUEST,\n            data: datas\n        });\n        // location.reload();\n        window.location.href = \"/musclePurpose\";\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ModalWrapper, {\n        visible: informationModal,\n        onCancel: openInformationModal,\n        footer: null,\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(TitleDiv, {}, void 0, false, {\n                fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeInformation.js\",\n                lineNumber: 41,\n                columnNumber: 7\n            }, _this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(FormWrapper, {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(MaleFemale, {\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                                children: information.title\n                            }, void 0, false, {\n                                fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeInformation.js\",\n                                lineNumber: 49,\n                                columnNumber: 11\n                            }, _this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                children: information.textColor + \"km\"\n                            }, void 0, false, {\n                                fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeInformation.js\",\n                                lineNumber: 50,\n                                columnNumber: 11\n                            }, _this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                children: information.start\n                            }, void 0, false, {\n                                fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeInformation.js\",\n                                lineNumber: 51,\n                                columnNumber: 11\n                            }, _this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                children: information.end\n                            }, void 0, false, {\n                                fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeInformation.js\",\n                                lineNumber: 52,\n                                columnNumber: 11\n                            }, _this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeInformation.js\",\n                        lineNumber: 48,\n                        columnNumber: 11\n                    }, _this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_6__.Button, {\n                        type: \"primary\",\n                        onClick: function() {\n                            return deletePurpose(information.id);\n                        },\n                        danger: true,\n                        children: \"\\uBAA9\\uD45C\\uC0AD\\uC81C\"\n                    }, void 0, false, {\n                        fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeInformation.js\",\n                        lineNumber: 56,\n                        columnNumber: 9\n                    }, _this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeInformation.js\",\n                lineNumber: 45,\n                columnNumber: 7\n            }, _this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeInformation.js\",\n        lineNumber: 40,\n        columnNumber: 5\n    }, _this);\n};\n_s(Signup, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function() {\n    return [\n        react_redux__WEBPACK_IMPORTED_MODULE_4__.useDispatch\n    ];\n});\n_c = Signup;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Signup);\n// const BtnWrapper = styled.div` 제거하기\n//   // display: flex;\n//   // justify-content: start;\n//   // margin-top: 10px;\n//   .ant-radio-wrapper {\n//     height: 38px;\n//     line-height: 38px;\n//     padding: 0 5px;\n//     border: 1px solid #ccd0d5;\n//     border-radius: 5px;\n//   }\n// `;\nvar SmallTitle = styled_components__WEBPACK_IMPORTED_MODULE_7__[\"default\"].div(_templateObject());\n// const SmallSecondTitle = styled(SmallTitle)` 제거\n//   margin-top: 10px;\n// `;\n// 추가하기\nvar SpaceWrapper = (0,styled_components__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(antd__WEBPACK_IMPORTED_MODULE_6__.Space)(_templateObject1());\nvar FormWrapper = styled_components__WEBPACK_IMPORTED_MODULE_7__[\"default\"].div(_templateObject2());\n_c1 = FormWrapper;\nvar FirstName = (0,styled_components__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(antd__WEBPACK_IMPORTED_MODULE_6__.Form.Item)(_templateObject3());\nvar SecondName = (0,styled_components__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(FirstName)(_templateObject4());\nvar MaleFemale = (0,styled_components__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(SecondName)(_templateObject5());\n_c2 = MaleFemale;\nvar TitleDiv = styled_components__WEBPACK_IMPORTED_MODULE_7__[\"default\"].div(_templateObject6());\n_c3 = TitleDiv;\nvar ModalWrapper = (0,styled_components__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(antd__WEBPACK_IMPORTED_MODULE_6__.Modal)(_templateObject7());\n_c4 = ModalWrapper;\nvar _c, _c1, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Signup\");\n$RefreshReg$(_c1, \"FormWrapper\");\n$RefreshReg$(_c2, \"MaleFemale\");\n$RefreshReg$(_c3, \"TitleDiv\");\n$RefreshReg$(_c4, \"ModalWrapper\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy9wdXJwb3NlSW5mb3JtYXRpb24uanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFnRTtBQUN6QjtBQVl6QjtBQUMrQjtBQUNqQjtBQUMyQjtBQUM4QjtBQUNuQzs7QUFFbEQsSUFBTSxJQUFNLEdBQUtNLDJDQUFMO0FBQ1osSUFBTSxNQUFRLEdBQUtNLCtDQUFMO0FBR2QsSUFBTWEsTUFBTSxHQUFHLGdCQUFnRjtRQUE3RUMsZ0JBQWdCLFNBQWhCQSxnQkFBZ0IsRUFBRUMsb0JBQW9CLFNBQXBCQSxvQkFBb0IsRUFBQ0MsbUJBQW1CLFNBQW5CQSxtQkFBbUIsRUFBQ0MsV0FBVyxTQUFYQSxXQUFXOztJQUNwRixJQUFNQyxRQUFRLEdBQUNiLHdEQUFXLEVBQUU7SUFFaEMsSUFBTWMsYUFBYSxHQUFDLFNBQUNDLEtBQUssRUFBRztRQUN6QkYsUUFBUSxDQUFDO1lBQ0xHLElBQUksRUFBQ2QsK0RBQW1CO1lBQ3hCZSxJQUFJLEVBQUNGLEtBQUs7U0FDYixDQUFDO1FBQ0YscUJBQXFCO1FBRXpCRyxNQUFNLENBQUNDLFFBQVEsQ0FBQ0MsSUFBSSxHQUFDLGdCQUFnQjtLQUNwQztJQUdDLHFCQUNFLDhEQUFDQyxZQUFZO1FBQUNDLE9BQU8sRUFBRWIsZ0JBQWdCO1FBQUVjLFFBQVEsRUFBRWIsb0JBQW9CO1FBQUVjLE1BQU0sRUFBRSxJQUFJOzswQkFDbkYsOERBQUNDLFFBQVE7Ozs7cUJBR0U7MEJBQ1gsOERBQUNDLFdBQVc7O2tDQUdSLDhEQUFDQyxVQUFVOzswQ0FDWCw4REFBQ0MsSUFBRTswQ0FBRWhCLFdBQVcsQ0FBQ2lCLEtBQUs7Ozs7O3FDQUFNOzBDQUM1Qiw4REFBQ0MsS0FBRzswQ0FBRWxCLFdBQVcsQ0FBQ21CLFNBQVMsR0FBQyxJQUFJOzs7OztxQ0FBTzswQ0FDdkMsOERBQUNELEtBQUc7MENBQUVsQixXQUFXLENBQUNvQixLQUFLOzs7OztxQ0FBTzswQ0FDOUIsOERBQUNGLEtBQUc7MENBQUVsQixXQUFXLENBQUNxQixHQUFHOzs7OztxQ0FBTzs7Ozs7OzZCQUdmO2tDQUNmLDhEQUFDekMsd0NBQU07d0JBQUN3QixJQUFJLEVBQUMsU0FBUzt3QkFBQ2tCLE9BQU8sRUFBRTttQ0FBSXBCLGFBQWEsQ0FBQ0YsV0FBVyxDQUFDdUIsRUFBRSxDQUFDO3lCQUFBO3dCQUFFQyxNQUFNO2tDQUFDLDBCQUFJOzs7Ozs2QkFBaUI7Ozs7OztxQkFDM0U7Ozs7OzthQUNULENBQ2Y7Q0FDSDtHQW5DSzVCLE1BQU07O1FBQ09SLG9EQUFXOzs7QUFEeEJRLEtBQUFBLE1BQU07QUFxQ1osK0RBQWVBLE1BQU0sRUFBQztBQUV0QjtBQUNRLHNCQUFjO0FBQ3RCLCtCQUErQjtBQUMvQix5QkFBeUI7QUFFekIseUJBQXlCO0FBQ3pCLG9CQUFvQjtBQUNwQix5QkFBeUI7QUFDekIsc0JBQXNCO0FBQ3RCLGlDQUFpQztBQUNqQywwQkFBMEI7QUFDMUIsTUFBTTtBQUNOLEtBQUs7QUFFTCxJQUFNNkIsVUFBVSxHQUFHbEQsNkRBQVUsbUJBSTVCO0FBRUQ7QUFDSSxzQkFBa0I7QUFDdEIsS0FBSztBQUVMO0FBQ1EsSUFBRm1ELFlBQVksR0FBR25ELDZEQUFNLENBQUNTLHVDQUFLLENBQUMsb0JBZWpDO0FBRUQsSUFBTThCLFdBQVcsR0FBR3ZDLDZEQUFVLG9CQTJEN0I7QUEzREt1QyxNQUFBQSxXQUFXO0FBNkRqQixJQUFNYSxTQUFTLEdBQUdwRCw2REFBTSxDQUFDRywyQ0FBUyxDQUFDLG9CQUdsQztBQUVELElBQU1tRCxVQUFVLEdBQUd0RCw2REFBTSxDQUFDb0QsU0FBUyxDQUFDLG9CQUVuQztBQUVELElBQU1aLFVBQVUsR0FBR3hDLDZEQUFNLENBQUNzRCxVQUFVLENBQUMsb0JBWXBDO0FBWktkLE1BQUFBLFVBQVU7QUFjaEIsSUFBTUYsUUFBUSxHQUFHdEMsNkRBQVUsb0JBZ0IxQjtBQWhCS3NDLE1BQUFBLFFBQVE7QUFrQmQsSUFBTUosWUFBWSxHQUFHbEMsNkRBQU0sQ0FBQ0MsdUNBQUssQ0FBQyxvQkFxQmpDO0FBckJLaUMsTUFBQUEsWUFBWSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9wYWdlcy9wdXJwb3NlSW5mb3JtYXRpb24uanM/NWUwZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBzdHlsZWQgZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XG5pbXBvcnQge1xuICBNb2RhbCxcbiAgQ2FyZCxcbiAgRm9ybSxcbiAgSW5wdXQsXG4gIEJ1dHRvbixcbiAgRGF0ZVBpY2tlcixcbiAgVGltZVBpY2tlcixcbiAgU2VsZWN0LFxuICBTcGFjZSxcbiAgUmFkaW8sXG59IGZyb20gXCJhbnRkXCI7XG5pbXBvcnQgdXNlSW5wdXQgZnJvbSBcIi4uL2hvb2tzL3VzZUlucHV0VGVzdFwiO1xuaW1wb3J0IG1vbWVudCBmcm9tIFwibW9tZW50XCI7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IERFTEVURV9HT0FMX1JFUVVFU1QsIEdPQUxfUkVRVUVTVCwgU0lHTlVQX1JFUVVFU1QgfSBmcm9tIFwiLi4vcmVkdWNlcnMvdXNlclwiO1xuaW1wb3J0IHsgQ2xvc2VPdXRsaW5lZCB9IGZyb20gXCJAYW50LWRlc2lnbi9pY29uc1wiO1xuXG5jb25zdCB7IE1ldGEgfSA9IENhcmQ7XG5jb25zdCB7IE9wdGlvbiB9ID0gU2VsZWN0O1xuXG5cbmNvbnN0IFNpZ251cCA9ICh7IGluZm9ybWF0aW9uTW9kYWwsIG9wZW5JbmZvcm1hdGlvbk1vZGFsLHNldEluZm9ybWF0aW9uTW9kYWwsaW5mb3JtYXRpb24gfSkgPT4ge1xuICAgIGNvbnN0IGRpc3BhdGNoPXVzZURpc3BhdGNoKCk7XG5cbmNvbnN0IGRlbGV0ZVB1cnBvc2U9KGRhdGFzKT0+e1xuICAgIGRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTpERUxFVEVfR09BTF9SRVFVRVNULFxuICAgICAgICBkYXRhOmRhdGFzXG4gICAgfSlcbiAgICAvLyBsb2NhdGlvbi5yZWxvYWQoKTtcblxud2luZG93LmxvY2F0aW9uLmhyZWY9Jy9tdXNjbGVQdXJwb3NlJ1xufVxuXG5cbiAgcmV0dXJuIChcbiAgICA8TW9kYWxXcmFwcGVyIHZpc2libGU9e2luZm9ybWF0aW9uTW9kYWx9IG9uQ2FuY2VsPXtvcGVuSW5mb3JtYXRpb25Nb2RhbH0gZm9vdGVyPXtudWxsfT5cbiAgICAgIDxUaXRsZURpdj5cbiAgICAgICAgey8qIDxkaXY+7Jq064+Z66qp7ZGc7ISk7KCVPC9kaXY+XG4gICAgICAgIDxzcGFuPuqwhOuLqO2VqeuLiOuLpDwvc3Bhbj4gKi99XG4gICAgICA8L1RpdGxlRGl2PlxuICAgICAgPEZvcm1XcmFwcGVyPlxuICAgICAgICBcbiAgICAgICBcbiAgICAgICAgICA8TWFsZUZlbWFsZT5cbiAgICAgICAgICA8aDI+e2luZm9ybWF0aW9uLnRpdGxlfTwvaDI+XG4gICAgICAgICAgPGRpdj57aW5mb3JtYXRpb24udGV4dENvbG9yKydrbSd9PC9kaXY+XG4gICAgICAgICAgPGRpdj57aW5mb3JtYXRpb24uc3RhcnR9PC9kaXY+XG4gICAgICAgICAgPGRpdj57aW5mb3JtYXRpb24uZW5kfTwvZGl2PlxuXG4gICAgICAgICAgXG4gICAgICAgICAgPC9NYWxlRmVtYWxlPlxuICAgICAgICA8QnV0dG9uIHR5cGU9XCJwcmltYXJ5XCIgb25DbGljaz17KCk9PmRlbGV0ZVB1cnBvc2UoaW5mb3JtYXRpb24uaWQpfSBkYW5nZXI+66qp7ZGc7IKt7KCcPC9CdXR0b24+XG4gICAgICA8L0Zvcm1XcmFwcGVyPlxuICAgIDwvTW9kYWxXcmFwcGVyPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2lnbnVwO1xuXG4vLyBjb25zdCBCdG5XcmFwcGVyID0gc3R5bGVkLmRpdmAg7KCc6rGw7ZWY6riwXG4vLyAgIC8vIGRpc3BsYXk6IGZsZXg7XG4vLyAgIC8vIGp1c3RpZnktY29udGVudDogc3RhcnQ7XG4vLyAgIC8vIG1hcmdpbi10b3A6IDEwcHg7XG5cbi8vICAgLmFudC1yYWRpby13cmFwcGVyIHtcbi8vICAgICBoZWlnaHQ6IDM4cHg7XG4vLyAgICAgbGluZS1oZWlnaHQ6IDM4cHg7XG4vLyAgICAgcGFkZGluZzogMCA1cHg7XG4vLyAgICAgYm9yZGVyOiAxcHggc29saWQgI2NjZDBkNTtcbi8vICAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4vLyAgIH1cbi8vIGA7XG5cbmNvbnN0IFNtYWxsVGl0bGUgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHN0YXJ0O1xuICBwYWRkaW5nLWxlZnQ6IDNweDtcbmA7XG5cbi8vIGNvbnN0IFNtYWxsU2Vjb25kVGl0bGUgPSBzdHlsZWQoU21hbGxUaXRsZSlgIOygnOqxsFxuLy8gICBtYXJnaW4tdG9wOiAxMHB4O1xuLy8gYDtcblxuLy8g7LaU6rCA7ZWY6riwXG5jb25zdCBTcGFjZVdyYXBwZXIgPSBzdHlsZWQoU3BhY2UpYFxuICAuYW50LXBpY2tlciB7XG4gICAgd2lkdGg6IDEzMnB4O1xuICAgIGJvcmRlci1yYWRpdXM6IDVweCAhaW1wb3J0YW50O1xuICB9XG5cbiAgLmFudC1zZWxlY3Qtc2luZ2xlIHtcbiAgICB3aWR0aDogMTI1cHg7XG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICAgIC8vIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNCk7XG4gIH1cblxuICAuYW50LXNlbGVjdC1zZWxlY3RvciB7XG4gICAgYm9yZGVyLXJhZGl1czogNXB4ICFpbXBvcnRhbnQ7XG4gIH1cbmA7XG5cbmNvbnN0IEZvcm1XcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDQ3MHB4O1xuICAvLyB2ZXJ0aWNhbC1hbGlnbjptaWRkbGU7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgLy8gbWF4LXdpZHRoOiA1MDBweDtcbiAgcGFkZGluZzogMTZweDtcblxuICAvLyAmIEJ1dHRvbiB7IOygnOqxsFxuICAvLyAgIHdpZHRoOiAxMDAlO1xuICAvLyAgIGJhY2tncm91bmQ6ICMxODkwZmY7XG4gIC8vICAgY29sb3I6ICNmZmY7XG4gIC8vICAgaGVpZ2h0OiA0MHB4O1xuICAvLyAgIG1hcmdpbi10b3A6IDVweDtcbiAgLy8gfVxuXG4gIEJ1dHRvbiB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgYmFja2dyb3VuZDogIzE4OTBmZjtcbiAgICBjb2xvcjogI2ZmZjtcbiAgICBoZWlnaHQ6IDQ4cHg7XG4gICAgbWFyZ2luLXRvcDogNXB4O1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGJvcmRlci1yYWRpdXM6IDdweDtcbiAgICBtYXJnaW4tdG9wOiAyMHB4O1xuICB9XG5cbiAgQnV0dG9uOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kOiAjMTY4M2U4O1xuICAgIGJvcmRlci1jb2xvcjogIzE2ODNlODtcbiAgICBjb2xvcjogI2ZmZjtcbiAgfVxuXG4gIEJ1dHRvbjpmb2N1cyB7XG4gICAgYmFja2dyb3VuZDogIzE4OTBmZjtcbiAgICBjb2xvcjogI2ZmZjtcbiAgfVxuXG4gIC5hbnQtaW5wdXQsXG4gIC5hbnQtaW5wdXQtbGcge1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICNjY2QwZDU7XG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICB9XG5cbiAgLmFudC1mb3JtLWl0ZW0ge1xuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gIH1cblxuICAuYW50LWZvcm0ge1xuICAgIHdpZHRoOiA0MDBweDtcbiAgfVxuXG4gIC5hbnQtZm9ybS1pdGVtLWNvbnRyb2wtaW5wdXQtY29udGVudCB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogNDAuMTRweDtcbiAgfVxuYDtcblxuY29uc3QgRmlyc3ROYW1lID0gc3R5bGVkKEZvcm0uSXRlbSlgXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgd2lkdGg6IDE1NHB4O1xuYDtcblxuY29uc3QgU2Vjb25kTmFtZSA9IHN0eWxlZChGaXJzdE5hbWUpYFxuICBtYXJnaW4tbGVmdDogOHB4O1xuYDtcblxuY29uc3QgTWFsZUZlbWFsZSA9IHN0eWxlZChTZWNvbmROYW1lKWBcbiAgd2lkdGg6IDc0cHg7XG5cbiAgLmFudC1zZWxlY3Qtc2luZ2xlIHtcbiAgICB3aWR0aDogNzVweDtcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgLy8gY29sb3I6IHJnYmEoMCwgMCwgMCwgMC40KTtcbiAgfVxuXG4gIC5hbnQtc2VsZWN0LXNlbGVjdG9yIHtcbiAgICBib3JkZXItcmFkaXVzOiA1cHggIWltcG9ydGFudDtcbiAgfVxuYDtcblxuY29uc3QgVGl0bGVEaXYgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBibG9jaztcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBib3JkZXItYm90dG9tOiBzb2xpZCAxcHggI2RhZGRlMTtcbiAgcGFkZGluZzogMTBweCAxNXB4IDlweCAxNXB4O1xuXG4gIGRpdiB7XG4gICAgbWFyZ2luLWJvdHRvbTogMDtcbiAgICBmb250LXNpemU6IDI1cHg7XG4gICAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgfVxuXG4gIHNwYW4ge1xuICAgIGZvbnQtc2l6ZTogMTVweDtcbiAgICBjb2xvcjogIzYwNjc3MDtcbiAgfVxuYDtcblxuY29uc3QgTW9kYWxXcmFwcGVyID0gc3R5bGVkKE1vZGFsKWBcbiAgdG9wOiAxMzBweDtcblxuICAuYW50LW1vZGFsLWNvbnRlbnQge1xuICAgIHdpZHRoOiA0MzJweDtcbiAgICBtYXJnaW46IDAgYXV0bztcbiAgICBib3JkZXItcmFkaXVzOiAxNXB4O1xuICAgIGJveC1zaGFkb3c6IDAgMXB4IDJweCAtMnB4IHJnYigwIDAgMCAvIDE2JSksIDAgM3B4IDZweCAwIHJnYigwIDAgMCAvIDEyJSk7XG4gIH1cbiAgLmFudC1tb2RhbC1oZWFkZXIge1xuICAgIGJvcmRlci1yYWRpdXM6IDE1cHg7XG4gIH1cblxuICAuYW50LW1vZGFsLWJvZHkge1xuICAgIHBhZGRpbmc6IDA7XG4gIH1cblxuICAuYW50LWlucHV0LWFmZml4LXdyYXBwZXIge1xuICAgIC8vIOy2lOqwgO2VmOq4sFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgfVxuYDsiXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VTdGF0ZSIsInVzZUNhbGxiYWNrIiwidXNlRWZmZWN0Iiwic3R5bGVkIiwiTW9kYWwiLCJDYXJkIiwiRm9ybSIsIklucHV0IiwiQnV0dG9uIiwiRGF0ZVBpY2tlciIsIlRpbWVQaWNrZXIiLCJTZWxlY3QiLCJTcGFjZSIsIlJhZGlvIiwidXNlSW5wdXQiLCJtb21lbnQiLCJ1c2VEaXNwYXRjaCIsInVzZVNlbGVjdG9yIiwiREVMRVRFX0dPQUxfUkVRVUVTVCIsIkdPQUxfUkVRVUVTVCIsIlNJR05VUF9SRVFVRVNUIiwiQ2xvc2VPdXRsaW5lZCIsIk1ldGEiLCJPcHRpb24iLCJTaWdudXAiLCJpbmZvcm1hdGlvbk1vZGFsIiwib3BlbkluZm9ybWF0aW9uTW9kYWwiLCJzZXRJbmZvcm1hdGlvbk1vZGFsIiwiaW5mb3JtYXRpb24iLCJkaXNwYXRjaCIsImRlbGV0ZVB1cnBvc2UiLCJkYXRhcyIsInR5cGUiLCJkYXRhIiwid2luZG93IiwibG9jYXRpb24iLCJocmVmIiwiTW9kYWxXcmFwcGVyIiwidmlzaWJsZSIsIm9uQ2FuY2VsIiwiZm9vdGVyIiwiVGl0bGVEaXYiLCJGb3JtV3JhcHBlciIsIk1hbGVGZW1hbGUiLCJoMiIsInRpdGxlIiwiZGl2IiwidGV4dENvbG9yIiwic3RhcnQiLCJlbmQiLCJvbkNsaWNrIiwiaWQiLCJkYW5nZXIiLCJTbWFsbFRpdGxlIiwiU3BhY2VXcmFwcGVyIiwiRmlyc3ROYW1lIiwiSXRlbSIsIlNlY29uZE5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./pages/purposeInformation.js\n");

/***/ }),

/***/ "./pages/purposeModal.js":
/*!*******************************!*\
  !*** ./pages/purposeModal.js ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! styled-components */ \"./node_modules/styled-components/dist/styled-components.browser.esm.js\");\n/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! antd */ \"./node_modules/antd/es/index.js\");\n/* harmony import */ var _hooks_useInputTest__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../hooks/useInputTest */ \"./hooks/useInputTest.js\");\n/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! moment */ \"./node_modules/moment/moment.js\");\n/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-redux */ \"./node_modules/react-redux/es/index.js\");\n/* harmony import */ var _reducers_user__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../reducers/user */ \"./reducers/user.js\");\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _iterableToArrayLimit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s1, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s1 = _i.next()).done); _n = true){\n            _arr.push(_s1.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _taggedTemplateLiteral(strings, raw) {\n    if (!raw) {\n        raw = strings.slice(0);\n    }\n    return Object.freeze(Object.defineProperties(strings, {\n        raw: {\n            value: Object.freeze(raw)\n        }\n    }));\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nvar _this = undefined;\nfunction _templateObject() {\n    var data = _taggedTemplateLiteral([\n        \"\\n  display: flex;\\n  justify-content: start;\\n  padding-left: 3px;\\n\"\n    ]);\n    _templateObject = function _templateObject() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject1() {\n    var data = _taggedTemplateLiteral([\n        \"\\n  .ant-picker {\\n    width: 132px;\\n    border-radius: 5px !important;\\n  }\\n\\n  .ant-select-single {\\n    width: 125px;\\n    border-radius: 5px;\\n    // color: rgba(0, 0, 0, 0.4);\\n  }\\n\\n  .ant-select-selector {\\n    border-radius: 5px !important;\\n  }\\n\"\n    ]);\n    _templateObject1 = function _templateObject1() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject2() {\n    var data = _taggedTemplateLiteral([\n        \"\\n  display: flex;\\n  justify-content: center;\\n  width: 100%;\\n  height: 470px;\\n  // vertical-align:middle;\\n  text-align: center;\\n  // max-width: 500px;\\n  padding: 16px;\\n\\n  // & Button { \\uC81C\\uAC70\\n  //   width: 100%;\\n  //   background: #1890ff;\\n  //   color: #fff;\\n  //   height: 40px;\\n  //   margin-top: 5px;\\n  // }\\n\\n  Button {\\n    width: 100%;\\n    background: #1890ff;\\n    color: #fff;\\n    height: 48px;\\n    margin-top: 5px;\\n    font-weight: bold;\\n    border-radius: 7px;\\n    margin-top: 20px;\\n  }\\n\\n  Button:hover {\\n    background: #1683e8;\\n    border-color: #1683e8;\\n    color: #fff;\\n  }\\n\\n  Button:focus {\\n    background: #1890ff;\\n    color: #fff;\\n  }\\n\\n  .ant-input,\\n  .ant-input-lg {\\n    border: 1px solid #ccd0d5;\\n    border-radius: 5px;\\n  }\\n\\n  .ant-form-item {\\n    margin-bottom: 10px;\\n  }\\n\\n  .ant-form {\\n    width: 400px;\\n  }\\n\\n  .ant-form-item-control-input-content {\\n    display: inline-block;\\n    width: 100%;\\n    height: 40.14px;\\n  }\\n\"\n    ]);\n    _templateObject2 = function _templateObject2() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject3() {\n    var data = _taggedTemplateLiteral([\n        \"\\n  display: inline-block;\\n  width: 154px;\\n\"\n    ]);\n    _templateObject3 = function _templateObject3() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject4() {\n    var data = _taggedTemplateLiteral([\n        \"\\n  margin-left: 8px;\\n\"\n    ]);\n    _templateObject4 = function _templateObject4() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject5() {\n    var data = _taggedTemplateLiteral([\n        \"\\n  width: 74px;\\n\\n  .ant-select-single {\\n    width: 75px;\\n    border-radius: 5px;\\n    // color: rgba(0, 0, 0, 0.4);\\n  }\\n\\n  .ant-select-selector {\\n    border-radius: 5px !important;\\n  }\\n\"\n    ]);\n    _templateObject5 = function _templateObject5() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject6() {\n    var data = _taggedTemplateLiteral([\n        \"\\n  display: block;\\n  text-align: center;\\n  border-bottom: solid 1px #dadde1;\\n  padding: 10px 15px 9px 15px;\\n\\n  div {\\n    margin-bottom: 0;\\n    font-size: 25px;\\n    font-weight: 700;\\n  }\\n\\n  span {\\n    font-size: 15px;\\n    color: #606770;\\n  }\\n\"\n    ]);\n    _templateObject6 = function _templateObject6() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject7() {\n    var data = _taggedTemplateLiteral([\n        \"\\n  top: 130px;\\n\\n  .ant-modal-content {\\n    width: 432px;\\n    margin: 0 auto;\\n    border-radius: 15px;\\n    box-shadow: 0 1px 2px -2px rgb(0 0 0 / 16%), 0 3px 6px 0 rgb(0 0 0 / 12%);\\n  }\\n  .ant-modal-header {\\n    border-radius: 15px;\\n  }\\n\\n  .ant-modal-body {\\n    padding: 0;\\n  }\\n\\n  .ant-input-affix-wrapper {\\n    // \\uCD94\\uAC00\\uD558\\uAE30\\n    border-radius: 5px;\\n  }\\n\"\n    ]);\n    _templateObject7 = function _templateObject7() {\n        return data;\n    };\n    return data;\n}\n\n\n\n\n\n\n\n\n\nvar _s = $RefreshSig$();\nvar Meta = antd__WEBPACK_IMPORTED_MODULE_6__.Card.Meta;\nvar Option = antd__WEBPACK_IMPORTED_MODULE_6__.Select.Option;\nvar Signup = function(param) {\n    var isModal = param.isModal, openModal = param.openModal, setIsModal = param.setIsModal;\n    var _this1 = _this;\n    var onChange = function onChange(date, dateString) {\n        console.log(date, dateString);\n    };\n    _s();\n    var goalpurpose = (0,react_redux__WEBPACK_IMPORTED_MODULE_4__.useSelector)(function(state) {\n        return state.user;\n    }).goalpurpose;\n    var ref = _slicedToArray(antd__WEBPACK_IMPORTED_MODULE_6__.Form.useForm(), 1), form = ref[0];\n    var ref1 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null), btnValue = ref1[0], setBtnValue = ref1[1];\n    var btnChange = function(e) {\n        setBtnValue(e.target.value);\n    };\n    var months = [];\n    for(var i = 1; i <= 12; i++){\n        months.push(i);\n    }\n    var days = [];\n    for(var i1 = 1; i1 <= 31; i1++){\n        days.push(i1);\n    }\n    var ref2 = _slicedToArray((0,_hooks_useInputTest__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"\"), 2), title = ref2[0], onChangeTitle = ref2[1];\n    var ref3 = _slicedToArray((0,_hooks_useInputTest__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"\"), 2), purpose = ref3[0], onChangePurpose = ref3[1];\n    // 추가하기\n    var ref4 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\"), event = ref4[0], setEvent = ref4[1];\n    var onChangeEvent = function(v) {\n        setEvent(v);\n    };\n    var ref5 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        year: \"\",\n        month: \"\",\n        day: \"\"\n    }), start = ref5[0], setStart = ref5[1];\n    var onChangeStartYear = function(date) {\n        var dateString = moment__WEBPACK_IMPORTED_MODULE_3___default()(date).format(\"YYYY\");\n        setStart(_objectSpread({}, start, {\n            year: dateString\n        }));\n    };\n    var onChangeStartMonth = function(e) {\n        setStart(_objectSpread({}, start, {\n            month: e\n        }));\n    };\n    var onChangeStartDay = function(e) {\n        setStart(_objectSpread({}, start, {\n            day: e\n        }));\n    };\n    var ref6 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        year: \"\",\n        month: \"\",\n        day: \"\"\n    }), end = ref6[0], setEnd = ref6[1];\n    var onChangeEndYear = function(date) {\n        var dateString = moment__WEBPACK_IMPORTED_MODULE_3___default()(date).format(\"YYYY\");\n        setEnd(_objectSpread({}, end, {\n            year: dateString\n        }));\n    };\n    var onChangeEndMonth = function(e) {\n        setEnd(_objectSpread({}, end, {\n            month: e\n        }));\n    };\n    var onChangeEndDay = function(e) {\n        setEnd(_objectSpread({}, end, {\n            day: e\n        }));\n    };\n    // 여기까지\n    var dispatch = (0,react_redux__WEBPACK_IMPORTED_MODULE_4__.useDispatch)();\n    var onSubmit = function() {\n        var body = {\n            title: title,\n            event: event,\n            purpose: purpose,\n            start: start.year + \"-\" + start.month + \"-\" + start.day,\n            end: end.year + \"-\" + end.month + \"-\" + end.day\n        };\n        console.log(body);\n        dispatch({\n            type: _reducers_user__WEBPACK_IMPORTED_MODULE_5__.GOAL_REQUEST,\n            data: body\n        });\n        // dispatch({\n        //     type:ALL_GOAL_REQUEST\n        // })\n        window.location.href = \"/musclePurpose\";\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n        setIsModal(false);\n    }, [\n        goalpurpose\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ModalWrapper, {\n        visible: isModal,\n        onCancel: openModal,\n        footer: null,\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(TitleDiv, {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        children: \"\\uC6B4\\uB3D9\\uBAA9\\uD45C\\uC124\\uC815\"\n                    }, void 0, false, {\n                        fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                        lineNumber: 135,\n                        columnNumber: 9\n                    }, _this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                        children: \"\\uAC04\\uB2E8\\uD569\\uB2C8\\uB2E4\"\n                    }, void 0, false, {\n                        fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                        lineNumber: 136,\n                        columnNumber: 9\n                    }, _this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                lineNumber: 134,\n                columnNumber: 7\n            }, _this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(FormWrapper, {\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_6__.Form, {\n                    onFinish: onSubmit,\n                    layout: \"horizontal\",\n                    form: form,\n                    size: \"large\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(MaleFemale, {\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_6__.Select, {\n                                placeholder: \"\\uC885\\uBAA9\",\n                                onChange: onChangeEvent,\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Option, {\n                                        value: \"B\",\n                                        children: \"\\uC790\\uC804\\uAC70\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                                        lineNumber: 143,\n                                        columnNumber: 15\n                                    }, _this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Option, {\n                                        value: \"R\",\n                                        children: \"\\uB7EC\\uB2DD\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                                        lineNumber: 144,\n                                        columnNumber: 15\n                                    }, _this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                                lineNumber: 142,\n                                columnNumber: 13\n                            }, _this)\n                        }, void 0, false, {\n                            fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                            lineNumber: 141,\n                            columnNumber: 11\n                        }, _this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(SmallTitle, {\n                            children: \"\\uC81C\\uBAA9\"\n                        }, void 0, false, {\n                            fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                            lineNumber: 148,\n                            columnNumber: 11\n                        }, _this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_6__.Form.Item, {\n                            rules: [\n                                {\n                                    required: true\n                                }\n                            ],\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_6__.Input, {\n                                value: title,\n                                onChange: onChangeTitle,\n                                placeholder: \"\\uC81C\\uBAA9\"\n                            }, void 0, false, {\n                                fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                                lineNumber: 150,\n                                columnNumber: 13\n                            }, _this)\n                        }, void 0, false, {\n                            fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                            lineNumber: 149,\n                            columnNumber: 11\n                        }, _this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(SmallTitle, {\n                            children: \"\\uC6B4\\uB3D9\\uBAA9\\uD45C\"\n                        }, void 0, false, {\n                            fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                            lineNumber: 156,\n                            columnNumber: 11\n                        }, _this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_6__.Form.Item, {\n                            rules: [\n                                {\n                                    required: true\n                                }\n                            ],\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_6__.Input, {\n                                value: purpose,\n                                onChange: onChangePurpose,\n                                placeholder: \"\\uBAA9\\uD45Ckm\"\n                            }, void 0, false, {\n                                fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                                lineNumber: 158,\n                                columnNumber: 13\n                            }, _this)\n                        }, void 0, false, {\n                            fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                            lineNumber: 157,\n                            columnNumber: 11\n                        }, _this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(SmallTitle, {\n                            children: \"\\uC2DC\\uC791\\uB0A0\\uC9DC\"\n                        }, void 0, false, {\n                            fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                            lineNumber: 165,\n                            columnNumber: 11\n                        }, _this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(SpaceWrapper, {\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_6__.DatePicker, {\n                                    picker: \"year\",\n                                    onChange: onChangeStartYear,\n                                    placeholder: \"\\uB144\\uB3C4\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                                    lineNumber: 167,\n                                    columnNumber: 13\n                                }, _this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_6__.Select, {\n                                    name: \"month\",\n                                    placeholder: \"\\uC6D4\",\n                                    onChange: onChangeStartMonth,\n                                    children: months.map(function(month, index) {\n                                        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Option, {\n                                            children: month\n                                        }, \"\".concat(index + 1), false, {\n                                            fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                                            lineNumber: 175,\n                                            columnNumber: 17\n                                        }, _this1);\n                                    })\n                                }, void 0, false, {\n                                    fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                                    lineNumber: 173,\n                                    columnNumber: 13\n                                }, _this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_6__.Select, {\n                                    name: \"day\",\n                                    placeholder: \"\\uC77C\",\n                                    onChange: onChangeStartDay,\n                                    children: days.map(function(day, index) {\n                                        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Option, {\n                                            children: day\n                                        }, \"\".concat(index + 1), false, {\n                                            fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                                            lineNumber: 180,\n                                            columnNumber: 17\n                                        }, _this1);\n                                    })\n                                }, void 0, false, {\n                                    fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                                    lineNumber: 178,\n                                    columnNumber: 13\n                                }, _this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                            lineNumber: 166,\n                            columnNumber: 11\n                        }, _this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(SmallTitle, {\n                            children: \"\\uB05D\\uB098\\uB294\\uB0A0\\uC9DC\"\n                        }, void 0, false, {\n                            fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                            lineNumber: 184,\n                            columnNumber: 11\n                        }, _this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(SpaceWrapper, {\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_6__.DatePicker, {\n                                    picker: \"year\",\n                                    onChange: onChangeEndYear,\n                                    placeholder: \"\\uB144\\uB3C4\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                                    lineNumber: 186,\n                                    columnNumber: 13\n                                }, _this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_6__.Select, {\n                                    name: \"month\",\n                                    placeholder: \"\\uC6D4\",\n                                    onChange: onChangeEndMonth,\n                                    children: months.map(function(month, index) {\n                                        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Option, {\n                                            children: month\n                                        }, \"\".concat(index + 1), false, {\n                                            fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                                            lineNumber: 194,\n                                            columnNumber: 17\n                                        }, _this1);\n                                    })\n                                }, void 0, false, {\n                                    fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                                    lineNumber: 192,\n                                    columnNumber: 13\n                                }, _this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_6__.Select, {\n                                    name: \"day\",\n                                    placeholder: \"\\uC77C\",\n                                    onChange: onChangeEndDay,\n                                    children: days.map(function(day, index) {\n                                        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Option, {\n                                            children: day\n                                        }, \"\".concat(index + 1), false, {\n                                            fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                                            lineNumber: 199,\n                                            columnNumber: 17\n                                        }, _this1);\n                                    })\n                                }, void 0, false, {\n                                    fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                                    lineNumber: 197,\n                                    columnNumber: 13\n                                }, _this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                            lineNumber: 185,\n                            columnNumber: 11\n                        }, _this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_6__.Form.Item, {\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(antd__WEBPACK_IMPORTED_MODULE_6__.Button, {\n                                type: \"default\",\n                                htmlType: \"submit\",\n                                children: \"\\uC124\\uC815\"\n                            }, void 0, false, {\n                                fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                                lineNumber: 205,\n                                columnNumber: 13\n                            }, _this)\n                        }, void 0, false, {\n                            fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                            lineNumber: 204,\n                            columnNumber: 11\n                        }, _this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                    lineNumber: 139,\n                    columnNumber: 9\n                }, _this)\n            }, void 0, false, {\n                fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n                lineNumber: 138,\n                columnNumber: 7\n            }, _this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/dong/CAPSTONE_UPDATE/pages/purposeModal.js\",\n        lineNumber: 133,\n        columnNumber: 5\n    }, _this);\n};\n_s(Signup, \"Qmlp5mVaAv96Nh8qe/QOeeFYBmg=\", false, function() {\n    return [\n        react_redux__WEBPACK_IMPORTED_MODULE_4__.useSelector,\n        antd__WEBPACK_IMPORTED_MODULE_6__.Form.useForm,\n        _hooks_useInputTest__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n        _hooks_useInputTest__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n        react_redux__WEBPACK_IMPORTED_MODULE_4__.useDispatch\n    ];\n});\n_c = Signup;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Signup);\n// const BtnWrapper = styled.div` 제거하기\n//   // display: flex;\n//   // justify-content: start;\n//   // margin-top: 10px;\n//   .ant-radio-wrapper {\n//     height: 38px;\n//     line-height: 38px;\n//     padding: 0 5px;\n//     border: 1px solid #ccd0d5;\n//     border-radius: 5px;\n//   }\n// `;\nvar SmallTitle = styled_components__WEBPACK_IMPORTED_MODULE_7__[\"default\"].div(_templateObject());\n_c1 = SmallTitle;\n// const SmallSecondTitle = styled(SmallTitle)` 제거\n//   margin-top: 10px;\n// `;\n// 추가하기\nvar SpaceWrapper = (0,styled_components__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(antd__WEBPACK_IMPORTED_MODULE_6__.Space)(_templateObject1());\n_c2 = SpaceWrapper;\nvar FormWrapper = styled_components__WEBPACK_IMPORTED_MODULE_7__[\"default\"].div(_templateObject2());\n_c3 = FormWrapper;\nvar FirstName = (0,styled_components__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(antd__WEBPACK_IMPORTED_MODULE_6__.Form.Item)(_templateObject3());\nvar SecondName = (0,styled_components__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(FirstName)(_templateObject4());\nvar MaleFemale = (0,styled_components__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(SecondName)(_templateObject5());\n_c4 = MaleFemale;\nvar TitleDiv = styled_components__WEBPACK_IMPORTED_MODULE_7__[\"default\"].div(_templateObject6());\n_c5 = TitleDiv;\nvar ModalWrapper = (0,styled_components__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(antd__WEBPACK_IMPORTED_MODULE_6__.Modal)(_templateObject7());\n_c6 = ModalWrapper;\nvar _c, _c1, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"Signup\");\n$RefreshReg$(_c1, \"SmallTitle\");\n$RefreshReg$(_c2, \"SpaceWrapper\");\n$RefreshReg$(_c3, \"FormWrapper\");\n$RefreshReg$(_c4, \"MaleFemale\");\n$RefreshReg$(_c5, \"TitleDiv\");\n$RefreshReg$(_c6, \"ModalWrapper\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/purposeModal.js\n");

/***/ }),

/***/ "./node_modules/@fullcalendar/common/main.js":
/*!***************************************************!*\
  !*** ./node_modules/@fullcalendar/common/main.js ***!
  \***************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BASE_OPTION_DEFAULTS\": function() { return /* binding */ BASE_OPTION_DEFAULTS; },\n/* harmony export */   \"BASE_OPTION_REFINERS\": function() { return /* binding */ BASE_OPTION_REFINERS; },\n/* harmony export */   \"BaseComponent\": function() { return /* binding */ BaseComponent1; },\n/* harmony export */   \"BgEvent\": function() { return /* binding */ BgEvent; },\n/* harmony export */   \"CalendarApi\": function() { return /* binding */ CalendarApi1; },\n/* harmony export */   \"CalendarContent\": function() { return /* binding */ CalendarContent1; },\n/* harmony export */   \"CalendarDataManager\": function() { return /* binding */ CalendarDataManager1; },\n/* harmony export */   \"CalendarDataProvider\": function() { return /* binding */ CalendarDataProvider1; },\n/* harmony export */   \"CalendarRoot\": function() { return /* binding */ CalendarRoot1; },\n/* harmony export */   \"ContentHook\": function() { return /* binding */ ContentHook; },\n/* harmony export */   \"CustomContentRenderContext\": function() { return /* binding */ CustomContentRenderContext; },\n/* harmony export */   \"DateComponent\": function() { return /* binding */ DateComponent1; },\n/* harmony export */   \"DateEnv\": function() { return /* binding */ DateEnv1; },\n/* harmony export */   \"DateProfileGenerator\": function() { return /* binding */ DateProfileGenerator1; },\n/* harmony export */   \"DayCellContent\": function() { return /* binding */ DayCellContent1; },\n/* harmony export */   \"DayCellRoot\": function() { return /* binding */ DayCellRoot1; },\n/* harmony export */   \"DayHeader\": function() { return /* binding */ DayHeader1; },\n/* harmony export */   \"DaySeriesModel\": function() { return /* binding */ DaySeriesModel1; },\n/* harmony export */   \"DayTableModel\": function() { return /* binding */ DayTableModel1; },\n/* harmony export */   \"DelayedRunner\": function() { return /* binding */ DelayedRunner1; },\n/* harmony export */   \"ElementDragging\": function() { return /* binding */ ElementDragging1; },\n/* harmony export */   \"ElementScrollController\": function() { return /* binding */ ElementScrollController1; },\n/* harmony export */   \"Emitter\": function() { return /* binding */ Emitter1; },\n/* harmony export */   \"EventApi\": function() { return /* binding */ EventApi1; },\n/* harmony export */   \"EventRoot\": function() { return /* binding */ EventRoot1; },\n/* harmony export */   \"EventSourceApi\": function() { return /* binding */ EventSourceApi1; },\n/* harmony export */   \"Interaction\": function() { return /* binding */ Interaction1; },\n/* harmony export */   \"MoreLinkRoot\": function() { return /* binding */ MoreLinkRoot1; },\n/* harmony export */   \"MountHook\": function() { return /* binding */ MountHook1; },\n/* harmony export */   \"NamedTimeZoneImpl\": function() { return /* binding */ NamedTimeZoneImpl1; },\n/* harmony export */   \"NowIndicatorRoot\": function() { return /* binding */ NowIndicatorRoot; },\n/* harmony export */   \"NowTimer\": function() { return /* binding */ NowTimer1; },\n/* harmony export */   \"PositionCache\": function() { return /* binding */ PositionCache1; },\n/* harmony export */   \"RefMap\": function() { return /* binding */ RefMap1; },\n/* harmony export */   \"RenderHook\": function() { return /* binding */ RenderHook1; },\n/* harmony export */   \"ScrollController\": function() { return /* binding */ ScrollController1; },\n/* harmony export */   \"ScrollResponder\": function() { return /* binding */ ScrollResponder1; },\n/* harmony export */   \"Scroller\": function() { return /* binding */ Scroller1; },\n/* harmony export */   \"SegHierarchy\": function() { return /* binding */ SegHierarchy1; },\n/* harmony export */   \"SimpleScrollGrid\": function() { return /* binding */ SimpleScrollGrid1; },\n/* harmony export */   \"Slicer\": function() { return /* binding */ Slicer1; },\n/* harmony export */   \"Splitter\": function() { return /* binding */ Splitter1; },\n/* harmony export */   \"StandardEvent\": function() { return /* binding */ StandardEvent1; },\n/* harmony export */   \"TableDateCell\": function() { return /* binding */ TableDateCell1; },\n/* harmony export */   \"TableDowCell\": function() { return /* binding */ TableDowCell1; },\n/* harmony export */   \"Theme\": function() { return /* binding */ Theme1; },\n/* harmony export */   \"ViewApi\": function() { return /* binding */ ViewApi1; },\n/* harmony export */   \"ViewContextType\": function() { return /* binding */ ViewContextType; },\n/* harmony export */   \"ViewRoot\": function() { return /* binding */ ViewRoot1; },\n/* harmony export */   \"WeekNumberRoot\": function() { return /* binding */ WeekNumberRoot; },\n/* harmony export */   \"WindowScrollController\": function() { return /* binding */ WindowScrollController1; },\n/* harmony export */   \"addDays\": function() { return /* binding */ addDays; },\n/* harmony export */   \"addDurations\": function() { return /* binding */ addDurations; },\n/* harmony export */   \"addMs\": function() { return /* binding */ addMs; },\n/* harmony export */   \"addWeeks\": function() { return /* binding */ addWeeks; },\n/* harmony export */   \"allowContextMenu\": function() { return /* binding */ allowContextMenu; },\n/* harmony export */   \"allowSelection\": function() { return /* binding */ allowSelection; },\n/* harmony export */   \"applyMutationToEventStore\": function() { return /* binding */ applyMutationToEventStore; },\n/* harmony export */   \"applyStyle\": function() { return /* binding */ applyStyle; },\n/* harmony export */   \"applyStyleProp\": function() { return /* binding */ applyStyleProp; },\n/* harmony export */   \"asCleanDays\": function() { return /* binding */ asCleanDays; },\n/* harmony export */   \"asRoughMinutes\": function() { return /* binding */ asRoughMinutes; },\n/* harmony export */   \"asRoughMs\": function() { return /* binding */ asRoughMs; },\n/* harmony export */   \"asRoughSeconds\": function() { return /* binding */ asRoughSeconds; },\n/* harmony export */   \"binarySearch\": function() { return /* binding */ binarySearch; },\n/* harmony export */   \"buildClassNameNormalizer\": function() { return /* binding */ buildClassNameNormalizer; },\n/* harmony export */   \"buildEntryKey\": function() { return /* binding */ buildEntryKey; },\n/* harmony export */   \"buildEventApis\": function() { return /* binding */ buildEventApis; },\n/* harmony export */   \"buildEventRangeKey\": function() { return /* binding */ buildEventRangeKey; },\n/* harmony export */   \"buildHashFromArray\": function() { return /* binding */ buildHashFromArray; },\n/* harmony export */   \"buildIsoString\": function() { return /* binding */ buildIsoString; },\n/* harmony export */   \"buildNavLinkAttrs\": function() { return /* binding */ buildNavLinkAttrs; },\n/* harmony export */   \"buildSegCompareObj\": function() { return /* binding */ buildSegCompareObj; },\n/* harmony export */   \"buildSegTimeText\": function() { return /* binding */ buildSegTimeText; },\n/* harmony export */   \"collectFromHash\": function() { return /* binding */ collectFromHash; },\n/* harmony export */   \"combineEventUis\": function() { return /* binding */ combineEventUis; },\n/* harmony export */   \"compareByFieldSpec\": function() { return /* binding */ compareByFieldSpec; },\n/* harmony export */   \"compareByFieldSpecs\": function() { return /* binding */ compareByFieldSpecs; },\n/* harmony export */   \"compareNumbers\": function() { return /* binding */ compareNumbers; },\n/* harmony export */   \"compareObjs\": function() { return /* binding */ compareObjs; },\n/* harmony export */   \"computeEarliestSegStart\": function() { return /* binding */ computeEarliestSegStart; },\n/* harmony export */   \"computeEdges\": function() { return /* binding */ computeEdges; },\n/* harmony export */   \"computeFallbackHeaderFormat\": function() { return /* binding */ computeFallbackHeaderFormat; },\n/* harmony export */   \"computeHeightAndMargins\": function() { return /* binding */ computeHeightAndMargins; },\n/* harmony export */   \"computeInnerRect\": function() { return /* binding */ computeInnerRect; },\n/* harmony export */   \"computeRect\": function() { return /* binding */ computeRect; },\n/* harmony export */   \"computeSegDraggable\": function() { return /* binding */ computeSegDraggable; },\n/* harmony export */   \"computeSegEndResizable\": function() { return /* binding */ computeSegEndResizable; },\n/* harmony export */   \"computeSegStartResizable\": function() { return /* binding */ computeSegStartResizable; },\n/* harmony export */   \"computeShrinkWidth\": function() { return /* binding */ computeShrinkWidth; },\n/* harmony export */   \"computeSmallestCellWidth\": function() { return /* binding */ computeSmallestCellWidth; },\n/* harmony export */   \"computeVisibleDayRange\": function() { return /* binding */ computeVisibleDayRange; },\n/* harmony export */   \"config\": function() { return /* binding */ config; },\n/* harmony export */   \"constrainPoint\": function() { return /* binding */ constrainPoint; },\n/* harmony export */   \"createAriaClickAttrs\": function() { return /* binding */ createAriaClickAttrs; },\n/* harmony export */   \"createDuration\": function() { return /* binding */ createDuration; },\n/* harmony export */   \"createEmptyEventStore\": function() { return /* binding */ createEmptyEventStore; },\n/* harmony export */   \"createEventInstance\": function() { return /* binding */ createEventInstance; },\n/* harmony export */   \"createEventUi\": function() { return /* binding */ createEventUi; },\n/* harmony export */   \"createFormatter\": function() { return /* binding */ createFormatter; },\n/* harmony export */   \"createPlugin\": function() { return /* binding */ createPlugin; },\n/* harmony export */   \"diffDates\": function() { return /* binding */ diffDates; },\n/* harmony export */   \"diffDayAndTime\": function() { return /* binding */ diffDayAndTime; },\n/* harmony export */   \"diffDays\": function() { return /* binding */ diffDays; },\n/* harmony export */   \"diffPoints\": function() { return /* binding */ diffPoints; },\n/* harmony export */   \"diffWeeks\": function() { return /* binding */ diffWeeks; },\n/* harmony export */   \"diffWholeDays\": function() { return /* binding */ diffWholeDays; },\n/* harmony export */   \"diffWholeWeeks\": function() { return /* binding */ diffWholeWeeks; },\n/* harmony export */   \"disableCursor\": function() { return /* binding */ disableCursor; },\n/* harmony export */   \"elementClosest\": function() { return /* binding */ elementClosest; },\n/* harmony export */   \"elementMatches\": function() { return /* binding */ elementMatches; },\n/* harmony export */   \"enableCursor\": function() { return /* binding */ enableCursor; },\n/* harmony export */   \"eventTupleToStore\": function() { return /* binding */ eventTupleToStore; },\n/* harmony export */   \"filterEventStoreDefs\": function() { return /* binding */ filterEventStoreDefs; },\n/* harmony export */   \"filterHash\": function() { return /* binding */ filterHash; },\n/* harmony export */   \"findDirectChildren\": function() { return /* binding */ findDirectChildren; },\n/* harmony export */   \"findElements\": function() { return /* binding */ findElements; },\n/* harmony export */   \"flexibleCompare\": function() { return /* binding */ flexibleCompare; },\n/* harmony export */   \"formatDate\": function() { return /* binding */ formatDate; },\n/* harmony export */   \"formatDayString\": function() { return /* binding */ formatDayString; },\n/* harmony export */   \"formatIsoTimeString\": function() { return /* binding */ formatIsoTimeString; },\n/* harmony export */   \"formatRange\": function() { return /* binding */ formatRange; },\n/* harmony export */   \"getAllowYScrolling\": function() { return /* binding */ getAllowYScrolling; },\n/* harmony export */   \"getCanVGrowWithinCell\": function() { return /* binding */ getCanVGrowWithinCell; },\n/* harmony export */   \"getClippingParents\": function() { return /* binding */ getClippingParents; },\n/* harmony export */   \"getDateMeta\": function() { return /* binding */ getDateMeta; },\n/* harmony export */   \"getDayClassNames\": function() { return /* binding */ getDayClassNames; },\n/* harmony export */   \"getDefaultEventEnd\": function() { return /* binding */ getDefaultEventEnd; },\n/* harmony export */   \"getElRoot\": function() { return /* binding */ getElRoot; },\n/* harmony export */   \"getElSeg\": function() { return /* binding */ getElSeg; },\n/* harmony export */   \"getEntrySpanEnd\": function() { return /* binding */ getEntrySpanEnd; },\n/* harmony export */   \"getEventClassNames\": function() { return /* binding */ getEventClassNames; },\n/* harmony export */   \"getEventTargetViaRoot\": function() { return /* binding */ getEventTargetViaRoot; },\n/* harmony export */   \"getIsRtlScrollbarOnLeft\": function() { return /* binding */ getIsRtlScrollbarOnLeft; },\n/* harmony export */   \"getRectCenter\": function() { return /* binding */ getRectCenter; },\n/* harmony export */   \"getRelevantEvents\": function() { return /* binding */ getRelevantEvents; },\n/* harmony export */   \"getScrollGridClassNames\": function() { return /* binding */ getScrollGridClassNames; },\n/* harmony export */   \"getScrollbarWidths\": function() { return /* binding */ getScrollbarWidths; },\n/* harmony export */   \"getSectionClassNames\": function() { return /* binding */ getSectionClassNames; },\n/* harmony export */   \"getSectionHasLiquidHeight\": function() { return /* binding */ getSectionHasLiquidHeight; },\n/* harmony export */   \"getSegAnchorAttrs\": function() { return /* binding */ getSegAnchorAttrs; },\n/* harmony export */   \"getSegMeta\": function() { return /* binding */ getSegMeta; },\n/* harmony export */   \"getSlotClassNames\": function() { return /* binding */ getSlotClassNames; },\n/* harmony export */   \"getStickyFooterScrollbar\": function() { return /* binding */ getStickyFooterScrollbar; },\n/* harmony export */   \"getStickyHeaderDates\": function() { return /* binding */ getStickyHeaderDates; },\n/* harmony export */   \"getUnequalProps\": function() { return /* binding */ getUnequalProps; },\n/* harmony export */   \"getUniqueDomId\": function() { return /* binding */ getUniqueDomId; },\n/* harmony export */   \"globalLocales\": function() { return /* binding */ globalLocales; },\n/* harmony export */   \"globalPlugins\": function() { return /* binding */ globalPlugins; },\n/* harmony export */   \"greatestDurationDenominator\": function() { return /* binding */ greatestDurationDenominator; },\n/* harmony export */   \"groupIntersectingEntries\": function() { return /* binding */ groupIntersectingEntries; },\n/* harmony export */   \"guid\": function() { return /* binding */ guid; },\n/* harmony export */   \"hasBgRendering\": function() { return /* binding */ hasBgRendering; },\n/* harmony export */   \"hasShrinkWidth\": function() { return /* binding */ hasShrinkWidth; },\n/* harmony export */   \"identity\": function() { return /* binding */ identity; },\n/* harmony export */   \"interactionSettingsStore\": function() { return /* binding */ interactionSettingsStore; },\n/* harmony export */   \"interactionSettingsToStore\": function() { return /* binding */ interactionSettingsToStore; },\n/* harmony export */   \"intersectRanges\": function() { return /* binding */ intersectRanges; },\n/* harmony export */   \"intersectRects\": function() { return /* binding */ intersectRects; },\n/* harmony export */   \"intersectSpans\": function() { return /* binding */ intersectSpans; },\n/* harmony export */   \"isArraysEqual\": function() { return /* binding */ isArraysEqual; },\n/* harmony export */   \"isColPropsEqual\": function() { return /* binding */ isColPropsEqual; },\n/* harmony export */   \"isDateSelectionValid\": function() { return /* binding */ isDateSelectionValid; },\n/* harmony export */   \"isDateSpansEqual\": function() { return /* binding */ isDateSpansEqual; },\n/* harmony export */   \"isInt\": function() { return /* binding */ isInt; },\n/* harmony export */   \"isInteractionValid\": function() { return /* binding */ isInteractionValid; },\n/* harmony export */   \"isMultiDayRange\": function() { return /* binding */ isMultiDayRange; },\n/* harmony export */   \"isPropsEqual\": function() { return /* binding */ isPropsEqual; },\n/* harmony export */   \"isPropsValid\": function() { return /* binding */ isPropsValid; },\n/* harmony export */   \"isValidDate\": function() { return /* binding */ isValidDate; },\n/* harmony export */   \"joinSpans\": function() { return /* binding */ joinSpans; },\n/* harmony export */   \"listenBySelector\": function() { return /* binding */ listenBySelector; },\n/* harmony export */   \"mapHash\": function() { return /* binding */ mapHash; },\n/* harmony export */   \"memoize\": function() { return /* binding */ memoize; },\n/* harmony export */   \"memoizeArraylike\": function() { return /* binding */ memoizeArraylike; },\n/* harmony export */   \"memoizeHashlike\": function() { return /* binding */ memoizeHashlike; },\n/* harmony export */   \"memoizeObjArg\": function() { return /* binding */ memoizeObjArg; },\n/* harmony export */   \"mergeEventStores\": function() { return /* binding */ mergeEventStores; },\n/* harmony export */   \"multiplyDuration\": function() { return /* binding */ multiplyDuration; },\n/* harmony export */   \"padStart\": function() { return /* binding */ padStart; },\n/* harmony export */   \"parseBusinessHours\": function() { return /* binding */ parseBusinessHours; },\n/* harmony export */   \"parseClassNames\": function() { return /* binding */ parseClassNames; },\n/* harmony export */   \"parseDragMeta\": function() { return /* binding */ parseDragMeta; },\n/* harmony export */   \"parseEventDef\": function() { return /* binding */ parseEventDef; },\n/* harmony export */   \"parseFieldSpecs\": function() { return /* binding */ parseFieldSpecs; },\n/* harmony export */   \"parseMarker\": function() { return /* binding */ parse; },\n/* harmony export */   \"pointInsideRect\": function() { return /* binding */ pointInsideRect; },\n/* harmony export */   \"preventContextMenu\": function() { return /* binding */ preventContextMenu; },\n/* harmony export */   \"preventDefault\": function() { return /* binding */ preventDefault; },\n/* harmony export */   \"preventSelection\": function() { return /* binding */ preventSelection; },\n/* harmony export */   \"rangeContainsMarker\": function() { return /* binding */ rangeContainsMarker; },\n/* harmony export */   \"rangeContainsRange\": function() { return /* binding */ rangeContainsRange; },\n/* harmony export */   \"rangesEqual\": function() { return /* binding */ rangesEqual; },\n/* harmony export */   \"rangesIntersect\": function() { return /* binding */ rangesIntersect; },\n/* harmony export */   \"refineEventDef\": function() { return /* binding */ refineEventDef; },\n/* harmony export */   \"refineProps\": function() { return /* binding */ refineProps; },\n/* harmony export */   \"removeElement\": function() { return /* binding */ removeElement; },\n/* harmony export */   \"removeExact\": function() { return /* binding */ removeExact; },\n/* harmony export */   \"renderChunkContent\": function() { return /* binding */ renderChunkContent; },\n/* harmony export */   \"renderFill\": function() { return /* binding */ renderFill; },\n/* harmony export */   \"renderMicroColGroup\": function() { return /* binding */ renderMicroColGroup; },\n/* harmony export */   \"renderScrollShim\": function() { return /* binding */ renderScrollShim; },\n/* harmony export */   \"requestJson\": function() { return /* binding */ requestJson; },\n/* harmony export */   \"sanitizeShrinkWidth\": function() { return /* binding */ sanitizeShrinkWidth; },\n/* harmony export */   \"setElSeg\": function() { return /* binding */ setElSeg; },\n/* harmony export */   \"setRef\": function() { return /* binding */ setRef; },\n/* harmony export */   \"sliceEventStore\": function() { return /* binding */ sliceEventStore; },\n/* harmony export */   \"sliceEvents\": function() { return /* binding */ sliceEvents; },\n/* harmony export */   \"sortEventSegs\": function() { return /* binding */ sortEventSegs; },\n/* harmony export */   \"startOfDay\": function() { return /* binding */ startOfDay; },\n/* harmony export */   \"translateRect\": function() { return /* binding */ translateRect; },\n/* harmony export */   \"triggerDateSelect\": function() { return /* binding */ triggerDateSelect; },\n/* harmony export */   \"unpromisify\": function() { return /* binding */ unpromisify; },\n/* harmony export */   \"version\": function() { return /* binding */ version; },\n/* harmony export */   \"whenTransitionDone\": function() { return /* binding */ whenTransitionDone; },\n/* harmony export */   \"wholeDivideDurations\": function() { return /* binding */ wholeDivideDurations; }\n/* harmony export */ });\n/* harmony import */ var _main_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./main.css */ \"./node_modules/@fullcalendar/common/main.css\");\n/* harmony import */ var _main_css__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_main_css__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _vdom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vdom.js */ \"./node_modules/@fullcalendar/common/vdom.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _vdom_js__WEBPACK_IMPORTED_MODULE_1__) if([\"default\",\"BASE_OPTION_DEFAULTS\",\"BASE_OPTION_REFINERS\",\"BaseComponent\",\"BgEvent\",\"CalendarApi\",\"CalendarContent\",\"CalendarDataManager\",\"CalendarDataProvider\",\"CalendarRoot\",\"ContentHook\",\"CustomContentRenderContext\",\"DateComponent\",\"DateEnv\",\"DateProfileGenerator\",\"DayCellContent\",\"DayCellRoot\",\"DayHeader\",\"DaySeriesModel\",\"DayTableModel\",\"DelayedRunner\",\"ElementDragging\",\"ElementScrollController\",\"Emitter\",\"EventApi\",\"EventRoot\",\"EventSourceApi\",\"Interaction\",\"MoreLinkRoot\",\"MountHook\",\"NamedTimeZoneImpl\",\"NowIndicatorRoot\",\"NowTimer\",\"PositionCache\",\"RefMap\",\"RenderHook\",\"ScrollController\",\"ScrollResponder\",\"Scroller\",\"SegHierarchy\",\"SimpleScrollGrid\",\"Slicer\",\"Splitter\",\"StandardEvent\",\"TableDateCell\",\"TableDowCell\",\"Theme\",\"ViewApi\",\"ViewContextType\",\"ViewRoot\",\"WeekNumberRoot\",\"WindowScrollController\",\"addDays\",\"addDurations\",\"addMs\",\"addWeeks\",\"allowContextMenu\",\"allowSelection\",\"applyMutationToEventStore\",\"applyStyle\",\"applyStyleProp\",\"asCleanDays\",\"asRoughMinutes\",\"asRoughMs\",\"asRoughSeconds\",\"binarySearch\",\"buildClassNameNormalizer\",\"buildEntryKey\",\"buildEventApis\",\"buildEventRangeKey\",\"buildHashFromArray\",\"buildIsoString\",\"buildNavLinkAttrs\",\"buildSegCompareObj\",\"buildSegTimeText\",\"collectFromHash\",\"combineEventUis\",\"compareByFieldSpec\",\"compareByFieldSpecs\",\"compareNumbers\",\"compareObjs\",\"computeEarliestSegStart\",\"computeEdges\",\"computeFallbackHeaderFormat\",\"computeHeightAndMargins\",\"computeInnerRect\",\"computeRect\",\"computeSegDraggable\",\"computeSegEndResizable\",\"computeSegStartResizable\",\"computeShrinkWidth\",\"computeSmallestCellWidth\",\"computeVisibleDayRange\",\"config\",\"constrainPoint\",\"createAriaClickAttrs\",\"createDuration\",\"createEmptyEventStore\",\"createEventInstance\",\"createEventUi\",\"createFormatter\",\"createPlugin\",\"diffDates\",\"diffDayAndTime\",\"diffDays\",\"diffPoints\",\"diffWeeks\",\"diffWholeDays\",\"diffWholeWeeks\",\"disableCursor\",\"elementClosest\",\"elementMatches\",\"enableCursor\",\"eventTupleToStore\",\"filterEventStoreDefs\",\"filterHash\",\"findDirectChildren\",\"findElements\",\"flexibleCompare\",\"formatDate\",\"formatDayString\",\"formatIsoTimeString\",\"formatRange\",\"getAllowYScrolling\",\"getCanVGrowWithinCell\",\"getClippingParents\",\"getDateMeta\",\"getDayClassNames\",\"getDefaultEventEnd\",\"getElRoot\",\"getElSeg\",\"getEntrySpanEnd\",\"getEventClassNames\",\"getEventTargetViaRoot\",\"getIsRtlScrollbarOnLeft\",\"getRectCenter\",\"getRelevantEvents\",\"getScrollGridClassNames\",\"getScrollbarWidths\",\"getSectionClassNames\",\"getSectionHasLiquidHeight\",\"getSegAnchorAttrs\",\"getSegMeta\",\"getSlotClassNames\",\"getStickyFooterScrollbar\",\"getStickyHeaderDates\",\"getUnequalProps\",\"getUniqueDomId\",\"globalLocales\",\"globalPlugins\",\"greatestDurationDenominator\",\"groupIntersectingEntries\",\"guid\",\"hasBgRendering\",\"hasShrinkWidth\",\"identity\",\"interactionSettingsStore\",\"interactionSettingsToStore\",\"intersectRanges\",\"intersectRects\",\"intersectSpans\",\"isArraysEqual\",\"isColPropsEqual\",\"isDateSelectionValid\",\"isDateSpansEqual\",\"isInt\",\"isInteractionValid\",\"isMultiDayRange\",\"isPropsEqual\",\"isPropsValid\",\"isValidDate\",\"joinSpans\",\"listenBySelector\",\"mapHash\",\"memoize\",\"memoizeArraylike\",\"memoizeHashlike\",\"memoizeObjArg\",\"mergeEventStores\",\"multiplyDuration\",\"padStart\",\"parseBusinessHours\",\"parseClassNames\",\"parseDragMeta\",\"parseEventDef\",\"parseFieldSpecs\",\"parseMarker\",\"pointInsideRect\",\"preventContextMenu\",\"preventDefault\",\"preventSelection\",\"rangeContainsMarker\",\"rangeContainsRange\",\"rangesEqual\",\"rangesIntersect\",\"refineEventDef\",\"refineProps\",\"removeElement\",\"removeExact\",\"renderChunkContent\",\"renderFill\",\"renderMicroColGroup\",\"renderScrollShim\",\"requestJson\",\"sanitizeShrinkWidth\",\"setElSeg\",\"setRef\",\"sliceEventStore\",\"sliceEvents\",\"sortEventSegs\",\"startOfDay\",\"translateRect\",\"triggerDateSelect\",\"unpromisify\",\"version\",\"whenTransitionDone\",\"wholeDivideDurations\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _vdom_js__WEBPACK_IMPORTED_MODULE_1__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\nfunction _instanceof(left, right) {\n    if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n        return !!right[Symbol.hasInstance](left);\n    } else {\n        return left instanceof right;\n    }\n}\n/*!\nFullCalendar v5.10.2\nDocs & License: https://fullcalendar.io/\n(c) 2021 Adam Shaw\n*/ \n\n\n\n// no public types yet. when there are, export from:\n// import {} from './api-type-deps'\nvar EventSourceApi1 = /** @class */ function() {\n    var EventSourceApi = function EventSourceApi(context, internalEventSource) {\n        this.context = context;\n        this.internalEventSource = internalEventSource;\n    };\n    EventSourceApi.prototype.remove = function() {\n        this.context.dispatch({\n            type: \"REMOVE_EVENT_SOURCE\",\n            sourceId: this.internalEventSource.sourceId\n        });\n    };\n    EventSourceApi.prototype.refetch = function() {\n        this.context.dispatch({\n            type: \"FETCH_EVENT_SOURCES\",\n            sourceIds: [\n                this.internalEventSource.sourceId\n            ],\n            isRefetch: true\n        });\n    };\n    Object.defineProperty(EventSourceApi.prototype, \"id\", {\n        get: function get() {\n            return this.internalEventSource.publicId;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventSourceApi.prototype, \"url\", {\n        get: function get() {\n            return this.internalEventSource.meta.url;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventSourceApi.prototype, \"format\", {\n        get: function get() {\n            return this.internalEventSource.meta.format; // TODO: bad. not guaranteed\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return EventSourceApi;\n}();\nfunction removeElement(el) {\n    if (el.parentNode) {\n        el.parentNode.removeChild(el);\n    }\n}\n// Querying\n// ----------------------------------------------------------------------------------------------------------------\nfunction elementClosest(el, selector) {\n    if (el.closest) {\n        return el.closest(selector);\n    // really bad fallback for IE\n    // from https://developer.mozilla.org/en-US/docs/Web/API/Element/closest\n    }\n    if (!document.documentElement.contains(el)) {\n        return null;\n    }\n    do {\n        if (elementMatches(el, selector)) {\n            return el;\n        }\n        el = el.parentElement || el.parentNode;\n    }while (el !== null && el.nodeType === 1);\n    return null;\n}\nfunction elementMatches(el, selector) {\n    var method = el.matches || el.matchesSelector || el.msMatchesSelector;\n    return method.call(el, selector);\n}\n// accepts multiple subject els\n// returns a real array. good for methods like forEach\n// TODO: accept the document\nfunction findElements(container, selector) {\n    var containers = _instanceof(container, HTMLElement) ? [\n        container\n    ] : container;\n    var allMatches = [];\n    for(var i = 0; i < containers.length; i += 1){\n        var matches = containers[i].querySelectorAll(selector);\n        for(var j = 0; j < matches.length; j += 1){\n            allMatches.push(matches[j]);\n        }\n    }\n    return allMatches;\n}\n// accepts multiple subject els\n// only queries direct child elements // TODO: rename to findDirectChildren!\nfunction findDirectChildren(parent, selector) {\n    var parents = _instanceof(parent, HTMLElement) ? [\n        parent\n    ] : parent;\n    var allMatches = [];\n    for(var i = 0; i < parents.length; i += 1){\n        var childNodes = parents[i].children; // only ever elements\n        for(var j = 0; j < childNodes.length; j += 1){\n            var childNode = childNodes[j];\n            if (!selector || elementMatches(childNode, selector)) {\n                allMatches.push(childNode);\n            }\n        }\n    }\n    return allMatches;\n}\n// Style\n// ----------------------------------------------------------------------------------------------------------------\nvar PIXEL_PROP_RE = /(top|left|right|bottom|width|height)$/i;\nfunction applyStyle(el, props) {\n    for(var propName in props){\n        applyStyleProp(el, propName, props[propName]);\n    }\n}\nfunction applyStyleProp(el, name, val) {\n    if (val == null) {\n        el.style[name] = \"\";\n    } else if (typeof val === \"number\" && PIXEL_PROP_RE.test(name)) {\n        el.style[name] = val + \"px\";\n    } else {\n        el.style[name] = val;\n    }\n}\n// Event Handling\n// ----------------------------------------------------------------------------------------------------------------\n// if intercepting bubbled events at the document/window/body level,\n// and want to see originating element (the 'target'), use this util instead\n// of `ev.target` because it goes within web-component boundaries.\nfunction getEventTargetViaRoot(ev) {\n    var _a, _b;\n    return (_b = (_a = ev.composedPath) === null || _a === void 0 ? void 0 : _a.call(ev)[0]) !== null && _b !== void 0 ? _b : ev.target;\n}\n// Shadow DOM consuderations\n// ----------------------------------------------------------------------------------------------------------------\nfunction getElRoot(el) {\n    return el.getRootNode ? el.getRootNode() : document;\n}\n// Unique ID for DOM attribute\nvar guid$1 = 0;\nfunction getUniqueDomId() {\n    guid$1 += 1;\n    return \"fc-dom-\" + guid$1;\n}\n// Stops a mouse/touch event from doing it's native browser action\nfunction preventDefault(ev) {\n    ev.preventDefault();\n}\n// Event Delegation\n// ----------------------------------------------------------------------------------------------------------------\nfunction buildDelegationHandler(selector, handler) {\n    return function(ev) {\n        var matchedChild = elementClosest(ev.target, selector);\n        if (matchedChild) {\n            handler.call(matchedChild, ev, matchedChild);\n        }\n    };\n}\nfunction listenBySelector(container, eventType, selector, handler) {\n    var attachedHandler = buildDelegationHandler(selector, handler);\n    container.addEventListener(eventType, attachedHandler);\n    return function() {\n        container.removeEventListener(eventType, attachedHandler);\n    };\n}\nfunction listenToHoverBySelector(container, selector, onMouseEnter, onMouseLeave) {\n    var currentMatchedChild;\n    return listenBySelector(container, \"mouseover\", selector, function(mouseOverEv, matchedChild) {\n        if (matchedChild !== currentMatchedChild) {\n            currentMatchedChild = matchedChild;\n            onMouseEnter(mouseOverEv, matchedChild);\n            var realOnMouseLeave_1 = function(mouseLeaveEv) {\n                currentMatchedChild = null;\n                onMouseLeave(mouseLeaveEv, matchedChild);\n                matchedChild.removeEventListener(\"mouseleave\", realOnMouseLeave_1);\n            };\n            // listen to the next mouseleave, and then unattach\n            matchedChild.addEventListener(\"mouseleave\", realOnMouseLeave_1);\n        }\n    });\n}\n// Animation\n// ----------------------------------------------------------------------------------------------------------------\nvar transitionEventNames = [\n    \"webkitTransitionEnd\",\n    \"otransitionend\",\n    \"oTransitionEnd\",\n    \"msTransitionEnd\",\n    \"transitionend\", \n];\n// triggered only when the next single subsequent transition finishes\nfunction whenTransitionDone(el, callback) {\n    var realCallback = function(ev) {\n        callback(ev);\n        transitionEventNames.forEach(function(eventName) {\n            el.removeEventListener(eventName, realCallback);\n        });\n    };\n    transitionEventNames.forEach(function(eventName) {\n        el.addEventListener(eventName, realCallback); // cross-browser way to determine when the transition finishes\n    });\n}\n// ARIA workarounds\n// ----------------------------------------------------------------------------------------------------------------\nfunction createAriaClickAttrs(handler) {\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n        onClick: handler\n    }, createAriaKeyboardAttrs(handler));\n}\nfunction createAriaKeyboardAttrs(handler) {\n    return {\n        tabIndex: 0,\n        onKeyDown: function onKeyDown(ev) {\n            if (ev.key === \"Enter\" || ev.key === \" \") {\n                handler(ev);\n                ev.preventDefault(); // if space, don't scroll down page\n            }\n        }\n    };\n}\nvar guidNumber = 0;\nfunction guid() {\n    guidNumber += 1;\n    return String(guidNumber);\n}\n/* FullCalendar-specific DOM Utilities\n----------------------------------------------------------------------------------------------------------------------*/ // Make the mouse cursor express that an event is not allowed in the current area\nfunction disableCursor() {\n    document.body.classList.add(\"fc-not-allowed\");\n}\n// Returns the mouse cursor to its original look\nfunction enableCursor() {\n    document.body.classList.remove(\"fc-not-allowed\");\n}\n/* Selection\n----------------------------------------------------------------------------------------------------------------------*/ function preventSelection(el) {\n    el.classList.add(\"fc-unselectable\");\n    el.addEventListener(\"selectstart\", preventDefault);\n}\nfunction allowSelection(el) {\n    el.classList.remove(\"fc-unselectable\");\n    el.removeEventListener(\"selectstart\", preventDefault);\n}\n/* Context Menu\n----------------------------------------------------------------------------------------------------------------------*/ function preventContextMenu(el) {\n    el.addEventListener(\"contextmenu\", preventDefault);\n}\nfunction allowContextMenu(el) {\n    el.removeEventListener(\"contextmenu\", preventDefault);\n}\nfunction parseFieldSpecs(input) {\n    var specs = [];\n    var tokens = [];\n    var i;\n    var token;\n    if (typeof input === \"string\") {\n        tokens = input.split(/\\s*,\\s*/);\n    } else if (typeof input === \"function\") {\n        tokens = [\n            input\n        ];\n    } else if (Array.isArray(input)) {\n        tokens = input;\n    }\n    for(i = 0; i < tokens.length; i += 1){\n        token = tokens[i];\n        if (typeof token === \"string\") {\n            specs.push(token.charAt(0) === \"-\" ? {\n                field: token.substring(1),\n                order: -1\n            } : {\n                field: token,\n                order: 1\n            });\n        } else if (typeof token === \"function\") {\n            specs.push({\n                func: token\n            });\n        }\n    }\n    return specs;\n}\nfunction compareByFieldSpecs(obj0, obj1, fieldSpecs) {\n    var i;\n    var cmp;\n    for(i = 0; i < fieldSpecs.length; i += 1){\n        cmp = compareByFieldSpec(obj0, obj1, fieldSpecs[i]);\n        if (cmp) {\n            return cmp;\n        }\n    }\n    return 0;\n}\nfunction compareByFieldSpec(obj0, obj1, fieldSpec) {\n    if (fieldSpec.func) {\n        return fieldSpec.func(obj0, obj1);\n    }\n    return flexibleCompare(obj0[fieldSpec.field], obj1[fieldSpec.field]) * (fieldSpec.order || 1);\n}\nfunction flexibleCompare(a, b) {\n    if (!a && !b) {\n        return 0;\n    }\n    if (b == null) {\n        return -1;\n    }\n    if (a == null) {\n        return 1;\n    }\n    if (typeof a === \"string\" || typeof b === \"string\") {\n        return String(a).localeCompare(String(b));\n    }\n    return a - b;\n}\n/* String Utilities\n----------------------------------------------------------------------------------------------------------------------*/ function padStart(val, len) {\n    var s = String(val);\n    return \"000\".substr(0, len - s.length) + s;\n}\nfunction formatWithOrdinals(formatter, args, fallbackText) {\n    if (typeof formatter === \"function\") {\n        return formatter.apply(void 0, args);\n    }\n    if (typeof formatter === \"string\") {\n        return args.reduce(function(str, arg, index) {\n            return str.replace(\"$\" + index, arg || \"\");\n        }, formatter);\n    }\n    return fallbackText;\n}\n/* Number Utilities\n----------------------------------------------------------------------------------------------------------------------*/ function compareNumbers(a, b) {\n    return a - b;\n}\nfunction isInt(n) {\n    return n % 1 === 0;\n}\n/* FC-specific DOM dimension stuff\n----------------------------------------------------------------------------------------------------------------------*/ function computeSmallestCellWidth(cellEl) {\n    var allWidthEl = cellEl.querySelector(\".fc-scrollgrid-shrink-frame\");\n    var contentWidthEl = cellEl.querySelector(\".fc-scrollgrid-shrink-cushion\");\n    if (!allWidthEl) {\n        throw new Error(\"needs fc-scrollgrid-shrink-frame className\"); // TODO: use const\n    }\n    if (!contentWidthEl) {\n        throw new Error(\"needs fc-scrollgrid-shrink-cushion className\");\n    }\n    return cellEl.getBoundingClientRect().width - allWidthEl.getBoundingClientRect().width + contentWidthEl.getBoundingClientRect().width;\n}\nvar DAY_IDS = [\n    \"sun\",\n    \"mon\",\n    \"tue\",\n    \"wed\",\n    \"thu\",\n    \"fri\",\n    \"sat\"\n];\n// Adding\nfunction addWeeks(m, n) {\n    var a = dateToUtcArray(m);\n    a[2] += n * 7;\n    return arrayToUtcDate(a);\n}\nfunction addDays(m, n) {\n    var a = dateToUtcArray(m);\n    a[2] += n;\n    return arrayToUtcDate(a);\n}\nfunction addMs(m, n) {\n    var a = dateToUtcArray(m);\n    a[6] += n;\n    return arrayToUtcDate(a);\n}\n// Diffing (all return floats)\n// TODO: why not use ranges?\nfunction diffWeeks(m0, m1) {\n    return diffDays(m0, m1) / 7;\n}\nfunction diffDays(m0, m1) {\n    return (m1.valueOf() - m0.valueOf()) / (1000 * 60 * 60 * 24);\n}\nfunction diffHours(m0, m1) {\n    return (m1.valueOf() - m0.valueOf()) / (1000 * 60 * 60);\n}\nfunction diffMinutes(m0, m1) {\n    return (m1.valueOf() - m0.valueOf()) / (1000 * 60);\n}\nfunction diffSeconds(m0, m1) {\n    return (m1.valueOf() - m0.valueOf()) / 1000;\n}\nfunction diffDayAndTime(m0, m1) {\n    var m0day = startOfDay(m0);\n    var m1day = startOfDay(m1);\n    return {\n        years: 0,\n        months: 0,\n        days: Math.round(diffDays(m0day, m1day)),\n        milliseconds: m1.valueOf() - m1day.valueOf() - (m0.valueOf() - m0day.valueOf())\n    };\n}\n// Diffing Whole Units\nfunction diffWholeWeeks(m0, m1) {\n    var d = diffWholeDays(m0, m1);\n    if (d !== null && d % 7 === 0) {\n        return d / 7;\n    }\n    return null;\n}\nfunction diffWholeDays(m0, m1) {\n    if (timeAsMs(m0) === timeAsMs(m1)) {\n        return Math.round(diffDays(m0, m1));\n    }\n    return null;\n}\n// Start-Of\nfunction startOfDay(m) {\n    return arrayToUtcDate([\n        m.getUTCFullYear(),\n        m.getUTCMonth(),\n        m.getUTCDate(), \n    ]);\n}\nfunction startOfHour(m) {\n    return arrayToUtcDate([\n        m.getUTCFullYear(),\n        m.getUTCMonth(),\n        m.getUTCDate(),\n        m.getUTCHours(), \n    ]);\n}\nfunction startOfMinute(m) {\n    return arrayToUtcDate([\n        m.getUTCFullYear(),\n        m.getUTCMonth(),\n        m.getUTCDate(),\n        m.getUTCHours(),\n        m.getUTCMinutes(), \n    ]);\n}\nfunction startOfSecond(m) {\n    return arrayToUtcDate([\n        m.getUTCFullYear(),\n        m.getUTCMonth(),\n        m.getUTCDate(),\n        m.getUTCHours(),\n        m.getUTCMinutes(),\n        m.getUTCSeconds(), \n    ]);\n}\n// Week Computation\nfunction weekOfYear(marker, dow, doy) {\n    var y = marker.getUTCFullYear();\n    var w = weekOfGivenYear(marker, y, dow, doy);\n    if (w < 1) {\n        return weekOfGivenYear(marker, y - 1, dow, doy);\n    }\n    var nextW = weekOfGivenYear(marker, y + 1, dow, doy);\n    if (nextW >= 1) {\n        return Math.min(w, nextW);\n    }\n    return w;\n}\nfunction weekOfGivenYear(marker, year, dow, doy) {\n    var firstWeekStart = arrayToUtcDate([\n        year,\n        0,\n        1 + firstWeekOffset(year, dow, doy)\n    ]);\n    var dayStart = startOfDay(marker);\n    var days = Math.round(diffDays(firstWeekStart, dayStart));\n    return Math.floor(days / 7) + 1; // zero-indexed\n}\n// start-of-first-week - start-of-year\nfunction firstWeekOffset(year, dow, doy) {\n    // first-week day -- which january is always in the first week (4 for iso, 1 for other)\n    var fwd = 7 + dow - doy;\n    // first-week day local weekday -- which local weekday is fwd\n    var fwdlw = (7 + arrayToUtcDate([\n        year,\n        0,\n        fwd\n    ]).getUTCDay() - dow) % 7;\n    return -fwdlw + fwd - 1;\n}\n// Array Conversion\nfunction dateToLocalArray(date) {\n    return [\n        date.getFullYear(),\n        date.getMonth(),\n        date.getDate(),\n        date.getHours(),\n        date.getMinutes(),\n        date.getSeconds(),\n        date.getMilliseconds(), \n    ];\n}\nfunction arrayToLocalDate(a) {\n    return new Date(a[0], a[1] || 0, a[2] == null ? 1 : a[2], a[3] || 0, a[4] || 0, a[5] || 0);\n}\nfunction dateToUtcArray(date) {\n    return [\n        date.getUTCFullYear(),\n        date.getUTCMonth(),\n        date.getUTCDate(),\n        date.getUTCHours(),\n        date.getUTCMinutes(),\n        date.getUTCSeconds(),\n        date.getUTCMilliseconds(), \n    ];\n}\nfunction arrayToUtcDate(a) {\n    // according to web standards (and Safari), a month index is required.\n    // massage if only given a year.\n    if (a.length === 1) {\n        a = a.concat([\n            0\n        ]);\n    }\n    return new Date(Date.UTC.apply(Date, a));\n}\n// Other Utils\nfunction isValidDate(m) {\n    return !isNaN(m.valueOf());\n}\nfunction timeAsMs(m) {\n    return m.getUTCHours() * 1000 * 60 * 60 + m.getUTCMinutes() * 1000 * 60 + m.getUTCSeconds() * 1000 + m.getUTCMilliseconds();\n}\nfunction createEventInstance(defId, range, forcedStartTzo, forcedEndTzo) {\n    return {\n        instanceId: guid(),\n        defId: defId,\n        range: range,\n        forcedStartTzo: forcedStartTzo == null ? null : forcedStartTzo,\n        forcedEndTzo: forcedEndTzo == null ? null : forcedEndTzo\n    };\n}\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n// Merges an array of objects into a single object.\n// The second argument allows for an array of property names who's object values will be merged together.\nfunction mergeProps(propObjs, complexPropsMap) {\n    var dest = {};\n    if (complexPropsMap) {\n        for(var name_1 in complexPropsMap){\n            var complexObjs = [];\n            // collect the trailing object values, stopping when a non-object is discovered\n            for(var i = propObjs.length - 1; i >= 0; i -= 1){\n                var val = propObjs[i][name_1];\n                if (typeof val === \"object\" && val) {\n                    complexObjs.unshift(val);\n                } else if (val !== undefined) {\n                    dest[name_1] = val; // if there were no objects, this value will be used\n                    break;\n                }\n            }\n            // if the trailing values were objects, use the merged value\n            if (complexObjs.length) {\n                dest[name_1] = mergeProps(complexObjs);\n            }\n        }\n    }\n    // copy values into the destination, going from last to first\n    for(var i = propObjs.length - 1; i >= 0; i -= 1){\n        var props = propObjs[i];\n        for(var name_2 in props){\n            if (!(name_2 in dest)) {\n                dest[name_2] = props[name_2];\n            }\n        }\n    }\n    return dest;\n}\nfunction filterHash(hash, func) {\n    var filtered = {};\n    for(var key in hash){\n        if (func(hash[key], key)) {\n            filtered[key] = hash[key];\n        }\n    }\n    return filtered;\n}\nfunction mapHash(hash, func) {\n    var newHash = {};\n    for(var key in hash){\n        newHash[key] = func(hash[key], key);\n    }\n    return newHash;\n}\nfunction arrayToHash(a) {\n    var hash = {};\n    for(var _i = 0, a_1 = a; _i < a_1.length; _i++){\n        var item = a_1[_i];\n        hash[item] = true;\n    }\n    return hash;\n}\nfunction buildHashFromArray(a, func) {\n    var hash = {};\n    for(var i = 0; i < a.length; i += 1){\n        var tuple = func(a[i], i);\n        hash[tuple[0]] = tuple[1];\n    }\n    return hash;\n}\nfunction hashValuesToArray(obj) {\n    var a = [];\n    for(var key in obj){\n        a.push(obj[key]);\n    }\n    return a;\n}\nfunction isPropsEqual(obj0, obj1) {\n    if (obj0 === obj1) {\n        return true;\n    }\n    for(var key in obj0){\n        if (hasOwnProperty.call(obj0, key)) {\n            if (!(key in obj1)) {\n                return false;\n            }\n        }\n    }\n    for(var key in obj1){\n        if (hasOwnProperty.call(obj1, key)) {\n            if (obj0[key] !== obj1[key]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nfunction getUnequalProps(obj0, obj1) {\n    var keys = [];\n    for(var key in obj0){\n        if (hasOwnProperty.call(obj0, key)) {\n            if (!(key in obj1)) {\n                keys.push(key);\n            }\n        }\n    }\n    for(var key in obj1){\n        if (hasOwnProperty.call(obj1, key)) {\n            if (obj0[key] !== obj1[key]) {\n                keys.push(key);\n            }\n        }\n    }\n    return keys;\n}\nfunction compareObjs(oldProps, newProps, equalityFuncs) {\n    if (equalityFuncs === void 0) {\n        equalityFuncs = {};\n    }\n    if (oldProps === newProps) {\n        return true;\n    }\n    for(var key in newProps){\n        if (key in oldProps && isObjValsEqual(oldProps[key], newProps[key], equalityFuncs[key])) ;\n        else {\n            return false;\n        }\n    }\n    // check for props that were omitted in the new\n    for(var key in oldProps){\n        if (!(key in newProps)) {\n            return false;\n        }\n    }\n    return true;\n}\n/*\nassumed \"true\" equality for handler names like \"onReceiveSomething\"\n*/ function isObjValsEqual(val0, val1, comparator) {\n    if (val0 === val1 || comparator === true) {\n        return true;\n    }\n    if (comparator) {\n        return comparator(val0, val1);\n    }\n    return false;\n}\nfunction collectFromHash(hash, startIndex, endIndex, step) {\n    if (startIndex === void 0) {\n        startIndex = 0;\n    }\n    if (step === void 0) {\n        step = 1;\n    }\n    var res = [];\n    if (endIndex == null) {\n        endIndex = Object.keys(hash).length;\n    }\n    for(var i = startIndex; i < endIndex; i += step){\n        var val = hash[i];\n        if (val !== undefined) {\n            res.push(val);\n        }\n    }\n    return res;\n}\nfunction parseRecurring(refined, defaultAllDay, dateEnv, recurringTypes) {\n    for(var i = 0; i < recurringTypes.length; i += 1){\n        var parsed = recurringTypes[i].parse(refined, dateEnv);\n        if (parsed) {\n            var allDay = refined.allDay;\n            if (allDay == null) {\n                allDay = defaultAllDay;\n                if (allDay == null) {\n                    allDay = parsed.allDayGuess;\n                    if (allDay == null) {\n                        allDay = false;\n                    }\n                }\n            }\n            return {\n                allDay: allDay,\n                duration: parsed.duration,\n                typeData: parsed.typeData,\n                typeId: i\n            };\n        }\n    }\n    return null;\n}\nfunction expandRecurring(eventStore, framingRange, context) {\n    var dateEnv = context.dateEnv, pluginHooks = context.pluginHooks, options = context.options;\n    var defs = eventStore.defs, instances = eventStore.instances;\n    // remove existing recurring instances\n    // TODO: bad. always expand events as a second step\n    instances = filterHash(instances, function(instance) {\n        return !defs[instance.defId].recurringDef;\n    });\n    for(var defId in defs){\n        var def = defs[defId];\n        if (def.recurringDef) {\n            var duration = def.recurringDef.duration;\n            if (!duration) {\n                duration = def.allDay ? options.defaultAllDayEventDuration : options.defaultTimedEventDuration;\n            }\n            var starts = expandRecurringRanges(def, duration, framingRange, dateEnv, pluginHooks.recurringTypes);\n            for(var _i = 0, starts_1 = starts; _i < starts_1.length; _i++){\n                var start = starts_1[_i];\n                var instance1 = createEventInstance(defId, {\n                    start: start,\n                    end: dateEnv.add(start, duration)\n                });\n                instances[instance1.instanceId] = instance1;\n            }\n        }\n    }\n    return {\n        defs: defs,\n        instances: instances\n    };\n}\n/*\nEvent MUST have a recurringDef\n*/ function expandRecurringRanges(eventDef, duration, framingRange, dateEnv, recurringTypes) {\n    var typeDef = recurringTypes[eventDef.recurringDef.typeId];\n    var markers = typeDef.expand(eventDef.recurringDef.typeData, {\n        start: dateEnv.subtract(framingRange.start, duration),\n        end: framingRange.end\n    }, dateEnv);\n    // the recurrence plugins don't guarantee that all-day events are start-of-day, so we have to\n    if (eventDef.allDay) {\n        markers = markers.map(startOfDay);\n    }\n    return markers;\n}\nvar INTERNAL_UNITS = [\n    \"years\",\n    \"months\",\n    \"days\",\n    \"milliseconds\"\n];\nvar PARSE_RE = /^(-?)(?:(\\d+)\\.)?(\\d+):(\\d\\d)(?::(\\d\\d)(?:\\.(\\d\\d\\d))?)?/;\n// Parsing and Creation\nfunction createDuration(input, unit) {\n    var _a;\n    if (typeof input === \"string\") {\n        return parseString(input);\n    }\n    if (typeof input === \"object\" && input) {\n        return parseObject(input);\n    }\n    if (typeof input === \"number\") {\n        return parseObject((_a = {}, _a[unit || \"milliseconds\"] = input, _a));\n    }\n    return null;\n}\nfunction parseString(s) {\n    var m = PARSE_RE.exec(s);\n    if (m) {\n        var sign = m[1] ? -1 : 1;\n        return {\n            years: 0,\n            months: 0,\n            days: sign * (m[2] ? parseInt(m[2], 10) : 0),\n            milliseconds: sign * ((m[3] ? parseInt(m[3], 10) : 0) * 60 * 60 * 1000 + (m[4] ? parseInt(m[4], 10) : 0) * 60 * 1000 + (m[5] ? parseInt(m[5], 10) : 0) * 1000 + (m[6] ? parseInt(m[6], 10) : 0) // ms\n            )\n        };\n    }\n    return null;\n}\nfunction parseObject(obj) {\n    var duration = {\n        years: obj.years || obj.year || 0,\n        months: obj.months || obj.month || 0,\n        days: obj.days || obj.day || 0,\n        milliseconds: (obj.hours || obj.hour || 0) * 60 * 60 * 1000 + (obj.minutes || obj.minute || 0) * 60 * 1000 + (obj.seconds || obj.second || 0) * 1000 + (obj.milliseconds || obj.millisecond || obj.ms || 0)\n    };\n    var weeks = obj.weeks || obj.week;\n    if (weeks) {\n        duration.days += weeks * 7;\n        duration.specifiedWeeks = true;\n    }\n    return duration;\n}\n// Equality\nfunction durationsEqual(d0, d1) {\n    return d0.years === d1.years && d0.months === d1.months && d0.days === d1.days && d0.milliseconds === d1.milliseconds;\n}\nfunction asCleanDays(dur) {\n    if (!dur.years && !dur.months && !dur.milliseconds) {\n        return dur.days;\n    }\n    return 0;\n}\n// Simple Math\nfunction addDurations(d0, d1) {\n    return {\n        years: d0.years + d1.years,\n        months: d0.months + d1.months,\n        days: d0.days + d1.days,\n        milliseconds: d0.milliseconds + d1.milliseconds\n    };\n}\nfunction subtractDurations(d1, d0) {\n    return {\n        years: d1.years - d0.years,\n        months: d1.months - d0.months,\n        days: d1.days - d0.days,\n        milliseconds: d1.milliseconds - d0.milliseconds\n    };\n}\nfunction multiplyDuration(d, n) {\n    return {\n        years: d.years * n,\n        months: d.months * n,\n        days: d.days * n,\n        milliseconds: d.milliseconds * n\n    };\n}\n// Conversions\n// \"Rough\" because they are based on average-case Gregorian months/years\nfunction asRoughYears(dur) {\n    return asRoughDays(dur) / 365;\n}\nfunction asRoughMonths(dur) {\n    return asRoughDays(dur) / 30;\n}\nfunction asRoughDays(dur) {\n    return asRoughMs(dur) / 86400000;\n}\nfunction asRoughMinutes(dur) {\n    return asRoughMs(dur) / (1000 * 60);\n}\nfunction asRoughSeconds(dur) {\n    return asRoughMs(dur) / 1000;\n}\nfunction asRoughMs(dur) {\n    return dur.years * (365 * 86400000) + dur.months * (30 * 86400000) + dur.days * 86400000 + dur.milliseconds;\n}\n// Advanced Math\nfunction wholeDivideDurations(numerator, denominator) {\n    var res = null;\n    for(var i = 0; i < INTERNAL_UNITS.length; i += 1){\n        var unit = INTERNAL_UNITS[i];\n        if (denominator[unit]) {\n            var localRes = numerator[unit] / denominator[unit];\n            if (!isInt(localRes) || res !== null && res !== localRes) {\n                return null;\n            }\n            res = localRes;\n        } else if (numerator[unit]) {\n            // needs to divide by something but can't!\n            return null;\n        }\n    }\n    return res;\n}\nfunction greatestDurationDenominator(dur) {\n    var ms = dur.milliseconds;\n    if (ms) {\n        if (ms % 1000 !== 0) {\n            return {\n                unit: \"millisecond\",\n                value: ms\n            };\n        }\n        if (ms % (1000 * 60) !== 0) {\n            return {\n                unit: \"second\",\n                value: ms / 1000\n            };\n        }\n        if (ms % (1000 * 60 * 60) !== 0) {\n            return {\n                unit: \"minute\",\n                value: ms / (1000 * 60)\n            };\n        }\n        if (ms) {\n            return {\n                unit: \"hour\",\n                value: ms / (1000 * 60 * 60)\n            };\n        }\n    }\n    if (dur.days) {\n        if (dur.specifiedWeeks && dur.days % 7 === 0) {\n            return {\n                unit: \"week\",\n                value: dur.days / 7\n            };\n        }\n        return {\n            unit: \"day\",\n            value: dur.days\n        };\n    }\n    if (dur.months) {\n        return {\n            unit: \"month\",\n            value: dur.months\n        };\n    }\n    if (dur.years) {\n        return {\n            unit: \"year\",\n            value: dur.years\n        };\n    }\n    return {\n        unit: \"millisecond\",\n        value: 0\n    };\n}\n// timeZoneOffset is in minutes\nfunction buildIsoString(marker, timeZoneOffset, stripZeroTime) {\n    if (stripZeroTime === void 0) {\n        stripZeroTime = false;\n    }\n    var s = marker.toISOString();\n    s = s.replace(\".000\", \"\");\n    if (stripZeroTime) {\n        s = s.replace(\"T00:00:00Z\", \"\");\n    }\n    if (s.length > 10) {\n        if (timeZoneOffset == null) {\n            s = s.replace(\"Z\", \"\");\n        } else if (timeZoneOffset !== 0) {\n            s = s.replace(\"Z\", formatTimeZoneOffset(timeZoneOffset, true));\n        }\n    // otherwise, its UTC-0 and we want to keep the Z\n    }\n    return s;\n}\n// formats the date, but with no time part\n// TODO: somehow merge with buildIsoString and stripZeroTime\n// TODO: rename. omit \"string\"\nfunction formatDayString(marker) {\n    return marker.toISOString().replace(/T.*$/, \"\");\n}\n// TODO: use Date::toISOString and use everything after the T?\nfunction formatIsoTimeString(marker) {\n    return padStart(marker.getUTCHours(), 2) + \":\" + padStart(marker.getUTCMinutes(), 2) + \":\" + padStart(marker.getUTCSeconds(), 2);\n}\nfunction formatTimeZoneOffset(minutes, doIso) {\n    if (doIso === void 0) {\n        doIso = false;\n    }\n    var sign = minutes < 0 ? \"-\" : \"+\";\n    var abs = Math.abs(minutes);\n    var hours = Math.floor(abs / 60);\n    var mins = Math.round(abs % 60);\n    if (doIso) {\n        return sign + padStart(hours, 2) + \":\" + padStart(mins, 2);\n    }\n    return \"GMT\" + sign + hours + (mins ? \":\" + padStart(mins, 2) : \"\");\n}\n// TODO: new util arrayify?\nfunction removeExact(array, exactVal) {\n    var removeCnt = 0;\n    var i = 0;\n    while(i < array.length){\n        if (array[i] === exactVal) {\n            array.splice(i, 1);\n            removeCnt += 1;\n        } else {\n            i += 1;\n        }\n    }\n    return removeCnt;\n}\nfunction isArraysEqual(a0, a1, equalityFunc) {\n    if (a0 === a1) {\n        return true;\n    }\n    var len = a0.length;\n    var i;\n    if (len !== a1.length) {\n        return false;\n    }\n    for(i = 0; i < len; i += 1){\n        if (!(equalityFunc ? equalityFunc(a0[i], a1[i]) : a0[i] === a1[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction memoize(workerFunc, resEquality, teardownFunc) {\n    var currentArgs;\n    var currentRes;\n    return function() {\n        var newArgs = [];\n        for(var _i = 0; _i < arguments.length; _i++){\n            newArgs[_i] = arguments[_i];\n        }\n        if (!currentArgs) {\n            currentRes = workerFunc.apply(this, newArgs);\n        } else if (!isArraysEqual(currentArgs, newArgs)) {\n            if (teardownFunc) {\n                teardownFunc(currentRes);\n            }\n            var res = workerFunc.apply(this, newArgs);\n            if (!resEquality || !resEquality(res, currentRes)) {\n                currentRes = res;\n            }\n        }\n        currentArgs = newArgs;\n        return currentRes;\n    };\n}\nfunction memoizeObjArg(workerFunc, resEquality, teardownFunc) {\n    var _this = this;\n    var currentArg;\n    var currentRes;\n    return function(newArg) {\n        if (!currentArg) {\n            currentRes = workerFunc.call(_this, newArg);\n        } else if (!isPropsEqual(currentArg, newArg)) {\n            if (teardownFunc) {\n                teardownFunc(currentRes);\n            }\n            var res = workerFunc.call(_this, newArg);\n            if (!resEquality || !resEquality(res, currentRes)) {\n                currentRes = res;\n            }\n        }\n        currentArg = newArg;\n        return currentRes;\n    };\n}\nfunction memoizeArraylike(workerFunc, resEquality, teardownFunc) {\n    var _this = this;\n    var currentArgSets = [];\n    var currentResults = [];\n    return function(newArgSets) {\n        var currentLen = currentArgSets.length;\n        var newLen = newArgSets.length;\n        var i = 0;\n        for(; i < currentLen; i += 1){\n            if (!newArgSets[i]) {\n                if (teardownFunc) {\n                    teardownFunc(currentResults[i]);\n                }\n            } else if (!isArraysEqual(currentArgSets[i], newArgSets[i])) {\n                if (teardownFunc) {\n                    teardownFunc(currentResults[i]);\n                }\n                var res = workerFunc.apply(_this, newArgSets[i]);\n                if (!resEquality || !resEquality(res, currentResults[i])) {\n                    currentResults[i] = res;\n                }\n            }\n        }\n        for(; i < newLen; i += 1){\n            currentResults[i] = workerFunc.apply(_this, newArgSets[i]);\n        }\n        currentArgSets = newArgSets;\n        currentResults.splice(newLen); // remove excess\n        return currentResults;\n    };\n}\nfunction memoizeHashlike(workerFunc, resEquality, teardownFunc) {\n    var _this = this;\n    var currentArgHash = {};\n    var currentResHash = {};\n    return function(newArgHash) {\n        var newResHash = {};\n        for(var key in newArgHash){\n            if (!currentResHash[key]) {\n                newResHash[key] = workerFunc.apply(_this, newArgHash[key]);\n            } else if (!isArraysEqual(currentArgHash[key], newArgHash[key])) {\n                if (teardownFunc) {\n                    teardownFunc(currentResHash[key]);\n                }\n                var res = workerFunc.apply(_this, newArgHash[key]);\n                newResHash[key] = resEquality && resEquality(res, currentResHash[key]) ? currentResHash[key] : res;\n            } else {\n                newResHash[key] = currentResHash[key];\n            }\n        }\n        currentArgHash = newArgHash;\n        currentResHash = newResHash;\n        return newResHash;\n    };\n}\nvar EXTENDED_SETTINGS_AND_SEVERITIES = {\n    week: 3,\n    separator: 0,\n    omitZeroMinute: 0,\n    meridiem: 0,\n    omitCommas: 0\n};\nvar STANDARD_DATE_PROP_SEVERITIES = {\n    timeZoneName: 7,\n    era: 6,\n    year: 5,\n    month: 4,\n    day: 2,\n    weekday: 2,\n    hour: 1,\n    minute: 1,\n    second: 1\n};\nvar MERIDIEM_RE = /\\s*([ap])\\.?m\\.?/i; // eats up leading spaces too\nvar COMMA_RE = /,/g; // we need re for globalness\nvar MULTI_SPACE_RE = /\\s+/g;\nvar LTR_RE = /\\u200e/g; // control character\nvar UTC_RE = /UTC|GMT/;\nvar NativeFormatter1 = /** @class */ function() {\n    var NativeFormatter = function NativeFormatter(formatSettings) {\n        var standardDateProps = {};\n        var extendedSettings = {};\n        var severity = 0;\n        for(var name_1 in formatSettings){\n            if (name_1 in EXTENDED_SETTINGS_AND_SEVERITIES) {\n                extendedSettings[name_1] = formatSettings[name_1];\n                severity = Math.max(EXTENDED_SETTINGS_AND_SEVERITIES[name_1], severity);\n            } else {\n                standardDateProps[name_1] = formatSettings[name_1];\n                if (name_1 in STANDARD_DATE_PROP_SEVERITIES) {\n                    severity = Math.max(STANDARD_DATE_PROP_SEVERITIES[name_1], severity);\n                }\n            }\n        }\n        this.standardDateProps = standardDateProps;\n        this.extendedSettings = extendedSettings;\n        this.severity = severity;\n        this.buildFormattingFunc = memoize(buildFormattingFunc);\n    };\n    NativeFormatter.prototype.format = function(date, context) {\n        return this.buildFormattingFunc(this.standardDateProps, this.extendedSettings, context)(date);\n    };\n    NativeFormatter.prototype.formatRange = function(start, end, context, betterDefaultSeparator) {\n        var _a = this, standardDateProps = _a.standardDateProps, extendedSettings = _a.extendedSettings;\n        var diffSeverity = computeMarkerDiffSeverity(start.marker, end.marker, context.calendarSystem);\n        if (!diffSeverity) {\n            return this.format(start, context);\n        }\n        var biggestUnitForPartial = diffSeverity;\n        if (biggestUnitForPartial > 1 && (standardDateProps.year === \"numeric\" || standardDateProps.year === \"2-digit\") && (standardDateProps.month === \"numeric\" || standardDateProps.month === \"2-digit\") && (standardDateProps.day === \"numeric\" || standardDateProps.day === \"2-digit\")) {\n            biggestUnitForPartial = 1; // make it look like the dates are only different in terms of time\n        }\n        var full0 = this.format(start, context);\n        var full1 = this.format(end, context);\n        if (full0 === full1) {\n            return full0;\n        }\n        var partialDateProps = computePartialFormattingOptions(standardDateProps, biggestUnitForPartial);\n        var partialFormattingFunc = buildFormattingFunc(partialDateProps, extendedSettings, context);\n        var partial0 = partialFormattingFunc(start);\n        var partial1 = partialFormattingFunc(end);\n        var insertion = findCommonInsertion(full0, partial0, full1, partial1);\n        var separator = extendedSettings.separator || betterDefaultSeparator || context.defaultSeparator || \"\";\n        if (insertion) {\n            return insertion.before + partial0 + separator + partial1 + insertion.after;\n        }\n        return full0 + separator + full1;\n    };\n    NativeFormatter.prototype.getLargestUnit = function() {\n        switch(this.severity){\n            case 7:\n            case 6:\n            case 5:\n                return \"year\";\n            case 4:\n                return \"month\";\n            case 3:\n                return \"week\";\n            case 2:\n                return \"day\";\n            default:\n                return \"time\"; // really?\n        }\n    };\n    return NativeFormatter;\n}();\nfunction buildFormattingFunc(standardDateProps, extendedSettings, context) {\n    var standardDatePropCnt = Object.keys(standardDateProps).length;\n    if (standardDatePropCnt === 1 && standardDateProps.timeZoneName === \"short\") {\n        return function(date) {\n            return formatTimeZoneOffset(date.timeZoneOffset);\n        };\n    }\n    if (standardDatePropCnt === 0 && extendedSettings.week) {\n        return function(date) {\n            return formatWeekNumber(context.computeWeekNumber(date.marker), context.weekText, context.weekTextLong, context.locale, extendedSettings.week);\n        };\n    }\n    return buildNativeFormattingFunc(standardDateProps, extendedSettings, context);\n}\nfunction buildNativeFormattingFunc(standardDateProps, extendedSettings, context) {\n    standardDateProps = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, standardDateProps); // copy\n    extendedSettings = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, extendedSettings); // copy\n    sanitizeSettings(standardDateProps, extendedSettings);\n    standardDateProps.timeZone = \"UTC\"; // we leverage the only guaranteed timeZone for our UTC markers\n    var normalFormat = new Intl.DateTimeFormat(context.locale.codes, standardDateProps);\n    var zeroFormat; // needed?\n    if (extendedSettings.omitZeroMinute) {\n        var zeroProps = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, standardDateProps);\n        delete zeroProps.minute; // seconds and ms were already considered in sanitizeSettings\n        zeroFormat = new Intl.DateTimeFormat(context.locale.codes, zeroProps);\n    }\n    return function(date) {\n        var marker = date.marker;\n        var format;\n        if (zeroFormat && !marker.getUTCMinutes()) {\n            format = zeroFormat;\n        } else {\n            format = normalFormat;\n        }\n        var s = format.format(marker);\n        return postProcess(s, date, standardDateProps, extendedSettings, context);\n    };\n}\nfunction sanitizeSettings(standardDateProps, extendedSettings) {\n    // deal with a browser inconsistency where formatting the timezone\n    // requires that the hour/minute be present.\n    if (standardDateProps.timeZoneName) {\n        if (!standardDateProps.hour) {\n            standardDateProps.hour = \"2-digit\";\n        }\n        if (!standardDateProps.minute) {\n            standardDateProps.minute = \"2-digit\";\n        }\n    }\n    // only support short timezone names\n    if (standardDateProps.timeZoneName === \"long\") {\n        standardDateProps.timeZoneName = \"short\";\n    }\n    // if requesting to display seconds, MUST display minutes\n    if (extendedSettings.omitZeroMinute && (standardDateProps.second || standardDateProps.millisecond)) {\n        delete extendedSettings.omitZeroMinute;\n    }\n}\nfunction postProcess(s, date, standardDateProps, extendedSettings, context) {\n    s = s.replace(LTR_RE, \"\"); // remove left-to-right control chars. do first. good for other regexes\n    if (standardDateProps.timeZoneName === \"short\") {\n        s = injectTzoStr(s, context.timeZone === \"UTC\" || date.timeZoneOffset == null ? \"UTC\" : formatTimeZoneOffset(date.timeZoneOffset));\n    }\n    if (extendedSettings.omitCommas) {\n        s = s.replace(COMMA_RE, \"\").trim();\n    }\n    if (extendedSettings.omitZeroMinute) {\n        s = s.replace(\":00\", \"\"); // zeroFormat doesn't always achieve this\n    }\n    // ^ do anything that might create adjacent spaces before this point,\n    // because MERIDIEM_RE likes to eat up loading spaces\n    if (extendedSettings.meridiem === false) {\n        s = s.replace(MERIDIEM_RE, \"\").trim();\n    } else if (extendedSettings.meridiem === \"narrow\") {\n        s = s.replace(MERIDIEM_RE, function(m0, m1) {\n            return m1.toLocaleLowerCase();\n        });\n    } else if (extendedSettings.meridiem === \"short\") {\n        s = s.replace(MERIDIEM_RE, function(m0, m1) {\n            return m1.toLocaleLowerCase() + \"m\";\n        });\n    } else if (extendedSettings.meridiem === \"lowercase\") {\n        s = s.replace(MERIDIEM_RE, function(m0) {\n            return m0.toLocaleLowerCase();\n        });\n    }\n    s = s.replace(MULTI_SPACE_RE, \" \");\n    s = s.trim();\n    return s;\n}\nfunction injectTzoStr(s, tzoStr) {\n    var replaced = false;\n    s = s.replace(UTC_RE, function() {\n        replaced = true;\n        return tzoStr;\n    });\n    // IE11 doesn't include UTC/GMT in the original string, so append to end\n    if (!replaced) {\n        s += \" \" + tzoStr;\n    }\n    return s;\n}\nfunction formatWeekNumber(num, weekText, weekTextLong, locale, display) {\n    var parts = [];\n    if (display === \"long\") {\n        parts.push(weekTextLong);\n    } else if (display === \"short\" || display === \"narrow\") {\n        parts.push(weekText);\n    }\n    if (display === \"long\" || display === \"short\") {\n        parts.push(\" \");\n    }\n    parts.push(locale.simpleNumberFormat.format(num));\n    if (locale.options.direction === \"rtl\") {\n        parts.reverse();\n    }\n    return parts.join(\"\");\n}\n// Range Formatting Utils\n// 0 = exactly the same\n// 1 = different by time\n// and bigger\nfunction computeMarkerDiffSeverity(d0, d1, ca) {\n    if (ca.getMarkerYear(d0) !== ca.getMarkerYear(d1)) {\n        return 5;\n    }\n    if (ca.getMarkerMonth(d0) !== ca.getMarkerMonth(d1)) {\n        return 4;\n    }\n    if (ca.getMarkerDay(d0) !== ca.getMarkerDay(d1)) {\n        return 2;\n    }\n    if (timeAsMs(d0) !== timeAsMs(d1)) {\n        return 1;\n    }\n    return 0;\n}\nfunction computePartialFormattingOptions(options, biggestUnit) {\n    var partialOptions = {};\n    for(var name_2 in options){\n        if (!(name_2 in STANDARD_DATE_PROP_SEVERITIES) || STANDARD_DATE_PROP_SEVERITIES[name_2] <= biggestUnit) {\n            partialOptions[name_2] = options[name_2];\n        }\n    }\n    return partialOptions;\n}\nfunction findCommonInsertion(full0, partial0, full1, partial1) {\n    var i0 = 0;\n    while(i0 < full0.length){\n        var found0 = full0.indexOf(partial0, i0);\n        if (found0 === -1) {\n            break;\n        }\n        var before0 = full0.substr(0, found0);\n        i0 = found0 + partial0.length;\n        var after0 = full0.substr(i0);\n        var i1 = 0;\n        while(i1 < full1.length){\n            var found1 = full1.indexOf(partial1, i1);\n            if (found1 === -1) {\n                break;\n            }\n            var before1 = full1.substr(0, found1);\n            i1 = found1 + partial1.length;\n            var after1 = full1.substr(i1);\n            if (before0 === before1 && after0 === after1) {\n                return {\n                    before: before0,\n                    after: after0\n                };\n            }\n        }\n    }\n    return null;\n}\nfunction expandZonedMarker(dateInfo, calendarSystem) {\n    var a = calendarSystem.markerToArray(dateInfo.marker);\n    return {\n        marker: dateInfo.marker,\n        timeZoneOffset: dateInfo.timeZoneOffset,\n        array: a,\n        year: a[0],\n        month: a[1],\n        day: a[2],\n        hour: a[3],\n        minute: a[4],\n        second: a[5],\n        millisecond: a[6]\n    };\n}\nfunction createVerboseFormattingArg(start, end, context, betterDefaultSeparator) {\n    var startInfo = expandZonedMarker(start, context.calendarSystem);\n    var endInfo = end ? expandZonedMarker(end, context.calendarSystem) : null;\n    return {\n        date: startInfo,\n        start: startInfo,\n        end: endInfo,\n        timeZone: context.timeZone,\n        localeCodes: context.locale.codes,\n        defaultSeparator: betterDefaultSeparator || context.defaultSeparator\n    };\n}\n/*\nTODO: fix the terminology of \"formatter\" vs \"formatting func\"\n*/ /*\nAt the time of instantiation, this object does not know which cmd-formatting system it will use.\nIt receives this at the time of formatting, as a setting.\n*/ var CmdFormatter1 = /** @class */ function() {\n    var CmdFormatter = function CmdFormatter(cmdStr) {\n        this.cmdStr = cmdStr;\n    };\n    CmdFormatter.prototype.format = function(date, context, betterDefaultSeparator) {\n        return context.cmdFormatter(this.cmdStr, createVerboseFormattingArg(date, null, context, betterDefaultSeparator));\n    };\n    CmdFormatter.prototype.formatRange = function(start, end, context, betterDefaultSeparator) {\n        return context.cmdFormatter(this.cmdStr, createVerboseFormattingArg(start, end, context, betterDefaultSeparator));\n    };\n    return CmdFormatter;\n}();\nvar FuncFormatter1 = /** @class */ function() {\n    var FuncFormatter = function FuncFormatter(func) {\n        this.func = func;\n    };\n    FuncFormatter.prototype.format = function(date, context, betterDefaultSeparator) {\n        return this.func(createVerboseFormattingArg(date, null, context, betterDefaultSeparator));\n    };\n    FuncFormatter.prototype.formatRange = function(start, end, context, betterDefaultSeparator) {\n        return this.func(createVerboseFormattingArg(start, end, context, betterDefaultSeparator));\n    };\n    return FuncFormatter;\n}();\nfunction createFormatter(input) {\n    if (typeof input === \"object\" && input) {\n        return new NativeFormatter1(input);\n    }\n    if (typeof input === \"string\") {\n        return new CmdFormatter1(input);\n    }\n    if (typeof input === \"function\") {\n        return new FuncFormatter1(input);\n    }\n    return null;\n}\n// base options\n// ------------\nvar BASE_OPTION_REFINERS = {\n    navLinkDayClick: identity,\n    navLinkWeekClick: identity,\n    duration: createDuration,\n    bootstrapFontAwesome: identity,\n    buttonIcons: identity,\n    customButtons: identity,\n    defaultAllDayEventDuration: createDuration,\n    defaultTimedEventDuration: createDuration,\n    nextDayThreshold: createDuration,\n    scrollTime: createDuration,\n    scrollTimeReset: Boolean,\n    slotMinTime: createDuration,\n    slotMaxTime: createDuration,\n    dayPopoverFormat: createFormatter,\n    slotDuration: createDuration,\n    snapDuration: createDuration,\n    headerToolbar: identity,\n    footerToolbar: identity,\n    defaultRangeSeparator: String,\n    titleRangeSeparator: String,\n    forceEventDuration: Boolean,\n    dayHeaders: Boolean,\n    dayHeaderFormat: createFormatter,\n    dayHeaderClassNames: identity,\n    dayHeaderContent: identity,\n    dayHeaderDidMount: identity,\n    dayHeaderWillUnmount: identity,\n    dayCellClassNames: identity,\n    dayCellContent: identity,\n    dayCellDidMount: identity,\n    dayCellWillUnmount: identity,\n    initialView: String,\n    aspectRatio: Number,\n    weekends: Boolean,\n    weekNumberCalculation: identity,\n    weekNumbers: Boolean,\n    weekNumberClassNames: identity,\n    weekNumberContent: identity,\n    weekNumberDidMount: identity,\n    weekNumberWillUnmount: identity,\n    editable: Boolean,\n    viewClassNames: identity,\n    viewDidMount: identity,\n    viewWillUnmount: identity,\n    nowIndicator: Boolean,\n    nowIndicatorClassNames: identity,\n    nowIndicatorContent: identity,\n    nowIndicatorDidMount: identity,\n    nowIndicatorWillUnmount: identity,\n    showNonCurrentDates: Boolean,\n    lazyFetching: Boolean,\n    startParam: String,\n    endParam: String,\n    timeZoneParam: String,\n    timeZone: String,\n    locales: identity,\n    locale: identity,\n    themeSystem: String,\n    dragRevertDuration: Number,\n    dragScroll: Boolean,\n    allDayMaintainDuration: Boolean,\n    unselectAuto: Boolean,\n    dropAccept: identity,\n    eventOrder: parseFieldSpecs,\n    eventOrderStrict: Boolean,\n    handleWindowResize: Boolean,\n    windowResizeDelay: Number,\n    longPressDelay: Number,\n    eventDragMinDistance: Number,\n    expandRows: Boolean,\n    height: identity,\n    contentHeight: identity,\n    direction: String,\n    weekNumberFormat: createFormatter,\n    eventResizableFromStart: Boolean,\n    displayEventTime: Boolean,\n    displayEventEnd: Boolean,\n    weekText: String,\n    weekTextLong: String,\n    progressiveEventRendering: Boolean,\n    businessHours: identity,\n    initialDate: identity,\n    now: identity,\n    eventDataTransform: identity,\n    stickyHeaderDates: identity,\n    stickyFooterScrollbar: identity,\n    viewHeight: identity,\n    defaultAllDay: Boolean,\n    eventSourceFailure: identity,\n    eventSourceSuccess: identity,\n    eventDisplay: String,\n    eventStartEditable: Boolean,\n    eventDurationEditable: Boolean,\n    eventOverlap: identity,\n    eventConstraint: identity,\n    eventAllow: identity,\n    eventBackgroundColor: String,\n    eventBorderColor: String,\n    eventTextColor: String,\n    eventColor: String,\n    eventClassNames: identity,\n    eventContent: identity,\n    eventDidMount: identity,\n    eventWillUnmount: identity,\n    selectConstraint: identity,\n    selectOverlap: identity,\n    selectAllow: identity,\n    droppable: Boolean,\n    unselectCancel: String,\n    slotLabelFormat: identity,\n    slotLaneClassNames: identity,\n    slotLaneContent: identity,\n    slotLaneDidMount: identity,\n    slotLaneWillUnmount: identity,\n    slotLabelClassNames: identity,\n    slotLabelContent: identity,\n    slotLabelDidMount: identity,\n    slotLabelWillUnmount: identity,\n    dayMaxEvents: identity,\n    dayMaxEventRows: identity,\n    dayMinWidth: Number,\n    slotLabelInterval: createDuration,\n    allDayText: String,\n    allDayClassNames: identity,\n    allDayContent: identity,\n    allDayDidMount: identity,\n    allDayWillUnmount: identity,\n    slotMinWidth: Number,\n    navLinks: Boolean,\n    eventTimeFormat: createFormatter,\n    rerenderDelay: Number,\n    moreLinkText: identity,\n    moreLinkHint: identity,\n    selectMinDistance: Number,\n    selectable: Boolean,\n    selectLongPressDelay: Number,\n    eventLongPressDelay: Number,\n    selectMirror: Boolean,\n    eventMaxStack: Number,\n    eventMinHeight: Number,\n    eventMinWidth: Number,\n    eventShortHeight: Number,\n    slotEventOverlap: Boolean,\n    plugins: identity,\n    firstDay: Number,\n    dayCount: Number,\n    dateAlignment: String,\n    dateIncrement: createDuration,\n    hiddenDays: identity,\n    monthMode: Boolean,\n    fixedWeekCount: Boolean,\n    validRange: identity,\n    visibleRange: identity,\n    titleFormat: identity,\n    eventInteractive: Boolean,\n    // only used by list-view, but languages define the value, so we need it in base options\n    noEventsText: String,\n    viewHint: identity,\n    navLinkHint: identity,\n    closeHint: String,\n    timeHint: String,\n    eventHint: String,\n    moreLinkClick: identity,\n    moreLinkClassNames: identity,\n    moreLinkContent: identity,\n    moreLinkDidMount: identity,\n    moreLinkWillUnmount: identity\n};\n// do NOT give a type here. need `typeof BASE_OPTION_DEFAULTS` to give real results.\n// raw values.\nvar BASE_OPTION_DEFAULTS = {\n    eventDisplay: \"auto\",\n    defaultRangeSeparator: \" - \",\n    titleRangeSeparator: \" \\u2013 \",\n    defaultTimedEventDuration: \"01:00:00\",\n    defaultAllDayEventDuration: {\n        day: 1\n    },\n    forceEventDuration: false,\n    nextDayThreshold: \"00:00:00\",\n    dayHeaders: true,\n    initialView: \"\",\n    aspectRatio: 1.35,\n    headerToolbar: {\n        start: \"title\",\n        center: \"\",\n        end: \"today prev,next\"\n    },\n    weekends: true,\n    weekNumbers: false,\n    weekNumberCalculation: \"local\",\n    editable: false,\n    nowIndicator: false,\n    scrollTime: \"06:00:00\",\n    scrollTimeReset: true,\n    slotMinTime: \"00:00:00\",\n    slotMaxTime: \"24:00:00\",\n    showNonCurrentDates: true,\n    lazyFetching: true,\n    startParam: \"start\",\n    endParam: \"end\",\n    timeZoneParam: \"timeZone\",\n    timeZone: \"local\",\n    locales: [],\n    locale: \"\",\n    themeSystem: \"standard\",\n    dragRevertDuration: 500,\n    dragScroll: true,\n    allDayMaintainDuration: false,\n    unselectAuto: true,\n    dropAccept: \"*\",\n    eventOrder: \"start,-duration,allDay,title\",\n    dayPopoverFormat: {\n        month: \"long\",\n        day: \"numeric\",\n        year: \"numeric\"\n    },\n    handleWindowResize: true,\n    windowResizeDelay: 100,\n    longPressDelay: 1000,\n    eventDragMinDistance: 5,\n    expandRows: false,\n    navLinks: false,\n    selectable: false,\n    eventMinHeight: 15,\n    eventMinWidth: 30,\n    eventShortHeight: 30\n};\n// calendar listeners\n// ------------------\nvar CALENDAR_LISTENER_REFINERS = {\n    datesSet: identity,\n    eventsSet: identity,\n    eventAdd: identity,\n    eventChange: identity,\n    eventRemove: identity,\n    windowResize: identity,\n    eventClick: identity,\n    eventMouseEnter: identity,\n    eventMouseLeave: identity,\n    select: identity,\n    unselect: identity,\n    loading: identity,\n    // internal\n    _unmount: identity,\n    _beforeprint: identity,\n    _afterprint: identity,\n    _noEventDrop: identity,\n    _noEventResize: identity,\n    _resize: identity,\n    _scrollRequest: identity\n};\n// calendar-specific options\n// -------------------------\nvar CALENDAR_OPTION_REFINERS = {\n    buttonText: identity,\n    buttonHints: identity,\n    views: identity,\n    plugins: identity,\n    initialEvents: identity,\n    events: identity,\n    eventSources: identity\n};\nvar COMPLEX_OPTION_COMPARATORS = {\n    headerToolbar: isBoolComplexEqual,\n    footerToolbar: isBoolComplexEqual,\n    buttonText: isBoolComplexEqual,\n    buttonHints: isBoolComplexEqual,\n    buttonIcons: isBoolComplexEqual\n};\nfunction isBoolComplexEqual(a, b) {\n    if (typeof a === \"object\" && typeof b === \"object\" && a && b) {\n        return isPropsEqual(a, b);\n    }\n    return a === b;\n}\n// view-specific options\n// ---------------------\nvar VIEW_OPTION_REFINERS = {\n    type: String,\n    component: identity,\n    buttonText: String,\n    buttonTextKey: String,\n    dateProfileGeneratorClass: identity,\n    usesMinMaxTime: Boolean,\n    classNames: identity,\n    content: identity,\n    didMount: identity,\n    willUnmount: identity\n};\n// util funcs\n// ----------------------------------------------------------------------------------------------------\nfunction mergeRawOptions(optionSets) {\n    return mergeProps(optionSets, COMPLEX_OPTION_COMPARATORS);\n}\nfunction refineProps(input, refiners) {\n    var refined = {};\n    var extra = {};\n    for(var propName in refiners){\n        if (propName in input) {\n            refined[propName] = refiners[propName](input[propName]);\n        }\n    }\n    for(var propName in input){\n        if (!(propName in refiners)) {\n            extra[propName] = input[propName];\n        }\n    }\n    return {\n        refined: refined,\n        extra: extra\n    };\n}\nfunction identity(raw) {\n    return raw;\n}\nfunction parseEvents(rawEvents, eventSource, context, allowOpenRange) {\n    var eventStore = createEmptyEventStore();\n    var eventRefiners = buildEventRefiners(context);\n    for(var _i = 0, rawEvents_1 = rawEvents; _i < rawEvents_1.length; _i++){\n        var rawEvent = rawEvents_1[_i];\n        var tuple = parseEvent(rawEvent, eventSource, context, allowOpenRange, eventRefiners);\n        if (tuple) {\n            eventTupleToStore(tuple, eventStore);\n        }\n    }\n    return eventStore;\n}\nfunction eventTupleToStore(tuple, eventStore) {\n    if (eventStore === void 0) {\n        eventStore = createEmptyEventStore();\n    }\n    eventStore.defs[tuple.def.defId] = tuple.def;\n    if (tuple.instance) {\n        eventStore.instances[tuple.instance.instanceId] = tuple.instance;\n    }\n    return eventStore;\n}\n// retrieves events that have the same groupId as the instance specified by `instanceId`\n// or they are the same as the instance.\n// why might instanceId not be in the store? an event from another calendar?\nfunction getRelevantEvents(eventStore, instanceId) {\n    var instance = eventStore.instances[instanceId];\n    if (instance) {\n        var def_1 = eventStore.defs[instance.defId];\n        // get events/instances with same group\n        var newStore = filterEventStoreDefs(eventStore, function(lookDef) {\n            return isEventDefsGrouped(def_1, lookDef);\n        });\n        // add the original\n        // TODO: wish we could use eventTupleToStore or something like it\n        newStore.defs[def_1.defId] = def_1;\n        newStore.instances[instance.instanceId] = instance;\n        return newStore;\n    }\n    return createEmptyEventStore();\n}\nfunction isEventDefsGrouped(def0, def1) {\n    return Boolean(def0.groupId && def0.groupId === def1.groupId);\n}\nfunction createEmptyEventStore() {\n    return {\n        defs: {},\n        instances: {}\n    };\n}\nfunction mergeEventStores(store0, store1) {\n    return {\n        defs: (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, store0.defs), store1.defs),\n        instances: (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, store0.instances), store1.instances)\n    };\n}\nfunction filterEventStoreDefs(eventStore, filterFunc) {\n    var defs = filterHash(eventStore.defs, filterFunc);\n    var instances = filterHash(eventStore.instances, function(instance) {\n        return defs[instance.defId] // still exists?\n        ;\n    });\n    return {\n        defs: defs,\n        instances: instances\n    };\n}\nfunction excludeSubEventStore(master, sub) {\n    var defs = master.defs, instances = master.instances;\n    var filteredDefs = {};\n    var filteredInstances = {};\n    for(var defId in defs){\n        if (!sub.defs[defId]) {\n            filteredDefs[defId] = defs[defId];\n        }\n    }\n    for(var instanceId in instances){\n        if (!sub.instances[instanceId] && filteredDefs[instances[instanceId].defId] // def wasn't filtered away\n        ) {\n            filteredInstances[instanceId] = instances[instanceId];\n        }\n    }\n    return {\n        defs: filteredDefs,\n        instances: filteredInstances\n    };\n}\nfunction normalizeConstraint(input, context) {\n    if (Array.isArray(input)) {\n        return parseEvents(input, null, context, true); // allowOpenRange=true\n    }\n    if (typeof input === \"object\" && input) {\n        return parseEvents([\n            input\n        ], null, context, true); // allowOpenRange=true\n    }\n    if (input != null) {\n        return String(input);\n    }\n    return null;\n}\nfunction parseClassNames(raw) {\n    if (Array.isArray(raw)) {\n        return raw;\n    }\n    if (typeof raw === \"string\") {\n        return raw.split(/\\s+/);\n    }\n    return [];\n}\n// TODO: better called \"EventSettings\" or \"EventConfig\"\n// TODO: move this file into structs\n// TODO: separate constraint/overlap/allow, because selection uses only that, not other props\nvar EVENT_UI_REFINERS = {\n    display: String,\n    editable: Boolean,\n    startEditable: Boolean,\n    durationEditable: Boolean,\n    constraint: identity,\n    overlap: identity,\n    allow: identity,\n    className: parseClassNames,\n    classNames: parseClassNames,\n    color: String,\n    backgroundColor: String,\n    borderColor: String,\n    textColor: String\n};\nvar EMPTY_EVENT_UI = {\n    display: null,\n    startEditable: null,\n    durationEditable: null,\n    constraints: [],\n    overlap: null,\n    allows: [],\n    backgroundColor: \"\",\n    borderColor: \"\",\n    textColor: \"\",\n    classNames: []\n};\nfunction createEventUi(refined, context) {\n    var constraint = normalizeConstraint(refined.constraint, context);\n    return {\n        display: refined.display || null,\n        startEditable: refined.startEditable != null ? refined.startEditable : refined.editable,\n        durationEditable: refined.durationEditable != null ? refined.durationEditable : refined.editable,\n        constraints: constraint != null ? [\n            constraint\n        ] : [],\n        overlap: refined.overlap != null ? refined.overlap : null,\n        allows: refined.allow != null ? [\n            refined.allow\n        ] : [],\n        backgroundColor: refined.backgroundColor || refined.color || \"\",\n        borderColor: refined.borderColor || refined.color || \"\",\n        textColor: refined.textColor || \"\",\n        classNames: (refined.className || []).concat(refined.classNames || [])\n    };\n}\n// TODO: prevent against problems with <2 args!\nfunction combineEventUis(uis) {\n    return uis.reduce(combineTwoEventUis, EMPTY_EVENT_UI);\n}\nfunction combineTwoEventUis(item0, item1) {\n    return {\n        display: item1.display != null ? item1.display : item0.display,\n        startEditable: item1.startEditable != null ? item1.startEditable : item0.startEditable,\n        durationEditable: item1.durationEditable != null ? item1.durationEditable : item0.durationEditable,\n        constraints: item0.constraints.concat(item1.constraints),\n        overlap: typeof item1.overlap === \"boolean\" ? item1.overlap : item0.overlap,\n        allows: item0.allows.concat(item1.allows),\n        backgroundColor: item1.backgroundColor || item0.backgroundColor,\n        borderColor: item1.borderColor || item0.borderColor,\n        textColor: item1.textColor || item0.textColor,\n        classNames: item0.classNames.concat(item1.classNames)\n    };\n}\nvar EVENT_NON_DATE_REFINERS = {\n    id: String,\n    groupId: String,\n    title: String,\n    url: String,\n    interactive: Boolean\n};\nvar EVENT_DATE_REFINERS = {\n    start: identity,\n    end: identity,\n    date: identity,\n    allDay: Boolean\n};\nvar EVENT_REFINERS = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, EVENT_NON_DATE_REFINERS), EVENT_DATE_REFINERS), {\n    extendedProps: identity\n});\nfunction parseEvent(raw, eventSource, context, allowOpenRange, refiners) {\n    if (refiners === void 0) {\n        refiners = buildEventRefiners(context);\n    }\n    var _a = refineEventDef(raw, context, refiners), refined = _a.refined, extra = _a.extra;\n    var defaultAllDay = computeIsDefaultAllDay(eventSource, context);\n    var recurringRes = parseRecurring(refined, defaultAllDay, context.dateEnv, context.pluginHooks.recurringTypes);\n    if (recurringRes) {\n        var def = parseEventDef(refined, extra, eventSource ? eventSource.sourceId : \"\", recurringRes.allDay, Boolean(recurringRes.duration), context);\n        def.recurringDef = {\n            typeId: recurringRes.typeId,\n            typeData: recurringRes.typeData,\n            duration: recurringRes.duration\n        };\n        return {\n            def: def,\n            instance: null\n        };\n    }\n    var singleRes = parseSingle(refined, defaultAllDay, context, allowOpenRange);\n    if (singleRes) {\n        var def = parseEventDef(refined, extra, eventSource ? eventSource.sourceId : \"\", singleRes.allDay, singleRes.hasEnd, context);\n        var instance = createEventInstance(def.defId, singleRes.range, singleRes.forcedStartTzo, singleRes.forcedEndTzo);\n        return {\n            def: def,\n            instance: instance\n        };\n    }\n    return null;\n}\nfunction refineEventDef(raw, context, refiners) {\n    if (refiners === void 0) {\n        refiners = buildEventRefiners(context);\n    }\n    return refineProps(raw, refiners);\n}\nfunction buildEventRefiners(context) {\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, EVENT_UI_REFINERS), EVENT_REFINERS), context.pluginHooks.eventRefiners);\n}\n/*\nWill NOT populate extendedProps with the leftover properties.\nWill NOT populate date-related props.\n*/ function parseEventDef(refined, extra, sourceId, allDay, hasEnd, context) {\n    var def = {\n        title: refined.title || \"\",\n        groupId: refined.groupId || \"\",\n        publicId: refined.id || \"\",\n        url: refined.url || \"\",\n        recurringDef: null,\n        defId: guid(),\n        sourceId: sourceId,\n        allDay: allDay,\n        hasEnd: hasEnd,\n        interactive: refined.interactive,\n        ui: createEventUi(refined, context),\n        extendedProps: (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, refined.extendedProps || {}), extra)\n    };\n    for(var _i = 0, _a = context.pluginHooks.eventDefMemberAdders; _i < _a.length; _i++){\n        var memberAdder = _a[_i];\n        (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)(def, memberAdder(refined));\n    }\n    // help out EventApi from having user modify props\n    Object.freeze(def.ui.classNames);\n    Object.freeze(def.extendedProps);\n    return def;\n}\nfunction parseSingle(refined, defaultAllDay, context, allowOpenRange) {\n    var allDay = refined.allDay;\n    var startMeta;\n    var startMarker = null;\n    var hasEnd = false;\n    var endMeta;\n    var endMarker = null;\n    var startInput = refined.start != null ? refined.start : refined.date;\n    startMeta = context.dateEnv.createMarkerMeta(startInput);\n    if (startMeta) {\n        startMarker = startMeta.marker;\n    } else if (!allowOpenRange) {\n        return null;\n    }\n    if (refined.end != null) {\n        endMeta = context.dateEnv.createMarkerMeta(refined.end);\n    }\n    if (allDay == null) {\n        if (defaultAllDay != null) {\n            allDay = defaultAllDay;\n        } else {\n            // fall back to the date props LAST\n            allDay = (!startMeta || startMeta.isTimeUnspecified) && (!endMeta || endMeta.isTimeUnspecified);\n        }\n    }\n    if (allDay && startMarker) {\n        startMarker = startOfDay(startMarker);\n    }\n    if (endMeta) {\n        endMarker = endMeta.marker;\n        if (allDay) {\n            endMarker = startOfDay(endMarker);\n        }\n        if (startMarker && endMarker <= startMarker) {\n            endMarker = null;\n        }\n    }\n    if (endMarker) {\n        hasEnd = true;\n    } else if (!allowOpenRange) {\n        hasEnd = context.options.forceEventDuration || false;\n        endMarker = context.dateEnv.add(startMarker, allDay ? context.options.defaultAllDayEventDuration : context.options.defaultTimedEventDuration);\n    }\n    return {\n        allDay: allDay,\n        hasEnd: hasEnd,\n        range: {\n            start: startMarker,\n            end: endMarker\n        },\n        forcedStartTzo: startMeta ? startMeta.forcedTzo : null,\n        forcedEndTzo: endMeta ? endMeta.forcedTzo : null\n    };\n}\nfunction computeIsDefaultAllDay(eventSource, context) {\n    var res = null;\n    if (eventSource) {\n        res = eventSource.defaultAllDay;\n    }\n    if (res == null) {\n        res = context.options.defaultAllDay;\n    }\n    return res;\n}\n/* Date stuff that doesn't belong in datelib core\n----------------------------------------------------------------------------------------------------------------------*/ // given a timed range, computes an all-day range that has the same exact duration,\n// but whose start time is aligned with the start of the day.\nfunction computeAlignedDayRange(timedRange) {\n    var dayCnt = Math.floor(diffDays(timedRange.start, timedRange.end)) || 1;\n    var start = startOfDay(timedRange.start);\n    var end = addDays(start, dayCnt);\n    return {\n        start: start,\n        end: end\n    };\n}\n// given a timed range, computes an all-day range based on how for the end date bleeds into the next day\n// TODO: give nextDayThreshold a default arg\nfunction computeVisibleDayRange(timedRange, nextDayThreshold) {\n    if (nextDayThreshold === void 0) {\n        nextDayThreshold = createDuration(0);\n    }\n    var startDay = null;\n    var endDay = null;\n    if (timedRange.end) {\n        endDay = startOfDay(timedRange.end);\n        var endTimeMS = timedRange.end.valueOf() - endDay.valueOf(); // # of milliseconds into `endDay`\n        // If the end time is actually inclusively part of the next day and is equal to or\n        // beyond the next day threshold, adjust the end to be the exclusive end of `endDay`.\n        // Otherwise, leaving it as inclusive will cause it to exclude `endDay`.\n        if (endTimeMS && endTimeMS >= asRoughMs(nextDayThreshold)) {\n            endDay = addDays(endDay, 1);\n        }\n    }\n    if (timedRange.start) {\n        startDay = startOfDay(timedRange.start); // the beginning of the day the range starts\n        // If end is within `startDay` but not past nextDayThreshold, assign the default duration of one day.\n        if (endDay && endDay <= startDay) {\n            endDay = addDays(startDay, 1);\n        }\n    }\n    return {\n        start: startDay,\n        end: endDay\n    };\n}\n// spans from one day into another?\nfunction isMultiDayRange(range) {\n    var visibleRange = computeVisibleDayRange(range);\n    return diffDays(visibleRange.start, visibleRange.end) > 1;\n}\nfunction diffDates(date0, date1, dateEnv, largeUnit) {\n    if (largeUnit === \"year\") {\n        return createDuration(dateEnv.diffWholeYears(date0, date1), \"year\");\n    }\n    if (largeUnit === \"month\") {\n        return createDuration(dateEnv.diffWholeMonths(date0, date1), \"month\");\n    }\n    return diffDayAndTime(date0, date1); // returns a duration\n}\nfunction parseRange(input, dateEnv) {\n    var start = null;\n    var end = null;\n    if (input.start) {\n        start = dateEnv.createMarker(input.start);\n    }\n    if (input.end) {\n        end = dateEnv.createMarker(input.end);\n    }\n    if (!start && !end) {\n        return null;\n    }\n    if (start && end && end < start) {\n        return null;\n    }\n    return {\n        start: start,\n        end: end\n    };\n}\n// SIDE-EFFECT: will mutate ranges.\n// Will return a new array result.\nfunction invertRanges(ranges, constraintRange) {\n    var invertedRanges = [];\n    var start = constraintRange.start; // the end of the previous range. the start of the new range\n    var i;\n    var dateRange;\n    // ranges need to be in order. required for our date-walking algorithm\n    ranges.sort(compareRanges);\n    for(i = 0; i < ranges.length; i += 1){\n        dateRange = ranges[i];\n        // add the span of time before the event (if there is any)\n        if (dateRange.start > start) {\n            invertedRanges.push({\n                start: start,\n                end: dateRange.start\n            });\n        }\n        if (dateRange.end > start) {\n            start = dateRange.end;\n        }\n    }\n    // add the span of time after the last event (if there is any)\n    if (start < constraintRange.end) {\n        invertedRanges.push({\n            start: start,\n            end: constraintRange.end\n        });\n    }\n    return invertedRanges;\n}\nfunction compareRanges(range0, range1) {\n    return range0.start.valueOf() - range1.start.valueOf(); // earlier ranges go first\n}\nfunction intersectRanges(range0, range1) {\n    var start = range0.start, end = range0.end;\n    var newRange = null;\n    if (range1.start !== null) {\n        if (start === null) {\n            start = range1.start;\n        } else {\n            start = new Date(Math.max(start.valueOf(), range1.start.valueOf()));\n        }\n    }\n    if (range1.end != null) {\n        if (end === null) {\n            end = range1.end;\n        } else {\n            end = new Date(Math.min(end.valueOf(), range1.end.valueOf()));\n        }\n    }\n    if (start === null || end === null || start < end) {\n        newRange = {\n            start: start,\n            end: end\n        };\n    }\n    return newRange;\n}\nfunction rangesEqual(range0, range1) {\n    return (range0.start === null ? null : range0.start.valueOf()) === (range1.start === null ? null : range1.start.valueOf()) && (range0.end === null ? null : range0.end.valueOf()) === (range1.end === null ? null : range1.end.valueOf());\n}\nfunction rangesIntersect(range0, range1) {\n    return (range0.end === null || range1.start === null || range0.end > range1.start) && (range0.start === null || range1.end === null || range0.start < range1.end);\n}\nfunction rangeContainsRange(outerRange, innerRange) {\n    return (outerRange.start === null || innerRange.start !== null && innerRange.start >= outerRange.start) && (outerRange.end === null || innerRange.end !== null && innerRange.end <= outerRange.end);\n}\nfunction rangeContainsMarker(range, date) {\n    return (range.start === null || date >= range.start) && (range.end === null || date < range.end);\n}\n// If the given date is not within the given range, move it inside.\n// (If it's past the end, make it one millisecond before the end).\nfunction constrainMarkerToRange(date, range) {\n    if (range.start != null && date < range.start) {\n        return range.start;\n    }\n    if (range.end != null && date >= range.end) {\n        return new Date(range.end.valueOf() - 1);\n    }\n    return date;\n}\n/*\nSpecifying nextDayThreshold signals that all-day ranges should be sliced.\n*/ function sliceEventStore(eventStore, eventUiBases, framingRange, nextDayThreshold) {\n    var inverseBgByGroupId = {};\n    var inverseBgByDefId = {};\n    var defByGroupId = {};\n    var bgRanges = [];\n    var fgRanges = [];\n    var eventUis = compileEventUis(eventStore.defs, eventUiBases);\n    for(var defId in eventStore.defs){\n        var def = eventStore.defs[defId];\n        var ui = eventUis[def.defId];\n        if (ui.display === \"inverse-background\") {\n            if (def.groupId) {\n                inverseBgByGroupId[def.groupId] = [];\n                if (!defByGroupId[def.groupId]) {\n                    defByGroupId[def.groupId] = def;\n                }\n            } else {\n                inverseBgByDefId[defId] = [];\n            }\n        }\n    }\n    for(var instanceId in eventStore.instances){\n        var instance = eventStore.instances[instanceId];\n        var def = eventStore.defs[instance.defId];\n        var ui = eventUis[def.defId];\n        var origRange = instance.range;\n        var normalRange = !def.allDay && nextDayThreshold ? computeVisibleDayRange(origRange, nextDayThreshold) : origRange;\n        var slicedRange = intersectRanges(normalRange, framingRange);\n        if (slicedRange) {\n            if (ui.display === \"inverse-background\") {\n                if (def.groupId) {\n                    inverseBgByGroupId[def.groupId].push(slicedRange);\n                } else {\n                    inverseBgByDefId[instance.defId].push(slicedRange);\n                }\n            } else if (ui.display !== \"none\") {\n                (ui.display === \"background\" ? bgRanges : fgRanges).push({\n                    def: def,\n                    ui: ui,\n                    instance: instance,\n                    range: slicedRange,\n                    isStart: normalRange.start && normalRange.start.valueOf() === slicedRange.start.valueOf(),\n                    isEnd: normalRange.end && normalRange.end.valueOf() === slicedRange.end.valueOf()\n                });\n            }\n        }\n    }\n    for(var groupId in inverseBgByGroupId){\n        var ranges = inverseBgByGroupId[groupId];\n        var invertedRanges = invertRanges(ranges, framingRange);\n        for(var _i = 0, invertedRanges_1 = invertedRanges; _i < invertedRanges_1.length; _i++){\n            var invertedRange = invertedRanges_1[_i];\n            var def = defByGroupId[groupId];\n            var ui = eventUis[def.defId];\n            bgRanges.push({\n                def: def,\n                ui: ui,\n                instance: null,\n                range: invertedRange,\n                isStart: false,\n                isEnd: false\n            });\n        }\n    }\n    for(var defId in inverseBgByDefId){\n        var ranges = inverseBgByDefId[defId];\n        var invertedRanges = invertRanges(ranges, framingRange);\n        for(var _a = 0, invertedRanges_2 = invertedRanges; _a < invertedRanges_2.length; _a++){\n            var invertedRange = invertedRanges_2[_a];\n            bgRanges.push({\n                def: eventStore.defs[defId],\n                ui: eventUis[defId],\n                instance: null,\n                range: invertedRange,\n                isStart: false,\n                isEnd: false\n            });\n        }\n    }\n    return {\n        bg: bgRanges,\n        fg: fgRanges\n    };\n}\nfunction hasBgRendering(def) {\n    return def.ui.display === \"background\" || def.ui.display === \"inverse-background\";\n}\nfunction setElSeg(el, seg) {\n    el.fcSeg = seg;\n}\nfunction getElSeg(el) {\n    return el.fcSeg || el.parentNode.fcSeg || null;\n}\n// event ui computation\nfunction compileEventUis(eventDefs, eventUiBases) {\n    return mapHash(eventDefs, function(eventDef) {\n        return compileEventUi(eventDef, eventUiBases);\n    });\n}\nfunction compileEventUi(eventDef, eventUiBases) {\n    var uis = [];\n    if (eventUiBases[\"\"]) {\n        uis.push(eventUiBases[\"\"]);\n    }\n    if (eventUiBases[eventDef.defId]) {\n        uis.push(eventUiBases[eventDef.defId]);\n    }\n    uis.push(eventDef.ui);\n    return combineEventUis(uis);\n}\nfunction sortEventSegs(segs, eventOrderSpecs) {\n    var objs = segs.map(buildSegCompareObj);\n    objs.sort(function(obj0, obj1) {\n        return compareByFieldSpecs(obj0, obj1, eventOrderSpecs);\n    });\n    return objs.map(function(c) {\n        return c._seg;\n    });\n}\n// returns a object with all primitive props that can be compared\nfunction buildSegCompareObj(seg) {\n    var eventRange = seg.eventRange;\n    var eventDef = eventRange.def;\n    var range = eventRange.instance ? eventRange.instance.range : eventRange.range;\n    var start = range.start ? range.start.valueOf() : 0; // TODO: better support for open-range events\n    var end = range.end ? range.end.valueOf() : 0; // \"\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, eventDef.extendedProps), eventDef), {\n        id: eventDef.publicId,\n        start: start,\n        end: end,\n        duration: end - start,\n        allDay: Number(eventDef.allDay),\n        _seg: seg\n    });\n}\nfunction computeSegDraggable(seg, context) {\n    var pluginHooks = context.pluginHooks;\n    var transformers = pluginHooks.isDraggableTransformers;\n    var _a = seg.eventRange, def = _a.def, ui = _a.ui;\n    var val = ui.startEditable;\n    for(var _i = 0, transformers_1 = transformers; _i < transformers_1.length; _i++){\n        var transformer = transformers_1[_i];\n        val = transformer(val, def, ui, context);\n    }\n    return val;\n}\nfunction computeSegStartResizable(seg, context) {\n    return seg.isStart && seg.eventRange.ui.durationEditable && context.options.eventResizableFromStart;\n}\nfunction computeSegEndResizable(seg, context) {\n    return seg.isEnd && seg.eventRange.ui.durationEditable;\n}\nfunction buildSegTimeText(seg, timeFormat, context, defaultDisplayEventTime, defaultDisplayEventEnd, startOverride, endOverride) {\n    var dateEnv = context.dateEnv, options = context.options;\n    var displayEventTime = options.displayEventTime, displayEventEnd = options.displayEventEnd;\n    var eventDef = seg.eventRange.def;\n    var eventInstance = seg.eventRange.instance;\n    if (displayEventTime == null) {\n        displayEventTime = defaultDisplayEventTime !== false;\n    }\n    if (displayEventEnd == null) {\n        displayEventEnd = defaultDisplayEventEnd !== false;\n    }\n    var wholeEventStart = eventInstance.range.start;\n    var wholeEventEnd = eventInstance.range.end;\n    var segStart = startOverride || seg.start || seg.eventRange.range.start;\n    var segEnd = endOverride || seg.end || seg.eventRange.range.end;\n    var isStartDay = startOfDay(wholeEventStart).valueOf() === startOfDay(segStart).valueOf();\n    var isEndDay = startOfDay(addMs(wholeEventEnd, -1)).valueOf() === startOfDay(addMs(segEnd, -1)).valueOf();\n    if (displayEventTime && !eventDef.allDay && (isStartDay || isEndDay)) {\n        segStart = isStartDay ? wholeEventStart : segStart;\n        segEnd = isEndDay ? wholeEventEnd : segEnd;\n        if (displayEventEnd && eventDef.hasEnd) {\n            return dateEnv.formatRange(segStart, segEnd, timeFormat, {\n                forcedStartTzo: startOverride ? null : eventInstance.forcedStartTzo,\n                forcedEndTzo: endOverride ? null : eventInstance.forcedEndTzo\n            });\n        }\n        return dateEnv.format(segStart, timeFormat, {\n            forcedTzo: startOverride ? null : eventInstance.forcedStartTzo\n        });\n    }\n    return \"\";\n}\nfunction getSegMeta(seg, todayRange, nowDate) {\n    var segRange = seg.eventRange.range;\n    return {\n        isPast: segRange.end < (nowDate || todayRange.start),\n        isFuture: segRange.start >= (nowDate || todayRange.end),\n        isToday: todayRange && rangeContainsMarker(todayRange, segRange.start)\n    };\n}\nfunction getEventClassNames(props) {\n    var classNames = [\n        \"fc-event\"\n    ];\n    if (props.isMirror) {\n        classNames.push(\"fc-event-mirror\");\n    }\n    if (props.isDraggable) {\n        classNames.push(\"fc-event-draggable\");\n    }\n    if (props.isStartResizable || props.isEndResizable) {\n        classNames.push(\"fc-event-resizable\");\n    }\n    if (props.isDragging) {\n        classNames.push(\"fc-event-dragging\");\n    }\n    if (props.isResizing) {\n        classNames.push(\"fc-event-resizing\");\n    }\n    if (props.isSelected) {\n        classNames.push(\"fc-event-selected\");\n    }\n    if (props.isStart) {\n        classNames.push(\"fc-event-start\");\n    }\n    if (props.isEnd) {\n        classNames.push(\"fc-event-end\");\n    }\n    if (props.isPast) {\n        classNames.push(\"fc-event-past\");\n    }\n    if (props.isToday) {\n        classNames.push(\"fc-event-today\");\n    }\n    if (props.isFuture) {\n        classNames.push(\"fc-event-future\");\n    }\n    return classNames;\n}\nfunction buildEventRangeKey(eventRange) {\n    return eventRange.instance ? eventRange.instance.instanceId : eventRange.def.defId + \":\" + eventRange.range.start.toISOString();\n// inverse-background events don't have specific instances. TODO: better solution\n}\nfunction getSegAnchorAttrs(seg, context) {\n    var _a = seg.eventRange, def = _a.def, instance = _a.instance;\n    var url = def.url;\n    if (url) {\n        return {\n            href: url\n        };\n    }\n    var emitter = context.emitter, options = context.options;\n    var eventInteractive = options.eventInteractive;\n    if (eventInteractive == null) {\n        eventInteractive = def.interactive;\n        if (eventInteractive == null) {\n            eventInteractive = Boolean(emitter.hasHandlers(\"eventClick\"));\n        }\n    }\n    // mock what happens in EventClicking\n    if (eventInteractive) {\n        // only attach keyboard-related handlers because click handler is already done in EventClicking\n        return createAriaKeyboardAttrs(function(ev) {\n            emitter.trigger(\"eventClick\", {\n                el: ev.target,\n                event: new EventApi1(context, def, instance),\n                jsEvent: ev,\n                view: context.viewApi\n            });\n        });\n    }\n    return {};\n}\nvar STANDARD_PROPS = {\n    start: identity,\n    end: identity,\n    allDay: Boolean\n};\nfunction parseDateSpan(raw, dateEnv, defaultDuration) {\n    var span = parseOpenDateSpan(raw, dateEnv);\n    var range = span.range;\n    if (!range.start) {\n        return null;\n    }\n    if (!range.end) {\n        if (defaultDuration == null) {\n            return null;\n        }\n        range.end = dateEnv.add(range.start, defaultDuration);\n    }\n    return span;\n}\n/*\nTODO: somehow combine with parseRange?\nWill return null if the start/end props were present but parsed invalidly.\n*/ function parseOpenDateSpan(raw, dateEnv) {\n    var _a = refineProps(raw, STANDARD_PROPS), standardProps = _a.refined, extra = _a.extra;\n    var startMeta = standardProps.start ? dateEnv.createMarkerMeta(standardProps.start) : null;\n    var endMeta = standardProps.end ? dateEnv.createMarkerMeta(standardProps.end) : null;\n    var allDay = standardProps.allDay;\n    if (allDay == null) {\n        allDay = startMeta && startMeta.isTimeUnspecified && (!endMeta || endMeta.isTimeUnspecified);\n    }\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n        range: {\n            start: startMeta ? startMeta.marker : null,\n            end: endMeta ? endMeta.marker : null\n        },\n        allDay: allDay\n    }, extra);\n}\nfunction isDateSpansEqual(span0, span1) {\n    return rangesEqual(span0.range, span1.range) && span0.allDay === span1.allDay && isSpanPropsEqual(span0, span1);\n}\n// the NON-DATE-RELATED props\nfunction isSpanPropsEqual(span0, span1) {\n    for(var propName in span1){\n        if (propName !== \"range\" && propName !== \"allDay\") {\n            if (span0[propName] !== span1[propName]) {\n                return false;\n            }\n        }\n    }\n    // are there any props that span0 has that span1 DOESN'T have?\n    // both have range/allDay, so no need to special-case.\n    for(var propName in span0){\n        if (!(propName in span1)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction buildDateSpanApi(span, dateEnv) {\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, buildRangeApi(span.range, dateEnv, span.allDay)), {\n        allDay: span.allDay\n    });\n}\nfunction buildRangeApiWithTimeZone(range, dateEnv, omitTime) {\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, buildRangeApi(range, dateEnv, omitTime)), {\n        timeZone: dateEnv.timeZone\n    });\n}\nfunction buildRangeApi(range, dateEnv, omitTime) {\n    return {\n        start: dateEnv.toDate(range.start),\n        end: dateEnv.toDate(range.end),\n        startStr: dateEnv.formatIso(range.start, {\n            omitTime: omitTime\n        }),\n        endStr: dateEnv.formatIso(range.end, {\n            omitTime: omitTime\n        })\n    };\n}\nfunction fabricateEventRange(dateSpan, eventUiBases, context) {\n    var res = refineEventDef({\n        editable: false\n    }, context);\n    var def = parseEventDef(res.refined, res.extra, \"\", dateSpan.allDay, true, context);\n    return {\n        def: def,\n        ui: compileEventUi(def, eventUiBases),\n        instance: createEventInstance(def.defId, dateSpan.range),\n        range: dateSpan.range,\n        isStart: true,\n        isEnd: true\n    };\n}\nfunction triggerDateSelect(selection, pev, context) {\n    context.emitter.trigger(\"select\", (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, buildDateSpanApiWithContext(selection, context)), {\n        jsEvent: pev ? pev.origEvent : null,\n        view: context.viewApi || context.calendarApi.view\n    }));\n}\nfunction triggerDateUnselect(pev, context) {\n    context.emitter.trigger(\"unselect\", {\n        jsEvent: pev ? pev.origEvent : null,\n        view: context.viewApi || context.calendarApi.view\n    });\n}\nfunction buildDateSpanApiWithContext(dateSpan, context) {\n    var props = {};\n    for(var _i = 0, _a = context.pluginHooks.dateSpanTransforms; _i < _a.length; _i++){\n        var transform = _a[_i];\n        (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)(props, transform(dateSpan, context));\n    }\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)(props, buildDateSpanApi(dateSpan, context.dateEnv));\n    return props;\n}\n// Given an event's allDay status and start date, return what its fallback end date should be.\n// TODO: rename to computeDefaultEventEnd\nfunction getDefaultEventEnd(allDay, marker, context) {\n    var dateEnv = context.dateEnv, options = context.options;\n    var end = marker;\n    if (allDay) {\n        end = startOfDay(end);\n        end = dateEnv.add(end, options.defaultAllDayEventDuration);\n    } else {\n        end = dateEnv.add(end, options.defaultTimedEventDuration);\n    }\n    return end;\n}\n// applies the mutation to ALL defs/instances within the event store\nfunction applyMutationToEventStore(eventStore, eventConfigBase, mutation, context) {\n    var eventConfigs = compileEventUis(eventStore.defs, eventConfigBase);\n    var dest = createEmptyEventStore();\n    for(var defId in eventStore.defs){\n        var def = eventStore.defs[defId];\n        dest.defs[defId] = applyMutationToEventDef(def, eventConfigs[defId], mutation, context);\n    }\n    for(var instanceId in eventStore.instances){\n        var instance = eventStore.instances[instanceId];\n        var def = dest.defs[instance.defId]; // important to grab the newly modified def\n        dest.instances[instanceId] = applyMutationToEventInstance(instance, def, eventConfigs[instance.defId], mutation, context);\n    }\n    return dest;\n}\nfunction applyMutationToEventDef(eventDef, eventConfig, mutation, context) {\n    var standardProps = mutation.standardProps || {};\n    // if hasEnd has not been specified, guess a good value based on deltas.\n    // if duration will change, there's no way the default duration will persist,\n    // and thus, we need to mark the event as having a real end\n    if (standardProps.hasEnd == null && eventConfig.durationEditable && (mutation.startDelta || mutation.endDelta)) {\n        standardProps.hasEnd = true; // TODO: is this mutation okay?\n    }\n    var copy = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, eventDef), standardProps), {\n        ui: (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, eventDef.ui), standardProps.ui)\n    });\n    if (mutation.extendedProps) {\n        copy.extendedProps = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, copy.extendedProps), mutation.extendedProps);\n    }\n    for(var _i = 0, _a = context.pluginHooks.eventDefMutationAppliers; _i < _a.length; _i++){\n        var applier = _a[_i];\n        applier(copy, mutation, context);\n    }\n    if (!copy.hasEnd && context.options.forceEventDuration) {\n        copy.hasEnd = true;\n    }\n    return copy;\n}\nfunction applyMutationToEventInstance(eventInstance, eventDef, eventConfig, mutation, context) {\n    var dateEnv = context.dateEnv;\n    var forceAllDay = mutation.standardProps && mutation.standardProps.allDay === true;\n    var clearEnd = mutation.standardProps && mutation.standardProps.hasEnd === false;\n    var copy = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, eventInstance);\n    if (forceAllDay) {\n        copy.range = computeAlignedDayRange(copy.range);\n    }\n    if (mutation.datesDelta && eventConfig.startEditable) {\n        copy.range = {\n            start: dateEnv.add(copy.range.start, mutation.datesDelta),\n            end: dateEnv.add(copy.range.end, mutation.datesDelta)\n        };\n    }\n    if (mutation.startDelta && eventConfig.durationEditable) {\n        copy.range = {\n            start: dateEnv.add(copy.range.start, mutation.startDelta),\n            end: copy.range.end\n        };\n    }\n    if (mutation.endDelta && eventConfig.durationEditable) {\n        copy.range = {\n            start: copy.range.start,\n            end: dateEnv.add(copy.range.end, mutation.endDelta)\n        };\n    }\n    if (clearEnd) {\n        copy.range = {\n            start: copy.range.start,\n            end: getDefaultEventEnd(eventDef.allDay, copy.range.start, context)\n        };\n    }\n    // in case event was all-day but the supplied deltas were not\n    // better util for this?\n    if (eventDef.allDay) {\n        copy.range = {\n            start: startOfDay(copy.range.start),\n            end: startOfDay(copy.range.end)\n        };\n    }\n    // handle invalid durations\n    if (copy.range.end < copy.range.start) {\n        copy.range.end = getDefaultEventEnd(eventDef.allDay, copy.range.start, context);\n    }\n    return copy;\n}\n// no public types yet. when there are, export from:\n// import {} from './api-type-deps'\nvar ViewApi1 = /** @class */ function() {\n    var ViewApi = function ViewApi(type, getCurrentData, dateEnv) {\n        this.type = type;\n        this.getCurrentData = getCurrentData;\n        this.dateEnv = dateEnv;\n    };\n    Object.defineProperty(ViewApi.prototype, \"calendar\", {\n        get: function get() {\n            return this.getCurrentData().calendarApi;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ViewApi.prototype, \"title\", {\n        get: function get() {\n            return this.getCurrentData().viewTitle;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ViewApi.prototype, \"activeStart\", {\n        get: function get() {\n            return this.dateEnv.toDate(this.getCurrentData().dateProfile.activeRange.start);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ViewApi.prototype, \"activeEnd\", {\n        get: function get() {\n            return this.dateEnv.toDate(this.getCurrentData().dateProfile.activeRange.end);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ViewApi.prototype, \"currentStart\", {\n        get: function get() {\n            return this.dateEnv.toDate(this.getCurrentData().dateProfile.currentRange.start);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ViewApi.prototype, \"currentEnd\", {\n        get: function get() {\n            return this.dateEnv.toDate(this.getCurrentData().dateProfile.currentRange.end);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ViewApi.prototype.getOption = function(name) {\n        return this.getCurrentData().options[name]; // are the view-specific options\n    };\n    return ViewApi;\n}();\nvar EVENT_SOURCE_REFINERS = {\n    id: String,\n    defaultAllDay: Boolean,\n    url: String,\n    format: String,\n    events: identity,\n    eventDataTransform: identity,\n    // for any network-related sources\n    success: identity,\n    failure: identity\n};\nfunction parseEventSource(raw, context, refiners) {\n    if (refiners === void 0) {\n        refiners = buildEventSourceRefiners(context);\n    }\n    var rawObj;\n    if (typeof raw === \"string\") {\n        rawObj = {\n            url: raw\n        };\n    } else if (typeof raw === \"function\" || Array.isArray(raw)) {\n        rawObj = {\n            events: raw\n        };\n    } else if (typeof raw === \"object\" && raw) {\n        rawObj = raw;\n    }\n    if (rawObj) {\n        var _a = refineProps(rawObj, refiners), refined = _a.refined, extra = _a.extra;\n        var metaRes = buildEventSourceMeta(refined, context);\n        if (metaRes) {\n            return {\n                _raw: raw,\n                isFetching: false,\n                latestFetchId: \"\",\n                fetchRange: null,\n                defaultAllDay: refined.defaultAllDay,\n                eventDataTransform: refined.eventDataTransform,\n                success: refined.success,\n                failure: refined.failure,\n                publicId: refined.id || \"\",\n                sourceId: guid(),\n                sourceDefId: metaRes.sourceDefId,\n                meta: metaRes.meta,\n                ui: createEventUi(refined, context),\n                extendedProps: extra\n            };\n        }\n    }\n    return null;\n}\nfunction buildEventSourceRefiners(context) {\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, EVENT_UI_REFINERS), EVENT_SOURCE_REFINERS), context.pluginHooks.eventSourceRefiners);\n}\nfunction buildEventSourceMeta(raw, context) {\n    var defs = context.pluginHooks.eventSourceDefs;\n    for(var i = defs.length - 1; i >= 0; i -= 1){\n        var def = defs[i];\n        var meta = def.parseMeta(raw);\n        if (meta) {\n            return {\n                sourceDefId: i,\n                meta: meta\n            };\n        }\n    }\n    return null;\n}\nfunction reduceCurrentDate(currentDate, action) {\n    switch(action.type){\n        case \"CHANGE_DATE\":\n            return action.dateMarker;\n        default:\n            return currentDate;\n    }\n}\nfunction getInitialDate(options, dateEnv) {\n    var initialDateInput = options.initialDate;\n    // compute the initial ambig-timezone date\n    if (initialDateInput != null) {\n        return dateEnv.createMarker(initialDateInput);\n    }\n    return getNow(options.now, dateEnv); // getNow already returns unzoned\n}\nfunction getNow(nowInput, dateEnv) {\n    if (typeof nowInput === \"function\") {\n        nowInput = nowInput();\n    }\n    if (nowInput == null) {\n        return dateEnv.createNowMarker();\n    }\n    return dateEnv.createMarker(nowInput);\n}\nvar CalendarApi1 = /** @class */ function() {\n    var CalendarApi = function CalendarApi() {};\n    CalendarApi.prototype.getCurrentData = function() {\n        return this.currentDataManager.getCurrentData();\n    };\n    CalendarApi.prototype.dispatch = function(action) {\n        return this.currentDataManager.dispatch(action);\n    };\n    Object.defineProperty(CalendarApi.prototype, \"view\", {\n        get: function get() {\n            return this.getCurrentData().viewApi;\n        } // for public API\n        ,\n        enumerable: false,\n        configurable: true\n    });\n    CalendarApi.prototype.batchRendering = function(callback) {\n        callback();\n    };\n    CalendarApi.prototype.updateSize = function() {\n        this.trigger(\"_resize\", true);\n    };\n    // Options\n    // -----------------------------------------------------------------------------------------------------------------\n    CalendarApi.prototype.setOption = function(name, val) {\n        this.dispatch({\n            type: \"SET_OPTION\",\n            optionName: name,\n            rawOptionValue: val\n        });\n    };\n    CalendarApi.prototype.getOption = function(name) {\n        return this.currentDataManager.currentCalendarOptionsInput[name];\n    };\n    CalendarApi.prototype.getAvailableLocaleCodes = function() {\n        return Object.keys(this.getCurrentData().availableRawLocales);\n    };\n    // Trigger\n    // -----------------------------------------------------------------------------------------------------------------\n    CalendarApi.prototype.on = function(handlerName, handler) {\n        var currentDataManager = this.currentDataManager;\n        if (currentDataManager.currentCalendarOptionsRefiners[handlerName]) {\n            currentDataManager.emitter.on(handlerName, handler);\n        } else {\n            console.warn(\"Unknown listener name '\" + handlerName + \"'\");\n        }\n    };\n    CalendarApi.prototype.off = function(handlerName, handler) {\n        this.currentDataManager.emitter.off(handlerName, handler);\n    };\n    // not meant for public use\n    CalendarApi.prototype.trigger = function(handlerName) {\n        var _a;\n        var args = [];\n        for(var _i = 1; _i < arguments.length; _i++){\n            args[_i - 1] = arguments[_i];\n        }\n        (_a = this.currentDataManager.emitter).trigger.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([\n            handlerName\n        ], args));\n    };\n    // View\n    // -----------------------------------------------------------------------------------------------------------------\n    CalendarApi.prototype.changeView = function(viewType, dateOrRange) {\n        var _this = this;\n        this.batchRendering(function() {\n            _this.unselect();\n            if (dateOrRange) {\n                if (dateOrRange.start && dateOrRange.end) {\n                    _this.dispatch({\n                        type: \"CHANGE_VIEW_TYPE\",\n                        viewType: viewType\n                    });\n                    _this.dispatch({\n                        type: \"SET_OPTION\",\n                        optionName: \"visibleRange\",\n                        rawOptionValue: dateOrRange\n                    });\n                } else {\n                    var dateEnv = _this.getCurrentData().dateEnv;\n                    _this.dispatch({\n                        type: \"CHANGE_VIEW_TYPE\",\n                        viewType: viewType,\n                        dateMarker: dateEnv.createMarker(dateOrRange)\n                    });\n                }\n            } else {\n                _this.dispatch({\n                    type: \"CHANGE_VIEW_TYPE\",\n                    viewType: viewType\n                });\n            }\n        });\n    };\n    // Forces navigation to a view for the given date.\n    // `viewType` can be a specific view name or a generic one like \"week\" or \"day\".\n    // needs to change\n    CalendarApi.prototype.zoomTo = function(dateMarker, viewType) {\n        var state = this.getCurrentData();\n        var spec;\n        viewType = viewType || \"day\"; // day is default zoom\n        spec = state.viewSpecs[viewType] || this.getUnitViewSpec(viewType);\n        this.unselect();\n        if (spec) {\n            this.dispatch({\n                type: \"CHANGE_VIEW_TYPE\",\n                viewType: spec.type,\n                dateMarker: dateMarker\n            });\n        } else {\n            this.dispatch({\n                type: \"CHANGE_DATE\",\n                dateMarker: dateMarker\n            });\n        }\n    };\n    // Given a duration singular unit, like \"week\" or \"day\", finds a matching view spec.\n    // Preference is given to views that have corresponding buttons.\n    CalendarApi.prototype.getUnitViewSpec = function(unit) {\n        var _a = this.getCurrentData(), viewSpecs = _a.viewSpecs, toolbarConfig = _a.toolbarConfig;\n        var viewTypes = [].concat(toolbarConfig.header ? toolbarConfig.header.viewsWithButtons : [], toolbarConfig.footer ? toolbarConfig.footer.viewsWithButtons : []);\n        var i;\n        var spec;\n        for(var viewType in viewSpecs){\n            viewTypes.push(viewType);\n        }\n        for(i = 0; i < viewTypes.length; i += 1){\n            spec = viewSpecs[viewTypes[i]];\n            if (spec) {\n                if (spec.singleUnit === unit) {\n                    return spec;\n                }\n            }\n        }\n        return null;\n    };\n    // Current Date\n    // -----------------------------------------------------------------------------------------------------------------\n    CalendarApi.prototype.prev = function() {\n        this.unselect();\n        this.dispatch({\n            type: \"PREV\"\n        });\n    };\n    CalendarApi.prototype.next = function() {\n        this.unselect();\n        this.dispatch({\n            type: \"NEXT\"\n        });\n    };\n    CalendarApi.prototype.prevYear = function() {\n        var state = this.getCurrentData();\n        this.unselect();\n        this.dispatch({\n            type: \"CHANGE_DATE\",\n            dateMarker: state.dateEnv.addYears(state.currentDate, -1)\n        });\n    };\n    CalendarApi.prototype.nextYear = function() {\n        var state = this.getCurrentData();\n        this.unselect();\n        this.dispatch({\n            type: \"CHANGE_DATE\",\n            dateMarker: state.dateEnv.addYears(state.currentDate, 1)\n        });\n    };\n    CalendarApi.prototype.today = function() {\n        var state = this.getCurrentData();\n        this.unselect();\n        this.dispatch({\n            type: \"CHANGE_DATE\",\n            dateMarker: getNow(state.calendarOptions.now, state.dateEnv)\n        });\n    };\n    CalendarApi.prototype.gotoDate = function(zonedDateInput) {\n        var state = this.getCurrentData();\n        this.unselect();\n        this.dispatch({\n            type: \"CHANGE_DATE\",\n            dateMarker: state.dateEnv.createMarker(zonedDateInput)\n        });\n    };\n    CalendarApi.prototype.incrementDate = function(deltaInput) {\n        var state = this.getCurrentData();\n        var delta = createDuration(deltaInput);\n        if (delta) {\n            this.unselect();\n            this.dispatch({\n                type: \"CHANGE_DATE\",\n                dateMarker: state.dateEnv.add(state.currentDate, delta)\n            });\n        }\n    };\n    // for external API\n    CalendarApi.prototype.getDate = function() {\n        var state = this.getCurrentData();\n        return state.dateEnv.toDate(state.currentDate);\n    };\n    // Date Formatting Utils\n    // -----------------------------------------------------------------------------------------------------------------\n    CalendarApi.prototype.formatDate = function(d, formatter) {\n        var dateEnv = this.getCurrentData().dateEnv;\n        return dateEnv.format(dateEnv.createMarker(d), createFormatter(formatter));\n    };\n    // `settings` is for formatter AND isEndExclusive\n    CalendarApi.prototype.formatRange = function(d0, d1, settings) {\n        var dateEnv = this.getCurrentData().dateEnv;\n        return dateEnv.formatRange(dateEnv.createMarker(d0), dateEnv.createMarker(d1), createFormatter(settings), settings);\n    };\n    CalendarApi.prototype.formatIso = function(d, omitTime) {\n        var dateEnv = this.getCurrentData().dateEnv;\n        return dateEnv.formatIso(dateEnv.createMarker(d), {\n            omitTime: omitTime\n        });\n    };\n    // Date Selection / Event Selection / DayClick\n    // -----------------------------------------------------------------------------------------------------------------\n    // this public method receives start/end dates in any format, with any timezone\n    // NOTE: args were changed from v3\n    CalendarApi.prototype.select = function(dateOrObj, endDate) {\n        var selectionInput;\n        if (endDate == null) {\n            if (dateOrObj.start != null) {\n                selectionInput = dateOrObj;\n            } else {\n                selectionInput = {\n                    start: dateOrObj,\n                    end: null\n                };\n            }\n        } else {\n            selectionInput = {\n                start: dateOrObj,\n                end: endDate\n            };\n        }\n        var state = this.getCurrentData();\n        var selection = parseDateSpan(selectionInput, state.dateEnv, createDuration({\n            days: 1\n        }));\n        if (selection) {\n            this.dispatch({\n                type: \"SELECT_DATES\",\n                selection: selection\n            });\n            triggerDateSelect(selection, null, state);\n        }\n    };\n    // public method\n    CalendarApi.prototype.unselect = function(pev) {\n        var state = this.getCurrentData();\n        if (state.dateSelection) {\n            this.dispatch({\n                type: \"UNSELECT_DATES\"\n            });\n            triggerDateUnselect(pev, state);\n        }\n    };\n    // Public Events API\n    // -----------------------------------------------------------------------------------------------------------------\n    CalendarApi.prototype.addEvent = function(eventInput, sourceInput) {\n        if (_instanceof(eventInput, EventApi1)) {\n            var def = eventInput._def;\n            var instance = eventInput._instance;\n            var currentData = this.getCurrentData();\n            // not already present? don't want to add an old snapshot\n            if (!currentData.eventStore.defs[def.defId]) {\n                this.dispatch({\n                    type: \"ADD_EVENTS\",\n                    eventStore: eventTupleToStore({\n                        def: def,\n                        instance: instance\n                    })\n                });\n                this.triggerEventAdd(eventInput);\n            }\n            return eventInput;\n        }\n        var state = this.getCurrentData();\n        var eventSource;\n        if (_instanceof(sourceInput, EventSourceApi1)) {\n            eventSource = sourceInput.internalEventSource;\n        } else if (typeof sourceInput === \"boolean\") {\n            if (sourceInput) {\n                eventSource = hashValuesToArray(state.eventSources)[0];\n            }\n        } else if (sourceInput != null) {\n            var sourceApi = this.getEventSourceById(sourceInput); // TODO: use an internal function\n            if (!sourceApi) {\n                console.warn('Could not find an event source with ID \"' + sourceInput + '\"'); // TODO: test\n                return null;\n            }\n            eventSource = sourceApi.internalEventSource;\n        }\n        var tuple = parseEvent(eventInput, eventSource, state, false);\n        if (tuple) {\n            var newEventApi = new EventApi1(state, tuple.def, tuple.def.recurringDef ? null : tuple.instance);\n            this.dispatch({\n                type: \"ADD_EVENTS\",\n                eventStore: eventTupleToStore(tuple)\n            });\n            this.triggerEventAdd(newEventApi);\n            return newEventApi;\n        }\n        return null;\n    };\n    CalendarApi.prototype.triggerEventAdd = function(eventApi) {\n        var _this = this;\n        var emitter = this.getCurrentData().emitter;\n        emitter.trigger(\"eventAdd\", {\n            event: eventApi,\n            relatedEvents: [],\n            revert: function revert() {\n                _this.dispatch({\n                    type: \"REMOVE_EVENTS\",\n                    eventStore: eventApiToStore(eventApi)\n                });\n            }\n        });\n    };\n    // TODO: optimize\n    CalendarApi.prototype.getEventById = function(id) {\n        var state = this.getCurrentData();\n        var _a = state.eventStore, defs = _a.defs, instances = _a.instances;\n        id = String(id);\n        for(var defId in defs){\n            var def = defs[defId];\n            if (def.publicId === id) {\n                if (def.recurringDef) {\n                    return new EventApi1(state, def, null);\n                }\n                for(var instanceId in instances){\n                    var instance = instances[instanceId];\n                    if (instance.defId === def.defId) {\n                        return new EventApi1(state, def, instance);\n                    }\n                }\n            }\n        }\n        return null;\n    };\n    CalendarApi.prototype.getEvents = function() {\n        var currentData = this.getCurrentData();\n        return buildEventApis(currentData.eventStore, currentData);\n    };\n    CalendarApi.prototype.removeAllEvents = function() {\n        this.dispatch({\n            type: \"REMOVE_ALL_EVENTS\"\n        });\n    };\n    // Public Event Sources API\n    // -----------------------------------------------------------------------------------------------------------------\n    CalendarApi.prototype.getEventSources = function() {\n        var state = this.getCurrentData();\n        var sourceHash = state.eventSources;\n        var sourceApis = [];\n        for(var internalId in sourceHash){\n            sourceApis.push(new EventSourceApi1(state, sourceHash[internalId]));\n        }\n        return sourceApis;\n    };\n    CalendarApi.prototype.getEventSourceById = function(id) {\n        var state = this.getCurrentData();\n        var sourceHash = state.eventSources;\n        id = String(id);\n        for(var sourceId in sourceHash){\n            if (sourceHash[sourceId].publicId === id) {\n                return new EventSourceApi1(state, sourceHash[sourceId]);\n            }\n        }\n        return null;\n    };\n    CalendarApi.prototype.addEventSource = function(sourceInput) {\n        var state = this.getCurrentData();\n        if (_instanceof(sourceInput, EventSourceApi1)) {\n            // not already present? don't want to add an old snapshot\n            if (!state.eventSources[sourceInput.internalEventSource.sourceId]) {\n                this.dispatch({\n                    type: \"ADD_EVENT_SOURCES\",\n                    sources: [\n                        sourceInput.internalEventSource\n                    ]\n                });\n            }\n            return sourceInput;\n        }\n        var eventSource = parseEventSource(sourceInput, state);\n        if (eventSource) {\n            this.dispatch({\n                type: \"ADD_EVENT_SOURCES\",\n                sources: [\n                    eventSource\n                ]\n            });\n            return new EventSourceApi1(state, eventSource);\n        }\n        return null;\n    };\n    CalendarApi.prototype.removeAllEventSources = function() {\n        this.dispatch({\n            type: \"REMOVE_ALL_EVENT_SOURCES\"\n        });\n    };\n    CalendarApi.prototype.refetchEvents = function() {\n        this.dispatch({\n            type: \"FETCH_EVENT_SOURCES\",\n            isRefetch: true\n        });\n    };\n    // Scroll\n    // -----------------------------------------------------------------------------------------------------------------\n    CalendarApi.prototype.scrollToTime = function(timeInput) {\n        var time = createDuration(timeInput);\n        if (time) {\n            this.trigger(\"_scrollRequest\", {\n                time: time\n            });\n        }\n    };\n    return CalendarApi;\n}();\nvar EventApi1 = /** @class */ function() {\n    var EventApi = // instance will be null if expressing a recurring event that has no current instances,\n    // OR if trying to validate an incoming external event that has no dates assigned\n    function EventApi(context, def, instance) {\n        this._context = context;\n        this._def = def;\n        this._instance = instance || null;\n    };\n    /*\n    TODO: make event struct more responsible for this\n    */ EventApi.prototype.setProp = function(name, val) {\n        var _a, _b;\n        if (name in EVENT_DATE_REFINERS) {\n            console.warn(\"Could not set date-related prop 'name'. Use one of the date-related methods instead.\");\n        // TODO: make proper aliasing system?\n        } else if (name === \"id\") {\n            val = EVENT_NON_DATE_REFINERS[name](val);\n            this.mutate({\n                standardProps: {\n                    publicId: val\n                }\n            });\n        } else if (name in EVENT_NON_DATE_REFINERS) {\n            val = EVENT_NON_DATE_REFINERS[name](val);\n            this.mutate({\n                standardProps: (_a = {}, _a[name] = val, _a)\n            });\n        } else if (name in EVENT_UI_REFINERS) {\n            var ui = EVENT_UI_REFINERS[name](val);\n            if (name === \"color\") {\n                ui = {\n                    backgroundColor: val,\n                    borderColor: val\n                };\n            } else if (name === \"editable\") {\n                ui = {\n                    startEditable: val,\n                    durationEditable: val\n                };\n            } else {\n                ui = (_b = {}, _b[name] = val, _b);\n            }\n            this.mutate({\n                standardProps: {\n                    ui: ui\n                }\n            });\n        } else {\n            console.warn(\"Could not set prop '\" + name + \"'. Use setExtendedProp instead.\");\n        }\n    };\n    EventApi.prototype.setExtendedProp = function(name, val) {\n        var _a;\n        this.mutate({\n            extendedProps: (_a = {}, _a[name] = val, _a)\n        });\n    };\n    EventApi.prototype.setStart = function(startInput, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        var dateEnv = this._context.dateEnv;\n        var start = dateEnv.createMarker(startInput);\n        if (start && this._instance) {\n            var instanceRange = this._instance.range;\n            var startDelta = diffDates(instanceRange.start, start, dateEnv, options.granularity); // what if parsed bad!?\n            if (options.maintainDuration) {\n                this.mutate({\n                    datesDelta: startDelta\n                });\n            } else {\n                this.mutate({\n                    startDelta: startDelta\n                });\n            }\n        }\n    };\n    EventApi.prototype.setEnd = function(endInput, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        var dateEnv = this._context.dateEnv;\n        var end;\n        if (endInput != null) {\n            end = dateEnv.createMarker(endInput);\n            if (!end) {\n                return; // TODO: warning if parsed bad\n            }\n        }\n        if (this._instance) {\n            if (end) {\n                var endDelta = diffDates(this._instance.range.end, end, dateEnv, options.granularity);\n                this.mutate({\n                    endDelta: endDelta\n                });\n            } else {\n                this.mutate({\n                    standardProps: {\n                        hasEnd: false\n                    }\n                });\n            }\n        }\n    };\n    EventApi.prototype.setDates = function(startInput, endInput, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        var dateEnv = this._context.dateEnv;\n        var standardProps = {\n            allDay: options.allDay\n        };\n        var start = dateEnv.createMarker(startInput);\n        var end;\n        if (!start) {\n            return; // TODO: warning if parsed bad\n        }\n        if (endInput != null) {\n            end = dateEnv.createMarker(endInput);\n            if (!end) {\n                return;\n            }\n        }\n        if (this._instance) {\n            var instanceRange = this._instance.range;\n            // when computing the diff for an event being converted to all-day,\n            // compute diff off of the all-day values the way event-mutation does.\n            if (options.allDay === true) {\n                instanceRange = computeAlignedDayRange(instanceRange);\n            }\n            var startDelta = diffDates(instanceRange.start, start, dateEnv, options.granularity);\n            if (end) {\n                var endDelta = diffDates(instanceRange.end, end, dateEnv, options.granularity);\n                if (durationsEqual(startDelta, endDelta)) {\n                    this.mutate({\n                        datesDelta: startDelta,\n                        standardProps: standardProps\n                    });\n                } else {\n                    this.mutate({\n                        startDelta: startDelta,\n                        endDelta: endDelta,\n                        standardProps: standardProps\n                    });\n                }\n            } else {\n                standardProps.hasEnd = false;\n                this.mutate({\n                    datesDelta: startDelta,\n                    standardProps: standardProps\n                });\n            }\n        }\n    };\n    EventApi.prototype.moveStart = function(deltaInput) {\n        var delta = createDuration(deltaInput);\n        if (delta) {\n            this.mutate({\n                startDelta: delta\n            });\n        }\n    };\n    EventApi.prototype.moveEnd = function(deltaInput) {\n        var delta = createDuration(deltaInput);\n        if (delta) {\n            this.mutate({\n                endDelta: delta\n            });\n        }\n    };\n    EventApi.prototype.moveDates = function(deltaInput) {\n        var delta = createDuration(deltaInput);\n        if (delta) {\n            this.mutate({\n                datesDelta: delta\n            });\n        }\n    };\n    EventApi.prototype.setAllDay = function(allDay, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        var standardProps = {\n            allDay: allDay\n        };\n        var maintainDuration = options.maintainDuration;\n        if (maintainDuration == null) {\n            maintainDuration = this._context.options.allDayMaintainDuration;\n        }\n        if (this._def.allDay !== allDay) {\n            standardProps.hasEnd = maintainDuration;\n        }\n        this.mutate({\n            standardProps: standardProps\n        });\n    };\n    EventApi.prototype.formatRange = function(formatInput) {\n        var dateEnv = this._context.dateEnv;\n        var instance = this._instance;\n        var formatter = createFormatter(formatInput);\n        if (this._def.hasEnd) {\n            return dateEnv.formatRange(instance.range.start, instance.range.end, formatter, {\n                forcedStartTzo: instance.forcedStartTzo,\n                forcedEndTzo: instance.forcedEndTzo\n            });\n        }\n        return dateEnv.format(instance.range.start, formatter, {\n            forcedTzo: instance.forcedStartTzo\n        });\n    };\n    EventApi.prototype.mutate = function(mutation) {\n        var instance = this._instance;\n        if (instance) {\n            var def = this._def;\n            var context_1 = this._context;\n            var eventStore_1 = context_1.getCurrentData().eventStore;\n            var relevantEvents = getRelevantEvents(eventStore_1, instance.instanceId);\n            var eventConfigBase = {\n                \"\": {\n                    display: \"\",\n                    startEditable: true,\n                    durationEditable: true,\n                    constraints: [],\n                    overlap: null,\n                    allows: [],\n                    backgroundColor: \"\",\n                    borderColor: \"\",\n                    textColor: \"\",\n                    classNames: []\n                }\n            };\n            relevantEvents = applyMutationToEventStore(relevantEvents, eventConfigBase, mutation, context_1);\n            var oldEvent = new EventApi(context_1, def, instance); // snapshot\n            this._def = relevantEvents.defs[def.defId];\n            this._instance = relevantEvents.instances[instance.instanceId];\n            context_1.dispatch({\n                type: \"MERGE_EVENTS\",\n                eventStore: relevantEvents\n            });\n            context_1.emitter.trigger(\"eventChange\", {\n                oldEvent: oldEvent,\n                event: this,\n                relatedEvents: buildEventApis(relevantEvents, context_1, instance),\n                revert: function revert() {\n                    context_1.dispatch({\n                        type: \"RESET_EVENTS\",\n                        eventStore: eventStore_1\n                    });\n                }\n            });\n        }\n    };\n    EventApi.prototype.remove = function() {\n        var context = this._context;\n        var asStore = eventApiToStore(this);\n        context.dispatch({\n            type: \"REMOVE_EVENTS\",\n            eventStore: asStore\n        });\n        context.emitter.trigger(\"eventRemove\", {\n            event: this,\n            relatedEvents: [],\n            revert: function revert() {\n                context.dispatch({\n                    type: \"MERGE_EVENTS\",\n                    eventStore: asStore\n                });\n            }\n        });\n    };\n    Object.defineProperty(EventApi.prototype, \"source\", {\n        get: function get() {\n            var sourceId = this._def.sourceId;\n            if (sourceId) {\n                return new EventSourceApi1(this._context, this._context.getCurrentData().eventSources[sourceId]);\n            }\n            return null;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi.prototype, \"start\", {\n        get: function get() {\n            return this._instance ? this._context.dateEnv.toDate(this._instance.range.start) : null;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi.prototype, \"end\", {\n        get: function get() {\n            return this._instance && this._def.hasEnd ? this._context.dateEnv.toDate(this._instance.range.end) : null;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi.prototype, \"startStr\", {\n        get: function get() {\n            var instance = this._instance;\n            if (instance) {\n                return this._context.dateEnv.formatIso(instance.range.start, {\n                    omitTime: this._def.allDay,\n                    forcedTzo: instance.forcedStartTzo\n                });\n            }\n            return \"\";\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi.prototype, \"endStr\", {\n        get: function get() {\n            var instance = this._instance;\n            if (instance && this._def.hasEnd) {\n                return this._context.dateEnv.formatIso(instance.range.end, {\n                    omitTime: this._def.allDay,\n                    forcedTzo: instance.forcedEndTzo\n                });\n            }\n            return \"\";\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi.prototype, \"id\", {\n        // computable props that all access the def\n        // TODO: find a TypeScript-compatible way to do this at scale\n        get: function get() {\n            return this._def.publicId;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi.prototype, \"groupId\", {\n        get: function get() {\n            return this._def.groupId;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi.prototype, \"allDay\", {\n        get: function get() {\n            return this._def.allDay;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi.prototype, \"title\", {\n        get: function get() {\n            return this._def.title;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi.prototype, \"url\", {\n        get: function get() {\n            return this._def.url;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi.prototype, \"display\", {\n        get: function get() {\n            return this._def.ui.display || \"auto\";\n        } // bad. just normalize the type earlier\n        ,\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi.prototype, \"startEditable\", {\n        get: function get() {\n            return this._def.ui.startEditable;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi.prototype, \"durationEditable\", {\n        get: function get() {\n            return this._def.ui.durationEditable;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi.prototype, \"constraint\", {\n        get: function get() {\n            return this._def.ui.constraints[0] || null;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi.prototype, \"overlap\", {\n        get: function get() {\n            return this._def.ui.overlap;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi.prototype, \"allow\", {\n        get: function get() {\n            return this._def.ui.allows[0] || null;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi.prototype, \"backgroundColor\", {\n        get: function get() {\n            return this._def.ui.backgroundColor;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi.prototype, \"borderColor\", {\n        get: function get() {\n            return this._def.ui.borderColor;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi.prototype, \"textColor\", {\n        get: function get() {\n            return this._def.ui.textColor;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi.prototype, \"classNames\", {\n        // NOTE: user can't modify these because Object.freeze was called in event-def parsing\n        get: function get() {\n            return this._def.ui.classNames;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EventApi.prototype, \"extendedProps\", {\n        get: function get() {\n            return this._def.extendedProps;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    EventApi.prototype.toPlainObject = function(settings) {\n        if (settings === void 0) {\n            settings = {};\n        }\n        var def = this._def;\n        var ui = def.ui;\n        var _a = this, startStr = _a.startStr, endStr = _a.endStr;\n        var res = {};\n        if (def.title) {\n            res.title = def.title;\n        }\n        if (startStr) {\n            res.start = startStr;\n        }\n        if (endStr) {\n            res.end = endStr;\n        }\n        if (def.publicId) {\n            res.id = def.publicId;\n        }\n        if (def.groupId) {\n            res.groupId = def.groupId;\n        }\n        if (def.url) {\n            res.url = def.url;\n        }\n        if (ui.display && ui.display !== \"auto\") {\n            res.display = ui.display;\n        }\n        // TODO: what about recurring-event properties???\n        // TODO: include startEditable/durationEditable/constraint/overlap/allow\n        if (settings.collapseColor && ui.backgroundColor && ui.backgroundColor === ui.borderColor) {\n            res.color = ui.backgroundColor;\n        } else {\n            if (ui.backgroundColor) {\n                res.backgroundColor = ui.backgroundColor;\n            }\n            if (ui.borderColor) {\n                res.borderColor = ui.borderColor;\n            }\n        }\n        if (ui.textColor) {\n            res.textColor = ui.textColor;\n        }\n        if (ui.classNames.length) {\n            res.classNames = ui.classNames;\n        }\n        if (Object.keys(def.extendedProps).length) {\n            if (settings.collapseExtendedProps) {\n                (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)(res, def.extendedProps);\n            } else {\n                res.extendedProps = def.extendedProps;\n            }\n        }\n        return res;\n    };\n    EventApi.prototype.toJSON = function() {\n        return this.toPlainObject();\n    };\n    return EventApi;\n}();\nfunction eventApiToStore(eventApi) {\n    var _a, _b;\n    var def = eventApi._def;\n    var instance = eventApi._instance;\n    return {\n        defs: (_a = {}, _a[def.defId] = def, _a),\n        instances: instance ? (_b = {}, _b[instance.instanceId] = instance, _b) : {}\n    };\n}\nfunction buildEventApis(eventStore, context, excludeInstance) {\n    var defs = eventStore.defs, instances = eventStore.instances;\n    var eventApis = [];\n    var excludeInstanceId = excludeInstance ? excludeInstance.instanceId : \"\";\n    for(var id in instances){\n        var instance = instances[id];\n        var def = defs[instance.defId];\n        if (instance.instanceId !== excludeInstanceId) {\n            eventApis.push(new EventApi1(context, def, instance));\n        }\n    }\n    return eventApis;\n}\nvar calendarSystemClassMap = {};\nfunction registerCalendarSystem(name, theClass) {\n    calendarSystemClassMap[name] = theClass;\n}\nfunction createCalendarSystem(name) {\n    return new calendarSystemClassMap[name]();\n}\nvar GregorianCalendarSystem1 = /** @class */ function() {\n    var GregorianCalendarSystem = function GregorianCalendarSystem() {};\n    GregorianCalendarSystem.prototype.getMarkerYear = function(d) {\n        return d.getUTCFullYear();\n    };\n    GregorianCalendarSystem.prototype.getMarkerMonth = function(d) {\n        return d.getUTCMonth();\n    };\n    GregorianCalendarSystem.prototype.getMarkerDay = function(d) {\n        return d.getUTCDate();\n    };\n    GregorianCalendarSystem.prototype.arrayToMarker = function(arr) {\n        return arrayToUtcDate(arr);\n    };\n    GregorianCalendarSystem.prototype.markerToArray = function(marker) {\n        return dateToUtcArray(marker);\n    };\n    return GregorianCalendarSystem;\n}();\nregisterCalendarSystem(\"gregory\", GregorianCalendarSystem1);\nvar ISO_RE = /^\\s*(\\d{4})(-?(\\d{2})(-?(\\d{2})([T ](\\d{2}):?(\\d{2})(:?(\\d{2})(\\.(\\d+))?)?(Z|(([-+])(\\d{2})(:?(\\d{2}))?))?)?)?)?$/;\nfunction parse(str) {\n    var m = ISO_RE.exec(str);\n    if (m) {\n        var marker = new Date(Date.UTC(Number(m[1]), m[3] ? Number(m[3]) - 1 : 0, Number(m[5] || 1), Number(m[7] || 0), Number(m[8] || 0), Number(m[10] || 0), m[12] ? Number(\"0.\" + m[12]) * 1000 : 0));\n        if (isValidDate(marker)) {\n            var timeZoneOffset = null;\n            if (m[13]) {\n                timeZoneOffset = (m[15] === \"-\" ? -1 : 1) * (Number(m[16] || 0) * 60 + Number(m[18] || 0));\n            }\n            return {\n                marker: marker,\n                isTimeUnspecified: !m[6],\n                timeZoneOffset: timeZoneOffset\n            };\n        }\n    }\n    return null;\n}\nvar DateEnv1 = /** @class */ function() {\n    var DateEnv = function DateEnv(settings) {\n        var timeZone = this.timeZone = settings.timeZone;\n        var isNamedTimeZone = timeZone !== \"local\" && timeZone !== \"UTC\";\n        if (settings.namedTimeZoneImpl && isNamedTimeZone) {\n            this.namedTimeZoneImpl = new settings.namedTimeZoneImpl(timeZone);\n        }\n        this.canComputeOffset = Boolean(!isNamedTimeZone || this.namedTimeZoneImpl);\n        this.calendarSystem = createCalendarSystem(settings.calendarSystem);\n        this.locale = settings.locale;\n        this.weekDow = settings.locale.week.dow;\n        this.weekDoy = settings.locale.week.doy;\n        if (settings.weekNumberCalculation === \"ISO\") {\n            this.weekDow = 1;\n            this.weekDoy = 4;\n        }\n        if (typeof settings.firstDay === \"number\") {\n            this.weekDow = settings.firstDay;\n        }\n        if (typeof settings.weekNumberCalculation === \"function\") {\n            this.weekNumberFunc = settings.weekNumberCalculation;\n        }\n        this.weekText = settings.weekText != null ? settings.weekText : settings.locale.options.weekText;\n        this.weekTextLong = (settings.weekTextLong != null ? settings.weekTextLong : settings.locale.options.weekTextLong) || this.weekText;\n        this.cmdFormatter = settings.cmdFormatter;\n        this.defaultSeparator = settings.defaultSeparator;\n    };\n    // Creating / Parsing\n    DateEnv.prototype.createMarker = function(input) {\n        var meta = this.createMarkerMeta(input);\n        if (meta === null) {\n            return null;\n        }\n        return meta.marker;\n    };\n    DateEnv.prototype.createNowMarker = function() {\n        if (this.canComputeOffset) {\n            return this.timestampToMarker(new Date().valueOf());\n        }\n        // if we can't compute the current date val for a timezone,\n        // better to give the current local date vals than UTC\n        return arrayToUtcDate(dateToLocalArray(new Date()));\n    };\n    DateEnv.prototype.createMarkerMeta = function(input) {\n        if (typeof input === \"string\") {\n            return this.parse(input);\n        }\n        var marker = null;\n        if (typeof input === \"number\") {\n            marker = this.timestampToMarker(input);\n        } else if (_instanceof(input, Date)) {\n            input = input.valueOf();\n            if (!isNaN(input)) {\n                marker = this.timestampToMarker(input);\n            }\n        } else if (Array.isArray(input)) {\n            marker = arrayToUtcDate(input);\n        }\n        if (marker === null || !isValidDate(marker)) {\n            return null;\n        }\n        return {\n            marker: marker,\n            isTimeUnspecified: false,\n            forcedTzo: null\n        };\n    };\n    DateEnv.prototype.parse = function(s) {\n        var parts = parse(s);\n        if (parts === null) {\n            return null;\n        }\n        var marker = parts.marker;\n        var forcedTzo = null;\n        if (parts.timeZoneOffset !== null) {\n            if (this.canComputeOffset) {\n                marker = this.timestampToMarker(marker.valueOf() - parts.timeZoneOffset * 60 * 1000);\n            } else {\n                forcedTzo = parts.timeZoneOffset;\n            }\n        }\n        return {\n            marker: marker,\n            isTimeUnspecified: parts.isTimeUnspecified,\n            forcedTzo: forcedTzo\n        };\n    };\n    // Accessors\n    DateEnv.prototype.getYear = function(marker) {\n        return this.calendarSystem.getMarkerYear(marker);\n    };\n    DateEnv.prototype.getMonth = function(marker) {\n        return this.calendarSystem.getMarkerMonth(marker);\n    };\n    // Adding / Subtracting\n    DateEnv.prototype.add = function(marker, dur) {\n        var a = this.calendarSystem.markerToArray(marker);\n        a[0] += dur.years;\n        a[1] += dur.months;\n        a[2] += dur.days;\n        a[6] += dur.milliseconds;\n        return this.calendarSystem.arrayToMarker(a);\n    };\n    DateEnv.prototype.subtract = function(marker, dur) {\n        var a = this.calendarSystem.markerToArray(marker);\n        a[0] -= dur.years;\n        a[1] -= dur.months;\n        a[2] -= dur.days;\n        a[6] -= dur.milliseconds;\n        return this.calendarSystem.arrayToMarker(a);\n    };\n    DateEnv.prototype.addYears = function(marker, n) {\n        var a = this.calendarSystem.markerToArray(marker);\n        a[0] += n;\n        return this.calendarSystem.arrayToMarker(a);\n    };\n    DateEnv.prototype.addMonths = function(marker, n) {\n        var a = this.calendarSystem.markerToArray(marker);\n        a[1] += n;\n        return this.calendarSystem.arrayToMarker(a);\n    };\n    // Diffing Whole Units\n    DateEnv.prototype.diffWholeYears = function(m0, m1) {\n        var calendarSystem = this.calendarSystem;\n        if (timeAsMs(m0) === timeAsMs(m1) && calendarSystem.getMarkerDay(m0) === calendarSystem.getMarkerDay(m1) && calendarSystem.getMarkerMonth(m0) === calendarSystem.getMarkerMonth(m1)) {\n            return calendarSystem.getMarkerYear(m1) - calendarSystem.getMarkerYear(m0);\n        }\n        return null;\n    };\n    DateEnv.prototype.diffWholeMonths = function(m0, m1) {\n        var calendarSystem = this.calendarSystem;\n        if (timeAsMs(m0) === timeAsMs(m1) && calendarSystem.getMarkerDay(m0) === calendarSystem.getMarkerDay(m1)) {\n            return calendarSystem.getMarkerMonth(m1) - calendarSystem.getMarkerMonth(m0) + (calendarSystem.getMarkerYear(m1) - calendarSystem.getMarkerYear(m0)) * 12;\n        }\n        return null;\n    };\n    // Range / Duration\n    DateEnv.prototype.greatestWholeUnit = function(m0, m1) {\n        var n = this.diffWholeYears(m0, m1);\n        if (n !== null) {\n            return {\n                unit: \"year\",\n                value: n\n            };\n        }\n        n = this.diffWholeMonths(m0, m1);\n        if (n !== null) {\n            return {\n                unit: \"month\",\n                value: n\n            };\n        }\n        n = diffWholeWeeks(m0, m1);\n        if (n !== null) {\n            return {\n                unit: \"week\",\n                value: n\n            };\n        }\n        n = diffWholeDays(m0, m1);\n        if (n !== null) {\n            return {\n                unit: \"day\",\n                value: n\n            };\n        }\n        n = diffHours(m0, m1);\n        if (isInt(n)) {\n            return {\n                unit: \"hour\",\n                value: n\n            };\n        }\n        n = diffMinutes(m0, m1);\n        if (isInt(n)) {\n            return {\n                unit: \"minute\",\n                value: n\n            };\n        }\n        n = diffSeconds(m0, m1);\n        if (isInt(n)) {\n            return {\n                unit: \"second\",\n                value: n\n            };\n        }\n        return {\n            unit: \"millisecond\",\n            value: m1.valueOf() - m0.valueOf()\n        };\n    };\n    DateEnv.prototype.countDurationsBetween = function(m0, m1, d) {\n        // TODO: can use greatestWholeUnit\n        var diff;\n        if (d.years) {\n            diff = this.diffWholeYears(m0, m1);\n            if (diff !== null) {\n                return diff / asRoughYears(d);\n            }\n        }\n        if (d.months) {\n            diff = this.diffWholeMonths(m0, m1);\n            if (diff !== null) {\n                return diff / asRoughMonths(d);\n            }\n        }\n        if (d.days) {\n            diff = diffWholeDays(m0, m1);\n            if (diff !== null) {\n                return diff / asRoughDays(d);\n            }\n        }\n        return (m1.valueOf() - m0.valueOf()) / asRoughMs(d);\n    };\n    // Start-Of\n    // these DON'T return zoned-dates. only UTC start-of dates\n    DateEnv.prototype.startOf = function(m, unit) {\n        if (unit === \"year\") {\n            return this.startOfYear(m);\n        }\n        if (unit === \"month\") {\n            return this.startOfMonth(m);\n        }\n        if (unit === \"week\") {\n            return this.startOfWeek(m);\n        }\n        if (unit === \"day\") {\n            return startOfDay(m);\n        }\n        if (unit === \"hour\") {\n            return startOfHour(m);\n        }\n        if (unit === \"minute\") {\n            return startOfMinute(m);\n        }\n        if (unit === \"second\") {\n            return startOfSecond(m);\n        }\n        return null;\n    };\n    DateEnv.prototype.startOfYear = function(m) {\n        return this.calendarSystem.arrayToMarker([\n            this.calendarSystem.getMarkerYear(m), \n        ]);\n    };\n    DateEnv.prototype.startOfMonth = function(m) {\n        return this.calendarSystem.arrayToMarker([\n            this.calendarSystem.getMarkerYear(m),\n            this.calendarSystem.getMarkerMonth(m), \n        ]);\n    };\n    DateEnv.prototype.startOfWeek = function(m) {\n        return this.calendarSystem.arrayToMarker([\n            this.calendarSystem.getMarkerYear(m),\n            this.calendarSystem.getMarkerMonth(m),\n            m.getUTCDate() - (m.getUTCDay() - this.weekDow + 7) % 7, \n        ]);\n    };\n    // Week Number\n    DateEnv.prototype.computeWeekNumber = function(marker) {\n        if (this.weekNumberFunc) {\n            return this.weekNumberFunc(this.toDate(marker));\n        }\n        return weekOfYear(marker, this.weekDow, this.weekDoy);\n    };\n    // TODO: choke on timeZoneName: long\n    DateEnv.prototype.format = function(marker, formatter, dateOptions) {\n        if (dateOptions === void 0) {\n            dateOptions = {};\n        }\n        return formatter.format({\n            marker: marker,\n            timeZoneOffset: dateOptions.forcedTzo != null ? dateOptions.forcedTzo : this.offsetForMarker(marker)\n        }, this);\n    };\n    DateEnv.prototype.formatRange = function(start, end, formatter, dateOptions) {\n        if (dateOptions === void 0) {\n            dateOptions = {};\n        }\n        if (dateOptions.isEndExclusive) {\n            end = addMs(end, -1);\n        }\n        return formatter.formatRange({\n            marker: start,\n            timeZoneOffset: dateOptions.forcedStartTzo != null ? dateOptions.forcedStartTzo : this.offsetForMarker(start)\n        }, {\n            marker: end,\n            timeZoneOffset: dateOptions.forcedEndTzo != null ? dateOptions.forcedEndTzo : this.offsetForMarker(end)\n        }, this, dateOptions.defaultSeparator);\n    };\n    /*\n    DUMB: the omitTime arg is dumb. if we omit the time, we want to omit the timezone offset. and if we do that,\n    might as well use buildIsoString or some other util directly\n    */ DateEnv.prototype.formatIso = function(marker, extraOptions) {\n        if (extraOptions === void 0) {\n            extraOptions = {};\n        }\n        var timeZoneOffset = null;\n        if (!extraOptions.omitTimeZoneOffset) {\n            if (extraOptions.forcedTzo != null) {\n                timeZoneOffset = extraOptions.forcedTzo;\n            } else {\n                timeZoneOffset = this.offsetForMarker(marker);\n            }\n        }\n        return buildIsoString(marker, timeZoneOffset, extraOptions.omitTime);\n    };\n    // TimeZone\n    DateEnv.prototype.timestampToMarker = function(ms) {\n        if (this.timeZone === \"local\") {\n            return arrayToUtcDate(dateToLocalArray(new Date(ms)));\n        }\n        if (this.timeZone === \"UTC\" || !this.namedTimeZoneImpl) {\n            return new Date(ms);\n        }\n        return arrayToUtcDate(this.namedTimeZoneImpl.timestampToArray(ms));\n    };\n    DateEnv.prototype.offsetForMarker = function(m) {\n        if (this.timeZone === \"local\") {\n            return -arrayToLocalDate(dateToUtcArray(m)).getTimezoneOffset(); // convert \"inverse\" offset to \"normal\" offset\n        }\n        if (this.timeZone === \"UTC\") {\n            return 0;\n        }\n        if (this.namedTimeZoneImpl) {\n            return this.namedTimeZoneImpl.offsetForArray(dateToUtcArray(m));\n        }\n        return null;\n    };\n    // Conversion\n    DateEnv.prototype.toDate = function(m, forcedTzo) {\n        if (this.timeZone === \"local\") {\n            return arrayToLocalDate(dateToUtcArray(m));\n        }\n        if (this.timeZone === \"UTC\") {\n            return new Date(m.valueOf()); // make sure it's a copy\n        }\n        if (!this.namedTimeZoneImpl) {\n            return new Date(m.valueOf() - (forcedTzo || 0));\n        }\n        return new Date(m.valueOf() - this.namedTimeZoneImpl.offsetForArray(dateToUtcArray(m)) * 1000 * 60);\n    };\n    return DateEnv;\n}();\nvar globalLocales = [];\nvar MINIMAL_RAW_EN_LOCALE = {\n    code: \"en\",\n    week: {\n        dow: 0,\n        doy: 4\n    },\n    direction: \"ltr\",\n    buttonText: {\n        prev: \"prev\",\n        next: \"next\",\n        prevYear: \"prev year\",\n        nextYear: \"next year\",\n        year: \"year\",\n        today: \"today\",\n        month: \"month\",\n        week: \"week\",\n        day: \"day\",\n        list: \"list\"\n    },\n    weekText: \"W\",\n    weekTextLong: \"Week\",\n    closeHint: \"Close\",\n    timeHint: \"Time\",\n    eventHint: \"Event\",\n    allDayText: \"all-day\",\n    moreLinkText: \"more\",\n    noEventsText: \"No events to display\"\n};\nvar RAW_EN_LOCALE = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, MINIMAL_RAW_EN_LOCALE), {\n    // Includes things we don't want other locales to inherit,\n    // things that derive from other translatable strings.\n    buttonHints: {\n        prev: \"Previous $0\",\n        next: \"Next $0\",\n        today: function today(buttonText, unit) {\n            return unit === \"day\" ? \"Today\" : \"This \" + buttonText;\n        }\n    },\n    viewHint: \"$0 view\",\n    navLinkHint: \"Go to $0\",\n    moreLinkHint: function moreLinkHint(eventCnt) {\n        return \"Show \" + eventCnt + \" more event\" + (eventCnt === 1 ? \"\" : \"s\");\n    }\n});\nfunction organizeRawLocales(explicitRawLocales) {\n    var defaultCode = explicitRawLocales.length > 0 ? explicitRawLocales[0].code : \"en\";\n    var allRawLocales = globalLocales.concat(explicitRawLocales);\n    var rawLocaleMap = {\n        en: RAW_EN_LOCALE\n    };\n    for(var _i = 0, allRawLocales_1 = allRawLocales; _i < allRawLocales_1.length; _i++){\n        var rawLocale = allRawLocales_1[_i];\n        rawLocaleMap[rawLocale.code] = rawLocale;\n    }\n    return {\n        map: rawLocaleMap,\n        defaultCode: defaultCode\n    };\n}\nfunction buildLocale(inputSingular, available) {\n    if (typeof inputSingular === \"object\" && !Array.isArray(inputSingular)) {\n        return parseLocale(inputSingular.code, [\n            inputSingular.code\n        ], inputSingular);\n    }\n    return queryLocale(inputSingular, available);\n}\nfunction queryLocale(codeArg, available) {\n    var codes = [].concat(codeArg || []); // will convert to array\n    var raw = queryRawLocale(codes, available) || RAW_EN_LOCALE;\n    return parseLocale(codeArg, codes, raw);\n}\nfunction queryRawLocale(codes, available) {\n    for(var i = 0; i < codes.length; i += 1){\n        var parts = codes[i].toLocaleLowerCase().split(\"-\");\n        for(var j = parts.length; j > 0; j -= 1){\n            var simpleId = parts.slice(0, j).join(\"-\");\n            if (available[simpleId]) {\n                return available[simpleId];\n            }\n        }\n    }\n    return null;\n}\nfunction parseLocale(codeArg, codes, raw) {\n    var merged = mergeProps([\n        MINIMAL_RAW_EN_LOCALE,\n        raw\n    ], [\n        \"buttonText\"\n    ]);\n    delete merged.code; // don't want this part of the options\n    var week = merged.week;\n    delete merged.week;\n    return {\n        codeArg: codeArg,\n        codes: codes,\n        week: week,\n        simpleNumberFormat: new Intl.NumberFormat(codeArg),\n        options: merged\n    };\n}\nfunction formatDate(dateInput, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    var dateEnv = buildDateEnv$1(options);\n    var formatter = createFormatter(options);\n    var dateMeta = dateEnv.createMarkerMeta(dateInput);\n    if (!dateMeta) {\n        return \"\";\n    }\n    return dateEnv.format(dateMeta.marker, formatter, {\n        forcedTzo: dateMeta.forcedTzo\n    });\n}\nfunction formatRange(startInput, endInput, options) {\n    var dateEnv = buildDateEnv$1(typeof options === \"object\" && options ? options : {}); // pass in if non-null object\n    var formatter = createFormatter(options);\n    var startMeta = dateEnv.createMarkerMeta(startInput);\n    var endMeta = dateEnv.createMarkerMeta(endInput);\n    if (!startMeta || !endMeta) {\n        return \"\";\n    }\n    return dateEnv.formatRange(startMeta.marker, endMeta.marker, formatter, {\n        forcedStartTzo: startMeta.forcedTzo,\n        forcedEndTzo: endMeta.forcedTzo,\n        isEndExclusive: options.isEndExclusive,\n        defaultSeparator: BASE_OPTION_DEFAULTS.defaultRangeSeparator\n    });\n}\n// TODO: more DRY and optimized\nfunction buildDateEnv$1(settings) {\n    var locale = buildLocale(settings.locale || \"en\", organizeRawLocales([]).map); // TODO: don't hardcode 'en' everywhere\n    return new DateEnv1((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n        timeZone: BASE_OPTION_DEFAULTS.timeZone,\n        calendarSystem: \"gregory\"\n    }, settings), {\n        locale: locale\n    }));\n}\nvar DEF_DEFAULTS = {\n    startTime: \"09:00\",\n    endTime: \"17:00\",\n    daysOfWeek: [\n        1,\n        2,\n        3,\n        4,\n        5\n    ],\n    display: \"inverse-background\",\n    classNames: \"fc-non-business\",\n    groupId: \"_businessHours\"\n};\n/*\nTODO: pass around as EventDefHash!!!\n*/ function parseBusinessHours(input, context) {\n    return parseEvents(refineInputs(input), null, context);\n}\nfunction refineInputs(input) {\n    var rawDefs;\n    if (input === true) {\n        rawDefs = [\n            {}\n        ]; // will get DEF_DEFAULTS verbatim\n    } else if (Array.isArray(input)) {\n        // if specifying an array, every sub-definition NEEDS a day-of-week\n        rawDefs = input.filter(function(rawDef) {\n            return rawDef.daysOfWeek;\n        });\n    } else if (typeof input === \"object\" && input) {\n        rawDefs = [\n            input\n        ];\n    } else {\n        rawDefs = [];\n    }\n    rawDefs = rawDefs.map(function(rawDef) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, DEF_DEFAULTS), rawDef);\n    });\n    return rawDefs;\n}\nfunction pointInsideRect(point, rect) {\n    return point.left >= rect.left && point.left < rect.right && point.top >= rect.top && point.top < rect.bottom;\n}\n// Returns a new rectangle that is the intersection of the two rectangles. If they don't intersect, returns false\nfunction intersectRects(rect1, rect2) {\n    var res = {\n        left: Math.max(rect1.left, rect2.left),\n        right: Math.min(rect1.right, rect2.right),\n        top: Math.max(rect1.top, rect2.top),\n        bottom: Math.min(rect1.bottom, rect2.bottom)\n    };\n    if (res.left < res.right && res.top < res.bottom) {\n        return res;\n    }\n    return false;\n}\nfunction translateRect(rect, deltaX, deltaY) {\n    return {\n        left: rect.left + deltaX,\n        right: rect.right + deltaX,\n        top: rect.top + deltaY,\n        bottom: rect.bottom + deltaY\n    };\n}\n// Returns a new point that will have been moved to reside within the given rectangle\nfunction constrainPoint(point, rect) {\n    return {\n        left: Math.min(Math.max(point.left, rect.left), rect.right),\n        top: Math.min(Math.max(point.top, rect.top), rect.bottom)\n    };\n}\n// Returns a point that is the center of the given rectangle\nfunction getRectCenter(rect) {\n    return {\n        left: (rect.left + rect.right) / 2,\n        top: (rect.top + rect.bottom) / 2\n    };\n}\n// Subtracts point2's coordinates from point1's coordinates, returning a delta\nfunction diffPoints(point1, point2) {\n    return {\n        left: point1.left - point2.left,\n        top: point1.top - point2.top\n    };\n}\nvar canVGrowWithinCell;\nfunction getCanVGrowWithinCell() {\n    if (canVGrowWithinCell == null) {\n        canVGrowWithinCell = computeCanVGrowWithinCell();\n    }\n    return canVGrowWithinCell;\n}\nfunction computeCanVGrowWithinCell() {\n    // for SSR, because this function is call immediately at top-level\n    // TODO: just make this logic execute top-level, immediately, instead of doing lazily\n    if (typeof document === \"undefined\") {\n        return true;\n    }\n    var el = document.createElement(\"div\");\n    el.style.position = \"absolute\";\n    el.style.top = \"0px\";\n    el.style.left = \"0px\";\n    el.innerHTML = \"<table><tr><td><div></div></td></tr></table>\";\n    el.querySelector(\"table\").style.height = \"100px\";\n    el.querySelector(\"div\").style.height = \"100%\";\n    document.body.appendChild(el);\n    var div = el.querySelector(\"div\");\n    var possible = div.offsetHeight > 0;\n    document.body.removeChild(el);\n    return possible;\n}\nvar EMPTY_EVENT_STORE = createEmptyEventStore(); // for purecomponents. TODO: keep elsewhere\nvar Splitter1 = /** @class */ function() {\n    var Splitter = function Splitter() {\n        this.getKeysForEventDefs = memoize(this._getKeysForEventDefs);\n        this.splitDateSelection = memoize(this._splitDateSpan);\n        this.splitEventStore = memoize(this._splitEventStore);\n        this.splitIndividualUi = memoize(this._splitIndividualUi);\n        this.splitEventDrag = memoize(this._splitInteraction);\n        this.splitEventResize = memoize(this._splitInteraction);\n        this.eventUiBuilders = {}; // TODO: typescript protection\n    };\n    Splitter.prototype.splitProps = function(props) {\n        var _this = this;\n        var keyInfos = this.getKeyInfo(props);\n        var defKeys = this.getKeysForEventDefs(props.eventStore);\n        var dateSelections = this.splitDateSelection(props.dateSelection);\n        var individualUi = this.splitIndividualUi(props.eventUiBases, defKeys); // the individual *bases*\n        var eventStores = this.splitEventStore(props.eventStore, defKeys);\n        var eventDrags = this.splitEventDrag(props.eventDrag);\n        var eventResizes = this.splitEventResize(props.eventResize);\n        var splitProps = {};\n        this.eventUiBuilders = mapHash(keyInfos, function(info, key) {\n            return _this.eventUiBuilders[key] || memoize(buildEventUiForKey);\n        });\n        for(var key1 in keyInfos){\n            var keyInfo = keyInfos[key1];\n            var eventStore = eventStores[key1] || EMPTY_EVENT_STORE;\n            var buildEventUi = this.eventUiBuilders[key1];\n            splitProps[key1] = {\n                businessHours: keyInfo.businessHours || props.businessHours,\n                dateSelection: dateSelections[key1] || null,\n                eventStore: eventStore,\n                eventUiBases: buildEventUi(props.eventUiBases[\"\"], keyInfo.ui, individualUi[key1]),\n                eventSelection: eventStore.instances[props.eventSelection] ? props.eventSelection : \"\",\n                eventDrag: eventDrags[key1] || null,\n                eventResize: eventResizes[key1] || null\n            };\n        }\n        return splitProps;\n    };\n    Splitter.prototype._splitDateSpan = function(dateSpan) {\n        var dateSpans = {};\n        if (dateSpan) {\n            var keys = this.getKeysForDateSpan(dateSpan);\n            for(var _i = 0, keys_1 = keys; _i < keys_1.length; _i++){\n                var key = keys_1[_i];\n                dateSpans[key] = dateSpan;\n            }\n        }\n        return dateSpans;\n    };\n    Splitter.prototype._getKeysForEventDefs = function(eventStore) {\n        var _this = this;\n        return mapHash(eventStore.defs, function(eventDef) {\n            return _this.getKeysForEventDef(eventDef);\n        });\n    };\n    Splitter.prototype._splitEventStore = function(eventStore, defKeys) {\n        var defs = eventStore.defs, instances = eventStore.instances;\n        var splitStores = {};\n        for(var defId in defs){\n            for(var _i = 0, _a = defKeys[defId]; _i < _a.length; _i++){\n                var key = _a[_i];\n                if (!splitStores[key]) {\n                    splitStores[key] = createEmptyEventStore();\n                }\n                splitStores[key].defs[defId] = defs[defId];\n            }\n        }\n        for(var instanceId in instances){\n            var instance = instances[instanceId];\n            for(var _b = 0, _c4 = defKeys[instance.defId]; _b < _c4.length; _b++){\n                var key = _c4[_b];\n                if (splitStores[key]) {\n                    splitStores[key].instances[instanceId] = instance;\n                }\n            }\n        }\n        return splitStores;\n    };\n    Splitter.prototype._splitIndividualUi = function(eventUiBases, defKeys) {\n        var splitHashes = {};\n        for(var defId in eventUiBases){\n            if (defId) {\n                for(var _i = 0, _a = defKeys[defId]; _i < _a.length; _i++){\n                    var key = _a[_i];\n                    if (!splitHashes[key]) {\n                        splitHashes[key] = {};\n                    }\n                    splitHashes[key][defId] = eventUiBases[defId];\n                }\n            }\n        }\n        return splitHashes;\n    };\n    Splitter.prototype._splitInteraction = function(interaction) {\n        var splitStates = {};\n        if (interaction) {\n            var affectedStores_1 = this._splitEventStore(interaction.affectedEvents, this._getKeysForEventDefs(interaction.affectedEvents));\n            // can't rely on defKeys because event data is mutated\n            var mutatedKeysByDefId = this._getKeysForEventDefs(interaction.mutatedEvents);\n            var mutatedStores_1 = this._splitEventStore(interaction.mutatedEvents, mutatedKeysByDefId);\n            var populate = function populate(key) {\n                if (!splitStates[key]) {\n                    splitStates[key] = {\n                        affectedEvents: affectedStores_1[key] || EMPTY_EVENT_STORE,\n                        mutatedEvents: mutatedStores_1[key] || EMPTY_EVENT_STORE,\n                        isEvent: interaction.isEvent\n                    };\n                }\n            };\n            for(var key2 in affectedStores_1){\n                populate(key2);\n            }\n            for(var key2 in mutatedStores_1){\n                populate(key2);\n            }\n        }\n        return splitStates;\n    };\n    return Splitter;\n}();\nfunction buildEventUiForKey(allUi, eventUiForKey, individualUi) {\n    var baseParts = [];\n    if (allUi) {\n        baseParts.push(allUi);\n    }\n    if (eventUiForKey) {\n        baseParts.push(eventUiForKey);\n    }\n    var stuff = {\n        \"\": combineEventUis(baseParts)\n    };\n    if (individualUi) {\n        (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)(stuff, individualUi);\n    }\n    return stuff;\n}\nfunction getDateMeta(date, todayRange, nowDate, dateProfile) {\n    return {\n        dow: date.getUTCDay(),\n        isDisabled: Boolean(dateProfile && !rangeContainsMarker(dateProfile.activeRange, date)),\n        isOther: Boolean(dateProfile && !rangeContainsMarker(dateProfile.currentRange, date)),\n        isToday: Boolean(todayRange && rangeContainsMarker(todayRange, date)),\n        isPast: Boolean(nowDate ? date < nowDate : todayRange ? date < todayRange.start : false),\n        isFuture: Boolean(nowDate ? date > nowDate : todayRange ? date >= todayRange.end : false)\n    };\n}\nfunction getDayClassNames(meta, theme) {\n    var classNames = [\n        \"fc-day\",\n        \"fc-day-\" + DAY_IDS[meta.dow], \n    ];\n    if (meta.isDisabled) {\n        classNames.push(\"fc-day-disabled\");\n    } else {\n        if (meta.isToday) {\n            classNames.push(\"fc-day-today\");\n            classNames.push(theme.getClass(\"today\"));\n        }\n        if (meta.isPast) {\n            classNames.push(\"fc-day-past\");\n        }\n        if (meta.isFuture) {\n            classNames.push(\"fc-day-future\");\n        }\n        if (meta.isOther) {\n            classNames.push(\"fc-day-other\");\n        }\n    }\n    return classNames;\n}\nfunction getSlotClassNames(meta, theme) {\n    var classNames = [\n        \"fc-slot\",\n        \"fc-slot-\" + DAY_IDS[meta.dow], \n    ];\n    if (meta.isDisabled) {\n        classNames.push(\"fc-slot-disabled\");\n    } else {\n        if (meta.isToday) {\n            classNames.push(\"fc-slot-today\");\n            classNames.push(theme.getClass(\"today\"));\n        }\n        if (meta.isPast) {\n            classNames.push(\"fc-slot-past\");\n        }\n        if (meta.isFuture) {\n            classNames.push(\"fc-slot-future\");\n        }\n    }\n    return classNames;\n}\nvar DAY_FORMAT = createFormatter({\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\"\n});\nvar WEEK_FORMAT = createFormatter({\n    week: \"long\"\n});\nfunction buildNavLinkAttrs(context, dateMarker, viewType, isTabbable) {\n    if (viewType === void 0) {\n        viewType = \"day\";\n    }\n    if (isTabbable === void 0) {\n        isTabbable = true;\n    }\n    var dateEnv = context.dateEnv, options = context.options, calendarApi = context.calendarApi;\n    var dateStr = dateEnv.format(dateMarker, viewType === \"week\" ? WEEK_FORMAT : DAY_FORMAT);\n    if (options.navLinks) {\n        var zonedDate = dateEnv.toDate(dateMarker);\n        var handleInteraction = function handleInteraction(ev) {\n            var customAction = viewType === \"day\" ? options.navLinkDayClick : viewType === \"week\" ? options.navLinkWeekClick : null;\n            if (typeof customAction === \"function\") {\n                customAction.call(calendarApi, dateEnv.toDate(dateMarker), ev);\n            } else {\n                if (typeof customAction === \"string\") {\n                    viewType = customAction;\n                }\n                calendarApi.zoomTo(dateMarker, viewType);\n            }\n        };\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n            title: formatWithOrdinals(options.navLinkHint, [\n                dateStr,\n                zonedDate\n            ], dateStr),\n            \"data-navlink\": \"\"\n        }, isTabbable ? createAriaClickAttrs(handleInteraction) : {\n            onClick: handleInteraction\n        });\n    }\n    return {\n        \"aria-label\": dateStr\n    };\n}\nvar _isRtlScrollbarOnLeft = null;\nfunction getIsRtlScrollbarOnLeft() {\n    if (_isRtlScrollbarOnLeft === null) {\n        _isRtlScrollbarOnLeft = computeIsRtlScrollbarOnLeft();\n    }\n    return _isRtlScrollbarOnLeft;\n}\nfunction computeIsRtlScrollbarOnLeft() {\n    var outerEl = document.createElement(\"div\");\n    applyStyle(outerEl, {\n        position: \"absolute\",\n        top: -1000,\n        left: 0,\n        border: 0,\n        padding: 0,\n        overflow: \"scroll\",\n        direction: \"rtl\"\n    });\n    outerEl.innerHTML = \"<div></div>\";\n    document.body.appendChild(outerEl);\n    var innerEl = outerEl.firstChild;\n    var res = innerEl.getBoundingClientRect().left > outerEl.getBoundingClientRect().left;\n    removeElement(outerEl);\n    return res;\n}\nvar _scrollbarWidths;\nfunction getScrollbarWidths() {\n    if (!_scrollbarWidths) {\n        _scrollbarWidths = computeScrollbarWidths();\n    }\n    return _scrollbarWidths;\n}\nfunction computeScrollbarWidths() {\n    var el = document.createElement(\"div\");\n    el.style.overflow = \"scroll\";\n    el.style.position = \"absolute\";\n    el.style.top = \"-9999px\";\n    el.style.left = \"-9999px\";\n    document.body.appendChild(el);\n    var res = computeScrollbarWidthsForEl(el);\n    document.body.removeChild(el);\n    return res;\n}\n// WARNING: will include border\nfunction computeScrollbarWidthsForEl(el) {\n    return {\n        x: el.offsetHeight - el.clientHeight,\n        y: el.offsetWidth - el.clientWidth\n    };\n}\nfunction computeEdges(el, getPadding) {\n    if (getPadding === void 0) {\n        getPadding = false;\n    }\n    var computedStyle = window.getComputedStyle(el);\n    var borderLeft = parseInt(computedStyle.borderLeftWidth, 10) || 0;\n    var borderRight = parseInt(computedStyle.borderRightWidth, 10) || 0;\n    var borderTop = parseInt(computedStyle.borderTopWidth, 10) || 0;\n    var borderBottom = parseInt(computedStyle.borderBottomWidth, 10) || 0;\n    var badScrollbarWidths = computeScrollbarWidthsForEl(el); // includes border!\n    var scrollbarLeftRight = badScrollbarWidths.y - borderLeft - borderRight;\n    var scrollbarBottom = badScrollbarWidths.x - borderTop - borderBottom;\n    var res = {\n        borderLeft: borderLeft,\n        borderRight: borderRight,\n        borderTop: borderTop,\n        borderBottom: borderBottom,\n        scrollbarBottom: scrollbarBottom,\n        scrollbarLeft: 0,\n        scrollbarRight: 0\n    };\n    if (getIsRtlScrollbarOnLeft() && computedStyle.direction === \"rtl\") {\n        res.scrollbarLeft = scrollbarLeftRight;\n    } else {\n        res.scrollbarRight = scrollbarLeftRight;\n    }\n    if (getPadding) {\n        res.paddingLeft = parseInt(computedStyle.paddingLeft, 10) || 0;\n        res.paddingRight = parseInt(computedStyle.paddingRight, 10) || 0;\n        res.paddingTop = parseInt(computedStyle.paddingTop, 10) || 0;\n        res.paddingBottom = parseInt(computedStyle.paddingBottom, 10) || 0;\n    }\n    return res;\n}\nfunction computeInnerRect(el, goWithinPadding, doFromWindowViewport) {\n    if (goWithinPadding === void 0) {\n        goWithinPadding = false;\n    }\n    var outerRect = doFromWindowViewport ? el.getBoundingClientRect() : computeRect(el);\n    var edges = computeEdges(el, goWithinPadding);\n    var res = {\n        left: outerRect.left + edges.borderLeft + edges.scrollbarLeft,\n        right: outerRect.right - edges.borderRight - edges.scrollbarRight,\n        top: outerRect.top + edges.borderTop,\n        bottom: outerRect.bottom - edges.borderBottom - edges.scrollbarBottom\n    };\n    if (goWithinPadding) {\n        res.left += edges.paddingLeft;\n        res.right -= edges.paddingRight;\n        res.top += edges.paddingTop;\n        res.bottom -= edges.paddingBottom;\n    }\n    return res;\n}\nfunction computeRect(el) {\n    var rect = el.getBoundingClientRect();\n    return {\n        left: rect.left + window.pageXOffset,\n        top: rect.top + window.pageYOffset,\n        right: rect.right + window.pageXOffset,\n        bottom: rect.bottom + window.pageYOffset\n    };\n}\nfunction computeClippedClientRect(el) {\n    var clippingParents = getClippingParents(el);\n    var rect = el.getBoundingClientRect();\n    for(var _i = 0, clippingParents_1 = clippingParents; _i < clippingParents_1.length; _i++){\n        var clippingParent = clippingParents_1[_i];\n        var intersection = intersectRects(rect, clippingParent.getBoundingClientRect());\n        if (intersection) {\n            rect = intersection;\n        } else {\n            return null;\n        }\n    }\n    return rect;\n}\nfunction computeHeightAndMargins(el) {\n    return el.getBoundingClientRect().height + computeVMargins(el);\n}\nfunction computeVMargins(el) {\n    var computed = window.getComputedStyle(el);\n    return parseInt(computed.marginTop, 10) + parseInt(computed.marginBottom, 10);\n}\n// does not return window\nfunction getClippingParents(el) {\n    var parents = [];\n    while(_instanceof(el, HTMLElement)){\n        var computedStyle = window.getComputedStyle(el);\n        if (computedStyle.position === \"fixed\") {\n            break;\n        }\n        if (/(auto|scroll)/.test(computedStyle.overflow + computedStyle.overflowY + computedStyle.overflowX)) {\n            parents.push(el);\n        }\n        el = el.parentNode;\n    }\n    return parents;\n}\n// given a function that resolves a result asynchronously.\n// the function can either call passed-in success and failure callbacks,\n// or it can return a promise.\n// if you need to pass additional params to func, bind them first.\nfunction unpromisify(func, success, failure) {\n    // guard against success/failure callbacks being called more than once\n    // and guard against a promise AND callback being used together.\n    var isResolved = false;\n    var wrappedSuccess = function wrappedSuccess() {\n        if (!isResolved) {\n            isResolved = true;\n            success.apply(this, arguments); // eslint-disable-line prefer-rest-params\n        }\n    };\n    var wrappedFailure = function wrappedFailure() {\n        if (!isResolved) {\n            isResolved = true;\n            if (failure) {\n                failure.apply(this, arguments); // eslint-disable-line prefer-rest-params\n            }\n        }\n    };\n    var res = func(wrappedSuccess, wrappedFailure);\n    if (res && typeof res.then === \"function\") {\n        res.then(wrappedSuccess, wrappedFailure);\n    }\n}\nvar Emitter1 = /** @class */ function() {\n    var Emitter = function Emitter() {\n        this.handlers = {};\n        this.thisContext = null;\n    };\n    Emitter.prototype.setThisContext = function(thisContext) {\n        this.thisContext = thisContext;\n    };\n    Emitter.prototype.setOptions = function(options) {\n        this.options = options;\n    };\n    Emitter.prototype.on = function(type, handler) {\n        addToHash(this.handlers, type, handler);\n    };\n    Emitter.prototype.off = function(type, handler) {\n        removeFromHash(this.handlers, type, handler);\n    };\n    Emitter.prototype.trigger = function(type) {\n        var args = [];\n        for(var _i = 1; _i < arguments.length; _i++){\n            args[_i - 1] = arguments[_i];\n        }\n        var attachedHandlers = this.handlers[type] || [];\n        var optionHandler = this.options && this.options[type];\n        var handlers = [].concat(optionHandler || [], attachedHandlers);\n        for(var _a = 0, handlers_1 = handlers; _a < handlers_1.length; _a++){\n            var handler = handlers_1[_a];\n            handler.apply(this.thisContext, args);\n        }\n    };\n    Emitter.prototype.hasHandlers = function(type) {\n        return Boolean(this.handlers[type] && this.handlers[type].length || this.options && this.options[type]);\n    };\n    return Emitter;\n}();\nfunction addToHash(hash, type, handler) {\n    (hash[type] || (hash[type] = [])).push(handler);\n}\nfunction removeFromHash(hash, type, handler) {\n    if (handler) {\n        if (hash[type]) {\n            hash[type] = hash[type].filter(function(func) {\n                return func !== handler;\n            });\n        }\n    } else {\n        delete hash[type]; // remove all handler funcs for this type\n    }\n}\n/*\nRecords offset information for a set of elements, relative to an origin element.\nCan record the left/right OR the top/bottom OR both.\nProvides methods for querying the cache by position.\n*/ var PositionCache1 = /** @class */ function() {\n    var PositionCache = function PositionCache(originEl, els, isHorizontal, isVertical) {\n        this.els = els;\n        var originClientRect = this.originClientRect = originEl.getBoundingClientRect(); // relative to viewport top-left\n        if (isHorizontal) {\n            this.buildElHorizontals(originClientRect.left);\n        }\n        if (isVertical) {\n            this.buildElVerticals(originClientRect.top);\n        }\n    };\n    // Populates the left/right internal coordinate arrays\n    PositionCache.prototype.buildElHorizontals = function(originClientLeft) {\n        var lefts = [];\n        var rights = [];\n        for(var _i = 0, _a = this.els; _i < _a.length; _i++){\n            var el = _a[_i];\n            var rect = el.getBoundingClientRect();\n            lefts.push(rect.left - originClientLeft);\n            rights.push(rect.right - originClientLeft);\n        }\n        this.lefts = lefts;\n        this.rights = rights;\n    };\n    // Populates the top/bottom internal coordinate arrays\n    PositionCache.prototype.buildElVerticals = function(originClientTop) {\n        var tops = [];\n        var bottoms = [];\n        for(var _i = 0, _a = this.els; _i < _a.length; _i++){\n            var el = _a[_i];\n            var rect = el.getBoundingClientRect();\n            tops.push(rect.top - originClientTop);\n            bottoms.push(rect.bottom - originClientTop);\n        }\n        this.tops = tops;\n        this.bottoms = bottoms;\n    };\n    // Given a left offset (from document left), returns the index of the el that it horizontally intersects.\n    // If no intersection is made, returns undefined.\n    PositionCache.prototype.leftToIndex = function(leftPosition) {\n        var _a = this, lefts = _a.lefts, rights = _a.rights;\n        var len = lefts.length;\n        var i;\n        for(i = 0; i < len; i += 1){\n            if (leftPosition >= lefts[i] && leftPosition < rights[i]) {\n                return i;\n            }\n        }\n        return undefined; // TODO: better\n    };\n    // Given a top offset (from document top), returns the index of the el that it vertically intersects.\n    // If no intersection is made, returns undefined.\n    PositionCache.prototype.topToIndex = function(topPosition) {\n        var _a = this, tops = _a.tops, bottoms = _a.bottoms;\n        var len = tops.length;\n        var i;\n        for(i = 0; i < len; i += 1){\n            if (topPosition >= tops[i] && topPosition < bottoms[i]) {\n                return i;\n            }\n        }\n        return undefined; // TODO: better\n    };\n    // Gets the width of the element at the given index\n    PositionCache.prototype.getWidth = function(leftIndex) {\n        return this.rights[leftIndex] - this.lefts[leftIndex];\n    };\n    // Gets the height of the element at the given index\n    PositionCache.prototype.getHeight = function(topIndex) {\n        return this.bottoms[topIndex] - this.tops[topIndex];\n    };\n    return PositionCache;\n}();\n/* eslint max-classes-per-file: \"off\" */ /*\nAn object for getting/setting scroll-related information for an element.\nInternally, this is done very differently for window versus DOM element,\nso this object serves as a common interface.\n*/ var ScrollController1 = /** @class */ function() {\n    var ScrollController = function ScrollController() {};\n    ScrollController.prototype.getMaxScrollTop = function() {\n        return this.getScrollHeight() - this.getClientHeight();\n    };\n    ScrollController.prototype.getMaxScrollLeft = function() {\n        return this.getScrollWidth() - this.getClientWidth();\n    };\n    ScrollController.prototype.canScrollVertically = function() {\n        return this.getMaxScrollTop() > 0;\n    };\n    ScrollController.prototype.canScrollHorizontally = function() {\n        return this.getMaxScrollLeft() > 0;\n    };\n    ScrollController.prototype.canScrollUp = function() {\n        return this.getScrollTop() > 0;\n    };\n    ScrollController.prototype.canScrollDown = function() {\n        return this.getScrollTop() < this.getMaxScrollTop();\n    };\n    ScrollController.prototype.canScrollLeft = function() {\n        return this.getScrollLeft() > 0;\n    };\n    ScrollController.prototype.canScrollRight = function() {\n        return this.getScrollLeft() < this.getMaxScrollLeft();\n    };\n    return ScrollController;\n}();\nvar ElementScrollController1 = /** @class */ function(_super) {\n    var ElementScrollController = function ElementScrollController(el) {\n        var _this = _super.call(this) || this;\n        _this.el = el;\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(ElementScrollController, _super);\n    ElementScrollController.prototype.getScrollTop = function() {\n        return this.el.scrollTop;\n    };\n    ElementScrollController.prototype.getScrollLeft = function() {\n        return this.el.scrollLeft;\n    };\n    ElementScrollController.prototype.setScrollTop = function(top) {\n        this.el.scrollTop = top;\n    };\n    ElementScrollController.prototype.setScrollLeft = function(left) {\n        this.el.scrollLeft = left;\n    };\n    ElementScrollController.prototype.getScrollWidth = function() {\n        return this.el.scrollWidth;\n    };\n    ElementScrollController.prototype.getScrollHeight = function() {\n        return this.el.scrollHeight;\n    };\n    ElementScrollController.prototype.getClientHeight = function() {\n        return this.el.clientHeight;\n    };\n    ElementScrollController.prototype.getClientWidth = function() {\n        return this.el.clientWidth;\n    };\n    return ElementScrollController;\n}(ScrollController1);\nvar WindowScrollController1 = /** @class */ function(_super) {\n    var WindowScrollController = function WindowScrollController() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(WindowScrollController, _super);\n    WindowScrollController.prototype.getScrollTop = function() {\n        return window.pageYOffset;\n    };\n    WindowScrollController.prototype.getScrollLeft = function() {\n        return window.pageXOffset;\n    };\n    WindowScrollController.prototype.setScrollTop = function(n) {\n        window.scroll(window.pageXOffset, n);\n    };\n    WindowScrollController.prototype.setScrollLeft = function(n) {\n        window.scroll(n, window.pageYOffset);\n    };\n    WindowScrollController.prototype.getScrollWidth = function() {\n        return document.documentElement.scrollWidth;\n    };\n    WindowScrollController.prototype.getScrollHeight = function() {\n        return document.documentElement.scrollHeight;\n    };\n    WindowScrollController.prototype.getClientHeight = function() {\n        return document.documentElement.clientHeight;\n    };\n    WindowScrollController.prototype.getClientWidth = function() {\n        return document.documentElement.clientWidth;\n    };\n    return WindowScrollController;\n}(ScrollController1);\nvar Theme1 = /** @class */ function() {\n    var Theme = function Theme(calendarOptions) {\n        if (this.iconOverrideOption) {\n            this.setIconOverride(calendarOptions[this.iconOverrideOption]);\n        }\n    };\n    Theme.prototype.setIconOverride = function(iconOverrideHash) {\n        var iconClassesCopy;\n        var buttonName;\n        if (typeof iconOverrideHash === \"object\" && iconOverrideHash) {\n            iconClassesCopy = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, this.iconClasses);\n            for(buttonName in iconOverrideHash){\n                iconClassesCopy[buttonName] = this.applyIconOverridePrefix(iconOverrideHash[buttonName]);\n            }\n            this.iconClasses = iconClassesCopy;\n        } else if (iconOverrideHash === false) {\n            this.iconClasses = {};\n        }\n    };\n    Theme.prototype.applyIconOverridePrefix = function(className) {\n        var prefix = this.iconOverridePrefix;\n        if (prefix && className.indexOf(prefix) !== 0) {\n            className = prefix + className;\n        }\n        return className;\n    };\n    Theme.prototype.getClass = function(key) {\n        return this.classes[key] || \"\";\n    };\n    Theme.prototype.getIconClass = function(buttonName, isRtl) {\n        var className;\n        if (isRtl && this.rtlIconClasses) {\n            className = this.rtlIconClasses[buttonName] || this.iconClasses[buttonName];\n        } else {\n            className = this.iconClasses[buttonName];\n        }\n        if (className) {\n            return this.baseIconClass + \" \" + className;\n        }\n        return \"\";\n    };\n    Theme.prototype.getCustomButtonIconClass = function(customButtonProps) {\n        var className;\n        if (this.iconOverrideCustomButtonOption) {\n            className = customButtonProps[this.iconOverrideCustomButtonOption];\n            if (className) {\n                return this.baseIconClass + \" \" + this.applyIconOverridePrefix(className);\n            }\n        }\n        return \"\";\n    };\n    return Theme;\n}();\nTheme1.prototype.classes = {};\nTheme1.prototype.iconClasses = {};\nTheme1.prototype.baseIconClass = \"\";\nTheme1.prototype.iconOverridePrefix = \"\";\nvar ScrollResponder1 = /** @class */ function() {\n    var ScrollResponder = function ScrollResponder(execFunc, emitter, scrollTime, scrollTimeReset) {\n        var _this = this;\n        this.execFunc = execFunc;\n        this.emitter = emitter;\n        this.scrollTime = scrollTime;\n        this.scrollTimeReset = scrollTimeReset;\n        this.handleScrollRequest = function(request) {\n            _this.queuedRequest = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, _this.queuedRequest || {}, request);\n            _this.drain();\n        };\n        emitter.on(\"_scrollRequest\", this.handleScrollRequest);\n        this.fireInitialScroll();\n    };\n    ScrollResponder.prototype.detach = function() {\n        this.emitter.off(\"_scrollRequest\", this.handleScrollRequest);\n    };\n    ScrollResponder.prototype.update = function(isDatesNew) {\n        if (isDatesNew && this.scrollTimeReset) {\n            this.fireInitialScroll(); // will drain\n        } else {\n            this.drain();\n        }\n    };\n    ScrollResponder.prototype.fireInitialScroll = function() {\n        this.handleScrollRequest({\n            time: this.scrollTime\n        });\n    };\n    ScrollResponder.prototype.drain = function() {\n        if (this.queuedRequest && this.execFunc(this.queuedRequest)) {\n            this.queuedRequest = null;\n        }\n    };\n    return ScrollResponder;\n}();\nvar ViewContextType = (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createContext)({}); // for Components\nfunction buildViewContext(viewSpec, viewApi, viewOptions, dateProfileGenerator, dateEnv, theme, pluginHooks, dispatch, getCurrentData, emitter, calendarApi, registerInteractiveComponent, unregisterInteractiveComponent) {\n    return {\n        dateEnv: dateEnv,\n        options: viewOptions,\n        pluginHooks: pluginHooks,\n        emitter: emitter,\n        dispatch: dispatch,\n        getCurrentData: getCurrentData,\n        calendarApi: calendarApi,\n        viewSpec: viewSpec,\n        viewApi: viewApi,\n        dateProfileGenerator: dateProfileGenerator,\n        theme: theme,\n        isRtl: viewOptions.direction === \"rtl\",\n        addResizeHandler: function addResizeHandler(handler) {\n            emitter.on(\"_resize\", handler);\n        },\n        removeResizeHandler: function removeResizeHandler(handler) {\n            emitter.off(\"_resize\", handler);\n        },\n        createScrollResponder: function createScrollResponder(execFunc) {\n            return new ScrollResponder1(execFunc, emitter, createDuration(viewOptions.scrollTime), viewOptions.scrollTimeReset);\n        },\n        registerInteractiveComponent: registerInteractiveComponent,\n        unregisterInteractiveComponent: unregisterInteractiveComponent\n    };\n}\n/* eslint max-classes-per-file: off */ var PureComponent1 = /** @class */ function(_super) {\n    var PureComponent = function PureComponent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(PureComponent, _super);\n    PureComponent.prototype.shouldComponentUpdate = function(nextProps, nextState) {\n        if (this.debug) {\n            // eslint-disable-next-line no-console\n            console.log(getUnequalProps(nextProps, this.props), getUnequalProps(nextState, this.state));\n        }\n        return !compareObjs(this.props, nextProps, this.propEquality) || !compareObjs(this.state, nextState, this.stateEquality);\n    };\n    PureComponent.addPropsEquality = addPropsEquality;\n    PureComponent.addStateEquality = addStateEquality;\n    PureComponent.contextType = ViewContextType;\n    return PureComponent;\n}(_vdom_js__WEBPACK_IMPORTED_MODULE_1__.Component);\nPureComponent1.prototype.propEquality = {};\nPureComponent1.prototype.stateEquality = {};\nvar BaseComponent1 = /** @class */ function(_super) {\n    var BaseComponent = function BaseComponent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(BaseComponent, _super);\n    BaseComponent.contextType = ViewContextType;\n    return BaseComponent;\n}(PureComponent1);\nfunction addPropsEquality(propEquality) {\n    var hash = Object.create(this.prototype.propEquality);\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)(hash, propEquality);\n    this.prototype.propEquality = hash;\n}\nfunction addStateEquality(stateEquality) {\n    var hash = Object.create(this.prototype.stateEquality);\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)(hash, stateEquality);\n    this.prototype.stateEquality = hash;\n}\n// use other one\nfunction setRef(ref, current) {\n    if (typeof ref === \"function\") {\n        ref(current);\n    } else if (ref) {\n        // see https://github.com/facebook/react/issues/13029\n        ref.current = current;\n    }\n}\n/*\nan INTERACTABLE date component\n\nPURPOSES:\n- hook up to fg, fill, and mirror renderers\n- interface for dragging and hits\n*/ var DateComponent1 = /** @class */ function(_super) {\n    var DateComponent = function DateComponent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.uid = guid();\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(DateComponent, _super);\n    // Hit System\n    // -----------------------------------------------------------------------------------------------------------------\n    DateComponent.prototype.prepareHits = function() {};\n    DateComponent.prototype.queryHit = function(positionLeft, positionTop, elWidth, elHeight) {\n        return null; // this should be abstract\n    };\n    // Pointer Interaction Utils\n    // -----------------------------------------------------------------------------------------------------------------\n    DateComponent.prototype.isValidSegDownEl = function(el) {\n        return !this.props.eventDrag && !this.props.eventResize && !elementClosest(el, \".fc-event-mirror\");\n    };\n    DateComponent.prototype.isValidDateDownEl = function(el) {\n        return !elementClosest(el, \".fc-event:not(.fc-bg-event)\") && !elementClosest(el, \".fc-more-link\") && !elementClosest(el, \"a[data-navlink]\") && !elementClosest(el, \".fc-popover\"); // hack\n    };\n    return DateComponent;\n}(BaseComponent1);\n// TODO: easier way to add new hooks? need to update a million things\nfunction createPlugin(input) {\n    return {\n        id: guid(),\n        deps: input.deps || [],\n        reducers: input.reducers || [],\n        isLoadingFuncs: input.isLoadingFuncs || [],\n        contextInit: [].concat(input.contextInit || []),\n        eventRefiners: input.eventRefiners || {},\n        eventDefMemberAdders: input.eventDefMemberAdders || [],\n        eventSourceRefiners: input.eventSourceRefiners || {},\n        isDraggableTransformers: input.isDraggableTransformers || [],\n        eventDragMutationMassagers: input.eventDragMutationMassagers || [],\n        eventDefMutationAppliers: input.eventDefMutationAppliers || [],\n        dateSelectionTransformers: input.dateSelectionTransformers || [],\n        datePointTransforms: input.datePointTransforms || [],\n        dateSpanTransforms: input.dateSpanTransforms || [],\n        views: input.views || {},\n        viewPropsTransformers: input.viewPropsTransformers || [],\n        isPropsValid: input.isPropsValid || null,\n        externalDefTransforms: input.externalDefTransforms || [],\n        viewContainerAppends: input.viewContainerAppends || [],\n        eventDropTransformers: input.eventDropTransformers || [],\n        componentInteractions: input.componentInteractions || [],\n        calendarInteractions: input.calendarInteractions || [],\n        themeClasses: input.themeClasses || {},\n        eventSourceDefs: input.eventSourceDefs || [],\n        cmdFormatter: input.cmdFormatter,\n        recurringTypes: input.recurringTypes || [],\n        namedTimeZonedImpl: input.namedTimeZonedImpl,\n        initialView: input.initialView || \"\",\n        elementDraggingImpl: input.elementDraggingImpl,\n        optionChangeHandlers: input.optionChangeHandlers || {},\n        scrollGridImpl: input.scrollGridImpl || null,\n        contentTypeHandlers: input.contentTypeHandlers || {},\n        listenerRefiners: input.listenerRefiners || {},\n        optionRefiners: input.optionRefiners || {},\n        propSetHandlers: input.propSetHandlers || {}\n    };\n}\nfunction buildPluginHooks(pluginDefs, globalDefs) {\n    var isAdded = {};\n    var hooks = {\n        reducers: [],\n        isLoadingFuncs: [],\n        contextInit: [],\n        eventRefiners: {},\n        eventDefMemberAdders: [],\n        eventSourceRefiners: {},\n        isDraggableTransformers: [],\n        eventDragMutationMassagers: [],\n        eventDefMutationAppliers: [],\n        dateSelectionTransformers: [],\n        datePointTransforms: [],\n        dateSpanTransforms: [],\n        views: {},\n        viewPropsTransformers: [],\n        isPropsValid: null,\n        externalDefTransforms: [],\n        viewContainerAppends: [],\n        eventDropTransformers: [],\n        componentInteractions: [],\n        calendarInteractions: [],\n        themeClasses: {},\n        eventSourceDefs: [],\n        cmdFormatter: null,\n        recurringTypes: [],\n        namedTimeZonedImpl: null,\n        initialView: \"\",\n        elementDraggingImpl: null,\n        optionChangeHandlers: {},\n        scrollGridImpl: null,\n        contentTypeHandlers: {},\n        listenerRefiners: {},\n        optionRefiners: {},\n        propSetHandlers: {}\n    };\n    function addDefs(defs) {\n        for(var _i = 0, defs_1 = defs; _i < defs_1.length; _i++){\n            var def = defs_1[_i];\n            if (!isAdded[def.id]) {\n                isAdded[def.id] = true;\n                addDefs(def.deps);\n                hooks = combineHooks(hooks, def);\n            }\n        }\n    }\n    if (pluginDefs) {\n        addDefs(pluginDefs);\n    }\n    addDefs(globalDefs);\n    return hooks;\n}\nfunction buildBuildPluginHooks() {\n    var currentOverrideDefs = [];\n    var currentGlobalDefs = [];\n    var currentHooks;\n    return function(overrideDefs, globalDefs) {\n        if (!currentHooks || !isArraysEqual(overrideDefs, currentOverrideDefs) || !isArraysEqual(globalDefs, currentGlobalDefs)) {\n            currentHooks = buildPluginHooks(overrideDefs, globalDefs);\n        }\n        currentOverrideDefs = overrideDefs;\n        currentGlobalDefs = globalDefs;\n        return currentHooks;\n    };\n}\nfunction combineHooks(hooks0, hooks1) {\n    return {\n        reducers: hooks0.reducers.concat(hooks1.reducers),\n        isLoadingFuncs: hooks0.isLoadingFuncs.concat(hooks1.isLoadingFuncs),\n        contextInit: hooks0.contextInit.concat(hooks1.contextInit),\n        eventRefiners: (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, hooks0.eventRefiners), hooks1.eventRefiners),\n        eventDefMemberAdders: hooks0.eventDefMemberAdders.concat(hooks1.eventDefMemberAdders),\n        eventSourceRefiners: (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, hooks0.eventSourceRefiners), hooks1.eventSourceRefiners),\n        isDraggableTransformers: hooks0.isDraggableTransformers.concat(hooks1.isDraggableTransformers),\n        eventDragMutationMassagers: hooks0.eventDragMutationMassagers.concat(hooks1.eventDragMutationMassagers),\n        eventDefMutationAppliers: hooks0.eventDefMutationAppliers.concat(hooks1.eventDefMutationAppliers),\n        dateSelectionTransformers: hooks0.dateSelectionTransformers.concat(hooks1.dateSelectionTransformers),\n        datePointTransforms: hooks0.datePointTransforms.concat(hooks1.datePointTransforms),\n        dateSpanTransforms: hooks0.dateSpanTransforms.concat(hooks1.dateSpanTransforms),\n        views: (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, hooks0.views), hooks1.views),\n        viewPropsTransformers: hooks0.viewPropsTransformers.concat(hooks1.viewPropsTransformers),\n        isPropsValid: hooks1.isPropsValid || hooks0.isPropsValid,\n        externalDefTransforms: hooks0.externalDefTransforms.concat(hooks1.externalDefTransforms),\n        viewContainerAppends: hooks0.viewContainerAppends.concat(hooks1.viewContainerAppends),\n        eventDropTransformers: hooks0.eventDropTransformers.concat(hooks1.eventDropTransformers),\n        calendarInteractions: hooks0.calendarInteractions.concat(hooks1.calendarInteractions),\n        componentInteractions: hooks0.componentInteractions.concat(hooks1.componentInteractions),\n        themeClasses: (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, hooks0.themeClasses), hooks1.themeClasses),\n        eventSourceDefs: hooks0.eventSourceDefs.concat(hooks1.eventSourceDefs),\n        cmdFormatter: hooks1.cmdFormatter || hooks0.cmdFormatter,\n        recurringTypes: hooks0.recurringTypes.concat(hooks1.recurringTypes),\n        namedTimeZonedImpl: hooks1.namedTimeZonedImpl || hooks0.namedTimeZonedImpl,\n        initialView: hooks0.initialView || hooks1.initialView,\n        elementDraggingImpl: hooks0.elementDraggingImpl || hooks1.elementDraggingImpl,\n        optionChangeHandlers: (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, hooks0.optionChangeHandlers), hooks1.optionChangeHandlers),\n        scrollGridImpl: hooks1.scrollGridImpl || hooks0.scrollGridImpl,\n        contentTypeHandlers: (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, hooks0.contentTypeHandlers), hooks1.contentTypeHandlers),\n        listenerRefiners: (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, hooks0.listenerRefiners), hooks1.listenerRefiners),\n        optionRefiners: (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, hooks0.optionRefiners), hooks1.optionRefiners),\n        propSetHandlers: (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, hooks0.propSetHandlers), hooks1.propSetHandlers)\n    };\n}\nvar StandardTheme1 = /** @class */ function(_super) {\n    var StandardTheme = function StandardTheme() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(StandardTheme, _super);\n    return StandardTheme;\n}(Theme1);\nStandardTheme1.prototype.classes = {\n    root: \"fc-theme-standard\",\n    tableCellShaded: \"fc-cell-shaded\",\n    buttonGroup: \"fc-button-group\",\n    button: \"fc-button fc-button-primary\",\n    buttonActive: \"fc-button-active\"\n};\nStandardTheme1.prototype.baseIconClass = \"fc-icon\";\nStandardTheme1.prototype.iconClasses = {\n    close: \"fc-icon-x\",\n    prev: \"fc-icon-chevron-left\",\n    next: \"fc-icon-chevron-right\",\n    prevYear: \"fc-icon-chevrons-left\",\n    nextYear: \"fc-icon-chevrons-right\"\n};\nStandardTheme1.prototype.rtlIconClasses = {\n    prev: \"fc-icon-chevron-right\",\n    next: \"fc-icon-chevron-left\",\n    prevYear: \"fc-icon-chevrons-right\",\n    nextYear: \"fc-icon-chevrons-left\"\n};\nStandardTheme1.prototype.iconOverrideOption = \"buttonIcons\"; // TODO: make TS-friendly\nStandardTheme1.prototype.iconOverrideCustomButtonOption = \"icon\";\nStandardTheme1.prototype.iconOverridePrefix = \"fc-icon-\";\nfunction compileViewDefs(defaultConfigs, overrideConfigs) {\n    var hash = {};\n    var viewType;\n    for(viewType in defaultConfigs){\n        ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs);\n    }\n    for(viewType in overrideConfigs){\n        ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs);\n    }\n    return hash;\n}\nfunction ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs) {\n    if (hash[viewType]) {\n        return hash[viewType];\n    }\n    var viewDef = buildViewDef(viewType, hash, defaultConfigs, overrideConfigs);\n    if (viewDef) {\n        hash[viewType] = viewDef;\n    }\n    return viewDef;\n}\nfunction buildViewDef(viewType, hash, defaultConfigs, overrideConfigs) {\n    var defaultConfig = defaultConfigs[viewType];\n    var overrideConfig = overrideConfigs[viewType];\n    var queryProp = function queryProp(name) {\n        return defaultConfig && defaultConfig[name] !== null ? defaultConfig[name] : overrideConfig && overrideConfig[name] !== null ? overrideConfig[name] : null;\n    };\n    var theComponent = queryProp(\"component\");\n    var superType = queryProp(\"superType\");\n    var superDef = null;\n    if (superType) {\n        if (superType === viewType) {\n            throw new Error(\"Can't have a custom view type that references itself\");\n        }\n        superDef = ensureViewDef(superType, hash, defaultConfigs, overrideConfigs);\n    }\n    if (!theComponent && superDef) {\n        theComponent = superDef.component;\n    }\n    if (!theComponent) {\n        return null; // don't throw a warning, might be settings for a single-unit view\n    }\n    return {\n        type: viewType,\n        component: theComponent,\n        defaults: (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, superDef ? superDef.defaults : {}), defaultConfig ? defaultConfig.rawOptions : {}),\n        overrides: (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, superDef ? superDef.overrides : {}), overrideConfig ? overrideConfig.rawOptions : {})\n    };\n}\n/* eslint max-classes-per-file: off */ // NOTE: in JSX, you should always use this class with <HookProps> arg. otherwise, will default to any???\nvar RenderHook1 = /** @class */ function(_super) {\n    var RenderHook = function RenderHook() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.rootElRef = (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n        _this.handleRootEl = function(el) {\n            setRef(_this.rootElRef, el);\n            if (_this.props.elRef) {\n                setRef(_this.props.elRef, el);\n            }\n        };\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(RenderHook, _super);\n    RenderHook.prototype.render = function() {\n        var _this = this;\n        var props = this.props;\n        var hookProps = props.hookProps;\n        return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(MountHook1, {\n            hookProps: hookProps,\n            didMount: props.didMount,\n            willUnmount: props.willUnmount,\n            elRef: this.handleRootEl\n        }, function(rootElRef) {\n            return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(ContentHook, {\n                hookProps: hookProps,\n                content: props.content,\n                defaultContent: props.defaultContent,\n                backupElRef: _this.rootElRef\n            }, function(innerElRef, innerContent) {\n                return props.children(rootElRef, normalizeClassNames(props.classNames, hookProps), innerElRef, innerContent);\n            });\n        });\n    };\n    return RenderHook;\n}(BaseComponent1);\n// TODO: rename to be about function, not default. use in above type\n// for forcing rerender of components that use the ContentHook\nvar CustomContentRenderContext = (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createContext)(0);\nfunction ContentHook(props) {\n    return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(CustomContentRenderContext.Consumer, null, function(renderId) {\n        return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(ContentHookInner1, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n            renderId: renderId\n        }, props));\n    });\n}\n_c = ContentHook;\nvar ContentHookInner1 = /** @class */ function(_super) {\n    var ContentHookInner = function ContentHookInner() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.innerElRef = (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(ContentHookInner, _super);\n    ContentHookInner.prototype.render = function() {\n        return this.props.children(this.innerElRef, this.renderInnerContent());\n    };\n    ContentHookInner.prototype.componentDidMount = function() {\n        this.updateCustomContent();\n    };\n    ContentHookInner.prototype.componentDidUpdate = function() {\n        this.updateCustomContent();\n    };\n    ContentHookInner.prototype.componentWillUnmount = function() {\n        if (this.customContentInfo && this.customContentInfo.destroy) {\n            this.customContentInfo.destroy();\n        }\n    };\n    ContentHookInner.prototype.renderInnerContent = function() {\n        var customContentInfo = this.customContentInfo; // only populated if using non-[p]react node(s)\n        var innerContent = this.getInnerContent();\n        var meta = this.getContentMeta(innerContent);\n        // initial run, or content-type changing? (from vue -> react for example)\n        if (!customContentInfo || customContentInfo.contentKey !== meta.contentKey) {\n            // clearing old value\n            if (customContentInfo) {\n                if (customContentInfo.destroy) {\n                    customContentInfo.destroy();\n                }\n                customContentInfo = this.customContentInfo = null;\n            }\n            // assigning new value\n            if (meta.contentKey) {\n                customContentInfo = this.customContentInfo = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n                    contentKey: meta.contentKey,\n                    contentVal: innerContent[meta.contentKey]\n                }, meta.buildLifecycleFuncs());\n            }\n        // updating\n        } else if (customContentInfo) {\n            customContentInfo.contentVal = innerContent[meta.contentKey];\n        }\n        return customContentInfo ? [] // signal that something was specified\n         : innerContent; // assume a [p]react vdom node. use it\n    };\n    ContentHookInner.prototype.getInnerContent = function() {\n        var props = this.props;\n        var innerContent = normalizeContent(props.content, props.hookProps);\n        if (innerContent === undefined) {\n            innerContent = normalizeContent(props.defaultContent, props.hookProps);\n        }\n        return innerContent == null ? null : innerContent; // convert undefined to null (better for React)\n    };\n    ContentHookInner.prototype.getContentMeta = function(innerContent) {\n        var contentTypeHandlers = this.context.pluginHooks.contentTypeHandlers;\n        var contentKey = \"\";\n        var buildLifecycleFuncs = null;\n        if (innerContent) {\n            for(var searchKey in contentTypeHandlers){\n                if (innerContent[searchKey] !== undefined) {\n                    contentKey = searchKey;\n                    buildLifecycleFuncs = contentTypeHandlers[searchKey];\n                    break;\n                }\n            }\n        }\n        return {\n            contentKey: contentKey,\n            buildLifecycleFuncs: buildLifecycleFuncs\n        };\n    };\n    ContentHookInner.prototype.updateCustomContent = function() {\n        if (this.customContentInfo) {\n            this.customContentInfo.render(this.innerElRef.current || this.props.backupElRef.current, this.customContentInfo.contentVal);\n        }\n    };\n    return ContentHookInner;\n}(BaseComponent1);\nvar MountHook1 = /** @class */ function(_super) {\n    var MountHook = function MountHook() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.handleRootEl = function(rootEl) {\n            _this.rootEl = rootEl;\n            if (_this.props.elRef) {\n                setRef(_this.props.elRef, rootEl);\n            }\n        };\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(MountHook, _super);\n    MountHook.prototype.render = function() {\n        return this.props.children(this.handleRootEl);\n    };\n    MountHook.prototype.componentDidMount = function() {\n        var callback = this.props.didMount;\n        if (callback) {\n            callback((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, this.props.hookProps), {\n                el: this.rootEl\n            }));\n        }\n    };\n    MountHook.prototype.componentWillUnmount = function() {\n        var callback = this.props.willUnmount;\n        if (callback) {\n            callback((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, this.props.hookProps), {\n                el: this.rootEl\n            }));\n        }\n    };\n    return MountHook;\n}(BaseComponent1);\nfunction buildClassNameNormalizer() {\n    var currentGenerator;\n    var currentHookProps;\n    var currentClassNames = [];\n    return function(generator, hookProps) {\n        if (!currentHookProps || !isPropsEqual(currentHookProps, hookProps) || generator !== currentGenerator) {\n            currentGenerator = generator;\n            currentHookProps = hookProps;\n            currentClassNames = normalizeClassNames(generator, hookProps);\n        }\n        return currentClassNames;\n    };\n}\nfunction normalizeClassNames(classNames, hookProps) {\n    if (typeof classNames === \"function\") {\n        classNames = classNames(hookProps);\n    }\n    return parseClassNames(classNames);\n}\nfunction normalizeContent(input, hookProps) {\n    if (typeof input === \"function\") {\n        return input(hookProps, _vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement); // give the function the vdom-creation func\n    }\n    return input;\n}\nvar ViewRoot1 = /** @class */ function(_super) {\n    var ViewRoot = function ViewRoot() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.normalizeClassNames = buildClassNameNormalizer();\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(ViewRoot, _super);\n    ViewRoot.prototype.render = function() {\n        var _a = this, props = _a.props, context = _a.context;\n        var options = context.options;\n        var hookProps = {\n            view: context.viewApi\n        };\n        var customClassNames = this.normalizeClassNames(options.viewClassNames, hookProps);\n        return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(MountHook1, {\n            hookProps: hookProps,\n            didMount: options.viewDidMount,\n            willUnmount: options.viewWillUnmount,\n            elRef: props.elRef\n        }, function(rootElRef) {\n            return props.children(rootElRef, [\n                \"fc-\" + props.viewSpec.type + \"-view\",\n                \"fc-view\"\n            ].concat(customClassNames));\n        });\n    };\n    return ViewRoot;\n}(BaseComponent1);\nfunction parseViewConfigs(inputs) {\n    return mapHash(inputs, parseViewConfig);\n}\nfunction parseViewConfig(input) {\n    var rawOptions = typeof input === \"function\" ? {\n        component: input\n    } : input;\n    var component = rawOptions.component;\n    if (rawOptions.content) {\n        component = createViewHookComponent(rawOptions);\n    // TODO: remove content/classNames/didMount/etc from options?\n    }\n    return {\n        superType: rawOptions.type,\n        component: component,\n        rawOptions: rawOptions\n    };\n}\nfunction createViewHookComponent(options) {\n    return function(viewProps) {\n        return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(ViewContextType.Consumer, null, function(context) {\n            return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(ViewRoot1, {\n                viewSpec: context.viewSpec\n            }, function(viewElRef, viewClassNames) {\n                var hookProps = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, viewProps), {\n                    nextDayThreshold: context.options.nextDayThreshold\n                });\n                return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(RenderHook1, {\n                    hookProps: hookProps,\n                    classNames: options.classNames,\n                    content: options.content,\n                    didMount: options.didMount,\n                    willUnmount: options.willUnmount,\n                    elRef: viewElRef\n                }, function(rootElRef, customClassNames, innerElRef, innerContent) {\n                    return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                        className: viewClassNames.concat(customClassNames).join(\" \"),\n                        ref: rootElRef\n                    }, innerContent);\n                });\n            });\n        });\n    };\n}\nfunction buildViewSpecs(defaultInputs, optionOverrides, dynamicOptionOverrides, localeDefaults) {\n    var defaultConfigs = parseViewConfigs(defaultInputs);\n    var overrideConfigs = parseViewConfigs(optionOverrides.views);\n    var viewDefs = compileViewDefs(defaultConfigs, overrideConfigs);\n    return mapHash(viewDefs, function(viewDef) {\n        return buildViewSpec(viewDef, overrideConfigs, optionOverrides, dynamicOptionOverrides, localeDefaults);\n    });\n}\nfunction buildViewSpec(viewDef, overrideConfigs, optionOverrides, dynamicOptionOverrides, localeDefaults) {\n    var durationInput = viewDef.overrides.duration || viewDef.defaults.duration || dynamicOptionOverrides.duration || optionOverrides.duration;\n    var duration = null;\n    var durationUnit = \"\";\n    var singleUnit = \"\";\n    var singleUnitOverrides = {};\n    if (durationInput) {\n        duration = createDurationCached(durationInput);\n        if (duration) {\n            var denom = greatestDurationDenominator(duration);\n            durationUnit = denom.unit;\n            if (denom.value === 1) {\n                singleUnit = durationUnit;\n                singleUnitOverrides = overrideConfigs[durationUnit] ? overrideConfigs[durationUnit].rawOptions : {};\n            }\n        }\n    }\n    var queryButtonText = function queryButtonText(optionsSubset) {\n        var buttonTextMap = optionsSubset.buttonText || {};\n        var buttonTextKey = viewDef.defaults.buttonTextKey;\n        if (buttonTextKey != null && buttonTextMap[buttonTextKey] != null) {\n            return buttonTextMap[buttonTextKey];\n        }\n        if (buttonTextMap[viewDef.type] != null) {\n            return buttonTextMap[viewDef.type];\n        }\n        if (buttonTextMap[singleUnit] != null) {\n            return buttonTextMap[singleUnit];\n        }\n        return null;\n    };\n    var queryButtonTitle = function queryButtonTitle(optionsSubset) {\n        var buttonHints = optionsSubset.buttonHints || {};\n        var buttonKey = viewDef.defaults.buttonTextKey; // use same key as text\n        if (buttonKey != null && buttonHints[buttonKey] != null) {\n            return buttonHints[buttonKey];\n        }\n        if (buttonHints[viewDef.type] != null) {\n            return buttonHints[viewDef.type];\n        }\n        if (buttonHints[singleUnit] != null) {\n            return buttonHints[singleUnit];\n        }\n        return null;\n    };\n    return {\n        type: viewDef.type,\n        component: viewDef.component,\n        duration: duration,\n        durationUnit: durationUnit,\n        singleUnit: singleUnit,\n        optionDefaults: viewDef.defaults,\n        optionOverrides: (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, singleUnitOverrides), viewDef.overrides),\n        buttonTextOverride: queryButtonText(dynamicOptionOverrides) || queryButtonText(optionOverrides) || viewDef.overrides.buttonText,\n        buttonTextDefault: queryButtonText(localeDefaults) || viewDef.defaults.buttonText || queryButtonText(BASE_OPTION_DEFAULTS) || viewDef.type,\n        // not DRY\n        buttonTitleOverride: queryButtonTitle(dynamicOptionOverrides) || queryButtonTitle(optionOverrides) || viewDef.overrides.buttonHint,\n        buttonTitleDefault: queryButtonTitle(localeDefaults) || viewDef.defaults.buttonHint || queryButtonTitle(BASE_OPTION_DEFAULTS)\n    };\n}\n// hack to get memoization working\nvar durationInputMap = {};\nfunction createDurationCached(durationInput) {\n    var json = JSON.stringify(durationInput);\n    var res = durationInputMap[json];\n    if (res === undefined) {\n        res = createDuration(durationInput);\n        durationInputMap[json] = res;\n    }\n    return res;\n}\nvar DateProfileGenerator1 = /** @class */ function() {\n    var DateProfileGenerator = function DateProfileGenerator(props) {\n        this.props = props;\n        this.nowDate = getNow(props.nowInput, props.dateEnv);\n        this.initHiddenDays();\n    };\n    /* Date Range Computation\n    ------------------------------------------------------------------------------------------------------------------*/ // Builds a structure with info about what the dates/ranges will be for the \"prev\" view.\n    DateProfileGenerator.prototype.buildPrev = function(currentDateProfile, currentDate, forceToValid) {\n        var dateEnv = this.props.dateEnv;\n        var prevDate = dateEnv.subtract(dateEnv.startOf(currentDate, currentDateProfile.currentRangeUnit), currentDateProfile.dateIncrement);\n        return this.build(prevDate, -1, forceToValid);\n    };\n    // Builds a structure with info about what the dates/ranges will be for the \"next\" view.\n    DateProfileGenerator.prototype.buildNext = function(currentDateProfile, currentDate, forceToValid) {\n        var dateEnv = this.props.dateEnv;\n        var nextDate = dateEnv.add(dateEnv.startOf(currentDate, currentDateProfile.currentRangeUnit), currentDateProfile.dateIncrement);\n        return this.build(nextDate, 1, forceToValid);\n    };\n    // Builds a structure holding dates/ranges for rendering around the given date.\n    // Optional direction param indicates whether the date is being incremented/decremented\n    // from its previous value. decremented = -1, incremented = 1 (default).\n    DateProfileGenerator.prototype.build = function(currentDate, direction, forceToValid) {\n        if (forceToValid === void 0) {\n            forceToValid = true;\n        }\n        var props = this.props;\n        var validRange;\n        var currentInfo;\n        var isRangeAllDay;\n        var renderRange;\n        var activeRange;\n        var isValid;\n        validRange = this.buildValidRange();\n        validRange = this.trimHiddenDays(validRange);\n        if (forceToValid) {\n            currentDate = constrainMarkerToRange(currentDate, validRange);\n        }\n        currentInfo = this.buildCurrentRangeInfo(currentDate, direction);\n        isRangeAllDay = /^(year|month|week|day)$/.test(currentInfo.unit);\n        renderRange = this.buildRenderRange(this.trimHiddenDays(currentInfo.range), currentInfo.unit, isRangeAllDay);\n        renderRange = this.trimHiddenDays(renderRange);\n        activeRange = renderRange;\n        if (!props.showNonCurrentDates) {\n            activeRange = intersectRanges(activeRange, currentInfo.range);\n        }\n        activeRange = this.adjustActiveRange(activeRange);\n        activeRange = intersectRanges(activeRange, validRange); // might return null\n        // it's invalid if the originally requested date is not contained,\n        // or if the range is completely outside of the valid range.\n        isValid = rangesIntersect(currentInfo.range, validRange);\n        return {\n            // constraint for where prev/next operations can go and where events can be dragged/resized to.\n            // an object with optional start and end properties.\n            validRange: validRange,\n            // range the view is formally responsible for.\n            // for example, a month view might have 1st-31st, excluding padded dates\n            currentRange: currentInfo.range,\n            // name of largest unit being displayed, like \"month\" or \"week\"\n            currentRangeUnit: currentInfo.unit,\n            isRangeAllDay: isRangeAllDay,\n            // dates that display events and accept drag-n-drop\n            // will be `null` if no dates accept events\n            activeRange: activeRange,\n            // date range with a rendered skeleton\n            // includes not-active days that need some sort of DOM\n            renderRange: renderRange,\n            // Duration object that denotes the first visible time of any given day\n            slotMinTime: props.slotMinTime,\n            // Duration object that denotes the exclusive visible end time of any given day\n            slotMaxTime: props.slotMaxTime,\n            isValid: isValid,\n            // how far the current date will move for a prev/next operation\n            dateIncrement: this.buildDateIncrement(currentInfo.duration)\n        };\n    };\n    // Builds an object with optional start/end properties.\n    // Indicates the minimum/maximum dates to display.\n    // not responsible for trimming hidden days.\n    DateProfileGenerator.prototype.buildValidRange = function() {\n        var input = this.props.validRangeInput;\n        var simpleInput = typeof input === \"function\" ? input.call(this.props.calendarApi, this.nowDate) : input;\n        return this.refineRange(simpleInput) || {\n            start: null,\n            end: null\n        }; // completely open-ended\n    };\n    // Builds a structure with info about the \"current\" range, the range that is\n    // highlighted as being the current month for example.\n    // See build() for a description of `direction`.\n    // Guaranteed to have `range` and `unit` properties. `duration` is optional.\n    DateProfileGenerator.prototype.buildCurrentRangeInfo = function(date, direction) {\n        var props = this.props;\n        var duration = null;\n        var unit = null;\n        var range = null;\n        var dayCount;\n        if (props.duration) {\n            duration = props.duration;\n            unit = props.durationUnit;\n            range = this.buildRangeFromDuration(date, direction, duration, unit);\n        } else if (dayCount = this.props.dayCount) {\n            unit = \"day\";\n            range = this.buildRangeFromDayCount(date, direction, dayCount);\n        } else if (range = this.buildCustomVisibleRange(date)) {\n            unit = props.dateEnv.greatestWholeUnit(range.start, range.end).unit;\n        } else {\n            duration = this.getFallbackDuration();\n            unit = greatestDurationDenominator(duration).unit;\n            range = this.buildRangeFromDuration(date, direction, duration, unit);\n        }\n        return {\n            duration: duration,\n            unit: unit,\n            range: range\n        };\n    };\n    DateProfileGenerator.prototype.getFallbackDuration = function() {\n        return createDuration({\n            day: 1\n        });\n    };\n    // Returns a new activeRange to have time values (un-ambiguate)\n    // slotMinTime or slotMaxTime causes the range to expand.\n    DateProfileGenerator.prototype.adjustActiveRange = function(range) {\n        var _a = this.props, dateEnv = _a.dateEnv, usesMinMaxTime = _a.usesMinMaxTime, slotMinTime = _a.slotMinTime, slotMaxTime = _a.slotMaxTime;\n        var start = range.start, end = range.end;\n        if (usesMinMaxTime) {\n            // expand active range if slotMinTime is negative (why not when positive?)\n            if (asRoughDays(slotMinTime) < 0) {\n                start = startOfDay(start); // necessary?\n                start = dateEnv.add(start, slotMinTime);\n            }\n            // expand active range if slotMaxTime is beyond one day (why not when negative?)\n            if (asRoughDays(slotMaxTime) > 1) {\n                end = startOfDay(end); // necessary?\n                end = addDays(end, -1);\n                end = dateEnv.add(end, slotMaxTime);\n            }\n        }\n        return {\n            start: start,\n            end: end\n        };\n    };\n    // Builds the \"current\" range when it is specified as an explicit duration.\n    // `unit` is the already-computed greatestDurationDenominator unit of duration.\n    DateProfileGenerator.prototype.buildRangeFromDuration = function(date, direction, duration, unit) {\n        var computeRes = function computeRes() {\n            start = dateEnv.startOf(date, dateAlignment);\n            end = dateEnv.add(start, duration);\n            res = {\n                start: start,\n                end: end\n            };\n        };\n        var _a = this.props, dateEnv = _a.dateEnv, dateAlignment = _a.dateAlignment;\n        var start;\n        var end;\n        var res;\n        // compute what the alignment should be\n        if (!dateAlignment) {\n            var dateIncrement = this.props.dateIncrement;\n            if (dateIncrement) {\n                // use the smaller of the two units\n                if (asRoughMs(dateIncrement) < asRoughMs(duration)) {\n                    dateAlignment = greatestDurationDenominator(dateIncrement).unit;\n                } else {\n                    dateAlignment = unit;\n                }\n            } else {\n                dateAlignment = unit;\n            }\n        }\n        // if the view displays a single day or smaller\n        if (asRoughDays(duration) <= 1) {\n            if (this.isHiddenDay(start)) {\n                start = this.skipHiddenDays(start, direction);\n                start = startOfDay(start);\n            }\n        }\n        computeRes();\n        // if range is completely enveloped by hidden days, go past the hidden days\n        if (!this.trimHiddenDays(res)) {\n            date = this.skipHiddenDays(date, direction);\n            computeRes();\n        }\n        return res;\n    };\n    // Builds the \"current\" range when a dayCount is specified.\n    DateProfileGenerator.prototype.buildRangeFromDayCount = function(date, direction, dayCount) {\n        var _a = this.props, dateEnv = _a.dateEnv, dateAlignment = _a.dateAlignment;\n        var runningCount = 0;\n        var start = date;\n        var end;\n        if (dateAlignment) {\n            start = dateEnv.startOf(start, dateAlignment);\n        }\n        start = startOfDay(start);\n        start = this.skipHiddenDays(start, direction);\n        end = start;\n        do {\n            end = addDays(end, 1);\n            if (!this.isHiddenDay(end)) {\n                runningCount += 1;\n            }\n        }while (runningCount < dayCount);\n        return {\n            start: start,\n            end: end\n        };\n    };\n    // Builds a normalized range object for the \"visible\" range,\n    // which is a way to define the currentRange and activeRange at the same time.\n    DateProfileGenerator.prototype.buildCustomVisibleRange = function(date) {\n        var props = this.props;\n        var input = props.visibleRangeInput;\n        var simpleInput = typeof input === \"function\" ? input.call(props.calendarApi, props.dateEnv.toDate(date)) : input;\n        var range = this.refineRange(simpleInput);\n        if (range && (range.start == null || range.end == null)) {\n            return null;\n        }\n        return range;\n    };\n    // Computes the range that will represent the element/cells for *rendering*,\n    // but which may have voided days/times.\n    // not responsible for trimming hidden days.\n    DateProfileGenerator.prototype.buildRenderRange = function(currentRange, currentRangeUnit, isRangeAllDay) {\n        return currentRange;\n    };\n    // Compute the duration value that should be added/substracted to the current date\n    // when a prev/next operation happens.\n    DateProfileGenerator.prototype.buildDateIncrement = function(fallback) {\n        var dateIncrement = this.props.dateIncrement;\n        var customAlignment;\n        if (dateIncrement) {\n            return dateIncrement;\n        }\n        if (customAlignment = this.props.dateAlignment) {\n            return createDuration(1, customAlignment);\n        }\n        if (fallback) {\n            return fallback;\n        }\n        return createDuration({\n            days: 1\n        });\n    };\n    DateProfileGenerator.prototype.refineRange = function(rangeInput) {\n        if (rangeInput) {\n            var range = parseRange(rangeInput, this.props.dateEnv);\n            if (range) {\n                range = computeVisibleDayRange(range);\n            }\n            return range;\n        }\n        return null;\n    };\n    /* Hidden Days\n    ------------------------------------------------------------------------------------------------------------------*/ // Initializes internal variables related to calculating hidden days-of-week\n    DateProfileGenerator.prototype.initHiddenDays = function() {\n        var hiddenDays = this.props.hiddenDays || []; // array of day-of-week indices that are hidden\n        var isHiddenDayHash = []; // is the day-of-week hidden? (hash with day-of-week-index -> bool)\n        var dayCnt = 0;\n        var i;\n        if (this.props.weekends === false) {\n            hiddenDays.push(0, 6); // 0=sunday, 6=saturday\n        }\n        for(i = 0; i < 7; i += 1){\n            if (!(isHiddenDayHash[i] = hiddenDays.indexOf(i) !== -1)) {\n                dayCnt += 1;\n            }\n        }\n        if (!dayCnt) {\n            throw new Error(\"invalid hiddenDays\"); // all days were hidden? bad.\n        }\n        this.isHiddenDayHash = isHiddenDayHash;\n    };\n    // Remove days from the beginning and end of the range that are computed as hidden.\n    // If the whole range is trimmed off, returns null\n    DateProfileGenerator.prototype.trimHiddenDays = function(range) {\n        var start = range.start, end = range.end;\n        if (start) {\n            start = this.skipHiddenDays(start);\n        }\n        if (end) {\n            end = this.skipHiddenDays(end, -1, true);\n        }\n        if (start == null || end == null || start < end) {\n            return {\n                start: start,\n                end: end\n            };\n        }\n        return null;\n    };\n    // Is the current day hidden?\n    // `day` is a day-of-week index (0-6), or a Date (used for UTC)\n    DateProfileGenerator.prototype.isHiddenDay = function(day) {\n        if (_instanceof(day, Date)) {\n            day = day.getUTCDay();\n        }\n        return this.isHiddenDayHash[day];\n    };\n    // Incrementing the current day until it is no longer a hidden day, returning a copy.\n    // DOES NOT CONSIDER validRange!\n    // If the initial value of `date` is not a hidden day, don't do anything.\n    // Pass `isExclusive` as `true` if you are dealing with an end date.\n    // `inc` defaults to `1` (increment one day forward each time)\n    DateProfileGenerator.prototype.skipHiddenDays = function(date, inc, isExclusive) {\n        if (inc === void 0) {\n            inc = 1;\n        }\n        if (isExclusive === void 0) {\n            isExclusive = false;\n        }\n        while(this.isHiddenDayHash[(date.getUTCDay() + (isExclusive ? inc : 0) + 7) % 7]){\n            date = addDays(date, inc);\n        }\n        return date;\n    };\n    return DateProfileGenerator;\n}();\nfunction reduceViewType(viewType, action) {\n    switch(action.type){\n        case \"CHANGE_VIEW_TYPE\":\n            viewType = action.viewType;\n    }\n    return viewType;\n}\nfunction reduceDynamicOptionOverrides(dynamicOptionOverrides, action) {\n    var _a;\n    switch(action.type){\n        case \"SET_OPTION\":\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, dynamicOptionOverrides), (_a = {}, _a[action.optionName] = action.rawOptionValue, _a));\n        default:\n            return dynamicOptionOverrides;\n    }\n}\nfunction reduceDateProfile(currentDateProfile, action, currentDate, dateProfileGenerator) {\n    var dp;\n    switch(action.type){\n        case \"CHANGE_VIEW_TYPE\":\n            return dateProfileGenerator.build(action.dateMarker || currentDate);\n        case \"CHANGE_DATE\":\n            return dateProfileGenerator.build(action.dateMarker);\n        case \"PREV\":\n            dp = dateProfileGenerator.buildPrev(currentDateProfile, currentDate);\n            if (dp.isValid) {\n                return dp;\n            }\n            break;\n        case \"NEXT\":\n            dp = dateProfileGenerator.buildNext(currentDateProfile, currentDate);\n            if (dp.isValid) {\n                return dp;\n            }\n            break;\n    }\n    return currentDateProfile;\n}\nfunction initEventSources(calendarOptions, dateProfile, context) {\n    var activeRange = dateProfile ? dateProfile.activeRange : null;\n    return addSources({}, parseInitialSources(calendarOptions, context), activeRange, context);\n}\nfunction reduceEventSources(eventSources, action, dateProfile, context) {\n    var activeRange = dateProfile ? dateProfile.activeRange : null; // need this check?\n    switch(action.type){\n        case \"ADD_EVENT_SOURCES\":\n            return addSources(eventSources, action.sources, activeRange, context);\n        case \"REMOVE_EVENT_SOURCE\":\n            return removeSource(eventSources, action.sourceId);\n        case \"PREV\":\n        case \"NEXT\":\n        case \"CHANGE_DATE\":\n        case \"CHANGE_VIEW_TYPE\":\n            if (dateProfile) {\n                return fetchDirtySources(eventSources, activeRange, context);\n            }\n            return eventSources;\n        case \"FETCH_EVENT_SOURCES\":\n            return fetchSourcesByIds(eventSources, action.sourceIds ? arrayToHash(action.sourceIds) : excludeStaticSources(eventSources, context), activeRange, action.isRefetch || false, context);\n        case \"RECEIVE_EVENTS\":\n        case \"RECEIVE_EVENT_ERROR\":\n            return receiveResponse(eventSources, action.sourceId, action.fetchId, action.fetchRange);\n        case \"REMOVE_ALL_EVENT_SOURCES\":\n            return {};\n        default:\n            return eventSources;\n    }\n}\nfunction reduceEventSourcesNewTimeZone(eventSources, dateProfile, context) {\n    var activeRange = dateProfile ? dateProfile.activeRange : null; // need this check?\n    return fetchSourcesByIds(eventSources, excludeStaticSources(eventSources, context), activeRange, true, context);\n}\nfunction computeEventSourcesLoading(eventSources) {\n    for(var sourceId in eventSources){\n        if (eventSources[sourceId].isFetching) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction addSources(eventSourceHash, sources, fetchRange, context) {\n    var hash = {};\n    for(var _i = 0, sources_1 = sources; _i < sources_1.length; _i++){\n        var source = sources_1[_i];\n        hash[source.sourceId] = source;\n    }\n    if (fetchRange) {\n        hash = fetchDirtySources(hash, fetchRange, context);\n    }\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, eventSourceHash), hash);\n}\nfunction removeSource(eventSourceHash, sourceId) {\n    return filterHash(eventSourceHash, function(eventSource) {\n        return eventSource.sourceId !== sourceId;\n    });\n}\nfunction fetchDirtySources(sourceHash, fetchRange, context) {\n    return fetchSourcesByIds(sourceHash, filterHash(sourceHash, function(eventSource) {\n        return isSourceDirty(eventSource, fetchRange, context);\n    }), fetchRange, false, context);\n}\nfunction isSourceDirty(eventSource, fetchRange, context) {\n    if (!doesSourceNeedRange(eventSource, context)) {\n        return !eventSource.latestFetchId;\n    }\n    return !context.options.lazyFetching || !eventSource.fetchRange || eventSource.isFetching || fetchRange.start < eventSource.fetchRange.start || fetchRange.end > eventSource.fetchRange.end;\n}\nfunction fetchSourcesByIds(prevSources, sourceIdHash, fetchRange, isRefetch, context) {\n    var nextSources = {};\n    for(var sourceId in prevSources){\n        var source = prevSources[sourceId];\n        if (sourceIdHash[sourceId]) {\n            nextSources[sourceId] = fetchSource(source, fetchRange, isRefetch, context);\n        } else {\n            nextSources[sourceId] = source;\n        }\n    }\n    return nextSources;\n}\nfunction fetchSource(eventSource, fetchRange, isRefetch, context) {\n    var options = context.options, calendarApi = context.calendarApi;\n    var sourceDef = context.pluginHooks.eventSourceDefs[eventSource.sourceDefId];\n    var fetchId = guid();\n    sourceDef.fetch({\n        eventSource: eventSource,\n        range: fetchRange,\n        isRefetch: isRefetch,\n        context: context\n    }, function(res) {\n        var rawEvents = res.rawEvents;\n        if (options.eventSourceSuccess) {\n            rawEvents = options.eventSourceSuccess.call(calendarApi, rawEvents, res.xhr) || rawEvents;\n        }\n        if (eventSource.success) {\n            rawEvents = eventSource.success.call(calendarApi, rawEvents, res.xhr) || rawEvents;\n        }\n        context.dispatch({\n            type: \"RECEIVE_EVENTS\",\n            sourceId: eventSource.sourceId,\n            fetchId: fetchId,\n            fetchRange: fetchRange,\n            rawEvents: rawEvents\n        });\n    }, function(error) {\n        console.warn(error.message, error);\n        if (options.eventSourceFailure) {\n            options.eventSourceFailure.call(calendarApi, error);\n        }\n        if (eventSource.failure) {\n            eventSource.failure(error);\n        }\n        context.dispatch({\n            type: \"RECEIVE_EVENT_ERROR\",\n            sourceId: eventSource.sourceId,\n            fetchId: fetchId,\n            fetchRange: fetchRange,\n            error: error\n        });\n    });\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, eventSource), {\n        isFetching: true,\n        latestFetchId: fetchId\n    });\n}\nfunction receiveResponse(sourceHash, sourceId, fetchId, fetchRange) {\n    var _a;\n    var eventSource = sourceHash[sourceId];\n    if (eventSource && fetchId === eventSource.latestFetchId) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, sourceHash), (_a = {}, _a[sourceId] = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, eventSource), {\n            isFetching: false,\n            fetchRange: fetchRange\n        }), _a));\n    }\n    return sourceHash;\n}\nfunction excludeStaticSources(eventSources, context) {\n    return filterHash(eventSources, function(eventSource) {\n        return doesSourceNeedRange(eventSource, context);\n    });\n}\nfunction parseInitialSources(rawOptions, context) {\n    var refiners = buildEventSourceRefiners(context);\n    var rawSources = [].concat(rawOptions.eventSources || []);\n    var sources = []; // parsed\n    if (rawOptions.initialEvents) {\n        rawSources.unshift(rawOptions.initialEvents);\n    }\n    if (rawOptions.events) {\n        rawSources.unshift(rawOptions.events);\n    }\n    for(var _i = 0, rawSources_1 = rawSources; _i < rawSources_1.length; _i++){\n        var rawSource = rawSources_1[_i];\n        var source = parseEventSource(rawSource, context, refiners);\n        if (source) {\n            sources.push(source);\n        }\n    }\n    return sources;\n}\nfunction doesSourceNeedRange(eventSource, context) {\n    var defs = context.pluginHooks.eventSourceDefs;\n    return !defs[eventSource.sourceDefId].ignoreRange;\n}\nfunction reduceEventStore(eventStore, action, eventSources, dateProfile, context) {\n    switch(action.type){\n        case \"RECEIVE_EVENTS\":\n            return receiveRawEvents(eventStore, eventSources[action.sourceId], action.fetchId, action.fetchRange, action.rawEvents, context);\n        case \"ADD_EVENTS\":\n            return addEvent(eventStore, action.eventStore, dateProfile ? dateProfile.activeRange : null, context);\n        case \"RESET_EVENTS\":\n            return action.eventStore;\n        case \"MERGE_EVENTS\":\n            return mergeEventStores(eventStore, action.eventStore);\n        case \"PREV\":\n        case \"NEXT\":\n        case \"CHANGE_DATE\":\n        case \"CHANGE_VIEW_TYPE\":\n            if (dateProfile) {\n                return expandRecurring(eventStore, dateProfile.activeRange, context);\n            }\n            return eventStore;\n        case \"REMOVE_EVENTS\":\n            return excludeSubEventStore(eventStore, action.eventStore);\n        case \"REMOVE_EVENT_SOURCE\":\n            return excludeEventsBySourceId(eventStore, action.sourceId);\n        case \"REMOVE_ALL_EVENT_SOURCES\":\n            return filterEventStoreDefs(eventStore, function(eventDef) {\n                return !eventDef.sourceId // only keep events with no source id\n                ;\n            });\n        case \"REMOVE_ALL_EVENTS\":\n            return createEmptyEventStore();\n        default:\n            return eventStore;\n    }\n}\nfunction receiveRawEvents(eventStore, eventSource, fetchId, fetchRange, rawEvents, context) {\n    if (eventSource && fetchId === eventSource.latestFetchId // TODO: wish this logic was always in event-sources\n    ) {\n        var subset = parseEvents(transformRawEvents(rawEvents, eventSource, context), eventSource, context);\n        if (fetchRange) {\n            subset = expandRecurring(subset, fetchRange, context);\n        }\n        return mergeEventStores(excludeEventsBySourceId(eventStore, eventSource.sourceId), subset);\n    }\n    return eventStore;\n}\nfunction transformRawEvents(rawEvents, eventSource, context) {\n    var calEachTransform = context.options.eventDataTransform;\n    var sourceEachTransform = eventSource ? eventSource.eventDataTransform : null;\n    if (sourceEachTransform) {\n        rawEvents = transformEachRawEvent(rawEvents, sourceEachTransform);\n    }\n    if (calEachTransform) {\n        rawEvents = transformEachRawEvent(rawEvents, calEachTransform);\n    }\n    return rawEvents;\n}\nfunction transformEachRawEvent(rawEvents, func) {\n    var refinedEvents;\n    if (!func) {\n        refinedEvents = rawEvents;\n    } else {\n        refinedEvents = [];\n        for(var _i = 0, rawEvents_1 = rawEvents; _i < rawEvents_1.length; _i++){\n            var rawEvent = rawEvents_1[_i];\n            var refinedEvent = func(rawEvent);\n            if (refinedEvent) {\n                refinedEvents.push(refinedEvent);\n            } else if (refinedEvent == null) {\n                refinedEvents.push(rawEvent);\n            } // if a different falsy value, do nothing\n        }\n    }\n    return refinedEvents;\n}\nfunction addEvent(eventStore, subset, expandRange, context) {\n    if (expandRange) {\n        subset = expandRecurring(subset, expandRange, context);\n    }\n    return mergeEventStores(eventStore, subset);\n}\nfunction rezoneEventStoreDates(eventStore, oldDateEnv, newDateEnv) {\n    var defs = eventStore.defs;\n    var instances = mapHash(eventStore.instances, function(instance) {\n        var def = defs[instance.defId];\n        if (def.allDay || def.recurringDef) {\n            return instance; // isn't dependent on timezone\n        }\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, instance), {\n            range: {\n                start: newDateEnv.createMarker(oldDateEnv.toDate(instance.range.start, instance.forcedStartTzo)),\n                end: newDateEnv.createMarker(oldDateEnv.toDate(instance.range.end, instance.forcedEndTzo))\n            },\n            forcedStartTzo: newDateEnv.canComputeOffset ? null : instance.forcedStartTzo,\n            forcedEndTzo: newDateEnv.canComputeOffset ? null : instance.forcedEndTzo\n        });\n    });\n    return {\n        defs: defs,\n        instances: instances\n    };\n}\nfunction excludeEventsBySourceId(eventStore, sourceId) {\n    return filterEventStoreDefs(eventStore, function(eventDef) {\n        return eventDef.sourceId !== sourceId;\n    });\n}\n// QUESTION: why not just return instances? do a general object-property-exclusion util\nfunction excludeInstances(eventStore, removals) {\n    return {\n        defs: eventStore.defs,\n        instances: filterHash(eventStore.instances, function(instance) {\n            return !removals[instance.instanceId];\n        })\n    };\n}\nfunction reduceDateSelection(currentSelection, action) {\n    switch(action.type){\n        case \"UNSELECT_DATES\":\n            return null;\n        case \"SELECT_DATES\":\n            return action.selection;\n        default:\n            return currentSelection;\n    }\n}\nfunction reduceSelectedEvent(currentInstanceId, action) {\n    switch(action.type){\n        case \"UNSELECT_EVENT\":\n            return \"\";\n        case \"SELECT_EVENT\":\n            return action.eventInstanceId;\n        default:\n            return currentInstanceId;\n    }\n}\nfunction reduceEventDrag(currentDrag, action) {\n    var newDrag;\n    switch(action.type){\n        case \"UNSET_EVENT_DRAG\":\n            return null;\n        case \"SET_EVENT_DRAG\":\n            newDrag = action.state;\n            return {\n                affectedEvents: newDrag.affectedEvents,\n                mutatedEvents: newDrag.mutatedEvents,\n                isEvent: newDrag.isEvent\n            };\n        default:\n            return currentDrag;\n    }\n}\nfunction reduceEventResize(currentResize, action) {\n    var newResize;\n    switch(action.type){\n        case \"UNSET_EVENT_RESIZE\":\n            return null;\n        case \"SET_EVENT_RESIZE\":\n            newResize = action.state;\n            return {\n                affectedEvents: newResize.affectedEvents,\n                mutatedEvents: newResize.mutatedEvents,\n                isEvent: newResize.isEvent\n            };\n        default:\n            return currentResize;\n    }\n}\nfunction parseToolbars(calendarOptions, calendarOptionOverrides, theme, viewSpecs, calendarApi) {\n    var header = calendarOptions.headerToolbar ? parseToolbar(calendarOptions.headerToolbar, calendarOptions, calendarOptionOverrides, theme, viewSpecs, calendarApi) : null;\n    var footer = calendarOptions.footerToolbar ? parseToolbar(calendarOptions.footerToolbar, calendarOptions, calendarOptionOverrides, theme, viewSpecs, calendarApi) : null;\n    return {\n        header: header,\n        footer: footer\n    };\n}\nfunction parseToolbar(sectionStrHash, calendarOptions, calendarOptionOverrides, theme, viewSpecs, calendarApi) {\n    var sectionWidgets = {};\n    var viewsWithButtons = [];\n    var hasTitle = false;\n    for(var sectionName in sectionStrHash){\n        var sectionStr = sectionStrHash[sectionName];\n        var sectionRes = parseSection(sectionStr, calendarOptions, calendarOptionOverrides, theme, viewSpecs, calendarApi);\n        sectionWidgets[sectionName] = sectionRes.widgets;\n        viewsWithButtons.push.apply(viewsWithButtons, sectionRes.viewsWithButtons);\n        hasTitle = hasTitle || sectionRes.hasTitle;\n    }\n    return {\n        sectionWidgets: sectionWidgets,\n        viewsWithButtons: viewsWithButtons,\n        hasTitle: hasTitle\n    };\n}\n/*\nBAD: querying icons and text here. should be done at render time\n*/ function parseSection(sectionStr, calendarOptions, calendarOptionOverrides, theme, viewSpecs, calendarApi) {\n    var isRtl = calendarOptions.direction === \"rtl\";\n    var calendarCustomButtons = calendarOptions.customButtons || {};\n    var calendarButtonTextOverrides = calendarOptionOverrides.buttonText || {};\n    var calendarButtonText = calendarOptions.buttonText || {};\n    var calendarButtonHintOverrides = calendarOptionOverrides.buttonHints || {};\n    var calendarButtonHints = calendarOptions.buttonHints || {};\n    var sectionSubstrs = sectionStr ? sectionStr.split(\" \") : [];\n    var viewsWithButtons = [];\n    var hasTitle = false;\n    var widgets = sectionSubstrs.map(function(buttonGroupStr) {\n        return buttonGroupStr.split(\",\").map(function(buttonName) {\n            if (buttonName === \"title\") {\n                hasTitle = true;\n                return {\n                    buttonName: buttonName\n                };\n            }\n            var customButtonProps;\n            var viewSpec;\n            var buttonClick;\n            var buttonIcon; // only one of these will be set\n            var buttonText; // \"\n            var buttonHint;\n            // ^ for the title=\"\" attribute, for accessibility\n            if (customButtonProps = calendarCustomButtons[buttonName]) {\n                buttonClick = function buttonClick(ev) {\n                    if (customButtonProps.click) {\n                        customButtonProps.click.call(ev.target, ev, ev.target); // TODO: use Calendar this context?\n                    }\n                };\n                (buttonIcon = theme.getCustomButtonIconClass(customButtonProps)) || (buttonIcon = theme.getIconClass(buttonName, isRtl)) || (buttonText = customButtonProps.text);\n                buttonHint = customButtonProps.hint || customButtonProps.text;\n            } else if (viewSpec = viewSpecs[buttonName]) {\n                viewsWithButtons.push(buttonName);\n                buttonClick = function buttonClick() {\n                    calendarApi.changeView(buttonName);\n                };\n                (buttonText = viewSpec.buttonTextOverride) || (buttonIcon = theme.getIconClass(buttonName, isRtl)) || (buttonText = viewSpec.buttonTextDefault);\n                var textFallback = viewSpec.buttonTextOverride || viewSpec.buttonTextDefault;\n                buttonHint = formatWithOrdinals(viewSpec.buttonTitleOverride || viewSpec.buttonTitleDefault || calendarOptions.viewHint, [\n                    textFallback,\n                    buttonName\n                ], textFallback);\n            } else if (calendarApi[buttonName]) {\n                buttonClick = function buttonClick() {\n                    calendarApi[buttonName]();\n                };\n                (buttonText = calendarButtonTextOverrides[buttonName]) || (buttonIcon = theme.getIconClass(buttonName, isRtl)) || (buttonText = calendarButtonText[buttonName]); // everything else is considered default\n                if (buttonName === \"prevYear\" || buttonName === \"nextYear\") {\n                    var prevOrNext = buttonName === \"prevYear\" ? \"prev\" : \"next\";\n                    buttonHint = formatWithOrdinals(calendarButtonHintOverrides[prevOrNext] || calendarButtonHints[prevOrNext], [\n                        calendarButtonText.year || \"year\",\n                        \"year\", \n                    ], calendarButtonText[buttonName]);\n                } else {\n                    buttonHint = function buttonHint(navUnit) {\n                        return formatWithOrdinals(calendarButtonHintOverrides[buttonName] || calendarButtonHints[buttonName], [\n                            calendarButtonText[navUnit] || navUnit,\n                            navUnit, \n                        ], calendarButtonText[buttonName]);\n                    };\n                }\n            }\n            return {\n                buttonName: buttonName,\n                buttonClick: buttonClick,\n                buttonIcon: buttonIcon,\n                buttonText: buttonText,\n                buttonHint: buttonHint\n            };\n        });\n    });\n    return {\n        widgets: widgets,\n        viewsWithButtons: viewsWithButtons,\n        hasTitle: hasTitle\n    };\n}\nvar eventSourceDef$2 = {\n    ignoreRange: true,\n    parseMeta: function parseMeta(refined) {\n        if (Array.isArray(refined.events)) {\n            return refined.events;\n        }\n        return null;\n    },\n    fetch: function fetch(arg, success) {\n        success({\n            rawEvents: arg.eventSource.meta\n        });\n    }\n};\nvar arrayEventSourcePlugin = createPlugin({\n    eventSourceDefs: [\n        eventSourceDef$2\n    ]\n});\nvar eventSourceDef$1 = {\n    parseMeta: function parseMeta(refined) {\n        if (typeof refined.events === \"function\") {\n            return refined.events;\n        }\n        return null;\n    },\n    fetch: function fetch(arg, success, failure) {\n        var dateEnv = arg.context.dateEnv;\n        var func = arg.eventSource.meta;\n        unpromisify(func.bind(null, buildRangeApiWithTimeZone(arg.range, dateEnv)), function(rawEvents) {\n            success({\n                rawEvents: rawEvents\n            }); // needs an object response\n        }, failure);\n    }\n};\nvar funcEventSourcePlugin = createPlugin({\n    eventSourceDefs: [\n        eventSourceDef$1\n    ]\n});\nfunction requestJson(method, url, params, successCallback, failureCallback) {\n    method = method.toUpperCase();\n    var body = null;\n    if (method === \"GET\") {\n        url = injectQueryStringParams(url, params);\n    } else {\n        body = encodeParams(params);\n    }\n    var xhr = new XMLHttpRequest();\n    xhr.open(method, url, true);\n    if (method !== \"GET\") {\n        xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    }\n    xhr.onload = function() {\n        if (xhr.status >= 200 && xhr.status < 400) {\n            var parsed = false;\n            var res = void 0;\n            try {\n                res = JSON.parse(xhr.responseText);\n                parsed = true;\n            } catch (err) {\n            // will handle parsed=false\n            }\n            if (parsed) {\n                successCallback(res, xhr);\n            } else {\n                failureCallback(\"Failure parsing JSON\", xhr);\n            }\n        } else {\n            failureCallback(\"Request failed\", xhr);\n        }\n    };\n    xhr.onerror = function() {\n        failureCallback(\"Request failed\", xhr);\n    };\n    xhr.send(body);\n}\nfunction injectQueryStringParams(url, params) {\n    return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + encodeParams(params);\n}\nfunction encodeParams(params) {\n    var parts = [];\n    for(var key in params){\n        parts.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(params[key]));\n    }\n    return parts.join(\"&\");\n}\nvar JSON_FEED_EVENT_SOURCE_REFINERS = {\n    method: String,\n    extraParams: identity,\n    startParam: String,\n    endParam: String,\n    timeZoneParam: String\n};\nvar eventSourceDef = {\n    parseMeta: function parseMeta(refined) {\n        if (refined.url && (refined.format === \"json\" || !refined.format)) {\n            return {\n                url: refined.url,\n                format: \"json\",\n                method: (refined.method || \"GET\").toUpperCase(),\n                extraParams: refined.extraParams,\n                startParam: refined.startParam,\n                endParam: refined.endParam,\n                timeZoneParam: refined.timeZoneParam\n            };\n        }\n        return null;\n    },\n    fetch: function fetch(arg, success, failure) {\n        var meta = arg.eventSource.meta;\n        var requestParams = buildRequestParams(meta, arg.range, arg.context);\n        requestJson(meta.method, meta.url, requestParams, function(rawEvents, xhr) {\n            success({\n                rawEvents: rawEvents,\n                xhr: xhr\n            });\n        }, function(errorMessage, xhr) {\n            failure({\n                message: errorMessage,\n                xhr: xhr\n            });\n        });\n    }\n};\nvar jsonFeedEventSourcePlugin = createPlugin({\n    eventSourceRefiners: JSON_FEED_EVENT_SOURCE_REFINERS,\n    eventSourceDefs: [\n        eventSourceDef\n    ]\n});\nfunction buildRequestParams(meta, range, context) {\n    var dateEnv = context.dateEnv, options = context.options;\n    var startParam;\n    var endParam;\n    var timeZoneParam;\n    var customRequestParams;\n    var params = {};\n    startParam = meta.startParam;\n    if (startParam == null) {\n        startParam = options.startParam;\n    }\n    endParam = meta.endParam;\n    if (endParam == null) {\n        endParam = options.endParam;\n    }\n    timeZoneParam = meta.timeZoneParam;\n    if (timeZoneParam == null) {\n        timeZoneParam = options.timeZoneParam;\n    }\n    // retrieve any outbound GET/POST data from the options\n    if (typeof meta.extraParams === \"function\") {\n        // supplied as a function that returns a key/value object\n        customRequestParams = meta.extraParams();\n    } else {\n        // probably supplied as a straight key/value object\n        customRequestParams = meta.extraParams || {};\n    }\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)(params, customRequestParams);\n    params[startParam] = dateEnv.formatIso(range.start);\n    params[endParam] = dateEnv.formatIso(range.end);\n    if (dateEnv.timeZone !== \"local\") {\n        params[timeZoneParam] = dateEnv.timeZone;\n    }\n    return params;\n}\nvar SIMPLE_RECURRING_REFINERS = {\n    daysOfWeek: identity,\n    startTime: createDuration,\n    endTime: createDuration,\n    duration: createDuration,\n    startRecur: identity,\n    endRecur: identity\n};\nvar recurring = {\n    parse: function parse(refined, dateEnv) {\n        if (refined.daysOfWeek || refined.startTime || refined.endTime || refined.startRecur || refined.endRecur) {\n            var recurringData = {\n                daysOfWeek: refined.daysOfWeek || null,\n                startTime: refined.startTime || null,\n                endTime: refined.endTime || null,\n                startRecur: refined.startRecur ? dateEnv.createMarker(refined.startRecur) : null,\n                endRecur: refined.endRecur ? dateEnv.createMarker(refined.endRecur) : null\n            };\n            var duration = void 0;\n            if (refined.duration) {\n                duration = refined.duration;\n            }\n            if (!duration && refined.startTime && refined.endTime) {\n                duration = subtractDurations(refined.endTime, refined.startTime);\n            }\n            return {\n                allDayGuess: Boolean(!refined.startTime && !refined.endTime),\n                duration: duration,\n                typeData: recurringData\n            };\n        }\n        return null;\n    },\n    expand: function expand(typeData, framingRange, dateEnv) {\n        var clippedFramingRange = intersectRanges(framingRange, {\n            start: typeData.startRecur,\n            end: typeData.endRecur\n        });\n        if (clippedFramingRange) {\n            return expandRanges(typeData.daysOfWeek, typeData.startTime, clippedFramingRange, dateEnv);\n        }\n        return [];\n    }\n};\nvar simpleRecurringEventsPlugin = createPlugin({\n    recurringTypes: [\n        recurring\n    ],\n    eventRefiners: SIMPLE_RECURRING_REFINERS\n});\nfunction expandRanges(daysOfWeek, startTime, framingRange, dateEnv) {\n    var dowHash = daysOfWeek ? arrayToHash(daysOfWeek) : null;\n    var dayMarker = startOfDay(framingRange.start);\n    var endMarker = framingRange.end;\n    var instanceStarts = [];\n    while(dayMarker < endMarker){\n        var instanceStart = void 0;\n        // if everyday, or this particular day-of-week\n        if (!dowHash || dowHash[dayMarker.getUTCDay()]) {\n            if (startTime) {\n                instanceStart = dateEnv.add(dayMarker, startTime);\n            } else {\n                instanceStart = dayMarker;\n            }\n            instanceStarts.push(instanceStart);\n        }\n        dayMarker = addDays(dayMarker, 1);\n    }\n    return instanceStarts;\n}\nvar changeHandlerPlugin = createPlugin({\n    optionChangeHandlers: {\n        events: function events1(events, context) {\n            handleEventSources([\n                events\n            ], context);\n        },\n        eventSources: handleEventSources\n    }\n});\n/*\nBUG: if `event` was supplied, all previously-given `eventSources` will be wiped out\n*/ function handleEventSources(inputs, context) {\n    var unfoundSources = hashValuesToArray(context.getCurrentData().eventSources);\n    var newInputs = [];\n    for(var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++){\n        var input = inputs_1[_i];\n        var inputFound = false;\n        for(var i = 0; i < unfoundSources.length; i += 1){\n            if (unfoundSources[i]._raw === input) {\n                unfoundSources.splice(i, 1); // delete\n                inputFound = true;\n                break;\n            }\n        }\n        if (!inputFound) {\n            newInputs.push(input);\n        }\n    }\n    for(var _a = 0, unfoundSources_1 = unfoundSources; _a < unfoundSources_1.length; _a++){\n        var unfoundSource = unfoundSources_1[_a];\n        context.dispatch({\n            type: \"REMOVE_EVENT_SOURCE\",\n            sourceId: unfoundSource.sourceId\n        });\n    }\n    for(var _b = 0, newInputs_1 = newInputs; _b < newInputs_1.length; _b++){\n        var newInput = newInputs_1[_b];\n        context.calendarApi.addEventSource(newInput);\n    }\n}\nfunction handleDateProfile(dateProfile, context) {\n    context.emitter.trigger(\"datesSet\", (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, buildRangeApiWithTimeZone(dateProfile.activeRange, context.dateEnv)), {\n        view: context.viewApi\n    }));\n}\nfunction handleEventStore(eventStore, context) {\n    var emitter = context.emitter;\n    if (emitter.hasHandlers(\"eventsSet\")) {\n        emitter.trigger(\"eventsSet\", buildEventApis(eventStore, context));\n    }\n}\n/*\nthis array is exposed on the root namespace so that UMD plugins can add to it.\nsee the rollup-bundles script.\n*/ var globalPlugins = [\n    arrayEventSourcePlugin,\n    funcEventSourcePlugin,\n    jsonFeedEventSourcePlugin,\n    simpleRecurringEventsPlugin,\n    changeHandlerPlugin,\n    createPlugin({\n        isLoadingFuncs: [\n            function(state) {\n                return computeEventSourcesLoading(state.eventSources);\n            }, \n        ],\n        contentTypeHandlers: {\n            html: buildHtmlRenderer,\n            domNodes: buildDomNodeRenderer\n        },\n        propSetHandlers: {\n            dateProfile: handleDateProfile,\n            eventStore: handleEventStore\n        }\n    }), \n];\nfunction buildHtmlRenderer() {\n    var render = function render(el, html) {\n        if (el !== currentEl || html !== currentHtml) {\n            el.innerHTML = html;\n        }\n        currentEl = el;\n        currentHtml = html;\n    };\n    var destroy = function destroy() {\n        currentEl.innerHTML = \"\";\n        currentEl = null;\n        currentHtml = \"\";\n    };\n    var currentEl = null;\n    var currentHtml = \"\";\n    return {\n        render: render,\n        destroy: destroy\n    };\n}\nfunction buildDomNodeRenderer() {\n    var render = function render(el, domNodes) {\n        var newDomNodes = Array.prototype.slice.call(domNodes);\n        if (el !== currentEl || !isArraysEqual(currentDomNodes, newDomNodes)) {\n            // append first, remove second (for scroll resetting)\n            for(var _i = 0, newDomNodes_1 = newDomNodes; _i < newDomNodes_1.length; _i++){\n                var newNode = newDomNodes_1[_i];\n                el.appendChild(newNode);\n            }\n            destroy();\n        }\n        currentEl = el;\n        currentDomNodes = newDomNodes;\n    };\n    var destroy = function destroy() {\n        currentDomNodes.forEach(removeElement);\n        currentDomNodes = [];\n        currentEl = null;\n    };\n    var currentEl = null;\n    var currentDomNodes = [];\n    return {\n        render: render,\n        destroy: destroy\n    };\n}\nvar DelayedRunner1 = /** @class */ function() {\n    var DelayedRunner = function DelayedRunner(drainedOption) {\n        this.drainedOption = drainedOption;\n        this.isRunning = false;\n        this.isDirty = false;\n        this.pauseDepths = {};\n        this.timeoutId = 0;\n    };\n    DelayedRunner.prototype.request = function(delay) {\n        this.isDirty = true;\n        if (!this.isPaused()) {\n            this.clearTimeout();\n            if (delay == null) {\n                this.tryDrain();\n            } else {\n                this.timeoutId = setTimeout(this.tryDrain.bind(this), delay);\n            }\n        }\n    };\n    DelayedRunner.prototype.pause = function(scope) {\n        if (scope === void 0) {\n            scope = \"\";\n        }\n        var pauseDepths = this.pauseDepths;\n        pauseDepths[scope] = (pauseDepths[scope] || 0) + 1;\n        this.clearTimeout();\n    };\n    DelayedRunner.prototype.resume = function(scope, force) {\n        if (scope === void 0) {\n            scope = \"\";\n        }\n        var pauseDepths = this.pauseDepths;\n        if (scope in pauseDepths) {\n            if (force) {\n                delete pauseDepths[scope];\n            } else {\n                pauseDepths[scope] -= 1;\n                var depth = pauseDepths[scope];\n                if (depth <= 0) {\n                    delete pauseDepths[scope];\n                }\n            }\n            this.tryDrain();\n        }\n    };\n    DelayedRunner.prototype.isPaused = function() {\n        return Object.keys(this.pauseDepths).length;\n    };\n    DelayedRunner.prototype.tryDrain = function() {\n        if (!this.isRunning && !this.isPaused()) {\n            this.isRunning = true;\n            while(this.isDirty){\n                this.isDirty = false;\n                this.drained(); // might set isDirty to true again\n            }\n            this.isRunning = false;\n        }\n    };\n    DelayedRunner.prototype.clear = function() {\n        this.clearTimeout();\n        this.isDirty = false;\n        this.pauseDepths = {};\n    };\n    DelayedRunner.prototype.clearTimeout = function() {\n        if (this.timeoutId) {\n            clearTimeout(this.timeoutId);\n            this.timeoutId = 0;\n        }\n    };\n    DelayedRunner.prototype.drained = function() {\n        if (this.drainedOption) {\n            this.drainedOption();\n        }\n    };\n    return DelayedRunner;\n}();\nvar TaskRunner1 = /** @class */ function() {\n    var TaskRunner = function TaskRunner(runTaskOption, drainedOption) {\n        this.runTaskOption = runTaskOption;\n        this.drainedOption = drainedOption;\n        this.queue = [];\n        this.delayedRunner = new DelayedRunner1(this.drain.bind(this));\n    };\n    TaskRunner.prototype.request = function(task, delay) {\n        this.queue.push(task);\n        this.delayedRunner.request(delay);\n    };\n    TaskRunner.prototype.pause = function(scope) {\n        this.delayedRunner.pause(scope);\n    };\n    TaskRunner.prototype.resume = function(scope, force) {\n        this.delayedRunner.resume(scope, force);\n    };\n    TaskRunner.prototype.drain = function() {\n        var queue = this.queue;\n        while(queue.length){\n            var completedTasks = [];\n            var task = void 0;\n            while(task = queue.shift()){\n                this.runTask(task);\n                completedTasks.push(task);\n            }\n            this.drained(completedTasks);\n        } // keep going, in case new tasks were added in the drained handler\n    };\n    TaskRunner.prototype.runTask = function(task) {\n        if (this.runTaskOption) {\n            this.runTaskOption(task);\n        }\n    };\n    TaskRunner.prototype.drained = function(completedTasks) {\n        if (this.drainedOption) {\n            this.drainedOption(completedTasks);\n        }\n    };\n    return TaskRunner;\n}();\n// Computes what the title at the top of the calendarApi should be for this view\nfunction buildTitle(dateProfile, viewOptions, dateEnv) {\n    var range;\n    // for views that span a large unit of time, show the proper interval, ignoring stray days before and after\n    if (/^(year|month)$/.test(dateProfile.currentRangeUnit)) {\n        range = dateProfile.currentRange;\n    } else {\n        range = dateProfile.activeRange;\n    }\n    return dateEnv.formatRange(range.start, range.end, createFormatter(viewOptions.titleFormat || buildTitleFormat(dateProfile)), {\n        isEndExclusive: dateProfile.isRangeAllDay,\n        defaultSeparator: viewOptions.titleRangeSeparator\n    });\n}\n// Generates the format string that should be used to generate the title for the current date range.\n// Attempts to compute the most appropriate format if not explicitly specified with `titleFormat`.\nfunction buildTitleFormat(dateProfile) {\n    var currentRangeUnit = dateProfile.currentRangeUnit;\n    if (currentRangeUnit === \"year\") {\n        return {\n            year: \"numeric\"\n        };\n    }\n    if (currentRangeUnit === \"month\") {\n        return {\n            year: \"numeric\",\n            month: \"long\"\n        }; // like \"September 2014\"\n    }\n    var days = diffWholeDays(dateProfile.currentRange.start, dateProfile.currentRange.end);\n    if (days !== null && days > 1) {\n        // multi-day range. shorter, like \"Sep 9 - 10 2014\"\n        return {\n            year: \"numeric\",\n            month: \"short\",\n            day: \"numeric\"\n        };\n    }\n    // one day. longer, like \"September 9 2014\"\n    return {\n        year: \"numeric\",\n        month: \"long\",\n        day: \"numeric\"\n    };\n}\n// in future refactor, do the redux-style function(state=initial) for initial-state\n// also, whatever is happening in constructor, have it happen in action queue too\nvar CalendarDataManager1 = /** @class */ function() {\n    var CalendarDataManager = function CalendarDataManager(props) {\n        var _this = this;\n        this.computeOptionsData = memoize(this._computeOptionsData);\n        this.computeCurrentViewData = memoize(this._computeCurrentViewData);\n        this.organizeRawLocales = memoize(organizeRawLocales);\n        this.buildLocale = memoize(buildLocale);\n        this.buildPluginHooks = buildBuildPluginHooks();\n        this.buildDateEnv = memoize(buildDateEnv);\n        this.buildTheme = memoize(buildTheme);\n        this.parseToolbars = memoize(parseToolbars);\n        this.buildViewSpecs = memoize(buildViewSpecs);\n        this.buildDateProfileGenerator = memoizeObjArg(buildDateProfileGenerator);\n        this.buildViewApi = memoize(buildViewApi);\n        this.buildViewUiProps = memoizeObjArg(buildViewUiProps);\n        this.buildEventUiBySource = memoize(buildEventUiBySource, isPropsEqual);\n        this.buildEventUiBases = memoize(buildEventUiBases);\n        this.parseContextBusinessHours = memoizeObjArg(parseContextBusinessHours);\n        this.buildTitle = memoize(buildTitle);\n        this.emitter = new Emitter1();\n        this.actionRunner = new TaskRunner1(this._handleAction.bind(this), this.updateData.bind(this));\n        this.currentCalendarOptionsInput = {};\n        this.currentCalendarOptionsRefined = {};\n        this.currentViewOptionsInput = {};\n        this.currentViewOptionsRefined = {};\n        this.currentCalendarOptionsRefiners = {};\n        this.getCurrentData = function() {\n            return _this.data;\n        };\n        this.dispatch = function(action) {\n            _this.actionRunner.request(action); // protects against recursive calls to _handleAction\n        };\n        this.props = props;\n        this.actionRunner.pause();\n        var dynamicOptionOverrides = {};\n        var optionsData = this.computeOptionsData(props.optionOverrides, dynamicOptionOverrides, props.calendarApi);\n        var currentViewType = optionsData.calendarOptions.initialView || optionsData.pluginHooks.initialView;\n        var currentViewData = this.computeCurrentViewData(currentViewType, optionsData, props.optionOverrides, dynamicOptionOverrides);\n        // wire things up\n        // TODO: not DRY\n        props.calendarApi.currentDataManager = this;\n        this.emitter.setThisContext(props.calendarApi);\n        this.emitter.setOptions(currentViewData.options);\n        var currentDate = getInitialDate(optionsData.calendarOptions, optionsData.dateEnv);\n        var dateProfile = currentViewData.dateProfileGenerator.build(currentDate);\n        if (!rangeContainsMarker(dateProfile.activeRange, currentDate)) {\n            currentDate = dateProfile.currentRange.start;\n        }\n        var calendarContext = {\n            dateEnv: optionsData.dateEnv,\n            options: optionsData.calendarOptions,\n            pluginHooks: optionsData.pluginHooks,\n            calendarApi: props.calendarApi,\n            dispatch: this.dispatch,\n            emitter: this.emitter,\n            getCurrentData: this.getCurrentData\n        };\n        // needs to be after setThisContext\n        for(var _i = 0, _a = optionsData.pluginHooks.contextInit; _i < _a.length; _i++){\n            var callback = _a[_i];\n            callback(calendarContext);\n        }\n        // NOT DRY\n        var eventSources = initEventSources(optionsData.calendarOptions, dateProfile, calendarContext);\n        var initialState = {\n            dynamicOptionOverrides: dynamicOptionOverrides,\n            currentViewType: currentViewType,\n            currentDate: currentDate,\n            dateProfile: dateProfile,\n            businessHours: this.parseContextBusinessHours(calendarContext),\n            eventSources: eventSources,\n            eventUiBases: {},\n            eventStore: createEmptyEventStore(),\n            renderableEventStore: createEmptyEventStore(),\n            dateSelection: null,\n            eventSelection: \"\",\n            eventDrag: null,\n            eventResize: null,\n            selectionConfig: this.buildViewUiProps(calendarContext).selectionConfig\n        };\n        var contextAndState = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, calendarContext), initialState);\n        for(var _b = 0, _c5 = optionsData.pluginHooks.reducers; _b < _c5.length; _b++){\n            var reducer = _c5[_b];\n            (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)(initialState, reducer(null, null, contextAndState));\n        }\n        if (computeIsLoading(initialState, calendarContext)) {\n            this.emitter.trigger(\"loading\", true); // NOT DRY\n        }\n        this.state = initialState;\n        this.updateData();\n        this.actionRunner.resume();\n    };\n    CalendarDataManager.prototype.resetOptions = function(optionOverrides, append) {\n        var props = this.props;\n        props.optionOverrides = append ? (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, props.optionOverrides), optionOverrides) : optionOverrides;\n        this.actionRunner.request({\n            type: \"NOTHING\"\n        });\n    };\n    CalendarDataManager.prototype._handleAction = function(action) {\n        var _a = this, props = _a.props, state = _a.state, emitter = _a.emitter;\n        var dynamicOptionOverrides = reduceDynamicOptionOverrides(state.dynamicOptionOverrides, action);\n        var optionsData = this.computeOptionsData(props.optionOverrides, dynamicOptionOverrides, props.calendarApi);\n        var currentViewType = reduceViewType(state.currentViewType, action);\n        var currentViewData = this.computeCurrentViewData(currentViewType, optionsData, props.optionOverrides, dynamicOptionOverrides);\n        // wire things up\n        // TODO: not DRY\n        props.calendarApi.currentDataManager = this;\n        emitter.setThisContext(props.calendarApi);\n        emitter.setOptions(currentViewData.options);\n        var calendarContext = {\n            dateEnv: optionsData.dateEnv,\n            options: optionsData.calendarOptions,\n            pluginHooks: optionsData.pluginHooks,\n            calendarApi: props.calendarApi,\n            dispatch: this.dispatch,\n            emitter: emitter,\n            getCurrentData: this.getCurrentData\n        };\n        var currentDate = state.currentDate, dateProfile = state.dateProfile;\n        if (this.data && this.data.dateProfileGenerator !== currentViewData.dateProfileGenerator) {\n            dateProfile = currentViewData.dateProfileGenerator.build(currentDate);\n        }\n        currentDate = reduceCurrentDate(currentDate, action);\n        dateProfile = reduceDateProfile(dateProfile, action, currentDate, currentViewData.dateProfileGenerator);\n        if (action.type === \"PREV\" || action.type === \"NEXT\" || !rangeContainsMarker(dateProfile.currentRange, currentDate)) {\n            currentDate = dateProfile.currentRange.start;\n        }\n        var eventSources = reduceEventSources(state.eventSources, action, dateProfile, calendarContext);\n        var eventStore = reduceEventStore(state.eventStore, action, eventSources, dateProfile, calendarContext);\n        var isEventsLoading = computeEventSourcesLoading(eventSources); // BAD. also called in this func in computeIsLoading\n        var renderableEventStore = isEventsLoading && !currentViewData.options.progressiveEventRendering ? state.renderableEventStore || eventStore : eventStore;\n        var _b = this.buildViewUiProps(calendarContext), eventUiSingleBase = _b.eventUiSingleBase, selectionConfig = _b.selectionConfig; // will memoize obj\n        var eventUiBySource = this.buildEventUiBySource(eventSources);\n        var eventUiBases = this.buildEventUiBases(renderableEventStore.defs, eventUiSingleBase, eventUiBySource);\n        var newState = {\n            dynamicOptionOverrides: dynamicOptionOverrides,\n            currentViewType: currentViewType,\n            currentDate: currentDate,\n            dateProfile: dateProfile,\n            eventSources: eventSources,\n            eventStore: eventStore,\n            renderableEventStore: renderableEventStore,\n            selectionConfig: selectionConfig,\n            eventUiBases: eventUiBases,\n            businessHours: this.parseContextBusinessHours(calendarContext),\n            dateSelection: reduceDateSelection(state.dateSelection, action),\n            eventSelection: reduceSelectedEvent(state.eventSelection, action),\n            eventDrag: reduceEventDrag(state.eventDrag, action),\n            eventResize: reduceEventResize(state.eventResize, action)\n        };\n        var contextAndState = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, calendarContext), newState);\n        for(var _i = 0, _c6 = optionsData.pluginHooks.reducers; _i < _c6.length; _i++){\n            var reducer = _c6[_i];\n            (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)(newState, reducer(state, action, contextAndState)); // give the OLD state, for old value\n        }\n        var wasLoading = computeIsLoading(state, calendarContext);\n        var isLoading = computeIsLoading(newState, calendarContext);\n        // TODO: use propSetHandlers in plugin system\n        if (!wasLoading && isLoading) {\n            emitter.trigger(\"loading\", true);\n        } else if (wasLoading && !isLoading) {\n            emitter.trigger(\"loading\", false);\n        }\n        this.state = newState;\n        if (props.onAction) {\n            props.onAction(action);\n        }\n    };\n    CalendarDataManager.prototype.updateData = function() {\n        var _a = this, props = _a.props, state = _a.state;\n        var oldData = this.data;\n        var optionsData = this.computeOptionsData(props.optionOverrides, state.dynamicOptionOverrides, props.calendarApi);\n        var currentViewData = this.computeCurrentViewData(state.currentViewType, optionsData, props.optionOverrides, state.dynamicOptionOverrides);\n        var data = this.data = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n            viewTitle: this.buildTitle(state.dateProfile, currentViewData.options, optionsData.dateEnv),\n            calendarApi: props.calendarApi,\n            dispatch: this.dispatch,\n            emitter: this.emitter,\n            getCurrentData: this.getCurrentData\n        }, optionsData), currentViewData), state);\n        var changeHandlers = optionsData.pluginHooks.optionChangeHandlers;\n        var oldCalendarOptions = oldData && oldData.calendarOptions;\n        var newCalendarOptions = optionsData.calendarOptions;\n        if (oldCalendarOptions && oldCalendarOptions !== newCalendarOptions) {\n            if (oldCalendarOptions.timeZone !== newCalendarOptions.timeZone) {\n                // hack\n                state.eventSources = data.eventSources = reduceEventSourcesNewTimeZone(data.eventSources, state.dateProfile, data);\n                state.eventStore = data.eventStore = rezoneEventStoreDates(data.eventStore, oldData.dateEnv, data.dateEnv);\n            }\n            for(var optionName in changeHandlers){\n                if (oldCalendarOptions[optionName] !== newCalendarOptions[optionName]) {\n                    changeHandlers[optionName](newCalendarOptions[optionName], data);\n                }\n            }\n        }\n        if (props.onData) {\n            props.onData(data);\n        }\n    };\n    CalendarDataManager.prototype._computeOptionsData = function(optionOverrides, dynamicOptionOverrides, calendarApi) {\n        // TODO: blacklist options that are handled by optionChangeHandlers\n        var _a = this.processRawCalendarOptions(optionOverrides, dynamicOptionOverrides), refinedOptions = _a.refinedOptions, pluginHooks = _a.pluginHooks, localeDefaults = _a.localeDefaults, availableLocaleData = _a.availableLocaleData, extra = _a.extra;\n        warnUnknownOptions(extra);\n        var dateEnv = this.buildDateEnv(refinedOptions.timeZone, refinedOptions.locale, refinedOptions.weekNumberCalculation, refinedOptions.firstDay, refinedOptions.weekText, pluginHooks, availableLocaleData, refinedOptions.defaultRangeSeparator);\n        var viewSpecs = this.buildViewSpecs(pluginHooks.views, optionOverrides, dynamicOptionOverrides, localeDefaults);\n        var theme = this.buildTheme(refinedOptions, pluginHooks);\n        var toolbarConfig = this.parseToolbars(refinedOptions, optionOverrides, theme, viewSpecs, calendarApi);\n        return {\n            calendarOptions: refinedOptions,\n            pluginHooks: pluginHooks,\n            dateEnv: dateEnv,\n            viewSpecs: viewSpecs,\n            theme: theme,\n            toolbarConfig: toolbarConfig,\n            localeDefaults: localeDefaults,\n            availableRawLocales: availableLocaleData.map\n        };\n    };\n    // always called from behind a memoizer\n    CalendarDataManager.prototype.processRawCalendarOptions = function(optionOverrides, dynamicOptionOverrides) {\n        var _a = mergeRawOptions([\n            BASE_OPTION_DEFAULTS,\n            optionOverrides,\n            dynamicOptionOverrides, \n        ]), locales = _a.locales, locale = _a.locale;\n        var availableLocaleData = this.organizeRawLocales(locales);\n        var availableRawLocales = availableLocaleData.map;\n        var localeDefaults = this.buildLocale(locale || availableLocaleData.defaultCode, availableRawLocales).options;\n        var pluginHooks = this.buildPluginHooks(optionOverrides.plugins || [], globalPlugins);\n        var refiners = this.currentCalendarOptionsRefiners = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, BASE_OPTION_REFINERS), CALENDAR_LISTENER_REFINERS), CALENDAR_OPTION_REFINERS), pluginHooks.listenerRefiners), pluginHooks.optionRefiners);\n        var extra = {};\n        var raw = mergeRawOptions([\n            BASE_OPTION_DEFAULTS,\n            localeDefaults,\n            optionOverrides,\n            dynamicOptionOverrides, \n        ]);\n        var refined = {};\n        var currentRaw = this.currentCalendarOptionsInput;\n        var currentRefined = this.currentCalendarOptionsRefined;\n        var anyChanges = false;\n        for(var optionName in raw){\n            if (optionName !== \"plugins\") {\n                if (raw[optionName] === currentRaw[optionName] || COMPLEX_OPTION_COMPARATORS[optionName] && optionName in currentRaw && COMPLEX_OPTION_COMPARATORS[optionName](currentRaw[optionName], raw[optionName])) {\n                    refined[optionName] = currentRefined[optionName];\n                } else if (refiners[optionName]) {\n                    refined[optionName] = refiners[optionName](raw[optionName]);\n                    anyChanges = true;\n                } else {\n                    extra[optionName] = currentRaw[optionName];\n                }\n            }\n        }\n        if (anyChanges) {\n            this.currentCalendarOptionsInput = raw;\n            this.currentCalendarOptionsRefined = refined;\n        }\n        return {\n            rawOptions: this.currentCalendarOptionsInput,\n            refinedOptions: this.currentCalendarOptionsRefined,\n            pluginHooks: pluginHooks,\n            availableLocaleData: availableLocaleData,\n            localeDefaults: localeDefaults,\n            extra: extra\n        };\n    };\n    CalendarDataManager.prototype._computeCurrentViewData = function(viewType, optionsData, optionOverrides, dynamicOptionOverrides) {\n        var viewSpec = optionsData.viewSpecs[viewType];\n        if (!viewSpec) {\n            throw new Error('viewType \"' + viewType + \"\\\" is not available. Please make sure you've loaded all neccessary plugins\");\n        }\n        var _a = this.processRawViewOptions(viewSpec, optionsData.pluginHooks, optionsData.localeDefaults, optionOverrides, dynamicOptionOverrides), refinedOptions = _a.refinedOptions, extra = _a.extra;\n        warnUnknownOptions(extra);\n        var dateProfileGenerator = this.buildDateProfileGenerator({\n            dateProfileGeneratorClass: viewSpec.optionDefaults.dateProfileGeneratorClass,\n            duration: viewSpec.duration,\n            durationUnit: viewSpec.durationUnit,\n            usesMinMaxTime: viewSpec.optionDefaults.usesMinMaxTime,\n            dateEnv: optionsData.dateEnv,\n            calendarApi: this.props.calendarApi,\n            slotMinTime: refinedOptions.slotMinTime,\n            slotMaxTime: refinedOptions.slotMaxTime,\n            showNonCurrentDates: refinedOptions.showNonCurrentDates,\n            dayCount: refinedOptions.dayCount,\n            dateAlignment: refinedOptions.dateAlignment,\n            dateIncrement: refinedOptions.dateIncrement,\n            hiddenDays: refinedOptions.hiddenDays,\n            weekends: refinedOptions.weekends,\n            nowInput: refinedOptions.now,\n            validRangeInput: refinedOptions.validRange,\n            visibleRangeInput: refinedOptions.visibleRange,\n            monthMode: refinedOptions.monthMode,\n            fixedWeekCount: refinedOptions.fixedWeekCount\n        });\n        var viewApi = this.buildViewApi(viewType, this.getCurrentData, optionsData.dateEnv);\n        return {\n            viewSpec: viewSpec,\n            options: refinedOptions,\n            dateProfileGenerator: dateProfileGenerator,\n            viewApi: viewApi\n        };\n    };\n    CalendarDataManager.prototype.processRawViewOptions = function(viewSpec, pluginHooks, localeDefaults, optionOverrides, dynamicOptionOverrides) {\n        var raw = mergeRawOptions([\n            BASE_OPTION_DEFAULTS,\n            viewSpec.optionDefaults,\n            localeDefaults,\n            optionOverrides,\n            viewSpec.optionOverrides,\n            dynamicOptionOverrides, \n        ]);\n        var refiners = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, BASE_OPTION_REFINERS), CALENDAR_LISTENER_REFINERS), CALENDAR_OPTION_REFINERS), VIEW_OPTION_REFINERS), pluginHooks.listenerRefiners), pluginHooks.optionRefiners);\n        var refined = {};\n        var currentRaw = this.currentViewOptionsInput;\n        var currentRefined = this.currentViewOptionsRefined;\n        var anyChanges = false;\n        var extra = {};\n        for(var optionName in raw){\n            if (raw[optionName] === currentRaw[optionName]) {\n                refined[optionName] = currentRefined[optionName];\n            } else {\n                if (raw[optionName] === this.currentCalendarOptionsInput[optionName]) {\n                    if (optionName in this.currentCalendarOptionsRefined) {\n                        refined[optionName] = this.currentCalendarOptionsRefined[optionName];\n                    }\n                } else if (refiners[optionName]) {\n                    refined[optionName] = refiners[optionName](raw[optionName]);\n                } else {\n                    extra[optionName] = raw[optionName];\n                }\n                anyChanges = true;\n            }\n        }\n        if (anyChanges) {\n            this.currentViewOptionsInput = raw;\n            this.currentViewOptionsRefined = refined;\n        }\n        return {\n            rawOptions: this.currentViewOptionsInput,\n            refinedOptions: this.currentViewOptionsRefined,\n            extra: extra\n        };\n    };\n    return CalendarDataManager;\n}();\nfunction buildDateEnv(timeZone, explicitLocale, weekNumberCalculation, firstDay, weekText, pluginHooks, availableLocaleData, defaultSeparator) {\n    var locale = buildLocale(explicitLocale || availableLocaleData.defaultCode, availableLocaleData.map);\n    return new DateEnv1({\n        calendarSystem: \"gregory\",\n        timeZone: timeZone,\n        namedTimeZoneImpl: pluginHooks.namedTimeZonedImpl,\n        locale: locale,\n        weekNumberCalculation: weekNumberCalculation,\n        firstDay: firstDay,\n        weekText: weekText,\n        cmdFormatter: pluginHooks.cmdFormatter,\n        defaultSeparator: defaultSeparator\n    });\n}\nfunction buildTheme(options, pluginHooks) {\n    var ThemeClass = pluginHooks.themeClasses[options.themeSystem] || StandardTheme1;\n    return new ThemeClass(options);\n}\nfunction buildDateProfileGenerator(props) {\n    var DateProfileGeneratorClass = props.dateProfileGeneratorClass || DateProfileGenerator1;\n    return new DateProfileGeneratorClass(props);\n}\nfunction buildViewApi(type, getCurrentData, dateEnv) {\n    return new ViewApi1(type, getCurrentData, dateEnv);\n}\nfunction buildEventUiBySource(eventSources) {\n    return mapHash(eventSources, function(eventSource) {\n        return eventSource.ui;\n    });\n}\nfunction buildEventUiBases(eventDefs, eventUiSingleBase, eventUiBySource) {\n    var eventUiBases = {\n        \"\": eventUiSingleBase\n    };\n    for(var defId in eventDefs){\n        var def = eventDefs[defId];\n        if (def.sourceId && eventUiBySource[def.sourceId]) {\n            eventUiBases[defId] = eventUiBySource[def.sourceId];\n        }\n    }\n    return eventUiBases;\n}\nfunction buildViewUiProps(calendarContext) {\n    var options = calendarContext.options;\n    return {\n        eventUiSingleBase: createEventUi({\n            display: options.eventDisplay,\n            editable: options.editable,\n            startEditable: options.eventStartEditable,\n            durationEditable: options.eventDurationEditable,\n            constraint: options.eventConstraint,\n            overlap: typeof options.eventOverlap === \"boolean\" ? options.eventOverlap : undefined,\n            allow: options.eventAllow,\n            backgroundColor: options.eventBackgroundColor,\n            borderColor: options.eventBorderColor,\n            textColor: options.eventTextColor,\n            color: options.eventColor\n        }, calendarContext),\n        selectionConfig: createEventUi({\n            constraint: options.selectConstraint,\n            overlap: typeof options.selectOverlap === \"boolean\" ? options.selectOverlap : undefined,\n            allow: options.selectAllow\n        }, calendarContext)\n    };\n}\nfunction computeIsLoading(state, context) {\n    for(var _i = 0, _a = context.pluginHooks.isLoadingFuncs; _i < _a.length; _i++){\n        var isLoadingFunc = _a[_i];\n        if (isLoadingFunc(state)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction parseContextBusinessHours(calendarContext) {\n    return parseBusinessHours(calendarContext.options.businessHours, calendarContext);\n}\nfunction warnUnknownOptions(options, viewName) {\n    for(var optionName in options){\n        console.warn(\"Unknown option '\" + optionName + \"'\" + (viewName ? \" for view '\" + viewName + \"'\" : \"\"));\n    }\n}\n// TODO: move this to react plugin?\nvar CalendarDataProvider1 = /** @class */ function(_super) {\n    var CalendarDataProvider = function CalendarDataProvider(props) {\n        var _this = _super.call(this, props) || this;\n        _this.handleData = function(data) {\n            if (!_this.dataManager) {\n                // eslint-disable-next-line react/no-direct-mutation-state\n                _this.state = data; // can't use setState yet\n            } else {\n                _this.setState(data);\n            }\n        };\n        _this.dataManager = new CalendarDataManager1({\n            optionOverrides: props.optionOverrides,\n            calendarApi: props.calendarApi,\n            onData: _this.handleData\n        });\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(CalendarDataProvider, _super);\n    CalendarDataProvider.prototype.render = function() {\n        return this.props.children(this.state);\n    };\n    CalendarDataProvider.prototype.componentDidUpdate = function(prevProps) {\n        var newOptionOverrides = this.props.optionOverrides;\n        if (newOptionOverrides !== prevProps.optionOverrides) {\n            this.dataManager.resetOptions(newOptionOverrides);\n        }\n    };\n    return CalendarDataProvider;\n}(_vdom_js__WEBPACK_IMPORTED_MODULE_1__.Component);\n// HELPERS\n/*\nif nextDayThreshold is specified, slicing is done in an all-day fashion.\nyou can get nextDayThreshold from context.nextDayThreshold\n*/ function sliceEvents(props, allDay) {\n    return sliceEventStore(props.eventStore, props.eventUiBases, props.dateProfile.activeRange, allDay ? props.nextDayThreshold : null).fg;\n}\nvar NamedTimeZoneImpl1 = /** @class */ function() {\n    var NamedTimeZoneImpl = function NamedTimeZoneImpl(timeZoneName) {\n        this.timeZoneName = timeZoneName;\n    };\n    return NamedTimeZoneImpl;\n}();\nvar SegHierarchy1 = /** @class */ function() {\n    var SegHierarchy = function SegHierarchy() {\n        // settings\n        this.strictOrder = false;\n        this.allowReslicing = false;\n        this.maxCoord = -1; // -1 means no max\n        this.maxStackCnt = -1; // -1 means no max\n        this.levelCoords = []; // ordered\n        this.entriesByLevel = []; // parallel with levelCoords\n        this.stackCnts = {}; // TODO: use better technique!?\n    };\n    SegHierarchy.prototype.addSegs = function(inputs) {\n        var hiddenEntries = [];\n        for(var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++){\n            var input = inputs_1[_i];\n            this.insertEntry(input, hiddenEntries);\n        }\n        return hiddenEntries;\n    };\n    SegHierarchy.prototype.insertEntry = function(entry, hiddenEntries) {\n        var insertion = this.findInsertion(entry);\n        if (this.isInsertionValid(insertion, entry)) {\n            this.insertEntryAt(entry, insertion);\n            return 1;\n        }\n        return this.handleInvalidInsertion(insertion, entry, hiddenEntries);\n    };\n    SegHierarchy.prototype.isInsertionValid = function(insertion, entry) {\n        return (this.maxCoord === -1 || insertion.levelCoord + entry.thickness <= this.maxCoord) && (this.maxStackCnt === -1 || insertion.stackCnt < this.maxStackCnt);\n    };\n    // returns number of new entries inserted\n    SegHierarchy.prototype.handleInvalidInsertion = function(insertion, entry, hiddenEntries) {\n        if (this.allowReslicing && insertion.touchingEntry) {\n            return this.splitEntry(entry, insertion.touchingEntry, hiddenEntries);\n        }\n        hiddenEntries.push(entry);\n        return 0;\n    };\n    SegHierarchy.prototype.splitEntry = function(entry, barrier, hiddenEntries) {\n        var partCnt = 0;\n        var splitHiddenEntries = [];\n        var entrySpan = entry.span;\n        var barrierSpan = barrier.span;\n        if (entrySpan.start < barrierSpan.start) {\n            partCnt += this.insertEntry({\n                index: entry.index,\n                thickness: entry.thickness,\n                span: {\n                    start: entrySpan.start,\n                    end: barrierSpan.start\n                }\n            }, splitHiddenEntries);\n        }\n        if (entrySpan.end > barrierSpan.end) {\n            partCnt += this.insertEntry({\n                index: entry.index,\n                thickness: entry.thickness,\n                span: {\n                    start: barrierSpan.end,\n                    end: entrySpan.end\n                }\n            }, splitHiddenEntries);\n        }\n        if (partCnt) {\n            hiddenEntries.push.apply(hiddenEntries, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([\n                {\n                    index: entry.index,\n                    thickness: entry.thickness,\n                    span: intersectSpans(barrierSpan, entrySpan)\n                }\n            ], splitHiddenEntries));\n            return partCnt;\n        }\n        hiddenEntries.push(entry);\n        return 0;\n    };\n    SegHierarchy.prototype.insertEntryAt = function(entry, insertion) {\n        var _a = this, entriesByLevel = _a.entriesByLevel, levelCoords = _a.levelCoords;\n        if (insertion.lateral === -1) {\n            // create a new level\n            insertAt(levelCoords, insertion.level, insertion.levelCoord);\n            insertAt(entriesByLevel, insertion.level, [\n                entry\n            ]);\n        } else {\n            // insert into existing level\n            insertAt(entriesByLevel[insertion.level], insertion.lateral, entry);\n        }\n        this.stackCnts[buildEntryKey(entry)] = insertion.stackCnt;\n    };\n    SegHierarchy.prototype.findInsertion = function(newEntry) {\n        var _a = this, levelCoords = _a.levelCoords, entriesByLevel = _a.entriesByLevel, strictOrder = _a.strictOrder, stackCnts = _a.stackCnts;\n        var levelCnt = levelCoords.length;\n        var candidateCoord = 0;\n        var touchingLevel = -1;\n        var touchingLateral = -1;\n        var touchingEntry = null;\n        var stackCnt = 0;\n        for(var trackingLevel = 0; trackingLevel < levelCnt; trackingLevel += 1){\n            var trackingCoord = levelCoords[trackingLevel];\n            // if the current level is past the placed entry, we have found a good empty space and can stop.\n            // if strictOrder, keep finding more lateral intersections.\n            if (!strictOrder && trackingCoord >= candidateCoord + newEntry.thickness) {\n                break;\n            }\n            var trackingEntries = entriesByLevel[trackingLevel];\n            var trackingEntry = void 0;\n            var searchRes = binarySearch(trackingEntries, newEntry.span.start, getEntrySpanEnd); // find first entry after newEntry's end\n            var lateralIndex = searchRes[0] + searchRes[1]; // if exact match (which doesn't collide), go to next one\n            while((trackingEntry = trackingEntries[lateralIndex]) && trackingEntry.span.start < newEntry.span.end // and not entirely past newEntry\n            ){\n                var trackingEntryBottom = trackingCoord + trackingEntry.thickness;\n                // intersects into the top of the candidate?\n                if (trackingEntryBottom > candidateCoord) {\n                    candidateCoord = trackingEntryBottom;\n                    touchingEntry = trackingEntry;\n                    touchingLevel = trackingLevel;\n                    touchingLateral = lateralIndex;\n                }\n                // butts up against top of candidate? (will happen if just intersected as well)\n                if (trackingEntryBottom === candidateCoord) {\n                    // accumulate the highest possible stackCnt of the trackingEntries that butt up\n                    stackCnt = Math.max(stackCnt, stackCnts[buildEntryKey(trackingEntry)] + 1);\n                }\n                lateralIndex += 1;\n            }\n        }\n        // the destination level will be after touchingEntry's level. find it\n        var destLevel = 0;\n        if (touchingEntry) {\n            destLevel = touchingLevel + 1;\n            while(destLevel < levelCnt && levelCoords[destLevel] < candidateCoord){\n                destLevel += 1;\n            }\n        }\n        // if adding to an existing level, find where to insert\n        var destLateral = -1;\n        if (destLevel < levelCnt && levelCoords[destLevel] === candidateCoord) {\n            destLateral = binarySearch(entriesByLevel[destLevel], newEntry.span.end, getEntrySpanEnd)[0];\n        }\n        return {\n            touchingLevel: touchingLevel,\n            touchingLateral: touchingLateral,\n            touchingEntry: touchingEntry,\n            stackCnt: stackCnt,\n            levelCoord: candidateCoord,\n            level: destLevel,\n            lateral: destLateral\n        };\n    };\n    // sorted by levelCoord (lowest to highest)\n    SegHierarchy.prototype.toRects = function() {\n        var _a = this, entriesByLevel = _a.entriesByLevel, levelCoords = _a.levelCoords;\n        var levelCnt = entriesByLevel.length;\n        var rects = [];\n        for(var level = 0; level < levelCnt; level += 1){\n            var entries = entriesByLevel[level];\n            var levelCoord = levelCoords[level];\n            for(var _i = 0, entries_1 = entries; _i < entries_1.length; _i++){\n                var entry = entries_1[_i];\n                rects.push((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, entry), {\n                    levelCoord: levelCoord\n                }));\n            }\n        }\n        return rects;\n    };\n    return SegHierarchy;\n}();\nfunction getEntrySpanEnd(entry) {\n    return entry.span.end;\n}\nfunction buildEntryKey(entry) {\n    return entry.index + \":\" + entry.span.start;\n}\n// returns groups with entries sorted by input order\nfunction groupIntersectingEntries(entries) {\n    var merges = [];\n    for(var _i = 0, entries_2 = entries; _i < entries_2.length; _i++){\n        var entry = entries_2[_i];\n        var filteredMerges = [];\n        var hungryMerge = {\n            span: entry.span,\n            entries: [\n                entry\n            ]\n        };\n        for(var _a = 0, merges_1 = merges; _a < merges_1.length; _a++){\n            var merge = merges_1[_a];\n            if (intersectSpans(merge.span, hungryMerge.span)) {\n                hungryMerge = {\n                    entries: merge.entries.concat(hungryMerge.entries),\n                    span: joinSpans(merge.span, hungryMerge.span)\n                };\n            } else {\n                filteredMerges.push(merge);\n            }\n        }\n        filteredMerges.push(hungryMerge);\n        merges = filteredMerges;\n    }\n    return merges;\n}\nfunction joinSpans(span0, span1) {\n    return {\n        start: Math.min(span0.start, span1.start),\n        end: Math.max(span0.end, span1.end)\n    };\n}\nfunction intersectSpans(span0, span1) {\n    var start = Math.max(span0.start, span1.start);\n    var end = Math.min(span0.end, span1.end);\n    if (start < end) {\n        return {\n            start: start,\n            end: end\n        };\n    }\n    return null;\n}\n// general util\n// ---------------------------------------------------------------------------------------------------------------------\nfunction insertAt(arr, index, item) {\n    arr.splice(index, 0, item);\n}\nfunction binarySearch(a, searchVal, getItemVal) {\n    var startIndex = 0;\n    var endIndex = a.length; // exclusive\n    if (!endIndex || searchVal < getItemVal(a[startIndex])) {\n        return [\n            0,\n            0\n        ];\n    }\n    if (searchVal > getItemVal(a[endIndex - 1])) {\n        return [\n            endIndex,\n            0\n        ];\n    }\n    while(startIndex < endIndex){\n        var middleIndex = Math.floor(startIndex + (endIndex - startIndex) / 2);\n        var middleVal = getItemVal(a[middleIndex]);\n        if (searchVal < middleVal) {\n            endIndex = middleIndex;\n        } else if (searchVal > middleVal) {\n            startIndex = middleIndex + 1;\n        } else {\n            return [\n                middleIndex,\n                1\n            ];\n        }\n    }\n    return [\n        startIndex,\n        0\n    ];\n}\nvar Interaction1 = /** @class */ function() {\n    var Interaction = function Interaction(settings) {\n        this.component = settings.component;\n        this.isHitComboAllowed = settings.isHitComboAllowed || null;\n    };\n    Interaction.prototype.destroy = function() {};\n    return Interaction;\n}();\nfunction parseInteractionSettings(component, input) {\n    return {\n        component: component,\n        el: input.el,\n        useEventCenter: input.useEventCenter != null ? input.useEventCenter : true,\n        isHitComboAllowed: input.isHitComboAllowed || null\n    };\n}\nfunction interactionSettingsToStore(settings) {\n    var _a;\n    return _a = {}, _a[settings.component.uid] = settings, _a;\n}\n// global state\nvar interactionSettingsStore = {};\n/*\nAn abstraction for a dragging interaction originating on an event.\nDoes higher-level things than PointerDragger, such as possibly:\n- a \"mirror\" that moves with the pointer\n- a minimum number of pixels or other criteria for a true drag to begin\n\nsubclasses must emit:\n- pointerdown\n- dragstart\n- dragmove\n- pointerup\n- dragend\n*/ var ElementDragging1 = /** @class */ function() {\n    var ElementDragging = function ElementDragging(el, selector) {\n        this.emitter = new Emitter1();\n    };\n    ElementDragging.prototype.destroy = function() {};\n    ElementDragging.prototype.setMirrorIsVisible = function(bool) {\n    // optional if subclass doesn't want to support a mirror\n    };\n    ElementDragging.prototype.setMirrorNeedsRevert = function(bool) {\n    // optional if subclass doesn't want to support a mirror\n    };\n    ElementDragging.prototype.setAutoScrollEnabled = function(bool) {\n    // optional\n    };\n    return ElementDragging;\n}();\n// TODO: get rid of this in favor of options system,\n// tho it's really easy to access this globally rather than pass thru options.\nvar config = {};\n/*\nInformation about what will happen when an external element is dragged-and-dropped\nonto a calendar. Contains information for creating an event.\n*/ var DRAG_META_REFINERS = {\n    startTime: createDuration,\n    duration: createDuration,\n    create: Boolean,\n    sourceId: String\n};\nfunction parseDragMeta(raw) {\n    var _a = refineProps(raw, DRAG_META_REFINERS), refined = _a.refined, extra = _a.extra;\n    return {\n        startTime: refined.startTime || null,\n        duration: refined.duration || null,\n        create: refined.create != null ? refined.create : true,\n        sourceId: refined.sourceId,\n        leftoverProps: extra\n    };\n}\nvar ToolbarSection1 = /** @class */ function(_super) {\n    var ToolbarSection = function ToolbarSection() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(ToolbarSection, _super);\n    ToolbarSection.prototype.render = function() {\n        var _this = this;\n        var children = this.props.widgetGroups.map(function(widgetGroup) {\n            return _this.renderWidgetGroup(widgetGroup);\n        });\n        return _vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([\n            \"div\",\n            {\n                className: \"fc-toolbar-chunk\"\n            }\n        ], children));\n    };\n    ToolbarSection.prototype.renderWidgetGroup = function(widgetGroup) {\n        var props = this.props;\n        var theme = this.context.theme;\n        var children = [];\n        var isOnlyButtons = true;\n        for(var _i = 0, widgetGroup_1 = widgetGroup; _i < widgetGroup_1.length; _i++){\n            var widget = widgetGroup_1[_i];\n            var buttonName = widget.buttonName, buttonClick = widget.buttonClick, buttonText = widget.buttonText, buttonIcon = widget.buttonIcon, buttonHint = widget.buttonHint;\n            if (buttonName === \"title\") {\n                isOnlyButtons = false;\n                children.push((0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"h2\", {\n                    className: \"fc-toolbar-title\",\n                    id: props.titleId\n                }, props.title));\n            } else {\n                var isPressed = buttonName === props.activeButton;\n                var isDisabled = !props.isTodayEnabled && buttonName === \"today\" || !props.isPrevEnabled && buttonName === \"prev\" || !props.isNextEnabled && buttonName === \"next\";\n                var buttonClasses = [\n                    \"fc-\" + buttonName + \"-button\",\n                    theme.getClass(\"button\")\n                ];\n                if (isPressed) {\n                    buttonClasses.push(theme.getClass(\"buttonActive\"));\n                }\n                children.push((0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"button\", {\n                    type: \"button\",\n                    title: typeof buttonHint === \"function\" ? buttonHint(props.navUnit) : buttonHint,\n                    disabled: isDisabled,\n                    \"aria-pressed\": isPressed,\n                    className: buttonClasses.join(\" \"),\n                    onClick: buttonClick\n                }, buttonText || (buttonIcon ? (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"span\", {\n                    className: buttonIcon\n                }) : \"\")));\n            }\n        }\n        if (children.length > 1) {\n            var groupClassName = isOnlyButtons && theme.getClass(\"buttonGroup\") || \"\";\n            return _vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([\n                \"div\",\n                {\n                    className: groupClassName\n                }\n            ], children));\n        }\n        return children[0];\n    };\n    return ToolbarSection;\n}(BaseComponent1);\nvar Toolbar1 = /** @class */ function(_super) {\n    var Toolbar = function Toolbar() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(Toolbar, _super);\n    Toolbar.prototype.render = function() {\n        var _a = this.props, model = _a.model, extraClassName = _a.extraClassName;\n        var forceLtr = false;\n        var startContent;\n        var endContent;\n        var sectionWidgets = model.sectionWidgets;\n        var centerContent = sectionWidgets.center;\n        if (sectionWidgets.left) {\n            forceLtr = true;\n            startContent = sectionWidgets.left;\n        } else {\n            startContent = sectionWidgets.start;\n        }\n        if (sectionWidgets.right) {\n            forceLtr = true;\n            endContent = sectionWidgets.right;\n        } else {\n            endContent = sectionWidgets.end;\n        }\n        var classNames = [\n            extraClassName || \"\",\n            \"fc-toolbar\",\n            forceLtr ? \"fc-toolbar-ltr\" : \"\", \n        ];\n        return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n            className: classNames.join(\" \")\n        }, this.renderSection(\"start\", startContent || []), this.renderSection(\"center\", centerContent || []), this.renderSection(\"end\", endContent || []));\n    };\n    Toolbar.prototype.renderSection = function(key, widgetGroups) {\n        var props = this.props;\n        return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(ToolbarSection1, {\n            key: key,\n            widgetGroups: widgetGroups,\n            title: props.title,\n            navUnit: props.navUnit,\n            activeButton: props.activeButton,\n            isTodayEnabled: props.isTodayEnabled,\n            isPrevEnabled: props.isPrevEnabled,\n            isNextEnabled: props.isNextEnabled,\n            titleId: props.titleId\n        });\n    };\n    return Toolbar;\n}(BaseComponent1);\n// TODO: do function component?\nvar ViewContainer1 = /** @class */ function(_super) {\n    var ViewContainer = function ViewContainer() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            availableWidth: null\n        };\n        _this.handleEl = function(el) {\n            _this.el = el;\n            setRef(_this.props.elRef, el);\n            _this.updateAvailableWidth();\n        };\n        _this.handleResize = function() {\n            _this.updateAvailableWidth();\n        };\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(ViewContainer, _super);\n    ViewContainer.prototype.render = function() {\n        var _a = this, props = _a.props, state = _a.state;\n        var aspectRatio = props.aspectRatio;\n        var classNames = [\n            \"fc-view-harness\",\n            aspectRatio || props.liquid || props.height ? \"fc-view-harness-active\" // harness controls the height\n             : \"fc-view-harness-passive\"\n        ];\n        var height = \"\";\n        var paddingBottom = \"\";\n        if (aspectRatio) {\n            if (state.availableWidth !== null) {\n                height = state.availableWidth / aspectRatio;\n            } else {\n                // while waiting to know availableWidth, we can't set height to *zero*\n                // because will cause lots of unnecessary scrollbars within scrollgrid.\n                // BETTER: don't start rendering ANYTHING yet until we know container width\n                // NOTE: why not always use paddingBottom? Causes height oscillation (issue 5606)\n                paddingBottom = 1 / aspectRatio * 100 + \"%\";\n            }\n        } else {\n            height = props.height || \"\";\n        }\n        return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n            \"aria-labelledby\": props.labeledById,\n            ref: this.handleEl,\n            className: classNames.join(\" \"),\n            style: {\n                height: height,\n                paddingBottom: paddingBottom\n            }\n        }, props.children);\n    };\n    ViewContainer.prototype.componentDidMount = function() {\n        this.context.addResizeHandler(this.handleResize);\n    };\n    ViewContainer.prototype.componentWillUnmount = function() {\n        this.context.removeResizeHandler(this.handleResize);\n    };\n    ViewContainer.prototype.updateAvailableWidth = function() {\n        if (this.el && this.props.aspectRatio // aspectRatio is the only height setting that needs availableWidth\n        ) {\n            this.setState({\n                availableWidth: this.el.offsetWidth\n            });\n        }\n    };\n    return ViewContainer;\n}(BaseComponent1);\n/*\nDetects when the user clicks on an event within a DateComponent\n*/ var EventClicking1 = /** @class */ function(_super) {\n    var EventClicking = function EventClicking(settings) {\n        var _this = _super.call(this, settings) || this;\n        _this.handleSegClick = function(ev, segEl) {\n            var component = _this.component;\n            var context = component.context;\n            var seg = getElSeg(segEl);\n            if (seg && component.isValidSegDownEl(ev.target)) {\n                // our way to simulate a link click for elements that can't be <a> tags\n                // grab before trigger fired in case trigger trashes DOM thru rerendering\n                var hasUrlContainer = elementClosest(ev.target, \".fc-event-forced-url\");\n                var url = hasUrlContainer ? hasUrlContainer.querySelector(\"a[href]\").href : \"\";\n                context.emitter.trigger(\"eventClick\", {\n                    el: segEl,\n                    event: new EventApi1(component.context, seg.eventRange.def, seg.eventRange.instance),\n                    jsEvent: ev,\n                    view: context.viewApi\n                });\n                if (url && !ev.defaultPrevented) {\n                    window.location.href = url;\n                }\n            }\n        };\n        _this.destroy = listenBySelector(settings.el, \"click\", \".fc-event\", _this.handleSegClick);\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(EventClicking, _super);\n    return EventClicking;\n}(Interaction1);\n/*\nTriggers events and adds/removes core classNames when the user's pointer\nenters/leaves event-elements of a component.\n*/ var EventHovering1 = /** @class */ function(_super) {\n    var EventHovering = function EventHovering(settings) {\n        var _this = _super.call(this, settings) || this;\n        // for simulating an eventMouseLeave when the event el is destroyed while mouse is over it\n        _this.handleEventElRemove = function(el) {\n            if (el === _this.currentSegEl) {\n                _this.handleSegLeave(null, _this.currentSegEl);\n            }\n        };\n        _this.handleSegEnter = function(ev, segEl) {\n            if (getElSeg(segEl)) {\n                _this.currentSegEl = segEl;\n                _this.triggerEvent(\"eventMouseEnter\", ev, segEl);\n            }\n        };\n        _this.handleSegLeave = function(ev, segEl) {\n            if (_this.currentSegEl) {\n                _this.currentSegEl = null;\n                _this.triggerEvent(\"eventMouseLeave\", ev, segEl);\n            }\n        };\n        _this.removeHoverListeners = listenToHoverBySelector(settings.el, \".fc-event\", _this.handleSegEnter, _this.handleSegLeave);\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(EventHovering, _super);\n    EventHovering.prototype.destroy = function() {\n        this.removeHoverListeners();\n    };\n    EventHovering.prototype.triggerEvent = function(publicEvName, ev, segEl) {\n        var component = this.component;\n        var context = component.context;\n        var seg = getElSeg(segEl);\n        if (!ev || component.isValidSegDownEl(ev.target)) {\n            context.emitter.trigger(publicEvName, {\n                el: segEl,\n                event: new EventApi1(context, seg.eventRange.def, seg.eventRange.instance),\n                jsEvent: ev,\n                view: context.viewApi\n            });\n        }\n    };\n    return EventHovering;\n}(Interaction1);\nvar CalendarContent1 = /** @class */ function(_super) {\n    var CalendarContent = function CalendarContent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.buildViewContext = memoize(buildViewContext);\n        _this.buildViewPropTransformers = memoize(buildViewPropTransformers);\n        _this.buildToolbarProps = memoize(buildToolbarProps);\n        _this.headerRef = (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n        _this.footerRef = (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n        _this.interactionsStore = {};\n        // eslint-disable-next-line\n        _this.state = {\n            viewLabelId: getUniqueDomId()\n        };\n        // Component Registration\n        // -----------------------------------------------------------------------------------------------------------------\n        _this.registerInteractiveComponent = function(component, settingsInput) {\n            var settings = parseInteractionSettings(component, settingsInput);\n            var DEFAULT_INTERACTIONS = [\n                EventClicking1,\n                EventHovering1, \n            ];\n            var interactionClasses = DEFAULT_INTERACTIONS.concat(_this.props.pluginHooks.componentInteractions);\n            var interactions = interactionClasses.map(function(TheInteractionClass) {\n                return new TheInteractionClass(settings);\n            });\n            _this.interactionsStore[component.uid] = interactions;\n            interactionSettingsStore[component.uid] = settings;\n        };\n        _this.unregisterInteractiveComponent = function(component) {\n            var listeners = _this.interactionsStore[component.uid];\n            if (listeners) {\n                for(var _i = 0, listeners_1 = listeners; _i < listeners_1.length; _i++){\n                    var listener = listeners_1[_i];\n                    listener.destroy();\n                }\n                delete _this.interactionsStore[component.uid];\n            }\n            delete interactionSettingsStore[component.uid];\n        };\n        // Resizing\n        // -----------------------------------------------------------------------------------------------------------------\n        _this.resizeRunner = new DelayedRunner1(function() {\n            _this.props.emitter.trigger(\"_resize\", true); // should window resizes be considered \"forced\" ?\n            _this.props.emitter.trigger(\"windowResize\", {\n                view: _this.props.viewApi\n            });\n        });\n        _this.handleWindowResize = function(ev) {\n            var options = _this.props.options;\n            if (options.handleWindowResize && ev.target === window // avoid jqui events\n            ) {\n                _this.resizeRunner.request(options.windowResizeDelay);\n            }\n        };\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(CalendarContent, _super);\n    /*\n    renders INSIDE of an outer div\n    */ CalendarContent.prototype.render = function() {\n        var props = this.props;\n        var toolbarConfig = props.toolbarConfig, options = props.options;\n        var toolbarProps = this.buildToolbarProps(props.viewSpec, props.dateProfile, props.dateProfileGenerator, props.currentDate, getNow(props.options.now, props.dateEnv), props.viewTitle);\n        var viewVGrow = false;\n        var viewHeight = \"\";\n        var viewAspectRatio;\n        if (props.isHeightAuto || props.forPrint) {\n            viewHeight = \"\";\n        } else if (options.height != null) {\n            viewVGrow = true;\n        } else if (options.contentHeight != null) {\n            viewHeight = options.contentHeight;\n        } else {\n            viewAspectRatio = Math.max(options.aspectRatio, 0.5); // prevent from getting too tall\n        }\n        var viewContext = this.buildViewContext(props.viewSpec, props.viewApi, props.options, props.dateProfileGenerator, props.dateEnv, props.theme, props.pluginHooks, props.dispatch, props.getCurrentData, props.emitter, props.calendarApi, this.registerInteractiveComponent, this.unregisterInteractiveComponent);\n        var viewLabelId = toolbarConfig.header && toolbarConfig.header.hasTitle ? this.state.viewLabelId : \"\";\n        return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(ViewContextType.Provider, {\n            value: viewContext\n        }, toolbarConfig.header && (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(Toolbar1, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n            ref: this.headerRef,\n            extraClassName: \"fc-header-toolbar\",\n            model: toolbarConfig.header,\n            titleId: viewLabelId\n        }, toolbarProps)), (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(ViewContainer1, {\n            liquid: viewVGrow,\n            height: viewHeight,\n            aspectRatio: viewAspectRatio,\n            labeledById: viewLabelId\n        }, this.renderView(props), this.buildAppendContent()), toolbarConfig.footer && (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(Toolbar1, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n            ref: this.footerRef,\n            extraClassName: \"fc-footer-toolbar\",\n            model: toolbarConfig.footer,\n            titleId: \"\"\n        }, toolbarProps)));\n    };\n    CalendarContent.prototype.componentDidMount = function() {\n        var props = this.props;\n        this.calendarInteractions = props.pluginHooks.calendarInteractions.map(function(CalendarInteractionClass) {\n            return new CalendarInteractionClass(props);\n        });\n        window.addEventListener(\"resize\", this.handleWindowResize);\n        var propSetHandlers = props.pluginHooks.propSetHandlers;\n        for(var propName in propSetHandlers){\n            propSetHandlers[propName](props[propName], props);\n        }\n    };\n    CalendarContent.prototype.componentDidUpdate = function(prevProps) {\n        var props = this.props;\n        var propSetHandlers = props.pluginHooks.propSetHandlers;\n        for(var propName in propSetHandlers){\n            if (props[propName] !== prevProps[propName]) {\n                propSetHandlers[propName](props[propName], props);\n            }\n        }\n    };\n    CalendarContent.prototype.componentWillUnmount = function() {\n        window.removeEventListener(\"resize\", this.handleWindowResize);\n        this.resizeRunner.clear();\n        for(var _i = 0, _a = this.calendarInteractions; _i < _a.length; _i++){\n            var interaction = _a[_i];\n            interaction.destroy();\n        }\n        this.props.emitter.trigger(\"_unmount\");\n    };\n    CalendarContent.prototype.buildAppendContent = function() {\n        var props = this.props;\n        var children = props.pluginHooks.viewContainerAppends.map(function(buildAppendContent) {\n            return buildAppendContent(props);\n        });\n        return _vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([\n            _vdom_js__WEBPACK_IMPORTED_MODULE_1__.Fragment,\n            {}\n        ], children));\n    };\n    CalendarContent.prototype.renderView = function(props) {\n        var pluginHooks = props.pluginHooks;\n        var viewSpec = props.viewSpec;\n        var viewProps = {\n            dateProfile: props.dateProfile,\n            businessHours: props.businessHours,\n            eventStore: props.renderableEventStore,\n            eventUiBases: props.eventUiBases,\n            dateSelection: props.dateSelection,\n            eventSelection: props.eventSelection,\n            eventDrag: props.eventDrag,\n            eventResize: props.eventResize,\n            isHeightAuto: props.isHeightAuto,\n            forPrint: props.forPrint\n        };\n        var transformers = this.buildViewPropTransformers(pluginHooks.viewPropsTransformers);\n        for(var _i = 0, transformers_1 = transformers; _i < transformers_1.length; _i++){\n            var transformer = transformers_1[_i];\n            (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)(viewProps, transformer.transform(viewProps, props));\n        }\n        var ViewComponent = viewSpec.component;\n        return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(ViewComponent, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, viewProps));\n    };\n    return CalendarContent;\n}(PureComponent1);\nfunction buildToolbarProps(viewSpec, dateProfile, dateProfileGenerator, currentDate, now, title) {\n    // don't force any date-profiles to valid date profiles (the `false`) so that we can tell if it's invalid\n    var todayInfo = dateProfileGenerator.build(now, undefined, false); // TODO: need `undefined` or else INFINITE LOOP for some reason\n    var prevInfo = dateProfileGenerator.buildPrev(dateProfile, currentDate, false);\n    var nextInfo = dateProfileGenerator.buildNext(dateProfile, currentDate, false);\n    return {\n        title: title,\n        activeButton: viewSpec.type,\n        navUnit: viewSpec.singleUnit,\n        isTodayEnabled: todayInfo.isValid && !rangeContainsMarker(dateProfile.currentRange, now),\n        isPrevEnabled: prevInfo.isValid,\n        isNextEnabled: nextInfo.isValid\n    };\n}\n// Plugin\n// -----------------------------------------------------------------------------------------------------------------\nfunction buildViewPropTransformers(theClasses) {\n    return theClasses.map(function(TheClass) {\n        return new TheClass();\n    });\n}\nvar CalendarRoot1 = /** @class */ function(_super) {\n    var CalendarRoot = function CalendarRoot() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            forPrint: false\n        };\n        _this.handleBeforePrint = function() {\n            _this.setState({\n                forPrint: true\n            });\n        };\n        _this.handleAfterPrint = function() {\n            _this.setState({\n                forPrint: false\n            });\n        };\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(CalendarRoot, _super);\n    CalendarRoot.prototype.render = function() {\n        var props = this.props;\n        var options = props.options;\n        var forPrint = this.state.forPrint;\n        var isHeightAuto = forPrint || options.height === \"auto\" || options.contentHeight === \"auto\";\n        var height = !isHeightAuto && options.height != null ? options.height : \"\";\n        var classNames = [\n            \"fc\",\n            forPrint ? \"fc-media-print\" : \"fc-media-screen\",\n            \"fc-direction-\" + options.direction,\n            props.theme.getClass(\"root\"), \n        ];\n        if (!getCanVGrowWithinCell()) {\n            classNames.push(\"fc-liquid-hack\");\n        }\n        return props.children(classNames, height, isHeightAuto, forPrint);\n    };\n    CalendarRoot.prototype.componentDidMount = function() {\n        var emitter = this.props.emitter;\n        emitter.on(\"_beforeprint\", this.handleBeforePrint);\n        emitter.on(\"_afterprint\", this.handleAfterPrint);\n    };\n    CalendarRoot.prototype.componentWillUnmount = function() {\n        var emitter = this.props.emitter;\n        emitter.off(\"_beforeprint\", this.handleBeforePrint);\n        emitter.off(\"_afterprint\", this.handleAfterPrint);\n    };\n    return CalendarRoot;\n}(BaseComponent1);\n// Computes a default column header formatting string if `colFormat` is not explicitly defined\nfunction computeFallbackHeaderFormat(datesRepDistinctDays, dayCnt) {\n    // if more than one week row, or if there are a lot of columns with not much space,\n    // put just the day numbers will be in each cell\n    if (!datesRepDistinctDays || dayCnt > 10) {\n        return createFormatter({\n            weekday: \"short\"\n        }); // \"Sat\"\n    }\n    if (dayCnt > 1) {\n        return createFormatter({\n            weekday: \"short\",\n            month: \"numeric\",\n            day: \"numeric\",\n            omitCommas: true\n        }); // \"Sat 11/12\"\n    }\n    return createFormatter({\n        weekday: \"long\"\n    }); // \"Saturday\"\n}\nvar CLASS_NAME = \"fc-col-header-cell\"; // do the cushion too? no\nfunction renderInner$1(hookProps) {\n    return hookProps.text;\n}\nvar TableDateCell1 = /** @class */ function(_super) {\n    var TableDateCell = function TableDateCell() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(TableDateCell, _super);\n    TableDateCell.prototype.render = function() {\n        var _a = this.context, dateEnv = _a.dateEnv, options = _a.options, theme = _a.theme, viewApi = _a.viewApi;\n        var props = this.props;\n        var date = props.date, dateProfile = props.dateProfile;\n        var dayMeta = getDateMeta(date, props.todayRange, null, dateProfile);\n        var classNames = [\n            CLASS_NAME\n        ].concat(getDayClassNames(dayMeta, theme));\n        var text = dateEnv.format(date, props.dayHeaderFormat);\n        // if colCnt is 1, we are already in a day-view and don't need a navlink\n        var navLinkAttrs = !dayMeta.isDisabled && props.colCnt > 1 ? buildNavLinkAttrs(this.context, date) : {};\n        var hookProps = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n            date: dateEnv.toDate(date),\n            view: viewApi\n        }, props.extraHookProps), {\n            text: text\n        }), dayMeta);\n        return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(RenderHook1, {\n            hookProps: hookProps,\n            classNames: options.dayHeaderClassNames,\n            content: options.dayHeaderContent,\n            defaultContent: renderInner$1,\n            didMount: options.dayHeaderDidMount,\n            willUnmount: options.dayHeaderWillUnmount\n        }, function(rootElRef, customClassNames, innerElRef, innerContent) {\n            return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"th\", (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n                ref: rootElRef,\n                role: \"columnheader\",\n                className: classNames.concat(customClassNames).join(\" \"),\n                \"data-date\": !dayMeta.isDisabled ? formatDayString(date) : undefined,\n                colSpan: props.colSpan\n            }, props.extraDataAttrs), (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                className: \"fc-scrollgrid-sync-inner\"\n            }, !dayMeta.isDisabled && (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"a\", (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n                ref: innerElRef,\n                className: [\n                    \"fc-col-header-cell-cushion\",\n                    props.isSticky ? \"fc-sticky\" : \"\", \n                ].join(\" \")\n            }, navLinkAttrs), innerContent)));\n        });\n    };\n    return TableDateCell;\n}(BaseComponent1);\nvar WEEKDAY_FORMAT = createFormatter({\n    weekday: \"long\"\n});\nvar TableDowCell1 = /** @class */ function(_super) {\n    var TableDowCell = function TableDowCell() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(TableDowCell, _super);\n    TableDowCell.prototype.render = function() {\n        var props = this.props;\n        var _a = this.context, dateEnv = _a.dateEnv, theme = _a.theme, viewApi = _a.viewApi, options = _a.options;\n        var date = addDays(new Date(259200000), props.dow); // start with Sun, 04 Jan 1970 00:00:00 GMT\n        var dateMeta = {\n            dow: props.dow,\n            isDisabled: false,\n            isFuture: false,\n            isPast: false,\n            isToday: false,\n            isOther: false\n        };\n        var classNames = [\n            CLASS_NAME\n        ].concat(getDayClassNames(dateMeta, theme), props.extraClassNames || []);\n        var text = dateEnv.format(date, props.dayHeaderFormat);\n        var hookProps = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n            date: date\n        }, dateMeta), {\n            view: viewApi\n        }), props.extraHookProps), {\n            text: text\n        });\n        return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(RenderHook1, {\n            hookProps: hookProps,\n            classNames: options.dayHeaderClassNames,\n            content: options.dayHeaderContent,\n            defaultContent: renderInner$1,\n            didMount: options.dayHeaderDidMount,\n            willUnmount: options.dayHeaderWillUnmount\n        }, function(rootElRef, customClassNames, innerElRef, innerContent) {\n            return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"th\", (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n                ref: rootElRef,\n                role: \"columnheader\",\n                className: classNames.concat(customClassNames).join(\" \"),\n                colSpan: props.colSpan\n            }, props.extraDataAttrs), (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                className: \"fc-scrollgrid-sync-inner\"\n            }, (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"a\", {\n                \"aria-label\": dateEnv.format(date, WEEKDAY_FORMAT),\n                className: [\n                    \"fc-col-header-cell-cushion\",\n                    props.isSticky ? \"fc-sticky\" : \"\", \n                ].join(\" \"),\n                ref: innerElRef\n            }, innerContent)));\n        });\n    };\n    return TableDowCell;\n}(BaseComponent1);\nvar NowTimer1 = /** @class */ function(_super) {\n    var NowTimer = function NowTimer(props, context) {\n        var _this = _super.call(this, props, context) || this;\n        _this.initialNowDate = getNow(context.options.now, context.dateEnv);\n        _this.initialNowQueriedMs = new Date().valueOf();\n        _this.state = _this.computeTiming().currentState;\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(NowTimer, _super);\n    NowTimer.prototype.render = function() {\n        var _a = this, props = _a.props, state = _a.state;\n        return props.children(state.nowDate, state.todayRange);\n    };\n    NowTimer.prototype.componentDidMount = function() {\n        this.setTimeout();\n    };\n    NowTimer.prototype.componentDidUpdate = function(prevProps) {\n        if (prevProps.unit !== this.props.unit) {\n            this.clearTimeout();\n            this.setTimeout();\n        }\n    };\n    NowTimer.prototype.componentWillUnmount = function() {\n        this.clearTimeout();\n    };\n    NowTimer.prototype.computeTiming = function() {\n        var _a = this, props = _a.props, context = _a.context;\n        var unroundedNow = addMs(this.initialNowDate, new Date().valueOf() - this.initialNowQueriedMs);\n        var currentUnitStart = context.dateEnv.startOf(unroundedNow, props.unit);\n        var nextUnitStart = context.dateEnv.add(currentUnitStart, createDuration(1, props.unit));\n        var waitMs = nextUnitStart.valueOf() - unroundedNow.valueOf();\n        // there is a max setTimeout ms value (https://stackoverflow.com/a/3468650/96342)\n        // ensure no longer than a day\n        waitMs = Math.min(1000 * 60 * 60 * 24, waitMs);\n        return {\n            currentState: {\n                nowDate: currentUnitStart,\n                todayRange: buildDayRange(currentUnitStart)\n            },\n            nextState: {\n                nowDate: nextUnitStart,\n                todayRange: buildDayRange(nextUnitStart)\n            },\n            waitMs: waitMs\n        };\n    };\n    NowTimer.prototype.setTimeout = function() {\n        var _this = this;\n        var _a = this.computeTiming(), nextState = _a.nextState, waitMs = _a.waitMs;\n        this.timeoutId = setTimeout(function() {\n            _this.setState(nextState, function() {\n                _this.setTimeout();\n            });\n        }, waitMs);\n    };\n    NowTimer.prototype.clearTimeout = function() {\n        if (this.timeoutId) {\n            clearTimeout(this.timeoutId);\n        }\n    };\n    NowTimer.contextType = ViewContextType;\n    return NowTimer;\n}(_vdom_js__WEBPACK_IMPORTED_MODULE_1__.Component);\nfunction buildDayRange(date) {\n    var start = startOfDay(date);\n    var end = addDays(start, 1);\n    return {\n        start: start,\n        end: end\n    };\n}\nvar DayHeader1 = /** @class */ function(_super) {\n    var DayHeader = function DayHeader() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.createDayHeaderFormatter = memoize(createDayHeaderFormatter);\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(DayHeader, _super);\n    DayHeader.prototype.render = function() {\n        var context = this.context;\n        var _a = this.props, dates = _a.dates, dateProfile = _a.dateProfile, datesRepDistinctDays = _a.datesRepDistinctDays, renderIntro = _a.renderIntro;\n        var dayHeaderFormat = this.createDayHeaderFormatter(context.options.dayHeaderFormat, datesRepDistinctDays, dates.length);\n        return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(NowTimer1, {\n            unit: \"day\"\n        }, function(nowDate, todayRange) {\n            return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"tr\", {\n                role: \"row\"\n            }, renderIntro && renderIntro(\"day\"), dates.map(function(date) {\n                return datesRepDistinctDays ? (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(TableDateCell1, {\n                    key: date.toISOString(),\n                    date: date,\n                    dateProfile: dateProfile,\n                    todayRange: todayRange,\n                    colCnt: dates.length,\n                    dayHeaderFormat: dayHeaderFormat\n                }) : (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(TableDowCell1, {\n                    key: date.getUTCDay(),\n                    dow: date.getUTCDay(),\n                    dayHeaderFormat: dayHeaderFormat\n                });\n            }));\n        });\n    };\n    return DayHeader;\n}(BaseComponent1);\nfunction createDayHeaderFormatter(explicitFormat, datesRepDistinctDays, dateCnt) {\n    return explicitFormat || computeFallbackHeaderFormat(datesRepDistinctDays, dateCnt);\n}\nvar DaySeriesModel1 = /** @class */ function() {\n    var DaySeriesModel = function DaySeriesModel(range, dateProfileGenerator) {\n        var date = range.start;\n        var end = range.end;\n        var indices = [];\n        var dates = [];\n        var dayIndex = -1;\n        while(date < end){\n            if (dateProfileGenerator.isHiddenDay(date)) {\n                indices.push(dayIndex + 0.5); // mark that it's between indices\n            } else {\n                dayIndex += 1;\n                indices.push(dayIndex);\n                dates.push(date);\n            }\n            date = addDays(date, 1);\n        }\n        this.dates = dates;\n        this.indices = indices;\n        this.cnt = dates.length;\n    };\n    DaySeriesModel.prototype.sliceRange = function(range) {\n        var firstIndex = this.getDateDayIndex(range.start); // inclusive first index\n        var lastIndex = this.getDateDayIndex(addDays(range.end, -1)); // inclusive last index\n        var clippedFirstIndex = Math.max(0, firstIndex);\n        var clippedLastIndex = Math.min(this.cnt - 1, lastIndex);\n        // deal with in-between indices\n        clippedFirstIndex = Math.ceil(clippedFirstIndex); // in-between starts round to next cell\n        clippedLastIndex = Math.floor(clippedLastIndex); // in-between ends round to prev cell\n        if (clippedFirstIndex <= clippedLastIndex) {\n            return {\n                firstIndex: clippedFirstIndex,\n                lastIndex: clippedLastIndex,\n                isStart: firstIndex === clippedFirstIndex,\n                isEnd: lastIndex === clippedLastIndex\n            };\n        }\n        return null;\n    };\n    // Given a date, returns its chronolocial cell-index from the first cell of the grid.\n    // If the date lies between cells (because of hiddenDays), returns a floating-point value between offsets.\n    // If before the first offset, returns a negative number.\n    // If after the last offset, returns an offset past the last cell offset.\n    // Only works for *start* dates of cells. Will not work for exclusive end dates for cells.\n    DaySeriesModel.prototype.getDateDayIndex = function(date) {\n        var indices = this.indices;\n        var dayOffset = Math.floor(diffDays(this.dates[0], date));\n        if (dayOffset < 0) {\n            return indices[0] - 1;\n        }\n        if (dayOffset >= indices.length) {\n            return indices[indices.length - 1] + 1;\n        }\n        return indices[dayOffset];\n    };\n    return DaySeriesModel;\n}();\nvar DayTableModel1 = /** @class */ function() {\n    var DayTableModel = function DayTableModel(daySeries, breakOnWeeks) {\n        var dates = daySeries.dates;\n        var daysPerRow;\n        var firstDay;\n        var rowCnt;\n        if (breakOnWeeks) {\n            // count columns until the day-of-week repeats\n            firstDay = dates[0].getUTCDay();\n            for(daysPerRow = 1; daysPerRow < dates.length; daysPerRow += 1){\n                if (dates[daysPerRow].getUTCDay() === firstDay) {\n                    break;\n                }\n            }\n            rowCnt = Math.ceil(dates.length / daysPerRow);\n        } else {\n            rowCnt = 1;\n            daysPerRow = dates.length;\n        }\n        this.rowCnt = rowCnt;\n        this.colCnt = daysPerRow;\n        this.daySeries = daySeries;\n        this.cells = this.buildCells();\n        this.headerDates = this.buildHeaderDates();\n    };\n    DayTableModel.prototype.buildCells = function() {\n        var rows = [];\n        for(var row = 0; row < this.rowCnt; row += 1){\n            var cells = [];\n            for(var col = 0; col < this.colCnt; col += 1){\n                cells.push(this.buildCell(row, col));\n            }\n            rows.push(cells);\n        }\n        return rows;\n    };\n    DayTableModel.prototype.buildCell = function(row, col) {\n        var date = this.daySeries.dates[row * this.colCnt + col];\n        return {\n            key: date.toISOString(),\n            date: date\n        };\n    };\n    DayTableModel.prototype.buildHeaderDates = function() {\n        var dates = [];\n        for(var col = 0; col < this.colCnt; col += 1){\n            dates.push(this.cells[0][col].date);\n        }\n        return dates;\n    };\n    DayTableModel.prototype.sliceRange = function(range) {\n        var colCnt = this.colCnt;\n        var seriesSeg = this.daySeries.sliceRange(range);\n        var segs = [];\n        if (seriesSeg) {\n            var firstIndex = seriesSeg.firstIndex, lastIndex = seriesSeg.lastIndex;\n            var index = firstIndex;\n            while(index <= lastIndex){\n                var row = Math.floor(index / colCnt);\n                var nextIndex = Math.min((row + 1) * colCnt, lastIndex + 1);\n                segs.push({\n                    row: row,\n                    firstCol: index % colCnt,\n                    lastCol: (nextIndex - 1) % colCnt,\n                    isStart: seriesSeg.isStart && index === firstIndex,\n                    isEnd: seriesSeg.isEnd && nextIndex - 1 === lastIndex\n                });\n                index = nextIndex;\n            }\n        }\n        return segs;\n    };\n    return DayTableModel;\n}();\nvar Slicer1 = /** @class */ function() {\n    var Slicer = function Slicer() {\n        this.sliceBusinessHours = memoize(this._sliceBusinessHours);\n        this.sliceDateSelection = memoize(this._sliceDateSpan);\n        this.sliceEventStore = memoize(this._sliceEventStore);\n        this.sliceEventDrag = memoize(this._sliceInteraction);\n        this.sliceEventResize = memoize(this._sliceInteraction);\n        this.forceDayIfListItem = false; // hack\n    };\n    Slicer.prototype.sliceProps = function(props, dateProfile, nextDayThreshold, context) {\n        var extraArgs = [];\n        for(var _i = 4; _i < arguments.length; _i++){\n            extraArgs[_i - 4] = arguments[_i];\n        }\n        var eventUiBases = props.eventUiBases;\n        var eventSegs = this.sliceEventStore.apply(this, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([\n            props.eventStore,\n            eventUiBases,\n            dateProfile,\n            nextDayThreshold\n        ], extraArgs));\n        return {\n            dateSelectionSegs: this.sliceDateSelection.apply(this, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([\n                props.dateSelection,\n                eventUiBases,\n                context\n            ], extraArgs)),\n            businessHourSegs: this.sliceBusinessHours.apply(this, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([\n                props.businessHours,\n                dateProfile,\n                nextDayThreshold,\n                context\n            ], extraArgs)),\n            fgEventSegs: eventSegs.fg,\n            bgEventSegs: eventSegs.bg,\n            eventDrag: this.sliceEventDrag.apply(this, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([\n                props.eventDrag,\n                eventUiBases,\n                dateProfile,\n                nextDayThreshold\n            ], extraArgs)),\n            eventResize: this.sliceEventResize.apply(this, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([\n                props.eventResize,\n                eventUiBases,\n                dateProfile,\n                nextDayThreshold\n            ], extraArgs)),\n            eventSelection: props.eventSelection\n        }; // TODO: give interactionSegs?\n    };\n    Slicer.prototype.sliceNowDate = function(date, context) {\n        var extraArgs = [];\n        for(var _i = 2; _i < arguments.length; _i++){\n            extraArgs[_i - 2] = arguments[_i];\n        }\n        return this._sliceDateSpan.apply(this, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([\n            {\n                range: {\n                    start: date,\n                    end: addMs(date, 1)\n                },\n                allDay: false\n            },\n            {},\n            context\n        ], extraArgs));\n    };\n    Slicer.prototype._sliceBusinessHours = function(businessHours, dateProfile, nextDayThreshold, context) {\n        var extraArgs = [];\n        for(var _i = 4; _i < arguments.length; _i++){\n            extraArgs[_i - 4] = arguments[_i];\n        }\n        if (!businessHours) {\n            return [];\n        }\n        return this._sliceEventStore.apply(this, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([\n            expandRecurring(businessHours, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), context),\n            {},\n            dateProfile,\n            nextDayThreshold\n        ], extraArgs)).bg;\n    };\n    Slicer.prototype._sliceEventStore = function(eventStore, eventUiBases, dateProfile, nextDayThreshold) {\n        var extraArgs = [];\n        for(var _i = 4; _i < arguments.length; _i++){\n            extraArgs[_i - 4] = arguments[_i];\n        }\n        if (eventStore) {\n            var rangeRes = sliceEventStore(eventStore, eventUiBases, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), nextDayThreshold);\n            return {\n                bg: this.sliceEventRanges(rangeRes.bg, extraArgs),\n                fg: this.sliceEventRanges(rangeRes.fg, extraArgs)\n            };\n        }\n        return {\n            bg: [],\n            fg: []\n        };\n    };\n    Slicer.prototype._sliceInteraction = function(interaction, eventUiBases, dateProfile, nextDayThreshold) {\n        var extraArgs = [];\n        for(var _i = 4; _i < arguments.length; _i++){\n            extraArgs[_i - 4] = arguments[_i];\n        }\n        if (!interaction) {\n            return null;\n        }\n        var rangeRes = sliceEventStore(interaction.mutatedEvents, eventUiBases, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), nextDayThreshold);\n        return {\n            segs: this.sliceEventRanges(rangeRes.fg, extraArgs),\n            affectedInstances: interaction.affectedEvents.instances,\n            isEvent: interaction.isEvent\n        };\n    };\n    Slicer.prototype._sliceDateSpan = function(dateSpan, eventUiBases, context) {\n        var extraArgs = [];\n        for(var _i = 3; _i < arguments.length; _i++){\n            extraArgs[_i - 3] = arguments[_i];\n        }\n        if (!dateSpan) {\n            return [];\n        }\n        var eventRange = fabricateEventRange(dateSpan, eventUiBases, context);\n        var segs = this.sliceRange.apply(this, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([\n            dateSpan.range\n        ], extraArgs));\n        for(var _a = 0, segs_1 = segs; _a < segs_1.length; _a++){\n            var seg = segs_1[_a];\n            seg.eventRange = eventRange;\n        }\n        return segs;\n    };\n    /*\n    \"complete\" seg means it has component and eventRange\n    */ Slicer.prototype.sliceEventRanges = function(eventRanges, extraArgs) {\n        var segs = [];\n        for(var _i = 0, eventRanges_1 = eventRanges; _i < eventRanges_1.length; _i++){\n            var eventRange = eventRanges_1[_i];\n            segs.push.apply(segs, this.sliceEventRange(eventRange, extraArgs));\n        }\n        return segs;\n    };\n    /*\n    \"complete\" seg means it has component and eventRange\n    */ Slicer.prototype.sliceEventRange = function(eventRange, extraArgs) {\n        var dateRange = eventRange.range;\n        // hack to make multi-day events that are being force-displayed as list-items to take up only one day\n        if (this.forceDayIfListItem && eventRange.ui.display === \"list-item\") {\n            dateRange = {\n                start: dateRange.start,\n                end: addDays(dateRange.start, 1)\n            };\n        }\n        var segs = this.sliceRange.apply(this, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([\n            dateRange\n        ], extraArgs));\n        for(var _i = 0, segs_2 = segs; _i < segs_2.length; _i++){\n            var seg = segs_2[_i];\n            seg.eventRange = eventRange;\n            seg.isStart = eventRange.isStart && seg.isStart;\n            seg.isEnd = eventRange.isEnd && seg.isEnd;\n        }\n        return segs;\n    };\n    return Slicer;\n}();\n/*\nfor incorporating slotMinTime/slotMaxTime if appropriate\nTODO: should be part of DateProfile!\nTimelineDateProfile already does this btw\n*/ function computeActiveRange(dateProfile, isComponentAllDay) {\n    var range = dateProfile.activeRange;\n    if (isComponentAllDay) {\n        return range;\n    }\n    return {\n        start: addMs(range.start, dateProfile.slotMinTime.milliseconds),\n        end: addMs(range.end, dateProfile.slotMaxTime.milliseconds - 86400000)\n    };\n}\n// high-level segmenting-aware tester functions\n// ------------------------------------------------------------------------------------------------------------------------\nfunction isInteractionValid(interaction, dateProfile, context) {\n    var instances = interaction.mutatedEvents.instances;\n    for(var instanceId in instances){\n        if (!rangeContainsRange(dateProfile.validRange, instances[instanceId].range)) {\n            return false;\n        }\n    }\n    return isNewPropsValid({\n        eventDrag: interaction\n    }, context); // HACK: the eventDrag props is used for ALL interactions\n}\nfunction isDateSelectionValid(dateSelection, dateProfile, context) {\n    if (!rangeContainsRange(dateProfile.validRange, dateSelection.range)) {\n        return false;\n    }\n    return isNewPropsValid({\n        dateSelection: dateSelection\n    }, context);\n}\nfunction isNewPropsValid(newProps, context) {\n    var calendarState = context.getCurrentData();\n    var props = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n        businessHours: calendarState.businessHours,\n        dateSelection: \"\",\n        eventStore: calendarState.eventStore,\n        eventUiBases: calendarState.eventUiBases,\n        eventSelection: \"\",\n        eventDrag: null,\n        eventResize: null\n    }, newProps);\n    return (context.pluginHooks.isPropsValid || isPropsValid)(props, context);\n}\nfunction isPropsValid(state, context, dateSpanMeta, filterConfig) {\n    if (dateSpanMeta === void 0) {\n        dateSpanMeta = {};\n    }\n    if (state.eventDrag && !isInteractionPropsValid(state, context, dateSpanMeta, filterConfig)) {\n        return false;\n    }\n    if (state.dateSelection && !isDateSelectionPropsValid(state, context, dateSpanMeta, filterConfig)) {\n        return false;\n    }\n    return true;\n}\n// Moving Event Validation\n// ------------------------------------------------------------------------------------------------------------------------\nfunction isInteractionPropsValid(state, context, dateSpanMeta, filterConfig) {\n    var currentState = context.getCurrentData();\n    var interaction = state.eventDrag; // HACK: the eventDrag props is used for ALL interactions\n    var subjectEventStore = interaction.mutatedEvents;\n    var subjectDefs = subjectEventStore.defs;\n    var subjectInstances = subjectEventStore.instances;\n    var subjectConfigs = compileEventUis(subjectDefs, interaction.isEvent ? state.eventUiBases : {\n        \"\": currentState.selectionConfig\n    });\n    if (filterConfig) {\n        subjectConfigs = mapHash(subjectConfigs, filterConfig);\n    }\n    // exclude the subject events. TODO: exclude defs too?\n    var otherEventStore = excludeInstances(state.eventStore, interaction.affectedEvents.instances);\n    var otherDefs = otherEventStore.defs;\n    var otherInstances = otherEventStore.instances;\n    var otherConfigs = compileEventUis(otherDefs, state.eventUiBases);\n    for(var subjectInstanceId in subjectInstances){\n        var subjectInstance = subjectInstances[subjectInstanceId];\n        var subjectRange = subjectInstance.range;\n        var subjectConfig = subjectConfigs[subjectInstance.defId];\n        var subjectDef = subjectDefs[subjectInstance.defId];\n        // constraint\n        if (!allConstraintsPass(subjectConfig.constraints, subjectRange, otherEventStore, state.businessHours, context)) {\n            return false;\n        }\n        // overlap\n        var eventOverlap = context.options.eventOverlap;\n        var eventOverlapFunc = typeof eventOverlap === \"function\" ? eventOverlap : null;\n        for(var otherInstanceId in otherInstances){\n            var otherInstance = otherInstances[otherInstanceId];\n            // intersect! evaluate\n            if (rangesIntersect(subjectRange, otherInstance.range)) {\n                var otherOverlap = otherConfigs[otherInstance.defId].overlap;\n                // consider the other event's overlap. only do this if the subject event is a \"real\" event\n                if (otherOverlap === false && interaction.isEvent) {\n                    return false;\n                }\n                if (subjectConfig.overlap === false) {\n                    return false;\n                }\n                if (eventOverlapFunc && !eventOverlapFunc(new EventApi1(context, otherDefs[otherInstance.defId], otherInstance), new EventApi1(context, subjectDef, subjectInstance))) {\n                    return false;\n                }\n            }\n        }\n        // allow (a function)\n        var calendarEventStore = currentState.eventStore; // need global-to-calendar, not local to component (splittable)state\n        for(var _i = 0, _a = subjectConfig.allows; _i < _a.length; _i++){\n            var subjectAllow = _a[_i];\n            var subjectDateSpan = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, dateSpanMeta), {\n                range: subjectInstance.range,\n                allDay: subjectDef.allDay\n            });\n            var origDef = calendarEventStore.defs[subjectDef.defId];\n            var origInstance = calendarEventStore.instances[subjectInstanceId];\n            var eventApi = void 0;\n            if (origDef) {\n                eventApi = new EventApi1(context, origDef, origInstance);\n            } else {\n                eventApi = new EventApi1(context, subjectDef); // no instance, because had no dates\n            }\n            if (!subjectAllow(buildDateSpanApiWithContext(subjectDateSpan, context), eventApi)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n// Date Selection Validation\n// ------------------------------------------------------------------------------------------------------------------------\nfunction isDateSelectionPropsValid(state, context, dateSpanMeta, filterConfig) {\n    var relevantEventStore = state.eventStore;\n    var relevantDefs = relevantEventStore.defs;\n    var relevantInstances = relevantEventStore.instances;\n    var selection = state.dateSelection;\n    var selectionRange = selection.range;\n    var selectionConfig = context.getCurrentData().selectionConfig;\n    if (filterConfig) {\n        selectionConfig = filterConfig(selectionConfig);\n    }\n    // constraint\n    if (!allConstraintsPass(selectionConfig.constraints, selectionRange, relevantEventStore, state.businessHours, context)) {\n        return false;\n    }\n    // overlap\n    var selectOverlap = context.options.selectOverlap;\n    var selectOverlapFunc = typeof selectOverlap === \"function\" ? selectOverlap : null;\n    for(var relevantInstanceId in relevantInstances){\n        var relevantInstance = relevantInstances[relevantInstanceId];\n        // intersect! evaluate\n        if (rangesIntersect(selectionRange, relevantInstance.range)) {\n            if (selectionConfig.overlap === false) {\n                return false;\n            }\n            if (selectOverlapFunc && !selectOverlapFunc(new EventApi1(context, relevantDefs[relevantInstance.defId], relevantInstance), null)) {\n                return false;\n            }\n        }\n    }\n    // allow (a function)\n    for(var _i = 0, _a = selectionConfig.allows; _i < _a.length; _i++){\n        var selectionAllow = _a[_i];\n        var fullDateSpan = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, dateSpanMeta), selection);\n        if (!selectionAllow(buildDateSpanApiWithContext(fullDateSpan, context), null)) {\n            return false;\n        }\n    }\n    return true;\n}\n// Constraint Utils\n// ------------------------------------------------------------------------------------------------------------------------\nfunction allConstraintsPass(constraints, subjectRange, otherEventStore, businessHoursUnexpanded, context) {\n    for(var _i = 0, constraints_1 = constraints; _i < constraints_1.length; _i++){\n        var constraint = constraints_1[_i];\n        if (!anyRangesContainRange(constraintToRanges(constraint, subjectRange, otherEventStore, businessHoursUnexpanded, context), subjectRange)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction constraintToRanges(constraint, subjectRange, otherEventStore, businessHoursUnexpanded, context) {\n    if (constraint === \"businessHours\") {\n        return eventStoreToRanges(expandRecurring(businessHoursUnexpanded, subjectRange, context));\n    }\n    if (typeof constraint === \"string\") {\n        return eventStoreToRanges(filterEventStoreDefs(otherEventStore, function(eventDef) {\n            return eventDef.groupId === constraint;\n        }));\n    }\n    if (typeof constraint === \"object\" && constraint) {\n        return eventStoreToRanges(expandRecurring(constraint, subjectRange, context));\n    }\n    return []; // if it's false\n}\n// TODO: move to event-store file?\nfunction eventStoreToRanges(eventStore) {\n    var instances = eventStore.instances;\n    var ranges = [];\n    for(var instanceId in instances){\n        ranges.push(instances[instanceId].range);\n    }\n    return ranges;\n}\n// TODO: move to geom file?\nfunction anyRangesContainRange(outerRanges, innerRange) {\n    for(var _i = 0, outerRanges_1 = outerRanges; _i < outerRanges_1.length; _i++){\n        var outerRange = outerRanges_1[_i];\n        if (rangeContainsRange(outerRange, innerRange)) {\n            return true;\n        }\n    }\n    return false;\n}\nvar VISIBLE_HIDDEN_RE = /^(visible|hidden)$/;\nvar Scroller1 = /** @class */ function(_super) {\n    var Scroller = function Scroller() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.handleEl = function(el) {\n            _this.el = el;\n            setRef(_this.props.elRef, el);\n        };\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(Scroller, _super);\n    Scroller.prototype.render = function() {\n        var props = this.props;\n        var liquid = props.liquid, liquidIsAbsolute = props.liquidIsAbsolute;\n        var isAbsolute = liquid && liquidIsAbsolute;\n        var className = [\n            \"fc-scroller\"\n        ];\n        if (liquid) {\n            if (liquidIsAbsolute) {\n                className.push(\"fc-scroller-liquid-absolute\");\n            } else {\n                className.push(\"fc-scroller-liquid\");\n            }\n        }\n        return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n            ref: this.handleEl,\n            className: className.join(\" \"),\n            style: {\n                overflowX: props.overflowX,\n                overflowY: props.overflowY,\n                left: isAbsolute && -(props.overcomeLeft || 0) || \"\",\n                right: isAbsolute && -(props.overcomeRight || 0) || \"\",\n                bottom: isAbsolute && -(props.overcomeBottom || 0) || \"\",\n                marginLeft: !isAbsolute && -(props.overcomeLeft || 0) || \"\",\n                marginRight: !isAbsolute && -(props.overcomeRight || 0) || \"\",\n                marginBottom: !isAbsolute && -(props.overcomeBottom || 0) || \"\",\n                maxHeight: props.maxHeight || \"\"\n            }\n        }, props.children);\n    };\n    Scroller.prototype.needsXScrolling = function() {\n        if (VISIBLE_HIDDEN_RE.test(this.props.overflowX)) {\n            return false;\n        }\n        // testing scrollWidth>clientWidth is unreliable cross-browser when pixel heights aren't integers.\n        // much more reliable to see if children are taller than the scroller, even tho doesn't account for\n        // inner-child margins and absolute positioning\n        var el = this.el;\n        var realClientWidth = this.el.getBoundingClientRect().width - this.getYScrollbarWidth();\n        var children = el.children;\n        for(var i = 0; i < children.length; i += 1){\n            var childEl = children[i];\n            if (childEl.getBoundingClientRect().width > realClientWidth) {\n                return true;\n            }\n        }\n        return false;\n    };\n    Scroller.prototype.needsYScrolling = function() {\n        if (VISIBLE_HIDDEN_RE.test(this.props.overflowY)) {\n            return false;\n        }\n        // testing scrollHeight>clientHeight is unreliable cross-browser when pixel heights aren't integers.\n        // much more reliable to see if children are taller than the scroller, even tho doesn't account for\n        // inner-child margins and absolute positioning\n        var el = this.el;\n        var realClientHeight = this.el.getBoundingClientRect().height - this.getXScrollbarWidth();\n        var children = el.children;\n        for(var i = 0; i < children.length; i += 1){\n            var childEl = children[i];\n            if (childEl.getBoundingClientRect().height > realClientHeight) {\n                return true;\n            }\n        }\n        return false;\n    };\n    Scroller.prototype.getXScrollbarWidth = function() {\n        if (VISIBLE_HIDDEN_RE.test(this.props.overflowX)) {\n            return 0;\n        }\n        return this.el.offsetHeight - this.el.clientHeight; // only works because we guarantee no borders. TODO: add to CSS with important?\n    };\n    Scroller.prototype.getYScrollbarWidth = function() {\n        if (VISIBLE_HIDDEN_RE.test(this.props.overflowY)) {\n            return 0;\n        }\n        return this.el.offsetWidth - this.el.clientWidth; // only works because we guarantee no borders. TODO: add to CSS with important?\n    };\n    return Scroller;\n}(BaseComponent1);\n/*\nTODO: somehow infer OtherArgs from masterCallback?\nTODO: infer RefType from masterCallback if provided\n*/ var RefMap1 = /** @class */ function() {\n    var RefMap = function RefMap(masterCallback) {\n        var _this = this;\n        this.masterCallback = masterCallback;\n        this.currentMap = {};\n        this.depths = {};\n        this.callbackMap = {};\n        this.handleValue = function(val, key) {\n            var _a = _this, depths = _a.depths, currentMap = _a.currentMap;\n            var removed = false;\n            var added = false;\n            if (val !== null) {\n                // for bug... ACTUALLY: can probably do away with this now that callers don't share numeric indices anymore\n                removed = key in currentMap;\n                currentMap[key] = val;\n                depths[key] = (depths[key] || 0) + 1;\n                added = true;\n            } else {\n                depths[key] -= 1;\n                if (!depths[key]) {\n                    delete currentMap[key];\n                    delete _this.callbackMap[key];\n                    removed = true;\n                }\n            }\n            if (_this.masterCallback) {\n                if (removed) {\n                    _this.masterCallback(null, String(key));\n                }\n                if (added) {\n                    _this.masterCallback(val, String(key));\n                }\n            }\n        };\n    };\n    RefMap.prototype.createRef = function(key) {\n        var _this = this;\n        var refCallback = this.callbackMap[key];\n        if (!refCallback) {\n            refCallback = this.callbackMap[key] = function refCallback(val) {\n                _this.handleValue(val, String(key));\n            };\n        }\n        return refCallback;\n    };\n    // TODO: check callers that don't care about order. should use getAll instead\n    // NOTE: this method has become less valuable now that we are encouraged to map order by some other index\n    // TODO: provide ONE array-export function, buildArray, which fails on non-numeric indexes. caller can manipulate and \"collect\"\n    RefMap.prototype.collect = function(startIndex, endIndex, step) {\n        return collectFromHash(this.currentMap, startIndex, endIndex, step);\n    };\n    RefMap.prototype.getAll = function() {\n        return hashValuesToArray(this.currentMap);\n    };\n    return RefMap;\n}();\nfunction computeShrinkWidth(chunkEls) {\n    var shrinkCells = findElements(chunkEls, \".fc-scrollgrid-shrink\");\n    var largestWidth = 0;\n    for(var _i = 0, shrinkCells_1 = shrinkCells; _i < shrinkCells_1.length; _i++){\n        var shrinkCell = shrinkCells_1[_i];\n        largestWidth = Math.max(largestWidth, computeSmallestCellWidth(shrinkCell));\n    }\n    return Math.ceil(largestWidth); // <table> elements work best with integers. round up to ensure contents fits\n}\nfunction getSectionHasLiquidHeight(props, sectionConfig) {\n    return props.liquid && sectionConfig.liquid; // does the section do liquid-height? (need to have whole scrollgrid liquid-height as well)\n}\nfunction getAllowYScrolling(props, sectionConfig) {\n    return sectionConfig.maxHeight != null || getSectionHasLiquidHeight(props, sectionConfig); // if the section is liquid height, it might condense enough to require scrollbars\n}\n// TODO: ONLY use `arg`. force out internal function to use same API\nfunction renderChunkContent(sectionConfig, chunkConfig, arg, isHeader) {\n    var expandRows = arg.expandRows;\n    var content = typeof chunkConfig.content === \"function\" ? chunkConfig.content(arg) : (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"table\", {\n        role: \"presentation\",\n        className: [\n            chunkConfig.tableClassName,\n            sectionConfig.syncRowHeights ? \"fc-scrollgrid-sync-table\" : \"\", \n        ].join(\" \"),\n        style: {\n            minWidth: arg.tableMinWidth,\n            width: arg.clientWidth,\n            height: expandRows ? arg.clientHeight : \"\"\n        }\n    }, arg.tableColGroupNode, (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(isHeader ? \"thead\" : \"tbody\", {\n        role: \"presentation\"\n    }, typeof chunkConfig.rowContent === \"function\" ? chunkConfig.rowContent(arg) : chunkConfig.rowContent));\n    return content;\n}\nfunction isColPropsEqual(cols0, cols1) {\n    return isArraysEqual(cols0, cols1, isPropsEqual);\n}\nfunction renderMicroColGroup(cols, shrinkWidth) {\n    var colNodes = [];\n    /*\n    for ColProps with spans, it would have been great to make a single <col span=\"\">\n    HOWEVER, Chrome was getting messing up distributing the width to <td>/<th> elements with colspans.\n    SOLUTION: making individual <col> elements makes Chrome behave.\n    */ for(var _i = 0, cols_1 = cols; _i < cols_1.length; _i++){\n        var colProps = cols_1[_i];\n        var span = colProps.span || 1;\n        for(var i = 0; i < span; i += 1){\n            colNodes.push((0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"col\", {\n                style: {\n                    width: colProps.width === \"shrink\" ? sanitizeShrinkWidth(shrinkWidth) : colProps.width || \"\",\n                    minWidth: colProps.minWidth || \"\"\n                }\n            }));\n        }\n    }\n    return _vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([\n        \"colgroup\",\n        {}\n    ], colNodes));\n}\nfunction sanitizeShrinkWidth(shrinkWidth) {\n    /* why 4? if we do 0, it will kill any border, which are needed for computeSmallestCellWidth\n    4 accounts for 2 2-pixel borders. TODO: better solution? */ return shrinkWidth == null ? 4 : shrinkWidth;\n}\nfunction hasShrinkWidth(cols) {\n    for(var _i = 0, cols_2 = cols; _i < cols_2.length; _i++){\n        var col = cols_2[_i];\n        if (col.width === \"shrink\") {\n            return true;\n        }\n    }\n    return false;\n}\nfunction getScrollGridClassNames(liquid, context) {\n    var classNames = [\n        \"fc-scrollgrid\",\n        context.theme.getClass(\"table\"), \n    ];\n    if (liquid) {\n        classNames.push(\"fc-scrollgrid-liquid\");\n    }\n    return classNames;\n}\nfunction getSectionClassNames(sectionConfig, wholeTableVGrow) {\n    var classNames = [\n        \"fc-scrollgrid-section\",\n        \"fc-scrollgrid-section-\" + sectionConfig.type,\n        sectionConfig.className\n    ];\n    if (wholeTableVGrow && sectionConfig.liquid && sectionConfig.maxHeight == null) {\n        classNames.push(\"fc-scrollgrid-section-liquid\");\n    }\n    if (sectionConfig.isSticky) {\n        classNames.push(\"fc-scrollgrid-section-sticky\");\n    }\n    return classNames;\n}\nfunction renderScrollShim(arg) {\n    return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n        className: \"fc-scrollgrid-sticky-shim\",\n        style: {\n            width: arg.clientWidth,\n            minWidth: arg.tableMinWidth\n        }\n    });\n}\nfunction getStickyHeaderDates(options) {\n    var stickyHeaderDates = options.stickyHeaderDates;\n    if (stickyHeaderDates == null || stickyHeaderDates === \"auto\") {\n        stickyHeaderDates = options.height === \"auto\" || options.viewHeight === \"auto\";\n    }\n    return stickyHeaderDates;\n}\nfunction getStickyFooterScrollbar(options) {\n    var stickyFooterScrollbar = options.stickyFooterScrollbar;\n    if (stickyFooterScrollbar == null || stickyFooterScrollbar === \"auto\") {\n        stickyFooterScrollbar = options.height === \"auto\" || options.viewHeight === \"auto\";\n    }\n    return stickyFooterScrollbar;\n}\nvar SimpleScrollGrid1 = /** @class */ function(_super) {\n    var SimpleScrollGrid = function SimpleScrollGrid() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.processCols = memoize(function(a) {\n            return a;\n        }, isColPropsEqual); // so we get same `cols` props every time\n        // yucky to memoize VNodes, but much more efficient for consumers\n        _this.renderMicroColGroup = memoize(renderMicroColGroup);\n        _this.scrollerRefs = new RefMap1();\n        _this.scrollerElRefs = new RefMap1(_this._handleScrollerEl.bind(_this));\n        _this.state = {\n            shrinkWidth: null,\n            forceYScrollbars: false,\n            scrollerClientWidths: {},\n            scrollerClientHeights: {}\n        };\n        // TODO: can do a really simple print-view. dont need to join rows\n        _this.handleSizing = function() {\n            _this.setState((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n                shrinkWidth: _this.computeShrinkWidth()\n            }, _this.computeScrollerDims()));\n        };\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(SimpleScrollGrid, _super);\n    SimpleScrollGrid.prototype.render = function() {\n        var _a = this, props = _a.props, state = _a.state, context = _a.context;\n        var sectionConfigs = props.sections || [];\n        var cols = this.processCols(props.cols);\n        var microColGroupNode = this.renderMicroColGroup(cols, state.shrinkWidth);\n        var classNames = getScrollGridClassNames(props.liquid, context);\n        if (props.collapsibleWidth) {\n            classNames.push(\"fc-scrollgrid-collapsible\");\n        }\n        // TODO: make DRY\n        var configCnt = sectionConfigs.length;\n        var configI = 0;\n        var currentConfig;\n        var headSectionNodes = [];\n        var bodySectionNodes = [];\n        var footSectionNodes = [];\n        while(configI < configCnt && (currentConfig = sectionConfigs[configI]).type === \"header\"){\n            headSectionNodes.push(this.renderSection(currentConfig, microColGroupNode, true));\n            configI += 1;\n        }\n        while(configI < configCnt && (currentConfig = sectionConfigs[configI]).type === \"body\"){\n            bodySectionNodes.push(this.renderSection(currentConfig, microColGroupNode, false));\n            configI += 1;\n        }\n        while(configI < configCnt && (currentConfig = sectionConfigs[configI]).type === \"footer\"){\n            footSectionNodes.push(this.renderSection(currentConfig, microColGroupNode, true));\n            configI += 1;\n        }\n        // firefox bug: when setting height on table and there is a thead or tfoot,\n        // the necessary height:100% on the liquid-height body section forces the *whole* table to be taller. (bug #5524)\n        // use getCanVGrowWithinCell as a way to detect table-stupid firefox.\n        // if so, use a simpler dom structure, jam everything into a lone tbody.\n        var isBuggy = !getCanVGrowWithinCell();\n        var roleAttrs = {\n            role: \"rowgroup\"\n        };\n        return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"table\", {\n            role: \"grid\",\n            className: classNames.join(\" \"),\n            style: {\n                height: props.height\n            }\n        }, Boolean(!isBuggy && headSectionNodes.length) && _vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([\n            \"thead\",\n            roleAttrs\n        ], headSectionNodes)), Boolean(!isBuggy && bodySectionNodes.length) && _vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([\n            \"tbody\",\n            roleAttrs\n        ], bodySectionNodes)), Boolean(!isBuggy && footSectionNodes.length) && _vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([\n            \"tfoot\",\n            roleAttrs\n        ], footSectionNodes)), isBuggy && _vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([\n            \"tbody\",\n            roleAttrs\n        ], headSectionNodes), bodySectionNodes), footSectionNodes)));\n    };\n    SimpleScrollGrid.prototype.renderSection = function(sectionConfig, microColGroupNode, isHeader) {\n        if (\"outerContent\" in sectionConfig) {\n            return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(_vdom_js__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n                key: sectionConfig.key\n            }, sectionConfig.outerContent);\n        }\n        return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"tr\", {\n            key: sectionConfig.key,\n            role: \"presentation\",\n            className: getSectionClassNames(sectionConfig, this.props.liquid).join(\" \")\n        }, this.renderChunkTd(sectionConfig, microColGroupNode, sectionConfig.chunk, isHeader));\n    };\n    SimpleScrollGrid.prototype.renderChunkTd = function(sectionConfig, microColGroupNode, chunkConfig, isHeader) {\n        if (\"outerContent\" in chunkConfig) {\n            return chunkConfig.outerContent;\n        }\n        var props = this.props;\n        var _a = this.state, forceYScrollbars = _a.forceYScrollbars, scrollerClientWidths = _a.scrollerClientWidths, scrollerClientHeights = _a.scrollerClientHeights;\n        var needsYScrolling = getAllowYScrolling(props, sectionConfig); // TODO: do lazily. do in section config?\n        var isLiquid = getSectionHasLiquidHeight(props, sectionConfig);\n        // for `!props.liquid` - is WHOLE scrollgrid natural height?\n        // TODO: do same thing in advanced scrollgrid? prolly not b/c always has horizontal scrollbars\n        var overflowY = !props.liquid ? \"visible\" : forceYScrollbars ? \"scroll\" : !needsYScrolling ? \"hidden\" : \"auto\";\n        var sectionKey = sectionConfig.key;\n        var content = renderChunkContent(sectionConfig, chunkConfig, {\n            tableColGroupNode: microColGroupNode,\n            tableMinWidth: \"\",\n            clientWidth: !props.collapsibleWidth && scrollerClientWidths[sectionKey] !== undefined ? scrollerClientWidths[sectionKey] : null,\n            clientHeight: scrollerClientHeights[sectionKey] !== undefined ? scrollerClientHeights[sectionKey] : null,\n            expandRows: sectionConfig.expandRows,\n            syncRowHeights: false,\n            rowSyncHeights: [],\n            reportRowHeightChange: function reportRowHeightChange() {}\n        }, isHeader);\n        return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(isHeader ? \"th\" : \"td\", {\n            ref: chunkConfig.elRef,\n            role: \"presentation\"\n        }, (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n            className: \"fc-scroller-harness\" + (isLiquid ? \" fc-scroller-harness-liquid\" : \"\")\n        }, (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(Scroller1, {\n            ref: this.scrollerRefs.createRef(sectionKey),\n            elRef: this.scrollerElRefs.createRef(sectionKey),\n            overflowY: overflowY,\n            overflowX: !props.liquid ? \"visible\" : \"hidden\" /* natural height? */ ,\n            maxHeight: sectionConfig.maxHeight,\n            liquid: isLiquid,\n            liquidIsAbsolute: true\n        }, content)));\n    };\n    SimpleScrollGrid.prototype._handleScrollerEl = function(scrollerEl, key) {\n        var section = getSectionByKey(this.props.sections, key);\n        if (section) {\n            setRef(section.chunk.scrollerElRef, scrollerEl);\n        }\n    };\n    SimpleScrollGrid.prototype.componentDidMount = function() {\n        this.handleSizing();\n        this.context.addResizeHandler(this.handleSizing);\n    };\n    SimpleScrollGrid.prototype.componentDidUpdate = function() {\n        // TODO: need better solution when state contains non-sizing things\n        this.handleSizing();\n    };\n    SimpleScrollGrid.prototype.componentWillUnmount = function() {\n        this.context.removeResizeHandler(this.handleSizing);\n    };\n    SimpleScrollGrid.prototype.computeShrinkWidth = function() {\n        return hasShrinkWidth(this.props.cols) ? computeShrinkWidth(this.scrollerElRefs.getAll()) : 0;\n    };\n    SimpleScrollGrid.prototype.computeScrollerDims = function() {\n        var scrollbarWidth = getScrollbarWidths();\n        var _a = this, scrollerRefs = _a.scrollerRefs, scrollerElRefs = _a.scrollerElRefs;\n        var forceYScrollbars = false;\n        var scrollerClientWidths = {};\n        var scrollerClientHeights = {};\n        for(var sectionKey in scrollerRefs.currentMap){\n            var scroller = scrollerRefs.currentMap[sectionKey];\n            if (scroller && scroller.needsYScrolling()) {\n                forceYScrollbars = true;\n                break;\n            }\n        }\n        for(var _i = 0, _b = this.props.sections; _i < _b.length; _i++){\n            var section = _b[_i];\n            var sectionKey = section.key;\n            var scrollerEl = scrollerElRefs.currentMap[sectionKey];\n            if (scrollerEl) {\n                var harnessEl = scrollerEl.parentNode; // TODO: weird way to get this. need harness b/c doesn't include table borders\n                scrollerClientWidths[sectionKey] = Math.floor(harnessEl.getBoundingClientRect().width - (forceYScrollbars ? scrollbarWidth.y // use global because scroller might not have scrollbars yet but will need them in future\n                 : 0));\n                scrollerClientHeights[sectionKey] = Math.floor(harnessEl.getBoundingClientRect().height);\n            }\n        }\n        return {\n            forceYScrollbars: forceYScrollbars,\n            scrollerClientWidths: scrollerClientWidths,\n            scrollerClientHeights: scrollerClientHeights\n        };\n    };\n    return SimpleScrollGrid;\n}(BaseComponent1);\nSimpleScrollGrid1.addStateEquality({\n    scrollerClientWidths: isPropsEqual,\n    scrollerClientHeights: isPropsEqual\n});\nfunction getSectionByKey(sections, key) {\n    for(var _i = 0, sections_1 = sections; _i < sections_1.length; _i++){\n        var section = sections_1[_i];\n        if (section.key === key) {\n            return section;\n        }\n    }\n    return null;\n}\nvar EventRoot1 = /** @class */ function(_super) {\n    var EventRoot = function EventRoot() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.elRef = (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(EventRoot, _super);\n    EventRoot.prototype.render = function() {\n        var _a = this, props = _a.props, context = _a.context;\n        var options = context.options;\n        var seg = props.seg;\n        var eventRange = seg.eventRange;\n        var ui = eventRange.ui;\n        var hookProps = {\n            event: new EventApi1(context, eventRange.def, eventRange.instance),\n            view: context.viewApi,\n            timeText: props.timeText,\n            textColor: ui.textColor,\n            backgroundColor: ui.backgroundColor,\n            borderColor: ui.borderColor,\n            isDraggable: !props.disableDragging && computeSegDraggable(seg, context),\n            isStartResizable: !props.disableResizing && computeSegStartResizable(seg, context),\n            isEndResizable: !props.disableResizing && computeSegEndResizable(seg),\n            isMirror: Boolean(props.isDragging || props.isResizing || props.isDateSelecting),\n            isStart: Boolean(seg.isStart),\n            isEnd: Boolean(seg.isEnd),\n            isPast: Boolean(props.isPast),\n            isFuture: Boolean(props.isFuture),\n            isToday: Boolean(props.isToday),\n            isSelected: Boolean(props.isSelected),\n            isDragging: Boolean(props.isDragging),\n            isResizing: Boolean(props.isResizing)\n        };\n        var standardClassNames = getEventClassNames(hookProps).concat(ui.classNames);\n        return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(RenderHook1, {\n            hookProps: hookProps,\n            classNames: options.eventClassNames,\n            content: options.eventContent,\n            defaultContent: props.defaultContent,\n            didMount: options.eventDidMount,\n            willUnmount: options.eventWillUnmount,\n            elRef: this.elRef\n        }, function(rootElRef, customClassNames, innerElRef, innerContent) {\n            return props.children(rootElRef, standardClassNames.concat(customClassNames), innerElRef, innerContent, hookProps);\n        });\n    };\n    EventRoot.prototype.componentDidMount = function() {\n        setElSeg(this.elRef.current, this.props.seg);\n    };\n    /*\n    need to re-assign seg to the element if seg changes, even if the element is the same\n    */ EventRoot.prototype.componentDidUpdate = function(prevProps) {\n        var seg = this.props.seg;\n        if (seg !== prevProps.seg) {\n            setElSeg(this.elRef.current, seg);\n        }\n    };\n    return EventRoot;\n}(BaseComponent1);\n// should not be a purecomponent\nvar StandardEvent1 = /** @class */ function(_super) {\n    var StandardEvent = function StandardEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(StandardEvent, _super);\n    StandardEvent.prototype.render = function() {\n        var _a = this, props = _a.props, context = _a.context;\n        var seg = props.seg;\n        var timeFormat = context.options.eventTimeFormat || props.defaultTimeFormat;\n        var timeText = buildSegTimeText(seg, timeFormat, context, props.defaultDisplayEventTime, props.defaultDisplayEventEnd);\n        return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(EventRoot1, {\n            seg: seg,\n            timeText: timeText,\n            disableDragging: props.disableDragging,\n            disableResizing: props.disableResizing,\n            defaultContent: props.defaultContent || renderInnerContent$1,\n            isDragging: props.isDragging,\n            isResizing: props.isResizing,\n            isDateSelecting: props.isDateSelecting,\n            isSelected: props.isSelected,\n            isPast: props.isPast,\n            isFuture: props.isFuture,\n            isToday: props.isToday\n        }, function(rootElRef, classNames, innerElRef, innerContent, hookProps) {\n            return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"a\", (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n                className: props.extraClassNames.concat(classNames).join(\" \"),\n                style: {\n                    borderColor: hookProps.borderColor,\n                    backgroundColor: hookProps.backgroundColor\n                },\n                ref: rootElRef\n            }, getSegAnchorAttrs(seg, context)), (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                className: \"fc-event-main\",\n                ref: innerElRef,\n                style: {\n                    color: hookProps.textColor\n                }\n            }, innerContent), hookProps.isStartResizable && (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                className: \"fc-event-resizer fc-event-resizer-start\"\n            }), hookProps.isEndResizable && (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                className: \"fc-event-resizer fc-event-resizer-end\"\n            }));\n        });\n    };\n    return StandardEvent;\n}(BaseComponent1);\nfunction renderInnerContent$1(innerProps) {\n    return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n        className: \"fc-event-main-frame\"\n    }, innerProps.timeText && (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n        className: \"fc-event-time\"\n    }, innerProps.timeText), (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n        className: \"fc-event-title-container\"\n    }, (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n        className: \"fc-event-title fc-sticky\"\n    }, innerProps.event.title || (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(_vdom_js__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, \"\\xa0\"))));\n}\nvar NowIndicatorRoot = function NowIndicatorRoot(props) {\n    return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(ViewContextType.Consumer, null, function(context) {\n        var options = context.options;\n        var hookProps = {\n            isAxis: props.isAxis,\n            date: context.dateEnv.toDate(props.date),\n            view: context.viewApi\n        };\n        return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(RenderHook1, {\n            hookProps: hookProps,\n            classNames: options.nowIndicatorClassNames,\n            content: options.nowIndicatorContent,\n            didMount: options.nowIndicatorDidMount,\n            willUnmount: options.nowIndicatorWillUnmount\n        }, props.children);\n    });\n};\n_c1 = NowIndicatorRoot;\nvar DAY_NUM_FORMAT = createFormatter({\n    day: \"numeric\"\n});\nvar DayCellContent1 = /** @class */ function(_super) {\n    var DayCellContent = function DayCellContent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(DayCellContent, _super);\n    DayCellContent.prototype.render = function() {\n        var _a = this, props = _a.props, context = _a.context;\n        var options = context.options;\n        var hookProps = refineDayCellHookProps({\n            date: props.date,\n            dateProfile: props.dateProfile,\n            todayRange: props.todayRange,\n            showDayNumber: props.showDayNumber,\n            extraProps: props.extraHookProps,\n            viewApi: context.viewApi,\n            dateEnv: context.dateEnv\n        });\n        return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(ContentHook, {\n            hookProps: hookProps,\n            content: options.dayCellContent,\n            defaultContent: props.defaultContent\n        }, props.children);\n    };\n    return DayCellContent;\n}(BaseComponent1);\nfunction refineDayCellHookProps(raw) {\n    var date = raw.date, dateEnv = raw.dateEnv;\n    var dayMeta = getDateMeta(date, raw.todayRange, null, raw.dateProfile);\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n        date: dateEnv.toDate(date),\n        view: raw.viewApi\n    }, dayMeta), {\n        dayNumberText: raw.showDayNumber ? dateEnv.format(date, DAY_NUM_FORMAT) : \"\"\n    }), raw.extraProps);\n}\nvar DayCellRoot1 = /** @class */ function(_super) {\n    var DayCellRoot = function DayCellRoot() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.refineHookProps = memoizeObjArg(refineDayCellHookProps);\n        _this.normalizeClassNames = buildClassNameNormalizer();\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(DayCellRoot, _super);\n    DayCellRoot.prototype.render = function() {\n        var _a = this, props = _a.props, context = _a.context;\n        var options = context.options;\n        var hookProps = this.refineHookProps({\n            date: props.date,\n            dateProfile: props.dateProfile,\n            todayRange: props.todayRange,\n            showDayNumber: props.showDayNumber,\n            extraProps: props.extraHookProps,\n            viewApi: context.viewApi,\n            dateEnv: context.dateEnv\n        });\n        var classNames = getDayClassNames(hookProps, context.theme).concat(hookProps.isDisabled ? [] // don't use custom classNames if disabled\n         : this.normalizeClassNames(options.dayCellClassNames, hookProps));\n        var dataAttrs = hookProps.isDisabled ? {} : {\n            \"data-date\": formatDayString(props.date)\n        };\n        return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(MountHook1, {\n            hookProps: hookProps,\n            didMount: options.dayCellDidMount,\n            willUnmount: options.dayCellWillUnmount,\n            elRef: props.elRef\n        }, function(rootElRef) {\n            return props.children(rootElRef, classNames, dataAttrs, hookProps.isDisabled);\n        });\n    };\n    return DayCellRoot;\n}(BaseComponent1);\nfunction renderFill(fillType) {\n    return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n        className: \"fc-\" + fillType\n    });\n}\nvar BgEvent = function BgEvent(props) {\n    return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(EventRoot1, {\n        defaultContent: renderInnerContent,\n        seg: props.seg /* uselesss i think */ ,\n        timeText: \"\",\n        disableDragging: true,\n        disableResizing: true,\n        isDragging: false,\n        isResizing: false,\n        isDateSelecting: false,\n        isSelected: false,\n        isPast: props.isPast,\n        isFuture: props.isFuture,\n        isToday: props.isToday\n    }, function(rootElRef, classNames, innerElRef, innerContent, hookProps) {\n        return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n            ref: rootElRef,\n            className: [\n                \"fc-bg-event\"\n            ].concat(classNames).join(\" \"),\n            style: {\n                backgroundColor: hookProps.backgroundColor\n            }\n        }, innerContent);\n    });\n};\n_c2 = BgEvent;\nfunction renderInnerContent(props) {\n    var title = props.event.title;\n    return title && (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n        className: \"fc-event-title\"\n    }, props.event.title);\n}\nvar WeekNumberRoot = function WeekNumberRoot(props) {\n    return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(ViewContextType.Consumer, null, function(context) {\n        var dateEnv = context.dateEnv, options = context.options;\n        var date = props.date;\n        var format = options.weekNumberFormat || props.defaultFormat;\n        var num = dateEnv.computeWeekNumber(date); // TODO: somehow use for formatting as well?\n        var text = dateEnv.format(date, format);\n        var hookProps = {\n            num: num,\n            text: text,\n            date: date\n        };\n        return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(RenderHook1, {\n            hookProps: hookProps,\n            classNames: options.weekNumberClassNames,\n            content: options.weekNumberContent,\n            defaultContent: renderInner,\n            didMount: options.weekNumberDidMount,\n            willUnmount: options.weekNumberWillUnmount\n        }, props.children);\n    });\n};\n_c3 = WeekNumberRoot;\nfunction renderInner(innerProps) {\n    return innerProps.text;\n}\nvar PADDING_FROM_VIEWPORT = 10;\nvar Popover1 = /** @class */ function(_super) {\n    var Popover = function Popover() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            titleId: getUniqueDomId()\n        };\n        _this.handleRootEl = function(el) {\n            _this.rootEl = el;\n            if (_this.props.elRef) {\n                setRef(_this.props.elRef, el);\n            }\n        };\n        // Triggered when the user clicks *anywhere* in the document, for the autoHide feature\n        _this.handleDocumentMouseDown = function(ev) {\n            // only hide the popover if the click happened outside the popover\n            var target = getEventTargetViaRoot(ev);\n            if (!_this.rootEl.contains(target)) {\n                _this.handleCloseClick();\n            }\n        };\n        _this.handleDocumentKeyDown = function(ev) {\n            if (ev.key === \"Escape\") {\n                _this.handleCloseClick();\n            }\n        };\n        _this.handleCloseClick = function() {\n            var onClose = _this.props.onClose;\n            if (onClose) {\n                onClose();\n            }\n        };\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(Popover, _super);\n    Popover.prototype.render = function() {\n        var _a = this.context, theme = _a.theme, options = _a.options;\n        var _b = this, props = _b.props, state = _b.state;\n        var classNames = [\n            \"fc-popover\",\n            theme.getClass(\"popover\"), \n        ].concat(props.extraClassNames || []);\n        return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createPortal)((0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n            id: props.id,\n            className: classNames.join(\" \"),\n            \"aria-labelledby\": state.titleId\n        }, props.extraAttrs, {\n            ref: this.handleRootEl\n        }), (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n            className: \"fc-popover-header \" + theme.getClass(\"popoverHeader\")\n        }, (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"span\", {\n            className: \"fc-popover-title\",\n            id: state.titleId\n        }, props.title), (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"span\", {\n            className: \"fc-popover-close \" + theme.getIconClass(\"close\"),\n            title: options.closeHint,\n            onClick: this.handleCloseClick\n        })), (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n            className: \"fc-popover-body \" + theme.getClass(\"popoverContent\")\n        }, props.children)), props.parentEl);\n    };\n    Popover.prototype.componentDidMount = function() {\n        document.addEventListener(\"mousedown\", this.handleDocumentMouseDown);\n        document.addEventListener(\"keydown\", this.handleDocumentKeyDown);\n        this.updateSize();\n    };\n    Popover.prototype.componentWillUnmount = function() {\n        document.removeEventListener(\"mousedown\", this.handleDocumentMouseDown);\n        document.removeEventListener(\"keydown\", this.handleDocumentKeyDown);\n    };\n    Popover.prototype.updateSize = function() {\n        var isRtl = this.context.isRtl;\n        var _a = this.props, alignmentEl = _a.alignmentEl, alignGridTop = _a.alignGridTop;\n        var rootEl = this.rootEl;\n        var alignmentRect = computeClippedClientRect(alignmentEl);\n        if (alignmentRect) {\n            var popoverDims = rootEl.getBoundingClientRect();\n            // position relative to viewport\n            var popoverTop = alignGridTop ? elementClosest(alignmentEl, \".fc-scrollgrid\").getBoundingClientRect().top : alignmentRect.top;\n            var popoverLeft = isRtl ? alignmentRect.right - popoverDims.width : alignmentRect.left;\n            // constrain\n            popoverTop = Math.max(popoverTop, PADDING_FROM_VIEWPORT);\n            popoverLeft = Math.min(popoverLeft, document.documentElement.clientWidth - PADDING_FROM_VIEWPORT - popoverDims.width);\n            popoverLeft = Math.max(popoverLeft, PADDING_FROM_VIEWPORT);\n            var origin_1 = rootEl.offsetParent.getBoundingClientRect();\n            applyStyle(rootEl, {\n                top: popoverTop - origin_1.top,\n                left: popoverLeft - origin_1.left\n            });\n        }\n    };\n    return Popover;\n}(BaseComponent1);\nvar MorePopover1 = /** @class */ function(_super) {\n    var MorePopover = function MorePopover() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.handleRootEl = function(rootEl) {\n            _this.rootEl = rootEl;\n            if (rootEl) {\n                _this.context.registerInteractiveComponent(_this, {\n                    el: rootEl,\n                    useEventCenter: false\n                });\n            } else {\n                _this.context.unregisterInteractiveComponent(_this);\n            }\n        };\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(MorePopover, _super);\n    MorePopover.prototype.render = function() {\n        var _a = this.context, options = _a.options, dateEnv = _a.dateEnv;\n        var props = this.props;\n        var startDate = props.startDate, todayRange = props.todayRange, dateProfile = props.dateProfile;\n        var title = dateEnv.format(startDate, options.dayPopoverFormat);\n        return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(DayCellRoot1, {\n            date: startDate,\n            dateProfile: dateProfile,\n            todayRange: todayRange,\n            elRef: this.handleRootEl\n        }, function(rootElRef, dayClassNames, dataAttrs) {\n            return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(Popover1, {\n                elRef: rootElRef,\n                id: props.id,\n                title: title,\n                extraClassNames: [\n                    \"fc-more-popover\"\n                ].concat(dayClassNames),\n                extraAttrs: dataAttrs /* TODO: make these time-based when not whole-day? */ ,\n                parentEl: props.parentEl,\n                alignmentEl: props.alignmentEl,\n                alignGridTop: props.alignGridTop,\n                onClose: props.onClose\n            }, (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(DayCellContent1, {\n                date: startDate,\n                dateProfile: dateProfile,\n                todayRange: todayRange\n            }, function(innerElRef, innerContent) {\n                return innerContent && (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                    className: \"fc-more-popover-misc\",\n                    ref: innerElRef\n                }, innerContent);\n            }), props.children);\n        });\n    };\n    MorePopover.prototype.queryHit = function(positionLeft, positionTop, elWidth, elHeight) {\n        var _a = this, rootEl = _a.rootEl, props = _a.props;\n        if (positionLeft >= 0 && positionLeft < elWidth && positionTop >= 0 && positionTop < elHeight) {\n            return {\n                dateProfile: props.dateProfile,\n                dateSpan: (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n                    allDay: true,\n                    range: {\n                        start: props.startDate,\n                        end: props.endDate\n                    }\n                }, props.extraDateSpan),\n                dayEl: rootEl,\n                rect: {\n                    left: 0,\n                    top: 0,\n                    right: elWidth,\n                    bottom: elHeight\n                },\n                layer: 1\n            };\n        }\n        return null;\n    };\n    return MorePopover;\n}(DateComponent1);\nvar MoreLinkRoot1 = /** @class */ function(_super) {\n    var MoreLinkRoot = function MoreLinkRoot() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.linkElRef = (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n        _this.state = {\n            isPopoverOpen: false,\n            popoverId: getUniqueDomId()\n        };\n        _this.handleClick = function(ev) {\n            var _a1 = _this, props = _a1.props, context = _a1.context;\n            var moreLinkClick = context.options.moreLinkClick;\n            var date = computeRange(props).start;\n            function buildPublicSeg(seg) {\n                var _a = seg.eventRange, def = _a.def, instance = _a.instance, range = _a.range;\n                return {\n                    event: new EventApi1(context, def, instance),\n                    start: context.dateEnv.toDate(range.start),\n                    end: context.dateEnv.toDate(range.end),\n                    isStart: seg.isStart,\n                    isEnd: seg.isEnd\n                };\n            }\n            if (typeof moreLinkClick === \"function\") {\n                moreLinkClick = moreLinkClick({\n                    date: date,\n                    allDay: Boolean(props.allDayDate),\n                    allSegs: props.allSegs.map(buildPublicSeg),\n                    hiddenSegs: props.hiddenSegs.map(buildPublicSeg),\n                    jsEvent: ev,\n                    view: context.viewApi\n                });\n            }\n            if (!moreLinkClick || moreLinkClick === \"popover\") {\n                _this.setState({\n                    isPopoverOpen: true\n                });\n            } else if (typeof moreLinkClick === \"string\") {\n                context.calendarApi.zoomTo(date, moreLinkClick);\n            }\n        };\n        _this.handlePopoverClose = function() {\n            _this.setState({\n                isPopoverOpen: false\n            });\n        };\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(MoreLinkRoot, _super);\n    MoreLinkRoot.prototype.render = function() {\n        var _this = this;\n        var _a = this, props = _a.props, state = _a.state;\n        return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(ViewContextType.Consumer, null, function(context) {\n            var viewApi = context.viewApi, options = context.options, calendarApi = context.calendarApi;\n            var moreLinkText = options.moreLinkText;\n            var moreCnt = props.moreCnt;\n            var range = computeRange(props);\n            var text = typeof moreLinkText === \"function\" // TODO: eventually use formatWithOrdinals\n             ? moreLinkText.call(calendarApi, moreCnt) : \"+\" + moreCnt + \" \" + moreLinkText;\n            var title = formatWithOrdinals(options.moreLinkHint, [\n                moreCnt\n            ], text);\n            var hookProps = {\n                num: moreCnt,\n                shortText: \"+\" + moreCnt,\n                text: text,\n                view: viewApi\n            };\n            return (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(_vdom_js__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, Boolean(props.moreCnt) && (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(RenderHook1, {\n                elRef: _this.linkElRef,\n                hookProps: hookProps,\n                classNames: options.moreLinkClassNames,\n                content: options.moreLinkContent,\n                defaultContent: props.defaultContent || renderMoreLinkInner,\n                didMount: options.moreLinkDidMount,\n                willUnmount: options.moreLinkWillUnmount\n            }, function(rootElRef, customClassNames, innerElRef, innerContent) {\n                return props.children(rootElRef, [\n                    \"fc-more-link\"\n                ].concat(customClassNames), innerElRef, innerContent, _this.handleClick, title, state.isPopoverOpen, state.isPopoverOpen ? state.popoverId : \"\");\n            }), state.isPopoverOpen && (0,_vdom_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(MorePopover1, {\n                id: state.popoverId,\n                startDate: range.start,\n                endDate: range.end,\n                dateProfile: props.dateProfile,\n                todayRange: props.todayRange,\n                extraDateSpan: props.extraDateSpan,\n                parentEl: _this.parentEl,\n                alignmentEl: props.alignmentElRef.current,\n                alignGridTop: props.alignGridTop,\n                onClose: _this.handlePopoverClose\n            }, props.popoverContent()));\n        });\n    };\n    MoreLinkRoot.prototype.componentDidMount = function() {\n        this.updateParentEl();\n    };\n    MoreLinkRoot.prototype.componentDidUpdate = function() {\n        this.updateParentEl();\n    };\n    MoreLinkRoot.prototype.updateParentEl = function() {\n        if (this.linkElRef.current) {\n            this.parentEl = elementClosest(this.linkElRef.current, \".fc-view-harness\");\n        }\n    };\n    return MoreLinkRoot;\n}(BaseComponent1);\nfunction renderMoreLinkInner(props) {\n    return props.text;\n}\nfunction computeRange(props) {\n    if (props.allDayDate) {\n        return {\n            start: props.allDayDate,\n            end: addDays(props.allDayDate, 1)\n        };\n    }\n    var hiddenSegs = props.hiddenSegs;\n    return {\n        start: computeEarliestSegStart(hiddenSegs),\n        end: computeLatestSegEnd(hiddenSegs)\n    };\n}\nfunction computeEarliestSegStart(segs) {\n    return segs.reduce(pickEarliestStart).eventRange.range.start;\n}\nfunction pickEarliestStart(seg0, seg1) {\n    return seg0.eventRange.range.start < seg1.eventRange.range.start ? seg0 : seg1;\n}\nfunction computeLatestSegEnd(segs) {\n    return segs.reduce(pickLatestEnd).eventRange.range.end;\n}\nfunction pickLatestEnd(seg0, seg1) {\n    return seg0.eventRange.range.end > seg1.eventRange.range.end ? seg0 : seg1;\n}\n// exports\n// --------------------------------------------------------------------------------------------------\nvar version = \"5.10.2\"; // important to type it, so .d.ts has generic string\n //# sourceMappingURL=main.js.map\nvar _c, _c1, _c2, _c3;\n$RefreshReg$(_c, \"ContentHook\");\n$RefreshReg$(_c1, \"NowIndicatorRoot\");\n$RefreshReg$(_c2, \"BgEvent\");\n$RefreshReg$(_c3, \"WeekNumberRoot\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@fullcalendar/common/main.js\n");

/***/ }),

/***/ "./node_modules/@fullcalendar/common/vdom.js":
/*!***************************************************!*\
  !*** ./node_modules/@fullcalendar/common/vdom.js ***!
  \***************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Component\": function() { return /* binding */ Component; },\n/* harmony export */   \"Fragment\": function() { return /* binding */ Fragment; },\n/* harmony export */   \"createContext\": function() { return /* binding */ createContext; },\n/* harmony export */   \"createElement\": function() { return /* binding */ createElement; },\n/* harmony export */   \"createPortal\": function() { return /* binding */ createPortal; },\n/* harmony export */   \"createRef\": function() { return /* binding */ createRef; },\n/* harmony export */   \"flushSync\": function() { return /* binding */ flushSync; },\n/* harmony export */   \"render\": function() { return /* binding */ render; },\n/* harmony export */   \"unmountComponentAtNode\": function() { return /* binding */ unmountComponentAtNode; }\n/* harmony export */ });\n/// <reference types=\"@fullcalendar/core-preact\" />\nif (typeof FullCalendarVDom === \"undefined\") {\n    throw new Error(\"Please import the top-level fullcalendar lib before attempting to import a plugin.\");\n}\nvar Component = FullCalendarVDom.Component;\nvar createElement = FullCalendarVDom.createElement;\nvar render = FullCalendarVDom.render;\nvar createRef = FullCalendarVDom.createRef;\nvar Fragment = FullCalendarVDom.Fragment;\nvar createContext = FullCalendarVDom.createContext;\nvar createPortal = FullCalendarVDom.createPortal;\nvar flushSync = FullCalendarVDom.flushSync;\nvar unmountComponentAtNode = FullCalendarVDom.unmountComponentAtNode;\n/* eslint-enable */ \n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGZ1bGxjYWxlbmRhci9jb21tb24vdmRvbS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSxtREFBbUQ7QUFDbkQsSUFBSSxPQUFPQSxnQkFBZ0IsS0FBSyxXQUFXLEVBQUU7SUFDekMsTUFBTSxJQUFJQyxLQUFLLENBQUMsb0ZBQW9GLENBQUMsQ0FBQztDQUN6RztBQUNELElBQUlDLFNBQVMsR0FBR0YsZ0JBQWdCLENBQUNFLFNBQVM7QUFDMUMsSUFBSUMsYUFBYSxHQUFHSCxnQkFBZ0IsQ0FBQ0csYUFBYTtBQUNsRCxJQUFJQyxNQUFNLEdBQUdKLGdCQUFnQixDQUFDSSxNQUFNO0FBQ3BDLElBQUlDLFNBQVMsR0FBR0wsZ0JBQWdCLENBQUNLLFNBQVM7QUFDMUMsSUFBSUMsUUFBUSxHQUFHTixnQkFBZ0IsQ0FBQ00sUUFBUTtBQUN4QyxJQUFJQyxhQUFhLEdBQUdQLGdCQUFnQixDQUFDTyxhQUFhO0FBQ2xELElBQUlDLFlBQVksR0FBR1IsZ0JBQWdCLENBQUNRLFlBQVk7QUFDaEQsSUFBSUMsU0FBUyxHQUFHVCxnQkFBZ0IsQ0FBQ1MsU0FBUztBQUMxQyxJQUFJQyxzQkFBc0IsR0FBR1YsZ0JBQWdCLENBQUNVLHNCQUFzQjtBQUNwRSxtQkFBbUIsQ0FFOEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BmdWxsY2FsZW5kYXIvY29tbW9uL3Zkb20uanM/ZDFmMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSB0eXBlcz1cIkBmdWxsY2FsZW5kYXIvY29yZS1wcmVhY3RcIiAvPlxuaWYgKHR5cGVvZiBGdWxsQ2FsZW5kYXJWRG9tID09PSAndW5kZWZpbmVkJykge1xuICAgIHRocm93IG5ldyBFcnJvcignUGxlYXNlIGltcG9ydCB0aGUgdG9wLWxldmVsIGZ1bGxjYWxlbmRhciBsaWIgYmVmb3JlIGF0dGVtcHRpbmcgdG8gaW1wb3J0IGEgcGx1Z2luLicpO1xufVxudmFyIENvbXBvbmVudCA9IEZ1bGxDYWxlbmRhclZEb20uQ29tcG9uZW50O1xudmFyIGNyZWF0ZUVsZW1lbnQgPSBGdWxsQ2FsZW5kYXJWRG9tLmNyZWF0ZUVsZW1lbnQ7XG52YXIgcmVuZGVyID0gRnVsbENhbGVuZGFyVkRvbS5yZW5kZXI7XG52YXIgY3JlYXRlUmVmID0gRnVsbENhbGVuZGFyVkRvbS5jcmVhdGVSZWY7XG52YXIgRnJhZ21lbnQgPSBGdWxsQ2FsZW5kYXJWRG9tLkZyYWdtZW50O1xudmFyIGNyZWF0ZUNvbnRleHQgPSBGdWxsQ2FsZW5kYXJWRG9tLmNyZWF0ZUNvbnRleHQ7XG52YXIgY3JlYXRlUG9ydGFsID0gRnVsbENhbGVuZGFyVkRvbS5jcmVhdGVQb3J0YWw7XG52YXIgZmx1c2hTeW5jID0gRnVsbENhbGVuZGFyVkRvbS5mbHVzaFN5bmM7XG52YXIgdW5tb3VudENvbXBvbmVudEF0Tm9kZSA9IEZ1bGxDYWxlbmRhclZEb20udW5tb3VudENvbXBvbmVudEF0Tm9kZTtcbi8qIGVzbGludC1lbmFibGUgKi9cblxuZXhwb3J0IHsgQ29tcG9uZW50LCBGcmFnbWVudCwgY3JlYXRlQ29udGV4dCwgY3JlYXRlRWxlbWVudCwgY3JlYXRlUG9ydGFsLCBjcmVhdGVSZWYsIGZsdXNoU3luYywgcmVuZGVyLCB1bm1vdW50Q29tcG9uZW50QXROb2RlIH07XG4iXSwibmFtZXMiOlsiRnVsbENhbGVuZGFyVkRvbSIsIkVycm9yIiwiQ29tcG9uZW50IiwiY3JlYXRlRWxlbWVudCIsInJlbmRlciIsImNyZWF0ZVJlZiIsIkZyYWdtZW50IiwiY3JlYXRlQ29udGV4dCIsImNyZWF0ZVBvcnRhbCIsImZsdXNoU3luYyIsInVubW91bnRDb21wb25lbnRBdE5vZGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@fullcalendar/common/vdom.js\n");

/***/ }),

/***/ "./node_modules/@fullcalendar/daygrid/main.js":
/*!****************************************************!*\
  !*** ./node_modules/@fullcalendar/daygrid/main.js ***!
  \****************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DayGridView\": function() { return /* binding */ DayTableView1; },\n/* harmony export */   \"DayTable\": function() { return /* binding */ DayTable1; },\n/* harmony export */   \"DayTableSlicer\": function() { return /* binding */ DayTableSlicer1; },\n/* harmony export */   \"Table\": function() { return /* binding */ Table1; },\n/* harmony export */   \"TableView\": function() { return /* binding */ TableView1; },\n/* harmony export */   \"buildDayTableModel\": function() { return /* binding */ buildDayTableModel; }\n/* harmony export */ });\n/* harmony import */ var _main_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./main.css */ \"./node_modules/@fullcalendar/daygrid/main.css\");\n/* harmony import */ var _main_css__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_main_css__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @fullcalendar/common */ \"./node_modules/@fullcalendar/common/main.js\");\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/*!\nFullCalendar v5.10.2\nDocs & License: https://fullcalendar.io/\n(c) 2021 Adam Shaw\n*/ \n\n\n/* An abstract class for the daygrid views, as well as month view. Renders one or more rows of day cells.\n----------------------------------------------------------------------------------------------------------------------*/ // It is a manager for a Table subcomponent, which does most of the heavy lifting.\n// It is responsible for managing width/height.\nvar TableView1 = /** @class */ function(_super) {\n    var TableView = function TableView() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.headerElRef = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(TableView, _super);\n    TableView.prototype.renderSimpleLayout = function(headerRowContent, bodyContent) {\n        var _a = this, props = _a.props, context = _a.context;\n        var sections = [];\n        var stickyHeaderDates = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.getStickyHeaderDates)(context.options);\n        if (headerRowContent) {\n            sections.push({\n                type: \"header\",\n                key: \"header\",\n                isSticky: stickyHeaderDates,\n                chunk: {\n                    elRef: this.headerElRef,\n                    tableClassName: \"fc-col-header\",\n                    rowContent: headerRowContent\n                }\n            });\n        }\n        sections.push({\n            type: \"body\",\n            key: \"body\",\n            liquid: true,\n            chunk: {\n                content: bodyContent\n            }\n        });\n        return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.ViewRoot, {\n            viewSpec: context.viewSpec\n        }, function(rootElRef, classNames) {\n            return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                ref: rootElRef,\n                className: [\n                    \"fc-daygrid\"\n                ].concat(classNames).join(\" \")\n            }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.SimpleScrollGrid, {\n                liquid: !props.isHeightAuto && !props.forPrint,\n                collapsibleWidth: props.forPrint,\n                cols: [],\n                sections: sections\n            }));\n        });\n    };\n    TableView.prototype.renderHScrollLayout = function(headerRowContent, bodyContent, colCnt, dayMinWidth) {\n        var ScrollGrid = this.context.pluginHooks.scrollGridImpl;\n        if (!ScrollGrid) {\n            throw new Error(\"No ScrollGrid implementation\");\n        }\n        var _a = this, props = _a.props, context = _a.context;\n        var stickyHeaderDates = !props.forPrint && (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.getStickyHeaderDates)(context.options);\n        var stickyFooterScrollbar = !props.forPrint && (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.getStickyFooterScrollbar)(context.options);\n        var sections = [];\n        if (headerRowContent) {\n            sections.push({\n                type: \"header\",\n                key: \"header\",\n                isSticky: stickyHeaderDates,\n                chunks: [\n                    {\n                        key: \"main\",\n                        elRef: this.headerElRef,\n                        tableClassName: \"fc-col-header\",\n                        rowContent: headerRowContent\n                    }\n                ]\n            });\n        }\n        sections.push({\n            type: \"body\",\n            key: \"body\",\n            liquid: true,\n            chunks: [\n                {\n                    key: \"main\",\n                    content: bodyContent\n                }\n            ]\n        });\n        if (stickyFooterScrollbar) {\n            sections.push({\n                type: \"footer\",\n                key: \"footer\",\n                isSticky: true,\n                chunks: [\n                    {\n                        key: \"main\",\n                        content: _fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.renderScrollShim\n                    }\n                ]\n            });\n        }\n        return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.ViewRoot, {\n            viewSpec: context.viewSpec\n        }, function(rootElRef, classNames) {\n            return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                ref: rootElRef,\n                className: [\n                    \"fc-daygrid\"\n                ].concat(classNames).join(\" \")\n            }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(ScrollGrid, {\n                liquid: !props.isHeightAuto && !props.forPrint,\n                collapsibleWidth: props.forPrint,\n                colGroups: [\n                    {\n                        cols: [\n                            {\n                                span: colCnt,\n                                minWidth: dayMinWidth\n                            }\n                        ]\n                    }\n                ],\n                sections: sections\n            }));\n        });\n    };\n    return TableView;\n}(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.DateComponent);\nfunction splitSegsByRow(segs, rowCnt) {\n    var byRow = [];\n    for(var i = 0; i < rowCnt; i += 1){\n        byRow[i] = [];\n    }\n    for(var _i = 0, segs_1 = segs; _i < segs_1.length; _i++){\n        var seg = segs_1[_i];\n        byRow[seg.row].push(seg);\n    }\n    return byRow;\n}\nfunction splitSegsByFirstCol(segs, colCnt) {\n    var byCol = [];\n    for(var i = 0; i < colCnt; i += 1){\n        byCol[i] = [];\n    }\n    for(var _i = 0, segs_2 = segs; _i < segs_2.length; _i++){\n        var seg = segs_2[_i];\n        byCol[seg.firstCol].push(seg);\n    }\n    return byCol;\n}\nfunction splitInteractionByRow(ui, rowCnt) {\n    var byRow = [];\n    if (!ui) {\n        for(var i = 0; i < rowCnt; i += 1){\n            byRow[i] = null;\n        }\n    } else {\n        for(var i = 0; i < rowCnt; i += 1){\n            byRow[i] = {\n                affectedInstances: ui.affectedInstances,\n                isEvent: ui.isEvent,\n                segs: []\n            };\n        }\n        for(var _i = 0, _a = ui.segs; _i < _a.length; _i++){\n            var seg = _a[_i];\n            byRow[seg.row].segs.push(seg);\n        }\n    }\n    return byRow;\n}\nvar TableCellTop1 = /** @class */ function(_super) {\n    var TableCellTop = function TableCellTop() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(TableCellTop, _super);\n    TableCellTop.prototype.render = function() {\n        var props = this.props;\n        var navLinkAttrs = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.buildNavLinkAttrs)(this.context, props.date);\n        return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.DayCellContent, {\n            date: props.date,\n            dateProfile: props.dateProfile,\n            todayRange: props.todayRange,\n            showDayNumber: props.showDayNumber,\n            extraHookProps: props.extraHookProps,\n            defaultContent: renderTopInner\n        }, function(innerElRef, innerContent) {\n            return (innerContent || props.forceDayTop) && (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                className: \"fc-daygrid-day-top\",\n                ref: innerElRef\n            }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"a\", (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n                id: props.dayNumberId,\n                className: \"fc-daygrid-day-number\"\n            }, navLinkAttrs), innerContent || (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, \"\\xa0\")));\n        });\n    };\n    return TableCellTop;\n}(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.BaseComponent);\nfunction renderTopInner(props) {\n    return props.dayNumberText;\n}\nvar DEFAULT_TABLE_EVENT_TIME_FORMAT = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createFormatter)({\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    omitZeroMinute: true,\n    meridiem: \"narrow\"\n});\nfunction hasListItemDisplay(seg) {\n    var display = seg.eventRange.ui.display;\n    return display === \"list-item\" || display === \"auto\" && !seg.eventRange.def.allDay && seg.firstCol === seg.lastCol && seg.isStart && seg.isEnd // \"\n    ;\n}\nvar TableBlockEvent1 = /** @class */ function(_super) {\n    var TableBlockEvent = function TableBlockEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(TableBlockEvent, _super);\n    TableBlockEvent.prototype.render = function() {\n        var props = this.props;\n        return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.StandardEvent, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, props, {\n            extraClassNames: [\n                \"fc-daygrid-event\",\n                \"fc-daygrid-block-event\",\n                \"fc-h-event\"\n            ],\n            defaultTimeFormat: DEFAULT_TABLE_EVENT_TIME_FORMAT,\n            defaultDisplayEventEnd: props.defaultDisplayEventEnd,\n            disableResizing: !props.seg.eventRange.def.allDay\n        }));\n    };\n    return TableBlockEvent;\n}(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.BaseComponent);\nvar TableListItemEvent1 = /** @class */ function(_super) {\n    var TableListItemEvent = function TableListItemEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(TableListItemEvent, _super);\n    TableListItemEvent.prototype.render = function() {\n        var _a = this, props = _a.props, context = _a.context;\n        var timeFormat = context.options.eventTimeFormat || DEFAULT_TABLE_EVENT_TIME_FORMAT;\n        var timeText = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.buildSegTimeText)(props.seg, timeFormat, context, true, props.defaultDisplayEventEnd);\n        return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.EventRoot, {\n            seg: props.seg,\n            timeText: timeText,\n            defaultContent: renderInnerContent,\n            isDragging: props.isDragging,\n            isResizing: false,\n            isDateSelecting: false,\n            isSelected: props.isSelected,\n            isPast: props.isPast,\n            isFuture: props.isFuture,\n            isToday: props.isToday\n        }, function(rootElRef, classNames, innerElRef, innerContent) {\n            return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"a\", (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n                className: [\n                    \"fc-daygrid-event\",\n                    \"fc-daygrid-dot-event\"\n                ].concat(classNames).join(\" \"),\n                ref: rootElRef\n            }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.getSegAnchorAttrs)(props.seg, context)), innerContent);\n        });\n    };\n    return TableListItemEvent;\n}(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.BaseComponent);\nfunction renderInnerContent(innerProps) {\n    return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n        className: \"fc-daygrid-event-dot\",\n        style: {\n            borderColor: innerProps.borderColor || innerProps.backgroundColor\n        }\n    }), innerProps.timeText && (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n        className: \"fc-event-time\"\n    }, innerProps.timeText), (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n        className: \"fc-event-title\"\n    }, innerProps.event.title || (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, \"\\xa0\")));\n}\nvar TableCellMoreLink1 = /** @class */ function(_super) {\n    var TableCellMoreLink = function TableCellMoreLink() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.compileSegs = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.memoize)(compileSegs);\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(TableCellMoreLink, _super);\n    TableCellMoreLink.prototype.render = function() {\n        var props = this.props;\n        var _a = this.compileSegs(props.singlePlacements), allSegs = _a.allSegs, invisibleSegs = _a.invisibleSegs;\n        return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.MoreLinkRoot, {\n            dateProfile: props.dateProfile,\n            todayRange: props.todayRange,\n            allDayDate: props.allDayDate,\n            moreCnt: props.moreCnt,\n            allSegs: allSegs,\n            hiddenSegs: invisibleSegs,\n            alignmentElRef: props.alignmentElRef,\n            alignGridTop: props.alignGridTop,\n            extraDateSpan: props.extraDateSpan,\n            popoverContent: function popoverContent() {\n                var isForcedInvisible = (props.eventDrag ? props.eventDrag.affectedInstances : null) || (props.eventResize ? props.eventResize.affectedInstances : null) || {};\n                return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, allSegs.map(function(seg) {\n                    var instanceId = seg.eventRange.instance.instanceId;\n                    return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                        className: \"fc-daygrid-event-harness\",\n                        key: instanceId,\n                        style: {\n                            visibility: isForcedInvisible[instanceId] ? \"hidden\" : \"\"\n                        }\n                    }, hasListItemDisplay(seg) ? (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(TableListItemEvent1, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n                        seg: seg,\n                        isDragging: false,\n                        isSelected: instanceId === props.eventSelection,\n                        defaultDisplayEventEnd: false\n                    }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.getSegMeta)(seg, props.todayRange))) : (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(TableBlockEvent1, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n                        seg: seg,\n                        isDragging: false,\n                        isResizing: false,\n                        isDateSelecting: false,\n                        isSelected: instanceId === props.eventSelection,\n                        defaultDisplayEventEnd: false\n                    }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.getSegMeta)(seg, props.todayRange))));\n                }));\n            }\n        }, function(rootElRef, classNames, innerElRef, innerContent, handleClick, title, isExpanded, popoverId) {\n            return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"a\", (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n                ref: rootElRef,\n                className: [\n                    \"fc-daygrid-more-link\"\n                ].concat(classNames).join(\" \"),\n                title: title,\n                \"aria-expanded\": isExpanded,\n                \"aria-controls\": popoverId\n            }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createAriaClickAttrs)(handleClick)), innerContent);\n        });\n    };\n    return TableCellMoreLink;\n}(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.BaseComponent);\nfunction compileSegs(singlePlacements) {\n    var allSegs = [];\n    var invisibleSegs = [];\n    for(var _i = 0, singlePlacements_1 = singlePlacements; _i < singlePlacements_1.length; _i++){\n        var placement = singlePlacements_1[_i];\n        allSegs.push(placement.seg);\n        if (!placement.isVisible) {\n            invisibleSegs.push(placement.seg);\n        }\n    }\n    return {\n        allSegs: allSegs,\n        invisibleSegs: invisibleSegs\n    };\n}\nvar DEFAULT_WEEK_NUM_FORMAT = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createFormatter)({\n    week: \"narrow\"\n});\nvar TableCell1 = /** @class */ function(_super) {\n    var TableCell = function TableCell() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.rootElRef = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n        _this.state = {\n            dayNumberId: (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.getUniqueDomId)()\n        };\n        _this.handleRootEl = function(el) {\n            (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.setRef)(_this.rootElRef, el);\n            (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.setRef)(_this.props.elRef, el);\n        };\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(TableCell, _super);\n    TableCell.prototype.render = function() {\n        var _a = this, context = _a.context, props = _a.props, state = _a.state, rootElRef = _a.rootElRef;\n        var date = props.date, dateProfile = props.dateProfile;\n        var navLinkAttrs = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.buildNavLinkAttrs)(context, date, \"week\");\n        return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.DayCellRoot, {\n            date: date,\n            dateProfile: dateProfile,\n            todayRange: props.todayRange,\n            showDayNumber: props.showDayNumber,\n            extraHookProps: props.extraHookProps,\n            elRef: this.handleRootEl\n        }, function(dayElRef, dayClassNames, rootDataAttrs, isDisabled) {\n            return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"td\", (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n                ref: dayElRef,\n                role: \"gridcell\",\n                className: [\n                    \"fc-daygrid-day\"\n                ].concat(dayClassNames, props.extraClassNames || []).join(\" \")\n            }, rootDataAttrs, props.extraDataAttrs, props.showDayNumber ? {\n                \"aria-labelledby\": state.dayNumberId\n            } : {}), (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                className: \"fc-daygrid-day-frame fc-scrollgrid-sync-inner\",\n                ref: props.innerElRef /* different from hook system! RENAME */ \n            }, props.showWeekNumber && (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.WeekNumberRoot, {\n                date: date,\n                defaultFormat: DEFAULT_WEEK_NUM_FORMAT\n            }, function(weekElRef, weekClassNames, innerElRef, innerContent) {\n                return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"a\", (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n                    ref: weekElRef,\n                    className: [\n                        \"fc-daygrid-week-number\"\n                    ].concat(weekClassNames).join(\" \")\n                }, navLinkAttrs), innerContent);\n            }), !isDisabled && (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(TableCellTop1, {\n                date: date,\n                dateProfile: dateProfile,\n                showDayNumber: props.showDayNumber,\n                dayNumberId: state.dayNumberId,\n                forceDayTop: props.forceDayTop,\n                todayRange: props.todayRange,\n                extraHookProps: props.extraHookProps\n            }), (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                className: \"fc-daygrid-day-events\",\n                ref: props.fgContentElRef\n            }, props.fgContent, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                className: \"fc-daygrid-day-bottom\",\n                style: {\n                    marginTop: props.moreMarginTop\n                }\n            }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(TableCellMoreLink1, {\n                allDayDate: date,\n                singlePlacements: props.singlePlacements,\n                moreCnt: props.moreCnt,\n                alignmentElRef: rootElRef,\n                alignGridTop: !props.showDayNumber,\n                extraDateSpan: props.extraDateSpan,\n                dateProfile: props.dateProfile,\n                eventSelection: props.eventSelection,\n                eventDrag: props.eventDrag,\n                eventResize: props.eventResize,\n                todayRange: props.todayRange\n            }))), (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                className: \"fc-daygrid-day-bg\"\n            }, props.bgContent)));\n        });\n    };\n    return TableCell;\n}(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.DateComponent);\nfunction computeFgSegPlacement(segs, dayMaxEvents, dayMaxEventRows, strictOrder, eventInstanceHeights, maxContentHeight, cells) {\n    var hierarchy = new DayGridSegHierarchy1();\n    hierarchy.allowReslicing = true;\n    hierarchy.strictOrder = strictOrder;\n    if (dayMaxEvents === true || dayMaxEventRows === true) {\n        hierarchy.maxCoord = maxContentHeight;\n        hierarchy.hiddenConsumes = true;\n    } else if (typeof dayMaxEvents === \"number\") {\n        hierarchy.maxStackCnt = dayMaxEvents;\n    } else if (typeof dayMaxEventRows === \"number\") {\n        hierarchy.maxStackCnt = dayMaxEventRows;\n        hierarchy.hiddenConsumes = true;\n    }\n    // create segInputs only for segs with known heights\n    var segInputs = [];\n    var unknownHeightSegs = [];\n    for(var i = 0; i < segs.length; i += 1){\n        var seg = segs[i];\n        var instanceId = seg.eventRange.instance.instanceId;\n        var eventHeight = eventInstanceHeights[instanceId];\n        if (eventHeight != null) {\n            segInputs.push({\n                index: i,\n                thickness: eventHeight,\n                span: {\n                    start: seg.firstCol,\n                    end: seg.lastCol + 1\n                }\n            });\n        } else {\n            unknownHeightSegs.push(seg);\n        }\n    }\n    var hiddenEntries = hierarchy.addSegs(segInputs);\n    var segRects = hierarchy.toRects();\n    var _a = placeRects(segRects, segs, cells), singleColPlacements = _a.singleColPlacements, multiColPlacements = _a.multiColPlacements, leftoverMargins = _a.leftoverMargins;\n    var moreCnts = [];\n    var moreMarginTops = [];\n    // add segs with unknown heights\n    for(var _i = 0, unknownHeightSegs_1 = unknownHeightSegs; _i < unknownHeightSegs_1.length; _i++){\n        var seg = unknownHeightSegs_1[_i];\n        multiColPlacements[seg.firstCol].push({\n            seg: seg,\n            isVisible: false,\n            isAbsolute: true,\n            absoluteTop: 0,\n            marginTop: 0\n        });\n        for(var col = seg.firstCol; col <= seg.lastCol; col += 1){\n            singleColPlacements[col].push({\n                seg: resliceSeg(seg, col, col + 1, cells),\n                isVisible: false,\n                isAbsolute: false,\n                absoluteTop: 0,\n                marginTop: 0\n            });\n        }\n    }\n    // add the hidden entries\n    for(var col = 0; col < cells.length; col += 1){\n        moreCnts.push(0);\n    }\n    for(var _b = 0, hiddenEntries_1 = hiddenEntries; _b < hiddenEntries_1.length; _b++){\n        var hiddenEntry = hiddenEntries_1[_b];\n        var seg = segs[hiddenEntry.index];\n        var hiddenSpan = hiddenEntry.span;\n        multiColPlacements[hiddenSpan.start].push({\n            seg: resliceSeg(seg, hiddenSpan.start, hiddenSpan.end, cells),\n            isVisible: false,\n            isAbsolute: true,\n            absoluteTop: 0,\n            marginTop: 0\n        });\n        for(var col = hiddenSpan.start; col < hiddenSpan.end; col += 1){\n            moreCnts[col] += 1;\n            singleColPlacements[col].push({\n                seg: resliceSeg(seg, col, col + 1, cells),\n                isVisible: false,\n                isAbsolute: false,\n                absoluteTop: 0,\n                marginTop: 0\n            });\n        }\n    }\n    // deal with leftover margins\n    for(var col = 0; col < cells.length; col += 1){\n        moreMarginTops.push(leftoverMargins[col]);\n    }\n    return {\n        singleColPlacements: singleColPlacements,\n        multiColPlacements: multiColPlacements,\n        moreCnts: moreCnts,\n        moreMarginTops: moreMarginTops\n    };\n}\n// rects ordered by top coord, then left\nfunction placeRects(allRects, segs, cells) {\n    var rectsByEachCol = groupRectsByEachCol(allRects, cells.length);\n    var singleColPlacements = [];\n    var multiColPlacements = [];\n    var leftoverMargins = [];\n    for(var col = 0; col < cells.length; col += 1){\n        var rects = rectsByEachCol[col];\n        // compute all static segs in singlePlacements\n        var singlePlacements = [];\n        var currentHeight = 0;\n        var currentMarginTop = 0;\n        for(var _i = 0, rects_1 = rects; _i < rects_1.length; _i++){\n            var rect = rects_1[_i];\n            var seg = segs[rect.index];\n            singlePlacements.push({\n                seg: resliceSeg(seg, col, col + 1, cells),\n                isVisible: true,\n                isAbsolute: false,\n                absoluteTop: rect.levelCoord,\n                marginTop: rect.levelCoord - currentHeight\n            });\n            currentHeight = rect.levelCoord + rect.thickness;\n        }\n        // compute mixed static/absolute segs in multiPlacements\n        var multiPlacements = [];\n        currentHeight = 0;\n        currentMarginTop = 0;\n        for(var _a = 0, rects_2 = rects; _a < rects_2.length; _a++){\n            var rect = rects_2[_a];\n            var seg = segs[rect.index];\n            var isAbsolute = rect.span.end - rect.span.start > 1; // multi-column?\n            var isFirstCol = rect.span.start === col;\n            currentMarginTop += rect.levelCoord - currentHeight; // amount of space since bottom of previous seg\n            currentHeight = rect.levelCoord + rect.thickness; // height will now be bottom of current seg\n            if (isAbsolute) {\n                currentMarginTop += rect.thickness;\n                if (isFirstCol) {\n                    multiPlacements.push({\n                        seg: resliceSeg(seg, rect.span.start, rect.span.end, cells),\n                        isVisible: true,\n                        isAbsolute: true,\n                        absoluteTop: rect.levelCoord,\n                        marginTop: 0\n                    });\n                }\n            } else if (isFirstCol) {\n                multiPlacements.push({\n                    seg: resliceSeg(seg, rect.span.start, rect.span.end, cells),\n                    isVisible: true,\n                    isAbsolute: false,\n                    absoluteTop: rect.levelCoord,\n                    marginTop: currentMarginTop\n                });\n                currentMarginTop = 0;\n            }\n        }\n        singleColPlacements.push(singlePlacements);\n        multiColPlacements.push(multiPlacements);\n        leftoverMargins.push(currentMarginTop);\n    }\n    return {\n        singleColPlacements: singleColPlacements,\n        multiColPlacements: multiColPlacements,\n        leftoverMargins: leftoverMargins\n    };\n}\nfunction groupRectsByEachCol(rects, colCnt) {\n    var rectsByEachCol = [];\n    for(var col = 0; col < colCnt; col += 1){\n        rectsByEachCol.push([]);\n    }\n    for(var _i = 0, rects_3 = rects; _i < rects_3.length; _i++){\n        var rect = rects_3[_i];\n        for(var col = rect.span.start; col < rect.span.end; col += 1){\n            rectsByEachCol[col].push(rect);\n        }\n    }\n    return rectsByEachCol;\n}\nfunction resliceSeg(seg, spanStart, spanEnd, cells) {\n    if (seg.firstCol === spanStart && seg.lastCol === spanEnd - 1) {\n        return seg;\n    }\n    var eventRange = seg.eventRange;\n    var origRange = eventRange.range;\n    var slicedRange = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.intersectRanges)(origRange, {\n        start: cells[spanStart].date,\n        end: (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.addDays)(cells[spanEnd - 1].date, 1)\n    });\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, seg), {\n        firstCol: spanStart,\n        lastCol: spanEnd - 1,\n        eventRange: {\n            def: eventRange.def,\n            ui: (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, eventRange.ui), {\n                durationEditable: false\n            }),\n            instance: eventRange.instance,\n            range: slicedRange\n        },\n        isStart: seg.isStart && slicedRange.start.valueOf() === origRange.start.valueOf(),\n        isEnd: seg.isEnd && slicedRange.end.valueOf() === origRange.end.valueOf()\n    });\n}\nvar DayGridSegHierarchy1 = /** @class */ function(_super) {\n    var DayGridSegHierarchy = function DayGridSegHierarchy() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        // config\n        _this.hiddenConsumes = false;\n        // allows us to keep hidden entries in the hierarchy so they take up space\n        _this.forceHidden = {};\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(DayGridSegHierarchy, _super);\n    DayGridSegHierarchy.prototype.addSegs = function(segInputs) {\n        var _this = this;\n        var hiddenSegs = _super.prototype.addSegs.call(this, segInputs);\n        var entriesByLevel = this.entriesByLevel;\n        var excludeHidden = function excludeHidden(entry) {\n            return !_this.forceHidden[(0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.buildEntryKey)(entry)];\n        };\n        // remove the forced-hidden segs\n        for(var level = 0; level < entriesByLevel.length; level += 1){\n            entriesByLevel[level] = entriesByLevel[level].filter(excludeHidden);\n        }\n        return hiddenSegs;\n    };\n    DayGridSegHierarchy.prototype.handleInvalidInsertion = function(insertion, entry, hiddenEntries) {\n        var _a = this, entriesByLevel = _a.entriesByLevel, forceHidden = _a.forceHidden;\n        var touchingEntry = insertion.touchingEntry, touchingLevel = insertion.touchingLevel, touchingLateral = insertion.touchingLateral;\n        if (this.hiddenConsumes && touchingEntry) {\n            var touchingEntryId = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.buildEntryKey)(touchingEntry);\n            // if not already hidden\n            if (!forceHidden[touchingEntryId]) {\n                if (this.allowReslicing) {\n                    var placeholderEntry = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, touchingEntry), {\n                        span: (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.intersectSpans)(touchingEntry.span, entry.span)\n                    });\n                    var placeholderEntryId = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.buildEntryKey)(placeholderEntry);\n                    forceHidden[placeholderEntryId] = true;\n                    entriesByLevel[touchingLevel][touchingLateral] = placeholderEntry; // replace touchingEntry with our placeholder\n                    this.splitEntry(touchingEntry, entry, hiddenEntries); // split up the touchingEntry, reinsert it\n                } else {\n                    forceHidden[touchingEntryId] = true;\n                    hiddenEntries.push(touchingEntry);\n                }\n            }\n        }\n        return _super.prototype.handleInvalidInsertion.call(this, insertion, entry, hiddenEntries);\n    };\n    return DayGridSegHierarchy;\n}(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.SegHierarchy);\nvar TableRow1 = /** @class */ function(_super) {\n    var TableRow = function TableRow() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.cellElRefs = new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.RefMap(); // the <td>\n        _this.frameElRefs = new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.RefMap(); // the fc-daygrid-day-frame\n        _this.fgElRefs = new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.RefMap(); // the fc-daygrid-day-events\n        _this.segHarnessRefs = new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.RefMap(); // indexed by \"instanceId:firstCol\"\n        _this.rootElRef = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n        _this.state = {\n            framePositions: null,\n            maxContentHeight: null,\n            eventInstanceHeights: {}\n        };\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(TableRow, _super);\n    TableRow.prototype.render = function() {\n        var _this = this;\n        var _a = this, props = _a.props, state = _a.state, context = _a.context;\n        var options = context.options;\n        var colCnt = props.cells.length;\n        var businessHoursByCol = splitSegsByFirstCol(props.businessHourSegs, colCnt);\n        var bgEventSegsByCol = splitSegsByFirstCol(props.bgEventSegs, colCnt);\n        var highlightSegsByCol = splitSegsByFirstCol(this.getHighlightSegs(), colCnt);\n        var mirrorSegsByCol = splitSegsByFirstCol(this.getMirrorSegs(), colCnt);\n        var _b = computeFgSegPlacement((0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.sortEventSegs)(props.fgEventSegs, options.eventOrder), props.dayMaxEvents, props.dayMaxEventRows, options.eventOrderStrict, state.eventInstanceHeights, state.maxContentHeight, props.cells), singleColPlacements = _b.singleColPlacements, multiColPlacements = _b.multiColPlacements, moreCnts = _b.moreCnts, moreMarginTops = _b.moreMarginTops;\n        var isForcedInvisible = props.eventDrag && props.eventDrag.affectedInstances || props.eventResize && props.eventResize.affectedInstances || {};\n        return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"tr\", {\n            ref: this.rootElRef,\n            role: \"row\"\n        }, props.renderIntro && props.renderIntro(), props.cells.map(function(cell, col) {\n            var normalFgNodes = _this.renderFgSegs(col, props.forPrint ? singleColPlacements[col] : multiColPlacements[col], props.todayRange, isForcedInvisible);\n            var mirrorFgNodes = _this.renderFgSegs(col, buildMirrorPlacements(mirrorSegsByCol[col], multiColPlacements), props.todayRange, {}, Boolean(props.eventDrag), Boolean(props.eventResize), false);\n            return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(TableCell1, {\n                key: cell.key,\n                elRef: _this.cellElRefs.createRef(cell.key),\n                innerElRef: _this.frameElRefs.createRef(cell.key),\n                dateProfile: props.dateProfile,\n                date: cell.date,\n                showDayNumber: props.showDayNumbers,\n                showWeekNumber: props.showWeekNumbers && col === 0,\n                forceDayTop: props.showWeekNumbers /* even displaying weeknum for row, not necessarily day */ ,\n                todayRange: props.todayRange,\n                eventSelection: props.eventSelection,\n                eventDrag: props.eventDrag,\n                eventResize: props.eventResize,\n                extraHookProps: cell.extraHookProps,\n                extraDataAttrs: cell.extraDataAttrs,\n                extraClassNames: cell.extraClassNames,\n                extraDateSpan: cell.extraDateSpan,\n                moreCnt: moreCnts[col],\n                moreMarginTop: moreMarginTops[col],\n                singlePlacements: singleColPlacements[col],\n                fgContentElRef: _this.fgElRefs.createRef(cell.key),\n                fgContent: (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, normalFgNodes), (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, mirrorFgNodes)),\n                bgContent: (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, _this.renderFillSegs(highlightSegsByCol[col], \"highlight\"), _this.renderFillSegs(businessHoursByCol[col], \"non-business\"), _this.renderFillSegs(bgEventSegsByCol[col], \"bg-event\"))\n            });\n        }));\n    };\n    TableRow.prototype.componentDidMount = function() {\n        this.updateSizing(true);\n    };\n    TableRow.prototype.componentDidUpdate = function(prevProps, prevState) {\n        var currentProps = this.props;\n        this.updateSizing(!(0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.isPropsEqual)(prevProps, currentProps));\n    };\n    TableRow.prototype.getHighlightSegs = function() {\n        var props = this.props;\n        if (props.eventDrag && props.eventDrag.segs.length) {\n            return props.eventDrag.segs;\n        }\n        if (props.eventResize && props.eventResize.segs.length) {\n            return props.eventResize.segs;\n        }\n        return props.dateSelectionSegs;\n    };\n    TableRow.prototype.getMirrorSegs = function() {\n        var props = this.props;\n        if (props.eventResize && props.eventResize.segs.length) {\n            return props.eventResize.segs;\n        }\n        return [];\n    };\n    TableRow.prototype.renderFgSegs = function(col, segPlacements, todayRange, isForcedInvisible, isDragging, isResizing, isDateSelecting) {\n        var context = this.context;\n        var eventSelection = this.props.eventSelection;\n        var framePositions = this.state.framePositions;\n        var defaultDisplayEventEnd = this.props.cells.length === 1; // colCnt === 1\n        var isMirror = isDragging || isResizing || isDateSelecting;\n        var nodes = [];\n        if (framePositions) {\n            for(var _i = 0, segPlacements_1 = segPlacements; _i < segPlacements_1.length; _i++){\n                var placement = segPlacements_1[_i];\n                var seg = placement.seg;\n                var instanceId = seg.eventRange.instance.instanceId;\n                var key = instanceId + \":\" + col;\n                var isVisible = placement.isVisible && !isForcedInvisible[instanceId];\n                var isAbsolute = placement.isAbsolute;\n                var left = \"\";\n                var right = \"\";\n                if (isAbsolute) {\n                    if (context.isRtl) {\n                        right = 0;\n                        left = framePositions.lefts[seg.lastCol] - framePositions.lefts[seg.firstCol];\n                    } else {\n                        left = 0;\n                        right = framePositions.rights[seg.firstCol] - framePositions.rights[seg.lastCol];\n                    }\n                }\n                /*\n                known bug: events that are force to be list-item but span multiple days still take up space in later columns\n                todo: in print view, for multi-day events, don't display title within non-start/end segs\n                */ nodes.push((0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                    className: \"fc-daygrid-event-harness\" + (isAbsolute ? \" fc-daygrid-event-harness-abs\" : \"\"),\n                    key: key,\n                    ref: isMirror ? null : this.segHarnessRefs.createRef(key),\n                    style: {\n                        visibility: isVisible ? \"\" : \"hidden\",\n                        marginTop: isAbsolute ? \"\" : placement.marginTop,\n                        top: isAbsolute ? placement.absoluteTop : \"\",\n                        left: left,\n                        right: right\n                    }\n                }, hasListItemDisplay(seg) ? (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(TableListItemEvent1, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n                    seg: seg,\n                    isDragging: isDragging,\n                    isSelected: instanceId === eventSelection,\n                    defaultDisplayEventEnd: defaultDisplayEventEnd\n                }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.getSegMeta)(seg, todayRange))) : (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(TableBlockEvent1, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n                    seg: seg,\n                    isDragging: isDragging,\n                    isResizing: isResizing,\n                    isDateSelecting: isDateSelecting,\n                    isSelected: instanceId === eventSelection,\n                    defaultDisplayEventEnd: defaultDisplayEventEnd\n                }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.getSegMeta)(seg, todayRange)))));\n            }\n        }\n        return nodes;\n    };\n    TableRow.prototype.renderFillSegs = function(segs, fillType) {\n        var isRtl = this.context.isRtl;\n        var todayRange = this.props.todayRange;\n        var framePositions = this.state.framePositions;\n        var nodes = [];\n        if (framePositions) {\n            for(var _i = 0, segs_1 = segs; _i < segs_1.length; _i++){\n                var seg = segs_1[_i];\n                var leftRightCss = isRtl ? {\n                    right: 0,\n                    left: framePositions.lefts[seg.lastCol] - framePositions.lefts[seg.firstCol]\n                } : {\n                    left: 0,\n                    right: framePositions.rights[seg.firstCol] - framePositions.rights[seg.lastCol]\n                };\n                nodes.push((0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                    key: (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.buildEventRangeKey)(seg.eventRange),\n                    className: \"fc-daygrid-bg-harness\",\n                    style: leftRightCss\n                }, fillType === \"bg-event\" ? (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.BgEvent, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n                    seg: seg\n                }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.getSegMeta)(seg, todayRange))) : (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.renderFill)(fillType)));\n            }\n        }\n        return _fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([\n            _fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.Fragment,\n            {}\n        ], nodes));\n    };\n    TableRow.prototype.updateSizing = function(isExternalSizingChange) {\n        var _a = this, props = _a.props, frameElRefs = _a.frameElRefs;\n        if (!props.forPrint && props.clientWidth !== null // positioning ready?\n        ) {\n            if (isExternalSizingChange) {\n                var frameEls = props.cells.map(function(cell) {\n                    return frameElRefs.currentMap[cell.key];\n                });\n                if (frameEls.length) {\n                    var originEl = this.rootElRef.current;\n                    this.setState({\n                        framePositions: new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.PositionCache(originEl, frameEls, true, false)\n                    });\n                }\n            }\n            var oldInstanceHeights = this.state.eventInstanceHeights;\n            var newInstanceHeights = this.queryEventInstanceHeights();\n            var limitByContentHeight = props.dayMaxEvents === true || props.dayMaxEventRows === true;\n            this.setState({\n                // HACK to prevent oscillations of events being shown/hidden from max-event-rows\n                // Essentially, once you compute an element's height, never null-out.\n                // TODO: always display all events, as visibility:hidden?\n                eventInstanceHeights: (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, oldInstanceHeights), newInstanceHeights),\n                maxContentHeight: limitByContentHeight ? this.computeMaxContentHeight() : null\n            });\n        }\n    };\n    TableRow.prototype.queryEventInstanceHeights = function() {\n        var segElMap = this.segHarnessRefs.currentMap;\n        var eventInstanceHeights = {};\n        // get the max height amongst instance segs\n        for(var key in segElMap){\n            var height = Math.round(segElMap[key].getBoundingClientRect().height);\n            var instanceId = key.split(\":\")[0]; // deconstruct how renderFgSegs makes the key\n            eventInstanceHeights[instanceId] = Math.max(eventInstanceHeights[instanceId] || 0, height);\n        }\n        return eventInstanceHeights;\n    };\n    TableRow.prototype.computeMaxContentHeight = function() {\n        var firstKey = this.props.cells[0].key;\n        var cellEl = this.cellElRefs.currentMap[firstKey];\n        var fcContainerEl = this.fgElRefs.currentMap[firstKey];\n        return cellEl.getBoundingClientRect().bottom - fcContainerEl.getBoundingClientRect().top;\n    };\n    TableRow.prototype.getCellEls = function() {\n        var elMap = this.cellElRefs.currentMap;\n        return this.props.cells.map(function(cell) {\n            return elMap[cell.key];\n        });\n    };\n    return TableRow;\n}(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.DateComponent);\nTableRow1.addStateEquality({\n    eventInstanceHeights: _fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.isPropsEqual\n});\nfunction buildMirrorPlacements(mirrorSegs, colPlacements) {\n    if (!mirrorSegs.length) {\n        return [];\n    }\n    var topsByInstanceId = buildAbsoluteTopHash(colPlacements); // TODO: cache this at first render?\n    return mirrorSegs.map(function(seg) {\n        return {\n            seg: seg,\n            isVisible: true,\n            isAbsolute: true,\n            absoluteTop: topsByInstanceId[seg.eventRange.instance.instanceId],\n            marginTop: 0\n        };\n    });\n}\nfunction buildAbsoluteTopHash(colPlacements) {\n    var topsByInstanceId = {};\n    for(var _i = 0, colPlacements_1 = colPlacements; _i < colPlacements_1.length; _i++){\n        var placements = colPlacements_1[_i];\n        for(var _a = 0, placements_1 = placements; _a < placements_1.length; _a++){\n            var placement = placements_1[_a];\n            topsByInstanceId[placement.seg.eventRange.instance.instanceId] = placement.absoluteTop;\n        }\n    }\n    return topsByInstanceId;\n}\nvar Table1 = /** @class */ function(_super) {\n    var Table = function Table() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.splitBusinessHourSegs = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.memoize)(splitSegsByRow);\n        _this.splitBgEventSegs = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.memoize)(splitSegsByRow);\n        _this.splitFgEventSegs = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.memoize)(splitSegsByRow);\n        _this.splitDateSelectionSegs = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.memoize)(splitSegsByRow);\n        _this.splitEventDrag = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.memoize)(splitInteractionByRow);\n        _this.splitEventResize = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.memoize)(splitInteractionByRow);\n        _this.rowRefs = new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.RefMap();\n        _this.handleRootEl = function(rootEl) {\n            _this.rootEl = rootEl;\n            if (rootEl) {\n                _this.context.registerInteractiveComponent(_this, {\n                    el: rootEl,\n                    isHitComboAllowed: _this.props.isHitComboAllowed\n                });\n            } else {\n                _this.context.unregisterInteractiveComponent(_this);\n            }\n        };\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(Table, _super);\n    Table.prototype.render = function() {\n        var _this = this;\n        var props = this.props;\n        var dateProfile = props.dateProfile, dayMaxEventRows = props.dayMaxEventRows, dayMaxEvents = props.dayMaxEvents, expandRows = props.expandRows;\n        var rowCnt = props.cells.length;\n        var businessHourSegsByRow = this.splitBusinessHourSegs(props.businessHourSegs, rowCnt);\n        var bgEventSegsByRow = this.splitBgEventSegs(props.bgEventSegs, rowCnt);\n        var fgEventSegsByRow = this.splitFgEventSegs(props.fgEventSegs, rowCnt);\n        var dateSelectionSegsByRow = this.splitDateSelectionSegs(props.dateSelectionSegs, rowCnt);\n        var eventDragByRow = this.splitEventDrag(props.eventDrag, rowCnt);\n        var eventResizeByRow = this.splitEventResize(props.eventResize, rowCnt);\n        var limitViaBalanced = dayMaxEvents === true || dayMaxEventRows === true;\n        // if rows can't expand to fill fixed height, can't do balanced-height event limit\n        // TODO: best place to normalize these options?\n        if (limitViaBalanced && !expandRows) {\n            limitViaBalanced = false;\n            dayMaxEventRows = null;\n            dayMaxEvents = null;\n        }\n        var classNames = [\n            \"fc-daygrid-body\",\n            limitViaBalanced ? \"fc-daygrid-body-balanced\" : \"fc-daygrid-body-unbalanced\",\n            expandRows ? \"\" : \"fc-daygrid-body-natural\"\n        ];\n        return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n            className: classNames.join(\" \"),\n            ref: this.handleRootEl,\n            style: {\n                // these props are important to give this wrapper correct dimensions for interactions\n                // TODO: if we set it here, can we avoid giving to inner tables?\n                width: props.clientWidth,\n                minWidth: props.tableMinWidth\n            }\n        }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.NowTimer, {\n            unit: \"day\"\n        }, function(nowDate, todayRange) {\n            return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"table\", {\n                role: \"presentation\",\n                className: \"fc-scrollgrid-sync-table\",\n                style: {\n                    width: props.clientWidth,\n                    minWidth: props.tableMinWidth,\n                    height: expandRows ? props.clientHeight : \"\"\n                }\n            }, props.colGroupNode, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"tbody\", {\n                role: \"presentation\"\n            }, props.cells.map(function(cells, row) {\n                return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(TableRow1, {\n                    ref: _this.rowRefs.createRef(row),\n                    key: cells.length ? cells[0].date.toISOString() : row // in case there are no cells (like when resource view is loading)\n                    ,\n                    showDayNumbers: rowCnt > 1,\n                    showWeekNumbers: props.showWeekNumbers,\n                    todayRange: todayRange,\n                    dateProfile: dateProfile,\n                    cells: cells,\n                    renderIntro: props.renderRowIntro,\n                    businessHourSegs: businessHourSegsByRow[row],\n                    eventSelection: props.eventSelection,\n                    bgEventSegs: bgEventSegsByRow[row].filter(isSegAllDay),\n                    fgEventSegs: fgEventSegsByRow[row],\n                    dateSelectionSegs: dateSelectionSegsByRow[row],\n                    eventDrag: eventDragByRow[row],\n                    eventResize: eventResizeByRow[row],\n                    dayMaxEvents: dayMaxEvents,\n                    dayMaxEventRows: dayMaxEventRows,\n                    clientWidth: props.clientWidth,\n                    clientHeight: props.clientHeight,\n                    forPrint: props.forPrint\n                });\n            }))));\n        }));\n    };\n    // Hit System\n    // ----------------------------------------------------------------------------------------------------\n    Table.prototype.prepareHits = function() {\n        this.rowPositions = new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.PositionCache(this.rootEl, this.rowRefs.collect().map(function(rowObj) {\n            return rowObj.getCellEls()[0];\n        }), false, true);\n        this.colPositions = new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.PositionCache(this.rootEl, this.rowRefs.currentMap[0].getCellEls(), true, false);\n    };\n    Table.prototype.queryHit = function(positionLeft, positionTop) {\n        var _a = this, colPositions = _a.colPositions, rowPositions = _a.rowPositions;\n        var col = colPositions.leftToIndex(positionLeft);\n        var row = rowPositions.topToIndex(positionTop);\n        if (row != null && col != null) {\n            var cell = this.props.cells[row][col];\n            return {\n                dateProfile: this.props.dateProfile,\n                dateSpan: (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n                    range: this.getCellRange(row, col),\n                    allDay: true\n                }, cell.extraDateSpan),\n                dayEl: this.getCellEl(row, col),\n                rect: {\n                    left: colPositions.lefts[col],\n                    right: colPositions.rights[col],\n                    top: rowPositions.tops[row],\n                    bottom: rowPositions.bottoms[row]\n                },\n                layer: 0\n            };\n        }\n        return null;\n    };\n    Table.prototype.getCellEl = function(row, col) {\n        return this.rowRefs.currentMap[row].getCellEls()[col]; // TODO: not optimal\n    };\n    Table.prototype.getCellRange = function(row, col) {\n        var start = this.props.cells[row][col].date;\n        var end = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.addDays)(start, 1);\n        return {\n            start: start,\n            end: end\n        };\n    };\n    return Table;\n}(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.DateComponent);\nfunction isSegAllDay(seg) {\n    return seg.eventRange.def.allDay;\n}\nvar DayTableSlicer1 = /** @class */ function(_super) {\n    var DayTableSlicer = function DayTableSlicer() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.forceDayIfListItem = true;\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(DayTableSlicer, _super);\n    DayTableSlicer.prototype.sliceRange = function(dateRange, dayTableModel) {\n        return dayTableModel.sliceRange(dateRange);\n    };\n    return DayTableSlicer;\n}(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.Slicer);\nvar DayTable1 = /** @class */ function(_super) {\n    var DayTable = function DayTable() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.slicer = new DayTableSlicer1();\n        _this.tableRef = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(DayTable, _super);\n    DayTable.prototype.render = function() {\n        var _a = this, props = _a.props, context = _a.context;\n        return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(Table1, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n            ref: this.tableRef\n        }, this.slicer.sliceProps(props, props.dateProfile, props.nextDayThreshold, context, props.dayTableModel), {\n            dateProfile: props.dateProfile,\n            cells: props.dayTableModel.cells,\n            colGroupNode: props.colGroupNode,\n            tableMinWidth: props.tableMinWidth,\n            renderRowIntro: props.renderRowIntro,\n            dayMaxEvents: props.dayMaxEvents,\n            dayMaxEventRows: props.dayMaxEventRows,\n            showWeekNumbers: props.showWeekNumbers,\n            expandRows: props.expandRows,\n            headerAlignElRef: props.headerAlignElRef,\n            clientWidth: props.clientWidth,\n            clientHeight: props.clientHeight,\n            forPrint: props.forPrint\n        }));\n    };\n    return DayTable;\n}(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.DateComponent);\nvar DayTableView1 = /** @class */ function(_super) {\n    var DayTableView = function DayTableView() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.buildDayTableModel = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.memoize)(buildDayTableModel);\n        _this.headerRef = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n        _this.tableRef = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(DayTableView, _super);\n    DayTableView.prototype.render = function() {\n        var _this = this;\n        var _a = this.context, options = _a.options, dateProfileGenerator = _a.dateProfileGenerator;\n        var props = this.props;\n        var dayTableModel = this.buildDayTableModel(props.dateProfile, dateProfileGenerator);\n        var headerContent = options.dayHeaders && (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.DayHeader, {\n            ref: this.headerRef,\n            dateProfile: props.dateProfile,\n            dates: dayTableModel.headerDates,\n            datesRepDistinctDays: dayTableModel.rowCnt === 1\n        });\n        var bodyContent = function bodyContent(contentArg) {\n            return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(DayTable1, {\n                ref: _this.tableRef,\n                dateProfile: props.dateProfile,\n                dayTableModel: dayTableModel,\n                businessHours: props.businessHours,\n                dateSelection: props.dateSelection,\n                eventStore: props.eventStore,\n                eventUiBases: props.eventUiBases,\n                eventSelection: props.eventSelection,\n                eventDrag: props.eventDrag,\n                eventResize: props.eventResize,\n                nextDayThreshold: options.nextDayThreshold,\n                colGroupNode: contentArg.tableColGroupNode,\n                tableMinWidth: contentArg.tableMinWidth,\n                dayMaxEvents: options.dayMaxEvents,\n                dayMaxEventRows: options.dayMaxEventRows,\n                showWeekNumbers: options.weekNumbers,\n                expandRows: !props.isHeightAuto,\n                headerAlignElRef: _this.headerElRef,\n                clientWidth: contentArg.clientWidth,\n                clientHeight: contentArg.clientHeight,\n                forPrint: props.forPrint\n            });\n        };\n        return options.dayMinWidth ? this.renderHScrollLayout(headerContent, bodyContent, dayTableModel.colCnt, options.dayMinWidth) : this.renderSimpleLayout(headerContent, bodyContent);\n    };\n    return DayTableView;\n}(TableView1);\nfunction buildDayTableModel(dateProfile, dateProfileGenerator) {\n    var daySeries = new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.DaySeriesModel(dateProfile.renderRange, dateProfileGenerator);\n    return new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.DayTableModel(daySeries, /year|month|week/.test(dateProfile.currentRangeUnit));\n}\nvar TableDateProfileGenerator1 = /** @class */ function(_super) {\n    var TableDateProfileGenerator = function TableDateProfileGenerator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(TableDateProfileGenerator, _super);\n    // Computes the date range that will be rendered.\n    TableDateProfileGenerator.prototype.buildRenderRange = function(currentRange, currentRangeUnit, isRangeAllDay) {\n        var dateEnv = this.props.dateEnv;\n        var renderRange = _super.prototype.buildRenderRange.call(this, currentRange, currentRangeUnit, isRangeAllDay);\n        var start = renderRange.start;\n        var end = renderRange.end;\n        var endOfWeek;\n        // year and month views should be aligned with weeks. this is already done for week\n        if (/^(year|month)$/.test(currentRangeUnit)) {\n            start = dateEnv.startOfWeek(start);\n            // make end-of-week if not already\n            endOfWeek = dateEnv.startOfWeek(end);\n            if (endOfWeek.valueOf() !== end.valueOf()) {\n                end = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.addWeeks)(endOfWeek, 1);\n            }\n        }\n        // ensure 6 weeks\n        if (this.props.monthMode && this.props.fixedWeekCount) {\n            var rowCnt = Math.ceil((0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.diffWeeks)(start, end));\n            end = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.addWeeks)(end, 6 - rowCnt);\n        }\n        return {\n            start: start,\n            end: end\n        };\n    };\n    return TableDateProfileGenerator;\n}(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.DateProfileGenerator);\nvar main = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createPlugin)({\n    initialView: \"dayGridMonth\",\n    views: {\n        dayGrid: {\n            component: DayTableView1,\n            dateProfileGeneratorClass: TableDateProfileGenerator1\n        },\n        dayGridDay: {\n            type: \"dayGrid\",\n            duration: {\n                days: 1\n            }\n        },\n        dayGridWeek: {\n            type: \"dayGrid\",\n            duration: {\n                weeks: 1\n            }\n        },\n        dayGridMonth: {\n            type: \"dayGrid\",\n            duration: {\n                months: 1\n            },\n            monthMode: true,\n            fixedWeekCount: true\n        }\n    }\n});\n/* harmony default export */ __webpack_exports__[\"default\"] = (main);\n //# sourceMappingURL=main.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGZ1bGxjYWxlbmRhci9kYXlncmlkL21haW4uanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBOzs7O0VBSUUsQ0FDa0I7QUFFNHFCO0FBQ3JvQjtBQUUzRDt3SEFDd0gsQ0FDeEgsa0ZBQWtGO0FBQ2xGLCtDQUErQztBQUMvQyxJQUFJaUQsVUFBUyxHQUFHLGFBQWEsQ0FBRSxTQUFVQyxNQUFNLEVBQUU7UUFFcENELFNBQVMsR0FBbEIsU0FBU0EsU0FBUyxHQUFHO1FBQ2pCLElBQUlFLEtBQUssR0FBR0QsTUFBTSxLQUFLLElBQUksSUFBSUEsTUFBTSxDQUFDRSxLQUFLLENBQUMsSUFBSSxFQUFFQyxTQUFTLENBQUMsSUFBSSxJQUFJO1FBQ3BFRixLQUFLLENBQUNHLFdBQVcsR0FBR3RELCtEQUFTLEVBQUUsQ0FBQztRQUNoQyxPQUFPbUQsS0FBSyxDQUFDO0tBQ2hCO0lBTERMLGdEQUFTLENBQUNHLFNBQVMsRUFBRUMsTUFBTSxDQUFDLENBQUM7SUFNN0JELFNBQVMsQ0FBQ00sU0FBUyxDQUFDQyxrQkFBa0IsR0FBRyxTQUFVQyxnQkFBZ0IsRUFBRUMsV0FBVyxFQUFFO1FBQzlFLElBQUlDLEVBQUUsR0FBRyxJQUFJLEVBQUVDLEtBQUssR0FBR0QsRUFBRSxDQUFDQyxLQUFLLEVBQUVDLE9BQU8sR0FBR0YsRUFBRSxDQUFDRSxPQUFPO1FBQ3JELElBQUlDLFFBQVEsR0FBRyxFQUFFO1FBQ2pCLElBQUlDLGlCQUFpQixHQUFHOUQsMEVBQW9CLENBQUM0RCxPQUFPLENBQUNHLE9BQU8sQ0FBQztRQUM3RCxJQUFJUCxnQkFBZ0IsRUFBRTtZQUNsQkssUUFBUSxDQUFDRyxJQUFJLENBQUM7Z0JBQ1ZDLElBQUksRUFBRSxRQUFRO2dCQUNkQyxHQUFHLEVBQUUsUUFBUTtnQkFDYkMsUUFBUSxFQUFFTCxpQkFBaUI7Z0JBQzNCTSxLQUFLLEVBQUU7b0JBQ0hDLEtBQUssRUFBRSxJQUFJLENBQUNoQixXQUFXO29CQUN2QmlCLGNB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QztJQUNGLE9BQU9vTix5QkFBeUIsQ0FBQztDQUNwQyxDQUFDbFosc0VBQW9CLENBQUM7QUFFdkIsSUFBSTRaLElBQUksR0FBRzNaLGtFQUFZLENBQUM7SUFDcEI0WixXQUFXLEVBQUUsY0FBYztJQUMzQkMsS0FBSyxFQUFFO1FBQ0hDLE9BQU8sRUFBRTtZQUNMQyxTQUFTLEVBQUVsQyxhQUFZO1lBQ3ZCbUMseUJBQXlCLEVBQUVmLDBCQUF5QjtTQUN2RDtRQUNEZ0IsVUFBVSxFQUFFO1lBQ1I1WSxJQUFJLEVBQUUsU0FBUztZQUNmNlksUUFBUSxFQUFFO2dCQUFFQyxJQUFJLEVBQUUsQ0FBQzthQUFFO1NBQ3hCO1FBQ0RDLFdBQVcsRUFBRTtZQUNUL1ksSUFBSSxFQUFFLFNBQVM7WUFDZjZZLFFBQVEsRUFBRTtnQkFBRUcsS0FBSyxFQUFFLENBQUM7YUFBRTtTQUN6QjtRQUNEQyxZQUFZLEVBQUU7WUFDVmpaLElBQUksRUFBRSxTQUFTO1lBQ2Y2WSxRQUFRLEVBQUU7Z0JBQUVLLE1BQU0sRUFBRSxDQUFDO2FBQUU7WUFDdkJmLFNBQVMsRUFBRSxJQUFJO1lBQ2ZDLGNBQWMsRUFBRSxJQUFJO1NBQ3ZCO0tBQ0o7Q0FDSixDQUFDO0FBRUYsK0RBQWVFLElBQUksRUFBQztBQUNtRixDQUN2RyxnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BmdWxsY2FsZW5kYXIvZGF5Z3JpZC9tYWluLmpzPzJhNzIiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG5GdWxsQ2FsZW5kYXIgdjUuMTAuMlxuRG9jcyAmIExpY2Vuc2U6IGh0dHBzOi8vZnVsbGNhbGVuZGFyLmlvL1xuKGMpIDIwMjEgQWRhbSBTaGF3XG4qL1xuaW1wb3J0ICcuL21haW4uY3NzJztcblxuaW1wb3J0IHsgY3JlYXRlUmVmLCBnZXRTdGlja3lIZWFkZXJEYXRlcywgY3JlYXRlRWxlbWVudCwgVmlld1Jvb3QsIFNpbXBsZVNjcm9sbEdyaWQsIGdldFN0aWNreUZvb3RlclNjcm9sbGJhciwgcmVuZGVyU2Nyb2xsU2hpbSwgRGF0ZUNvbXBvbmVudCwgYnVpbGROYXZMaW5rQXR0cnMsIERheUNlbGxDb250ZW50LCBGcmFnbWVudCwgQmFzZUNvbXBvbmVudCwgY3JlYXRlRm9ybWF0dGVyLCBTdGFuZGFyZEV2ZW50LCBidWlsZFNlZ1RpbWVUZXh0LCBFdmVudFJvb3QsIGdldFNlZ0FuY2hvckF0dHJzLCBtZW1vaXplLCBNb3JlTGlua1Jvb3QsIGdldFNlZ01ldGEsIGNyZWF0ZUFyaWFDbGlja0F0dHJzLCBnZXRVbmlxdWVEb21JZCwgc2V0UmVmLCBEYXlDZWxsUm9vdCwgV2Vla051bWJlclJvb3QsIGJ1aWxkRW50cnlLZXksIGludGVyc2VjdFNwYW5zLCBTZWdIaWVyYXJjaHksIGludGVyc2VjdFJhbmdlcywgYWRkRGF5cywgUmVmTWFwLCBzb3J0RXZlbnRTZWdzLCBpc1Byb3BzRXF1YWwsIGJ1aWxkRXZlbnRSYW5nZUtleSwgQmdFdmVudCwgcmVuZGVyRmlsbCwgUG9zaXRpb25DYWNoZSwgTm93VGltZXIsIFNsaWNlciwgRGF5SGVhZGVyLCBEYXlTZXJpZXNNb2RlbCwgRGF5VGFibGVNb2RlbCwgYWRkV2Vla3MsIGRpZmZXZWVrcywgRGF0ZVByb2ZpbGVHZW5lcmF0b3IsIGNyZWF0ZVBsdWdpbiB9IGZyb20gJ0BmdWxsY2FsZW5kYXIvY29tbW9uJztcbmltcG9ydCB7IF9fZXh0ZW5kcywgX19hc3NpZ24sIF9fc3ByZWFkQXJyYXkgfSBmcm9tICd0c2xpYic7XG5cbi8qIEFuIGFic3RyYWN0IGNsYXNzIGZvciB0aGUgZGF5Z3JpZCB2aWV3cywgYXMgd2VsbCBhcyBtb250aCB2aWV3LiBSZW5kZXJzIG9uZSBvciBtb3JlIHJvd3Mgb2YgZGF5IGNlbGxzLlxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vLyBJdCBpcyBhIG1hbmFnZXIgZm9yIGEgVGFibGUgc3ViY29tcG9uZW50LCB3aGljaCBkb2VzIG1vc3Qgb2YgdGhlIGhlYXZ5IGxpZnRpbmcuXG4vLyBJdCBpcyByZXNwb25zaWJsZSBmb3IgbWFuYWdpbmcgd2lkdGgvaGVpZ2h0LlxudmFyIFRhYmxlVmlldyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVGFibGVWaWV3LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRhYmxlVmlldygpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmhlYWRlckVsUmVmID0gY3JlYXRlUmVmKCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgVGFibGVWaWV3LnByb3RvdHlwZS5yZW5kZXJTaW1wbGVMYXlvdXQgPSBmdW5jdGlvbiAoaGVhZGVyUm93Q29udGVudCwgYm9keUNvbnRlbnQpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgcHJvcHMgPSBfYS5wcm9wcywgY29udGV4dCA9IF9hLmNvbnRleHQ7XG4gICAgICAgIHZhciBzZWN0aW9ucyA9IFtdO1xuICAgICAgICB2YXIgc3RpY2t5SGVhZGVyRGF0ZXMgPSBnZXRTdGlja3lIZWFkZXJEYXRlcyhjb250ZXh0Lm9wdGlvbnMpO1xuICAgICAgICBpZiAoaGVhZGVyUm93Q29udGVudCkge1xuICAgICAgICAgICAgc2VjdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2hlYWRlcicsXG4gICAgICAgICAgICAgICAga2V5OiAnaGVhZGVyJyxcbiAgICAgICAgICAgICAgICBpc1N0aWNreTogc3RpY2t5SGVhZGVyRGF0ZXMsXG4gICAgICAgICAgICAgICAgY2h1bms6IHtcbiAgICAgICAgICAgICAgICAgICAgZWxSZWY6IHRoaXMuaGVhZGVyRWxSZWYsXG4gICAgICAgICAgICAgICAgICAgIHRhYmxlQ2xhc3NOYW1lOiAnZmMtY29sLWhlYWRlcicsXG4gICAgICAgICAgICAgICAgICAgIHJvd0NvbnRlbnQ6IGhlYWRlclJvd0NvbnRlbnQsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHNlY3Rpb25zLnB1c2goe1xuICAgICAgICAgICAgdHlwZTogJ2JvZHknLFxuICAgICAgICAgICAga2V5OiAnYm9keScsXG4gICAgICAgICAgICBsaXF1aWQ6IHRydWUsXG4gICAgICAgICAgICBjaHVuazogeyBjb250ZW50OiBib2R5Q29udGVudCB9LFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIChjcmVhdGVFbGVtZW50KFZpZXdSb290LCB7IHZpZXdTcGVjOiBjb250ZXh0LnZpZXdTcGVjIH0sIGZ1bmN0aW9uIChyb290RWxSZWYsIGNsYXNzTmFtZXMpIHsgcmV0dXJuIChjcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgcmVmOiByb290RWxSZWYsIGNsYXNzTmFtZTogWydmYy1kYXlncmlkJ10uY29uY2F0KGNsYXNzTmFtZXMpLmpvaW4oJyAnKSB9LFxuICAgICAgICAgICAgY3JlYXRlRWxlbWVudChTaW1wbGVTY3JvbGxHcmlkLCB7IGxpcXVpZDogIXByb3BzLmlzSGVpZ2h0QXV0byAmJiAhcHJvcHMuZm9yUHJpbnQsIGNvbGxhcHNpYmxlV2lkdGg6IHByb3BzLmZvclByaW50LCBjb2xzOiBbXSAvKiBUT0RPOiBtYWtlIG9wdGlvbmFsPyAqLywgc2VjdGlvbnM6IHNlY3Rpb25zIH0pKSk7IH0pKTtcbiAgICB9O1xuICAgIFRhYmxlVmlldy5wcm90b3R5cGUucmVuZGVySFNjcm9sbExheW91dCA9IGZ1bmN0aW9uIChoZWFkZXJSb3dDb250ZW50LCBib2R5Q29udGVudCwgY29sQ250LCBkYXlNaW5XaWR0aCkge1xuICAgICAgICB2YXIgU2Nyb2xsR3JpZCA9IHRoaXMuY29udGV4dC5wbHVnaW5Ib29rcy5zY3JvbGxHcmlkSW1wbDtcbiAgICAgICAgaWYgKCFTY3JvbGxHcmlkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIFNjcm9sbEdyaWQgaW1wbGVtZW50YXRpb24nKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX2EgPSB0aGlzLCBwcm9wcyA9IF9hLnByb3BzLCBjb250ZXh0ID0gX2EuY29udGV4dDtcbiAgICAgICAgdmFyIHN0aWNreUhlYWRlckRhdGVzID0gIXByb3BzLmZvclByaW50ICYmIGdldFN0aWNreUhlYWRlckRhdGVzKGNvbnRleHQub3B0aW9ucyk7XG4gICAgICAgIHZhciBzdGlja3lGb290ZXJTY3JvbGxiYXIgPSAhcHJvcHMuZm9yUHJpbnQgJiYgZ2V0U3RpY2t5Rm9vdGVyU2Nyb2xsYmFyKGNvbnRleHQub3B0aW9ucyk7XG4gICAgICAgIHZhciBzZWN0aW9ucyA9IFtdO1xuICAgICAgICBpZiAoaGVhZGVyUm93Q29udGVudCkge1xuICAgICAgICAgICAgc2VjdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2hlYWRlcicsXG4gICAgICAgICAgICAgICAga2V5OiAnaGVhZGVyJyxcbiAgICAgICAgICAgICAgICBpc1N0aWNreTogc3RpY2t5SGVhZGVyRGF0ZXMsXG4gICAgICAgICAgICAgICAgY2h1bmtzOiBbe1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiAnbWFpbicsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbFJlZjogdGhpcy5oZWFkZXJFbFJlZixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlQ2xhc3NOYW1lOiAnZmMtY29sLWhlYWRlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICByb3dDb250ZW50OiBoZWFkZXJSb3dDb250ZW50LFxuICAgICAgICAgICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHNlY3Rpb25zLnB1c2goe1xuICAgICAgICAgICAgdHlwZTogJ2JvZHknLFxuICAgICAgICAgICAga2V5OiAnYm9keScsXG4gICAgICAgICAgICBsaXF1aWQ6IHRydWUsXG4gICAgICAgICAgICBjaHVua3M6IFt7XG4gICAgICAgICAgICAgICAgICAgIGtleTogJ21haW4nLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBib2R5Q29udGVudCxcbiAgICAgICAgICAgICAgICB9XSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChzdGlja3lGb290ZXJTY3JvbGxiYXIpIHtcbiAgICAgICAgICAgIHNlY3Rpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdmb290ZXInLFxuICAgICAgICAgICAgICAgIGtleTogJ2Zvb3RlcicsXG4gICAgICAgICAgICAgICAgaXNTdGlja3k6IHRydWUsXG4gICAgICAgICAgICAgICAgY2h1bmtzOiBbe1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiAnbWFpbicsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiByZW5kZXJTY3JvbGxTaGltLFxuICAgICAgICAgICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoY3JlYXRlRWxlbWVudChWaWV3Um9vdCwgeyB2aWV3U3BlYzogY29udGV4dC52aWV3U3BlYyB9LCBmdW5jdGlvbiAocm9vdEVsUmVmLCBjbGFzc05hbWVzKSB7IHJldHVybiAoY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IHJlZjogcm9vdEVsUmVmLCBjbGFzc05hbWU6IFsnZmMtZGF5Z3JpZCddLmNvbmNhdChjbGFzc05hbWVzKS5qb2luKCcgJykgfSxcbiAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoU2Nyb2xsR3JpZCwgeyBsaXF1aWQ6ICFwcm9wcy5pc0hlaWdodEF1dG8gJiYgIXByb3BzLmZvclByaW50LCBjb2xsYXBzaWJsZVdpZHRoOiBwcm9wcy5mb3JQcmludCwgY29sR3JvdXBzOiBbeyBjb2xzOiBbeyBzcGFuOiBjb2xDbnQsIG1pbldpZHRoOiBkYXlNaW5XaWR0aCB9XSB9XSwgc2VjdGlvbnM6IHNlY3Rpb25zIH0pKSk7IH0pKTtcbiAgICB9O1xuICAgIHJldHVybiBUYWJsZVZpZXc7XG59KERhdGVDb21wb25lbnQpKTtcblxuZnVuY3Rpb24gc3BsaXRTZWdzQnlSb3coc2Vncywgcm93Q250KSB7XG4gICAgdmFyIGJ5Um93ID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByb3dDbnQ7IGkgKz0gMSkge1xuICAgICAgICBieVJvd1tpXSA9IFtdO1xuICAgIH1cbiAgICBmb3IgKHZhciBfaSA9IDAsIHNlZ3NfMSA9IHNlZ3M7IF9pIDwgc2Vnc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgc2VnID0gc2Vnc18xW19pXTtcbiAgICAgICAgYnlSb3dbc2VnLnJvd10ucHVzaChzZWcpO1xuICAgIH1cbiAgICByZXR1cm4gYnlSb3c7XG59XG5mdW5jdGlvbiBzcGxpdFNlZ3NCeUZpcnN0Q29sKHNlZ3MsIGNvbENudCkge1xuICAgIHZhciBieUNvbCA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29sQ250OyBpICs9IDEpIHtcbiAgICAgICAgYnlDb2xbaV0gPSBbXTtcbiAgICB9XG4gICAgZm9yICh2YXIgX2kgPSAwLCBzZWdzXzIgPSBzZWdzOyBfaSA8IHNlZ3NfMi5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIHNlZyA9IHNlZ3NfMltfaV07XG4gICAgICAgIGJ5Q29sW3NlZy5maXJzdENvbF0ucHVzaChzZWcpO1xuICAgIH1cbiAgICByZXR1cm4gYnlDb2w7XG59XG5mdW5jdGlvbiBzcGxpdEludGVyYWN0aW9uQnlSb3codWksIHJvd0NudCkge1xuICAgIHZhciBieVJvdyA9IFtdO1xuICAgIGlmICghdWkpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByb3dDbnQ7IGkgKz0gMSkge1xuICAgICAgICAgICAgYnlSb3dbaV0gPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJvd0NudDsgaSArPSAxKSB7XG4gICAgICAgICAgICBieVJvd1tpXSA9IHtcbiAgICAgICAgICAgICAgICBhZmZlY3RlZEluc3RhbmNlczogdWkuYWZmZWN0ZWRJbnN0YW5jZXMsXG4gICAgICAgICAgICAgICAgaXNFdmVudDogdWkuaXNFdmVudCxcbiAgICAgICAgICAgICAgICBzZWdzOiBbXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHVpLnNlZ3M7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgc2VnID0gX2FbX2ldO1xuICAgICAgICAgICAgYnlSb3dbc2VnLnJvd10uc2Vncy5wdXNoKHNlZyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJ5Um93O1xufVxuXG52YXIgVGFibGVDZWxsVG9wID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhUYWJsZUNlbGxUb3AsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVGFibGVDZWxsVG9wKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIFRhYmxlQ2VsbFRvcC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgICAgICB2YXIgbmF2TGlua0F0dHJzID0gYnVpbGROYXZMaW5rQXR0cnModGhpcy5jb250ZXh0LCBwcm9wcy5kYXRlKTtcbiAgICAgICAgcmV0dXJuIChjcmVhdGVFbGVtZW50KERheUNlbGxDb250ZW50LCB7IGRhdGU6IHByb3BzLmRhdGUsIGRhdGVQcm9maWxlOiBwcm9wcy5kYXRlUHJvZmlsZSwgdG9kYXlSYW5nZTogcHJvcHMudG9kYXlSYW5nZSwgc2hvd0RheU51bWJlcjogcHJvcHMuc2hvd0RheU51bWJlciwgZXh0cmFIb29rUHJvcHM6IHByb3BzLmV4dHJhSG9va1Byb3BzLCBkZWZhdWx0Q29udGVudDogcmVuZGVyVG9wSW5uZXIgfSwgZnVuY3Rpb24gKGlubmVyRWxSZWYsIGlubmVyQ29udGVudCkgeyByZXR1cm4gKChpbm5lckNvbnRlbnQgfHwgcHJvcHMuZm9yY2VEYXlUb3ApICYmIChjcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImZjLWRheWdyaWQtZGF5LXRvcFwiLCByZWY6IGlubmVyRWxSZWYgfSxcbiAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoXCJhXCIsIF9fYXNzaWduKHsgaWQ6IHByb3BzLmRheU51bWJlcklkLCBjbGFzc05hbWU6IFwiZmMtZGF5Z3JpZC1kYXktbnVtYmVyXCIgfSwgbmF2TGlua0F0dHJzKSwgaW5uZXJDb250ZW50IHx8IGNyZWF0ZUVsZW1lbnQoRnJhZ21lbnQsIG51bGwsIFwiXFx1MDBBMFwiKSkpKSk7IH0pKTtcbiAgICB9O1xuICAgIHJldHVybiBUYWJsZUNlbGxUb3A7XG59KEJhc2VDb21wb25lbnQpKTtcbmZ1bmN0aW9uIHJlbmRlclRvcElubmVyKHByb3BzKSB7XG4gICAgcmV0dXJuIHByb3BzLmRheU51bWJlclRleHQ7XG59XG5cbnZhciBERUZBVUxUX1RBQkxFX0VWRU5UX1RJTUVfRk9STUFUID0gY3JlYXRlRm9ybWF0dGVyKHtcbiAgICBob3VyOiAnbnVtZXJpYycsXG4gICAgbWludXRlOiAnMi1kaWdpdCcsXG4gICAgb21pdFplcm9NaW51dGU6IHRydWUsXG4gICAgbWVyaWRpZW06ICduYXJyb3cnLFxufSk7XG5mdW5jdGlvbiBoYXNMaXN0SXRlbURpc3BsYXkoc2VnKSB7XG4gICAgdmFyIGRpc3BsYXkgPSBzZWcuZXZlbnRSYW5nZS51aS5kaXNwbGF5O1xuICAgIHJldHVybiBkaXNwbGF5ID09PSAnbGlzdC1pdGVtJyB8fCAoZGlzcGxheSA9PT0gJ2F1dG8nICYmXG4gICAgICAgICFzZWcuZXZlbnRSYW5nZS5kZWYuYWxsRGF5ICYmXG4gICAgICAgIHNlZy5maXJzdENvbCA9PT0gc2VnLmxhc3RDb2wgJiYgLy8gY2FuJ3QgYmUgbXVsdGktZGF5XG4gICAgICAgIHNlZy5pc1N0YXJ0ICYmIC8vIFwiXG4gICAgICAgIHNlZy5pc0VuZCAvLyBcIlxuICAgICk7XG59XG5cbnZhciBUYWJsZUJsb2NrRXZlbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFRhYmxlQmxvY2tFdmVudCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUYWJsZUJsb2NrRXZlbnQoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgVGFibGVCbG9ja0V2ZW50LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICAgIHJldHVybiAoY3JlYXRlRWxlbWVudChTdGFuZGFyZEV2ZW50LCBfX2Fzc2lnbih7fSwgcHJvcHMsIHsgZXh0cmFDbGFzc05hbWVzOiBbJ2ZjLWRheWdyaWQtZXZlbnQnLCAnZmMtZGF5Z3JpZC1ibG9jay1ldmVudCcsICdmYy1oLWV2ZW50J10sIGRlZmF1bHRUaW1lRm9ybWF0OiBERUZBVUxUX1RBQkxFX0VWRU5UX1RJTUVfRk9STUFULCBkZWZhdWx0RGlzcGxheUV2ZW50RW5kOiBwcm9wcy5kZWZhdWx0RGlzcGxheUV2ZW50RW5kLCBkaXNhYmxlUmVzaXppbmc6ICFwcm9wcy5zZWcuZXZlbnRSYW5nZS5kZWYuYWxsRGF5IH0pKSk7XG4gICAgfTtcbiAgICByZXR1cm4gVGFibGVCbG9ja0V2ZW50O1xufShCYXNlQ29tcG9uZW50KSk7XG5cbnZhciBUYWJsZUxpc3RJdGVtRXZlbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFRhYmxlTGlzdEl0ZW1FdmVudCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUYWJsZUxpc3RJdGVtRXZlbnQoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgVGFibGVMaXN0SXRlbUV2ZW50LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIHByb3BzID0gX2EucHJvcHMsIGNvbnRleHQgPSBfYS5jb250ZXh0O1xuICAgICAgICB2YXIgdGltZUZvcm1hdCA9IGNvbnRleHQub3B0aW9ucy5ldmVudFRpbWVGb3JtYXQgfHwgREVGQVVMVF9UQUJMRV9FVkVOVF9USU1FX0ZPUk1BVDtcbiAgICAgICAgdmFyIHRpbWVUZXh0ID0gYnVpbGRTZWdUaW1lVGV4dChwcm9wcy5zZWcsIHRpbWVGb3JtYXQsIGNvbnRleHQsIHRydWUsIHByb3BzLmRlZmF1bHREaXNwbGF5RXZlbnRFbmQpO1xuICAgICAgICByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoRXZlbnRSb290LCB7IHNlZzogcHJvcHMuc2VnLCB0aW1lVGV4dDogdGltZVRleHQsIGRlZmF1bHRDb250ZW50OiByZW5kZXJJbm5lckNvbnRlbnQsIGlzRHJhZ2dpbmc6IHByb3BzLmlzRHJhZ2dpbmcsIGlzUmVzaXppbmc6IGZhbHNlLCBpc0RhdGVTZWxlY3Rpbmc6IGZhbHNlLCBpc1NlbGVjdGVkOiBwcm9wcy5pc1NlbGVjdGVkLCBpc1Bhc3Q6IHByb3BzLmlzUGFzdCwgaXNGdXR1cmU6IHByb3BzLmlzRnV0dXJlLCBpc1RvZGF5OiBwcm9wcy5pc1RvZGF5IH0sIGZ1bmN0aW9uIChyb290RWxSZWYsIGNsYXNzTmFtZXMsIGlubmVyRWxSZWYsIGlubmVyQ29udGVudCkgeyByZXR1cm4gKCAvLyB3ZSBkb24ndCB1c2Ugc3R5bGVzIVxuICAgICAgICBjcmVhdGVFbGVtZW50KFwiYVwiLCBfX2Fzc2lnbih7IGNsYXNzTmFtZTogWydmYy1kYXlncmlkLWV2ZW50JywgJ2ZjLWRheWdyaWQtZG90LWV2ZW50J10uY29uY2F0KGNsYXNzTmFtZXMpLmpvaW4oJyAnKSwgcmVmOiByb290RWxSZWYgfSwgZ2V0U2VnQW5jaG9yQXR0cnMocHJvcHMuc2VnLCBjb250ZXh0KSksIGlubmVyQ29udGVudCkpOyB9KSk7XG4gICAgfTtcbiAgICByZXR1cm4gVGFibGVMaXN0SXRlbUV2ZW50O1xufShCYXNlQ29tcG9uZW50KSk7XG5mdW5jdGlvbiByZW5kZXJJbm5lckNvbnRlbnQoaW5uZXJQcm9wcykge1xuICAgIHJldHVybiAoY3JlYXRlRWxlbWVudChGcmFnbWVudCwgbnVsbCxcbiAgICAgICAgY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJmYy1kYXlncmlkLWV2ZW50LWRvdFwiLCBzdHlsZTogeyBib3JkZXJDb2xvcjogaW5uZXJQcm9wcy5ib3JkZXJDb2xvciB8fCBpbm5lclByb3BzLmJhY2tncm91bmRDb2xvciB9IH0pLFxuICAgICAgICBpbm5lclByb3BzLnRpbWVUZXh0ICYmIChjcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImZjLWV2ZW50LXRpbWVcIiB9LCBpbm5lclByb3BzLnRpbWVUZXh0KSksXG4gICAgICAgIGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwiZmMtZXZlbnQtdGl0bGVcIiB9LCBpbm5lclByb3BzLmV2ZW50LnRpdGxlIHx8IGNyZWF0ZUVsZW1lbnQoRnJhZ21lbnQsIG51bGwsIFwiXFx1MDBBMFwiKSkpKTtcbn1cblxudmFyIFRhYmxlQ2VsbE1vcmVMaW5rID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhUYWJsZUNlbGxNb3JlTGluaywgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUYWJsZUNlbGxNb3JlTGluaygpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmNvbXBpbGVTZWdzID0gbWVtb2l6ZShjb21waWxlU2Vncyk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgVGFibGVDZWxsTW9yZUxpbmsucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICAgICAgdmFyIF9hID0gdGhpcy5jb21waWxlU2Vncyhwcm9wcy5zaW5nbGVQbGFjZW1lbnRzKSwgYWxsU2VncyA9IF9hLmFsbFNlZ3MsIGludmlzaWJsZVNlZ3MgPSBfYS5pbnZpc2libGVTZWdzO1xuICAgICAgICByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoTW9yZUxpbmtSb290LCB7IGRhdGVQcm9maWxlOiBwcm9wcy5kYXRlUHJvZmlsZSwgdG9kYXlSYW5nZTogcHJvcHMudG9kYXlSYW5nZSwgYWxsRGF5RGF0ZTogcHJvcHMuYWxsRGF5RGF0ZSwgbW9yZUNudDogcHJvcHMubW9yZUNudCwgYWxsU2VnczogYWxsU2VncywgaGlkZGVuU2VnczogaW52aXNpYmxlU2VncywgYWxpZ25tZW50RWxSZWY6IHByb3BzLmFsaWdubWVudEVsUmVmLCBhbGlnbkdyaWRUb3A6IHByb3BzLmFsaWduR3JpZFRvcCwgZXh0cmFEYXRlU3BhbjogcHJvcHMuZXh0cmFEYXRlU3BhbiwgcG9wb3ZlckNvbnRlbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgaXNGb3JjZWRJbnZpc2libGUgPSAocHJvcHMuZXZlbnREcmFnID8gcHJvcHMuZXZlbnREcmFnLmFmZmVjdGVkSW5zdGFuY2VzIDogbnVsbCkgfHxcbiAgICAgICAgICAgICAgICAgICAgKHByb3BzLmV2ZW50UmVzaXplID8gcHJvcHMuZXZlbnRSZXNpemUuYWZmZWN0ZWRJbnN0YW5jZXMgOiBudWxsKSB8fFxuICAgICAgICAgICAgICAgICAgICB7fTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoRnJhZ21lbnQsIG51bGwsIGFsbFNlZ3MubWFwKGZ1bmN0aW9uIChzZWcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlSWQgPSBzZWcuZXZlbnRSYW5nZS5pbnN0YW5jZS5pbnN0YW5jZUlkO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwiZmMtZGF5Z3JpZC1ldmVudC1oYXJuZXNzXCIsIGtleTogaW5zdGFuY2VJZCwgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmlsaXR5OiBpc0ZvcmNlZEludmlzaWJsZVtpbnN0YW5jZUlkXSA/ICdoaWRkZW4nIDogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICB9IH0sIGhhc0xpc3RJdGVtRGlzcGxheShzZWcpID8gKGNyZWF0ZUVsZW1lbnQoVGFibGVMaXN0SXRlbUV2ZW50LCBfX2Fzc2lnbih7IHNlZzogc2VnLCBpc0RyYWdnaW5nOiBmYWxzZSwgaXNTZWxlY3RlZDogaW5zdGFuY2VJZCA9PT0gcHJvcHMuZXZlbnRTZWxlY3Rpb24sIGRlZmF1bHREaXNwbGF5RXZlbnRFbmQ6IGZhbHNlIH0sIGdldFNlZ01ldGEoc2VnLCBwcm9wcy50b2RheVJhbmdlKSkpKSA6IChjcmVhdGVFbGVtZW50KFRhYmxlQmxvY2tFdmVudCwgX19hc3NpZ24oeyBzZWc6IHNlZywgaXNEcmFnZ2luZzogZmFsc2UsIGlzUmVzaXppbmc6IGZhbHNlLCBpc0RhdGVTZWxlY3Rpbmc6IGZhbHNlLCBpc1NlbGVjdGVkOiBpbnN0YW5jZUlkID09PSBwcm9wcy5ldmVudFNlbGVjdGlvbiwgZGVmYXVsdERpc3BsYXlFdmVudEVuZDogZmFsc2UgfSwgZ2V0U2VnTWV0YShzZWcsIHByb3BzLnRvZGF5UmFuZ2UpKSkpKSk7XG4gICAgICAgICAgICAgICAgfSkpKTtcbiAgICAgICAgICAgIH0gfSwgZnVuY3Rpb24gKHJvb3RFbFJlZiwgY2xhc3NOYW1lcywgaW5uZXJFbFJlZiwgaW5uZXJDb250ZW50LCBoYW5kbGVDbGljaywgdGl0bGUsIGlzRXhwYW5kZWQsIHBvcG92ZXJJZCkgeyByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoXCJhXCIsIF9fYXNzaWduKHsgcmVmOiByb290RWxSZWYsIGNsYXNzTmFtZTogWydmYy1kYXlncmlkLW1vcmUtbGluayddLmNvbmNhdChjbGFzc05hbWVzKS5qb2luKCcgJyksIHRpdGxlOiB0aXRsZSwgXCJhcmlhLWV4cGFuZGVkXCI6IGlzRXhwYW5kZWQsIFwiYXJpYS1jb250cm9sc1wiOiBwb3BvdmVySWQgfSwgY3JlYXRlQXJpYUNsaWNrQXR0cnMoaGFuZGxlQ2xpY2spKSwgaW5uZXJDb250ZW50KSk7IH0pKTtcbiAgICB9O1xuICAgIHJldHVybiBUYWJsZUNlbGxNb3JlTGluaztcbn0oQmFzZUNvbXBvbmVudCkpO1xuZnVuY3Rpb24gY29tcGlsZVNlZ3Moc2luZ2xlUGxhY2VtZW50cykge1xuICAgIHZhciBhbGxTZWdzID0gW107XG4gICAgdmFyIGludmlzaWJsZVNlZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDAsIHNpbmdsZVBsYWNlbWVudHNfMSA9IHNpbmdsZVBsYWNlbWVudHM7IF9pIDwgc2luZ2xlUGxhY2VtZW50c18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgcGxhY2VtZW50ID0gc2luZ2xlUGxhY2VtZW50c18xW19pXTtcbiAgICAgICAgYWxsU2Vncy5wdXNoKHBsYWNlbWVudC5zZWcpO1xuICAgICAgICBpZiAoIXBsYWNlbWVudC5pc1Zpc2libGUpIHtcbiAgICAgICAgICAgIGludmlzaWJsZVNlZ3MucHVzaChwbGFjZW1lbnQuc2VnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geyBhbGxTZWdzOiBhbGxTZWdzLCBpbnZpc2libGVTZWdzOiBpbnZpc2libGVTZWdzIH07XG59XG5cbnZhciBERUZBVUxUX1dFRUtfTlVNX0ZPUk1BVCA9IGNyZWF0ZUZvcm1hdHRlcih7IHdlZWs6ICduYXJyb3cnIH0pO1xudmFyIFRhYmxlQ2VsbCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVGFibGVDZWxsLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRhYmxlQ2VsbCgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnJvb3RFbFJlZiA9IGNyZWF0ZVJlZigpO1xuICAgICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGRheU51bWJlcklkOiBnZXRVbmlxdWVEb21JZCgpLFxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5oYW5kbGVSb290RWwgPSBmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgIHNldFJlZihfdGhpcy5yb290RWxSZWYsIGVsKTtcbiAgICAgICAgICAgIHNldFJlZihfdGhpcy5wcm9wcy5lbFJlZiwgZWwpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFRhYmxlQ2VsbC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBjb250ZXh0ID0gX2EuY29udGV4dCwgcHJvcHMgPSBfYS5wcm9wcywgc3RhdGUgPSBfYS5zdGF0ZSwgcm9vdEVsUmVmID0gX2Eucm9vdEVsUmVmO1xuICAgICAgICB2YXIgZGF0ZSA9IHByb3BzLmRhdGUsIGRhdGVQcm9maWxlID0gcHJvcHMuZGF0ZVByb2ZpbGU7XG4gICAgICAgIHZhciBuYXZMaW5rQXR0cnMgPSBidWlsZE5hdkxpbmtBdHRycyhjb250ZXh0LCBkYXRlLCAnd2VlaycpO1xuICAgICAgICByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoRGF5Q2VsbFJvb3QsIHsgZGF0ZTogZGF0ZSwgZGF0ZVByb2ZpbGU6IGRhdGVQcm9maWxlLCB0b2RheVJhbmdlOiBwcm9wcy50b2RheVJhbmdlLCBzaG93RGF5TnVtYmVyOiBwcm9wcy5zaG93RGF5TnVtYmVyLCBleHRyYUhvb2tQcm9wczogcHJvcHMuZXh0cmFIb29rUHJvcHMsIGVsUmVmOiB0aGlzLmhhbmRsZVJvb3RFbCB9LCBmdW5jdGlvbiAoZGF5RWxSZWYsIGRheUNsYXNzTmFtZXMsIHJvb3REYXRhQXR0cnMsIGlzRGlzYWJsZWQpIHsgcmV0dXJuIChjcmVhdGVFbGVtZW50KFwidGRcIiwgX19hc3NpZ24oeyByZWY6IGRheUVsUmVmLCByb2xlOiBcImdyaWRjZWxsXCIsIGNsYXNzTmFtZTogWydmYy1kYXlncmlkLWRheSddLmNvbmNhdChkYXlDbGFzc05hbWVzLCBwcm9wcy5leHRyYUNsYXNzTmFtZXMgfHwgW10pLmpvaW4oJyAnKSB9LCByb290RGF0YUF0dHJzLCBwcm9wcy5leHRyYURhdGFBdHRycywgKHByb3BzLnNob3dEYXlOdW1iZXIgPyB7ICdhcmlhLWxhYmVsbGVkYnknOiBzdGF0ZS5kYXlOdW1iZXJJZCB9IDoge30pKSxcbiAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwiZmMtZGF5Z3JpZC1kYXktZnJhbWUgZmMtc2Nyb2xsZ3JpZC1zeW5jLWlubmVyXCIsIHJlZjogcHJvcHMuaW5uZXJFbFJlZiAvKiBkaWZmZXJlbnQgZnJvbSBob29rIHN5c3RlbSEgUkVOQU1FICovIH0sXG4gICAgICAgICAgICAgICAgcHJvcHMuc2hvd1dlZWtOdW1iZXIgJiYgKGNyZWF0ZUVsZW1lbnQoV2Vla051bWJlclJvb3QsIHsgZGF0ZTogZGF0ZSwgZGVmYXVsdEZvcm1hdDogREVGQVVMVF9XRUVLX05VTV9GT1JNQVQgfSwgZnVuY3Rpb24gKHdlZWtFbFJlZiwgd2Vla0NsYXNzTmFtZXMsIGlubmVyRWxSZWYsIGlubmVyQ29udGVudCkgeyByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoXCJhXCIsIF9fYXNzaWduKHsgcmVmOiB3ZWVrRWxSZWYsIGNsYXNzTmFtZTogWydmYy1kYXlncmlkLXdlZWstbnVtYmVyJ10uY29uY2F0KHdlZWtDbGFzc05hbWVzKS5qb2luKCcgJykgfSwgbmF2TGlua0F0dHJzKSwgaW5uZXJDb250ZW50KSk7IH0pKSxcbiAgICAgICAgICAgICAgICAhaXNEaXNhYmxlZCAmJiAoY3JlYXRlRWxlbWVudChUYWJsZUNlbGxUb3AsIHsgZGF0ZTogZGF0ZSwgZGF0ZVByb2ZpbGU6IGRhdGVQcm9maWxlLCBzaG93RGF5TnVtYmVyOiBwcm9wcy5zaG93RGF5TnVtYmVyLCBkYXlOdW1iZXJJZDogc3RhdGUuZGF5TnVtYmVySWQsIGZvcmNlRGF5VG9wOiBwcm9wcy5mb3JjZURheVRvcCwgdG9kYXlSYW5nZTogcHJvcHMudG9kYXlSYW5nZSwgZXh0cmFIb29rUHJvcHM6IHByb3BzLmV4dHJhSG9va1Byb3BzIH0pKSxcbiAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImZjLWRheWdyaWQtZGF5LWV2ZW50c1wiLCByZWY6IHByb3BzLmZnQ29udGVudEVsUmVmIH0sXG4gICAgICAgICAgICAgICAgICAgIHByb3BzLmZnQ29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJmYy1kYXlncmlkLWRheS1ib3R0b21cIiwgc3R5bGU6IHsgbWFyZ2luVG9wOiBwcm9wcy5tb3JlTWFyZ2luVG9wIH0gfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoVGFibGVDZWxsTW9yZUxpbmssIHsgYWxsRGF5RGF0ZTogZGF0ZSwgc2luZ2xlUGxhY2VtZW50czogcHJvcHMuc2luZ2xlUGxhY2VtZW50cywgbW9yZUNudDogcHJvcHMubW9yZUNudCwgYWxpZ25tZW50RWxSZWY6IHJvb3RFbFJlZiwgYWxpZ25HcmlkVG9wOiAhcHJvcHMuc2hvd0RheU51bWJlciwgZXh0cmFEYXRlU3BhbjogcHJvcHMuZXh0cmFEYXRlU3BhbiwgZGF0ZVByb2ZpbGU6IHByb3BzLmRhdGVQcm9maWxlLCBldmVudFNlbGVjdGlvbjogcHJvcHMuZXZlbnRTZWxlY3Rpb24sIGV2ZW50RHJhZzogcHJvcHMuZXZlbnREcmFnLCBldmVudFJlc2l6ZTogcHJvcHMuZXZlbnRSZXNpemUsIHRvZGF5UmFuZ2U6IHByb3BzLnRvZGF5UmFuZ2UgfSkpKSxcbiAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImZjLWRheWdyaWQtZGF5LWJnXCIgfSwgcHJvcHMuYmdDb250ZW50KSkpKTsgfSkpO1xuICAgIH07XG4gICAgcmV0dXJuIFRhYmxlQ2VsbDtcbn0oRGF0ZUNvbXBvbmVudCkpO1xuXG5mdW5jdGlvbiBjb21wdXRlRmdTZWdQbGFjZW1lbnQoc2VncywgLy8gYXNzdW1lZCBhbHJlYWR5IHNvcnRlZFxuZGF5TWF4RXZlbnRzLCBkYXlNYXhFdmVudFJvd3MsIHN0cmljdE9yZGVyLCBldmVudEluc3RhbmNlSGVpZ2h0cywgbWF4Q29udGVudEhlaWdodCwgY2VsbHMpIHtcbiAgICB2YXIgaGllcmFyY2h5ID0gbmV3IERheUdyaWRTZWdIaWVyYXJjaHkoKTtcbiAgICBoaWVyYXJjaHkuYWxsb3dSZXNsaWNpbmcgPSB0cnVlO1xuICAgIGhpZXJhcmNoeS5zdHJpY3RPcmRlciA9IHN0cmljdE9yZGVyO1xuICAgIGlmIChkYXlNYXhFdmVudHMgPT09IHRydWUgfHwgZGF5TWF4RXZlbnRSb3dzID09PSB0cnVlKSB7XG4gICAgICAgIGhpZXJhcmNoeS5tYXhDb29yZCA9IG1heENvbnRlbnRIZWlnaHQ7XG4gICAgICAgIGhpZXJhcmNoeS5oaWRkZW5Db25zdW1lcyA9IHRydWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBkYXlNYXhFdmVudHMgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGhpZXJhcmNoeS5tYXhTdGFja0NudCA9IGRheU1heEV2ZW50cztcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGRheU1heEV2ZW50Um93cyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgaGllcmFyY2h5Lm1heFN0YWNrQ250ID0gZGF5TWF4RXZlbnRSb3dzO1xuICAgICAgICBoaWVyYXJjaHkuaGlkZGVuQ29uc3VtZXMgPSB0cnVlO1xuICAgIH1cbiAgICAvLyBjcmVhdGUgc2VnSW5wdXRzIG9ubHkgZm9yIHNlZ3Mgd2l0aCBrbm93biBoZWlnaHRzXG4gICAgdmFyIHNlZ0lucHV0cyA9IFtdO1xuICAgIHZhciB1bmtub3duSGVpZ2h0U2VncyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2Vncy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgc2VnID0gc2Vnc1tpXTtcbiAgICAgICAgdmFyIGluc3RhbmNlSWQgPSBzZWcuZXZlbnRSYW5nZS5pbnN0YW5jZS5pbnN0YW5jZUlkO1xuICAgICAgICB2YXIgZXZlbnRIZWlnaHQgPSBldmVudEluc3RhbmNlSGVpZ2h0c1tpbnN0YW5jZUlkXTtcbiAgICAgICAgaWYgKGV2ZW50SGVpZ2h0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHNlZ0lucHV0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICBpbmRleDogaSxcbiAgICAgICAgICAgICAgICB0aGlja25lc3M6IGV2ZW50SGVpZ2h0LFxuICAgICAgICAgICAgICAgIHNwYW46IHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHNlZy5maXJzdENvbCxcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBzZWcubGFzdENvbCArIDEsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdW5rbm93bkhlaWdodFNlZ3MucHVzaChzZWcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhciBoaWRkZW5FbnRyaWVzID0gaGllcmFyY2h5LmFkZFNlZ3Moc2VnSW5wdXRzKTtcbiAgICB2YXIgc2VnUmVjdHMgPSBoaWVyYXJjaHkudG9SZWN0cygpO1xuICAgIHZhciBfYSA9IHBsYWNlUmVjdHMoc2VnUmVjdHMsIHNlZ3MsIGNlbGxzKSwgc2luZ2xlQ29sUGxhY2VtZW50cyA9IF9hLnNpbmdsZUNvbFBsYWNlbWVudHMsIG11bHRpQ29sUGxhY2VtZW50cyA9IF9hLm11bHRpQ29sUGxhY2VtZW50cywgbGVmdG92ZXJNYXJnaW5zID0gX2EubGVmdG92ZXJNYXJnaW5zO1xuICAgIHZhciBtb3JlQ250cyA9IFtdO1xuICAgIHZhciBtb3JlTWFyZ2luVG9wcyA9IFtdO1xuICAgIC8vIGFkZCBzZWdzIHdpdGggdW5rbm93biBoZWlnaHRzXG4gICAgZm9yICh2YXIgX2kgPSAwLCB1bmtub3duSGVpZ2h0U2Vnc18xID0gdW5rbm93bkhlaWdodFNlZ3M7IF9pIDwgdW5rbm93bkhlaWdodFNlZ3NfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIHNlZyA9IHVua25vd25IZWlnaHRTZWdzXzFbX2ldO1xuICAgICAgICBtdWx0aUNvbFBsYWNlbWVudHNbc2VnLmZpcnN0Q29sXS5wdXNoKHtcbiAgICAgICAgICAgIHNlZzogc2VnLFxuICAgICAgICAgICAgaXNWaXNpYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGlzQWJzb2x1dGU6IHRydWUsXG4gICAgICAgICAgICBhYnNvbHV0ZVRvcDogMCxcbiAgICAgICAgICAgIG1hcmdpblRvcDogMCxcbiAgICAgICAgfSk7XG4gICAgICAgIGZvciAodmFyIGNvbCA9IHNlZy5maXJzdENvbDsgY29sIDw9IHNlZy5sYXN0Q29sOyBjb2wgKz0gMSkge1xuICAgICAgICAgICAgc2luZ2xlQ29sUGxhY2VtZW50c1tjb2xdLnB1c2goe1xuICAgICAgICAgICAgICAgIHNlZzogcmVzbGljZVNlZyhzZWcsIGNvbCwgY29sICsgMSwgY2VsbHMpLFxuICAgICAgICAgICAgICAgIGlzVmlzaWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgaXNBYnNvbHV0ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgYWJzb2x1dGVUb3A6IDAsXG4gICAgICAgICAgICAgICAgbWFyZ2luVG9wOiAwLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gYWRkIHRoZSBoaWRkZW4gZW50cmllc1xuICAgIGZvciAodmFyIGNvbCA9IDA7IGNvbCA8IGNlbGxzLmxlbmd0aDsgY29sICs9IDEpIHtcbiAgICAgICAgbW9yZUNudHMucHVzaCgwKTtcbiAgICB9XG4gICAgZm9yICh2YXIgX2IgPSAwLCBoaWRkZW5FbnRyaWVzXzEgPSBoaWRkZW5FbnRyaWVzOyBfYiA8IGhpZGRlbkVudHJpZXNfMS5sZW5ndGg7IF9iKyspIHtcbiAgICAgICAgdmFyIGhpZGRlbkVudHJ5ID0gaGlkZGVuRW50cmllc18xW19iXTtcbiAgICAgICAgdmFyIHNlZyA9IHNlZ3NbaGlkZGVuRW50cnkuaW5kZXhdO1xuICAgICAgICB2YXIgaGlkZGVuU3BhbiA9IGhpZGRlbkVudHJ5LnNwYW47XG4gICAgICAgIG11bHRpQ29sUGxhY2VtZW50c1toaWRkZW5TcGFuLnN0YXJ0XS5wdXNoKHtcbiAgICAgICAgICAgIHNlZzogcmVzbGljZVNlZyhzZWcsIGhpZGRlblNwYW4uc3RhcnQsIGhpZGRlblNwYW4uZW5kLCBjZWxscyksXG4gICAgICAgICAgICBpc1Zpc2libGU6IGZhbHNlLFxuICAgICAgICAgICAgaXNBYnNvbHV0ZTogdHJ1ZSxcbiAgICAgICAgICAgIGFic29sdXRlVG9wOiAwLFxuICAgICAgICAgICAgbWFyZ2luVG9wOiAwLFxuICAgICAgICB9KTtcbiAgICAgICAgZm9yICh2YXIgY29sID0gaGlkZGVuU3Bhbi5zdGFydDsgY29sIDwgaGlkZGVuU3Bhbi5lbmQ7IGNvbCArPSAxKSB7XG4gICAgICAgICAgICBtb3JlQ250c1tjb2xdICs9IDE7XG4gICAgICAgICAgICBzaW5nbGVDb2xQbGFjZW1lbnRzW2NvbF0ucHVzaCh7XG4gICAgICAgICAgICAgICAgc2VnOiByZXNsaWNlU2VnKHNlZywgY29sLCBjb2wgKyAxLCBjZWxscyksXG4gICAgICAgICAgICAgICAgaXNWaXNpYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpc0Fic29sdXRlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBhYnNvbHV0ZVRvcDogMCxcbiAgICAgICAgICAgICAgICBtYXJnaW5Ub3A6IDAsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBkZWFsIHdpdGggbGVmdG92ZXIgbWFyZ2luc1xuICAgIGZvciAodmFyIGNvbCA9IDA7IGNvbCA8IGNlbGxzLmxlbmd0aDsgY29sICs9IDEpIHtcbiAgICAgICAgbW9yZU1hcmdpblRvcHMucHVzaChsZWZ0b3Zlck1hcmdpbnNbY29sXSk7XG4gICAgfVxuICAgIHJldHVybiB7IHNpbmdsZUNvbFBsYWNlbWVudHM6IHNpbmdsZUNvbFBsYWNlbWVudHMsIG11bHRpQ29sUGxhY2VtZW50czogbXVsdGlDb2xQbGFjZW1lbnRzLCBtb3JlQ250czogbW9yZUNudHMsIG1vcmVNYXJnaW5Ub3BzOiBtb3JlTWFyZ2luVG9wcyB9O1xufVxuLy8gcmVjdHMgb3JkZXJlZCBieSB0b3AgY29vcmQsIHRoZW4gbGVmdFxuZnVuY3Rpb24gcGxhY2VSZWN0cyhhbGxSZWN0cywgc2VncywgY2VsbHMpIHtcbiAgICB2YXIgcmVjdHNCeUVhY2hDb2wgPSBncm91cFJlY3RzQnlFYWNoQ29sKGFsbFJlY3RzLCBjZWxscy5sZW5ndGgpO1xuICAgIHZhciBzaW5nbGVDb2xQbGFjZW1lbnRzID0gW107XG4gICAgdmFyIG11bHRpQ29sUGxhY2VtZW50cyA9IFtdO1xuICAgIHZhciBsZWZ0b3Zlck1hcmdpbnMgPSBbXTtcbiAgICBmb3IgKHZhciBjb2wgPSAwOyBjb2wgPCBjZWxscy5sZW5ndGg7IGNvbCArPSAxKSB7XG4gICAgICAgIHZhciByZWN0cyA9IHJlY3RzQnlFYWNoQ29sW2NvbF07XG4gICAgICAgIC8vIGNvbXB1dGUgYWxsIHN0YXRpYyBzZWdzIGluIHNpbmdsZVBsYWNlbWVudHNcbiAgICAgICAgdmFyIHNpbmdsZVBsYWNlbWVudHMgPSBbXTtcbiAgICAgICAgdmFyIGN1cnJlbnRIZWlnaHQgPSAwO1xuICAgICAgICB2YXIgY3VycmVudE1hcmdpblRvcCA9IDA7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgcmVjdHNfMSA9IHJlY3RzOyBfaSA8IHJlY3RzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgcmVjdCA9IHJlY3RzXzFbX2ldO1xuICAgICAgICAgICAgdmFyIHNlZyA9IHNlZ3NbcmVjdC5pbmRleF07XG4gICAgICAgICAgICBzaW5nbGVQbGFjZW1lbnRzLnB1c2goe1xuICAgICAgICAgICAgICAgIHNlZzogcmVzbGljZVNlZyhzZWcsIGNvbCwgY29sICsgMSwgY2VsbHMpLFxuICAgICAgICAgICAgICAgIGlzVmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpc0Fic29sdXRlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBhYnNvbHV0ZVRvcDogcmVjdC5sZXZlbENvb3JkLFxuICAgICAgICAgICAgICAgIG1hcmdpblRvcDogcmVjdC5sZXZlbENvb3JkIC0gY3VycmVudEhlaWdodCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY3VycmVudEhlaWdodCA9IHJlY3QubGV2ZWxDb29yZCArIHJlY3QudGhpY2tuZXNzO1xuICAgICAgICB9XG4gICAgICAgIC8vIGNvbXB1dGUgbWl4ZWQgc3RhdGljL2Fic29sdXRlIHNlZ3MgaW4gbXVsdGlQbGFjZW1lbnRzXG4gICAgICAgIHZhciBtdWx0aVBsYWNlbWVudHMgPSBbXTtcbiAgICAgICAgY3VycmVudEhlaWdodCA9IDA7XG4gICAgICAgIGN1cnJlbnRNYXJnaW5Ub3AgPSAwO1xuICAgICAgICBmb3IgKHZhciBfYSA9IDAsIHJlY3RzXzIgPSByZWN0czsgX2EgPCByZWN0c18yLmxlbmd0aDsgX2ErKykge1xuICAgICAgICAgICAgdmFyIHJlY3QgPSByZWN0c18yW19hXTtcbiAgICAgICAgICAgIHZhciBzZWcgPSBzZWdzW3JlY3QuaW5kZXhdO1xuICAgICAgICAgICAgdmFyIGlzQWJzb2x1dGUgPSByZWN0LnNwYW4uZW5kIC0gcmVjdC5zcGFuLnN0YXJ0ID4gMTsgLy8gbXVsdGktY29sdW1uP1xuICAgICAgICAgICAgdmFyIGlzRmlyc3RDb2wgPSByZWN0LnNwYW4uc3RhcnQgPT09IGNvbDtcbiAgICAgICAgICAgIGN1cnJlbnRNYXJnaW5Ub3AgKz0gcmVjdC5sZXZlbENvb3JkIC0gY3VycmVudEhlaWdodDsgLy8gYW1vdW50IG9mIHNwYWNlIHNpbmNlIGJvdHRvbSBvZiBwcmV2aW91cyBzZWdcbiAgICAgICAgICAgIGN1cnJlbnRIZWlnaHQgPSByZWN0LmxldmVsQ29vcmQgKyByZWN0LnRoaWNrbmVzczsgLy8gaGVpZ2h0IHdpbGwgbm93IGJlIGJvdHRvbSBvZiBjdXJyZW50IHNlZ1xuICAgICAgICAgICAgaWYgKGlzQWJzb2x1dGUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50TWFyZ2luVG9wICs9IHJlY3QudGhpY2tuZXNzO1xuICAgICAgICAgICAgICAgIGlmIChpc0ZpcnN0Q29sKSB7XG4gICAgICAgICAgICAgICAgICAgIG11bHRpUGxhY2VtZW50cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlZzogcmVzbGljZVNlZyhzZWcsIHJlY3Quc3Bhbi5zdGFydCwgcmVjdC5zcGFuLmVuZCwgY2VsbHMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNWaXNpYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNBYnNvbHV0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFic29sdXRlVG9wOiByZWN0LmxldmVsQ29vcmQsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5Ub3A6IDAsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzRmlyc3RDb2wpIHtcbiAgICAgICAgICAgICAgICBtdWx0aVBsYWNlbWVudHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHNlZzogcmVzbGljZVNlZyhzZWcsIHJlY3Quc3Bhbi5zdGFydCwgcmVjdC5zcGFuLmVuZCwgY2VsbHMpLFxuICAgICAgICAgICAgICAgICAgICBpc1Zpc2libGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGlzQWJzb2x1dGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBhYnNvbHV0ZVRvcDogcmVjdC5sZXZlbENvb3JkLFxuICAgICAgICAgICAgICAgICAgICBtYXJnaW5Ub3A6IGN1cnJlbnRNYXJnaW5Ub3AsIC8vIGNsYWltIHRoZSBtYXJnaW5cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjdXJyZW50TWFyZ2luVG9wID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzaW5nbGVDb2xQbGFjZW1lbnRzLnB1c2goc2luZ2xlUGxhY2VtZW50cyk7XG4gICAgICAgIG11bHRpQ29sUGxhY2VtZW50cy5wdXNoKG11bHRpUGxhY2VtZW50cyk7XG4gICAgICAgIGxlZnRvdmVyTWFyZ2lucy5wdXNoKGN1cnJlbnRNYXJnaW5Ub3ApO1xuICAgIH1cbiAgICByZXR1cm4geyBzaW5nbGVDb2xQbGFjZW1lbnRzOiBzaW5nbGVDb2xQbGFjZW1lbnRzLCBtdWx0aUNvbFBsYWNlbWVudHM6IG11bHRpQ29sUGxhY2VtZW50cywgbGVmdG92ZXJNYXJnaW5zOiBsZWZ0b3Zlck1hcmdpbnMgfTtcbn1cbmZ1bmN0aW9uIGdyb3VwUmVjdHNCeUVhY2hDb2wocmVjdHMsIGNvbENudCkge1xuICAgIHZhciByZWN0c0J5RWFjaENvbCA9IFtdO1xuICAgIGZvciAodmFyIGNvbCA9IDA7IGNvbCA8IGNvbENudDsgY29sICs9IDEpIHtcbiAgICAgICAgcmVjdHNCeUVhY2hDb2wucHVzaChbXSk7XG4gICAgfVxuICAgIGZvciAodmFyIF9pID0gMCwgcmVjdHNfMyA9IHJlY3RzOyBfaSA8IHJlY3RzXzMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciByZWN0ID0gcmVjdHNfM1tfaV07XG4gICAgICAgIGZvciAodmFyIGNvbCA9IHJlY3Quc3Bhbi5zdGFydDsgY29sIDwgcmVjdC5zcGFuLmVuZDsgY29sICs9IDEpIHtcbiAgICAgICAgICAgIHJlY3RzQnlFYWNoQ29sW2NvbF0ucHVzaChyZWN0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVjdHNCeUVhY2hDb2w7XG59XG5mdW5jdGlvbiByZXNsaWNlU2VnKHNlZywgc3BhblN0YXJ0LCBzcGFuRW5kLCBjZWxscykge1xuICAgIGlmIChzZWcuZmlyc3RDb2wgPT09IHNwYW5TdGFydCAmJiBzZWcubGFzdENvbCA9PT0gc3BhbkVuZCAtIDEpIHtcbiAgICAgICAgcmV0dXJuIHNlZztcbiAgICB9XG4gICAgdmFyIGV2ZW50UmFuZ2UgPSBzZWcuZXZlbnRSYW5nZTtcbiAgICB2YXIgb3JpZ1JhbmdlID0gZXZlbnRSYW5nZS5yYW5nZTtcbiAgICB2YXIgc2xpY2VkUmFuZ2UgPSBpbnRlcnNlY3RSYW5nZXMob3JpZ1JhbmdlLCB7XG4gICAgICAgIHN0YXJ0OiBjZWxsc1tzcGFuU3RhcnRdLmRhdGUsXG4gICAgICAgIGVuZDogYWRkRGF5cyhjZWxsc1tzcGFuRW5kIC0gMV0uZGF0ZSwgMSksXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBzZWcpLCB7IGZpcnN0Q29sOiBzcGFuU3RhcnQsIGxhc3RDb2w6IHNwYW5FbmQgLSAxLCBldmVudFJhbmdlOiB7XG4gICAgICAgICAgICBkZWY6IGV2ZW50UmFuZ2UuZGVmLFxuICAgICAgICAgICAgdWk6IF9fYXNzaWduKF9fYXNzaWduKHt9LCBldmVudFJhbmdlLnVpKSwgeyBkdXJhdGlvbkVkaXRhYmxlOiBmYWxzZSB9KSxcbiAgICAgICAgICAgIGluc3RhbmNlOiBldmVudFJhbmdlLmluc3RhbmNlLFxuICAgICAgICAgICAgcmFuZ2U6IHNsaWNlZFJhbmdlLFxuICAgICAgICB9LCBpc1N0YXJ0OiBzZWcuaXNTdGFydCAmJiBzbGljZWRSYW5nZS5zdGFydC52YWx1ZU9mKCkgPT09IG9yaWdSYW5nZS5zdGFydC52YWx1ZU9mKCksIGlzRW5kOiBzZWcuaXNFbmQgJiYgc2xpY2VkUmFuZ2UuZW5kLnZhbHVlT2YoKSA9PT0gb3JpZ1JhbmdlLmVuZC52YWx1ZU9mKCkgfSk7XG59XG52YXIgRGF5R3JpZFNlZ0hpZXJhcmNoeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRGF5R3JpZFNlZ0hpZXJhcmNoeSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBEYXlHcmlkU2VnSGllcmFyY2h5KCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgLy8gY29uZmlnXG4gICAgICAgIF90aGlzLmhpZGRlbkNvbnN1bWVzID0gZmFsc2U7XG4gICAgICAgIC8vIGFsbG93cyB1cyB0byBrZWVwIGhpZGRlbiBlbnRyaWVzIGluIHRoZSBoaWVyYXJjaHkgc28gdGhleSB0YWtlIHVwIHNwYWNlXG4gICAgICAgIF90aGlzLmZvcmNlSGlkZGVuID0ge307XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRGF5R3JpZFNlZ0hpZXJhcmNoeS5wcm90b3R5cGUuYWRkU2VncyA9IGZ1bmN0aW9uIChzZWdJbnB1dHMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGhpZGRlblNlZ3MgPSBfc3VwZXIucHJvdG90eXBlLmFkZFNlZ3MuY2FsbCh0aGlzLCBzZWdJbnB1dHMpO1xuICAgICAgICB2YXIgZW50cmllc0J5TGV2ZWwgPSB0aGlzLmVudHJpZXNCeUxldmVsO1xuICAgICAgICB2YXIgZXhjbHVkZUhpZGRlbiA9IGZ1bmN0aW9uIChlbnRyeSkgeyByZXR1cm4gIV90aGlzLmZvcmNlSGlkZGVuW2J1aWxkRW50cnlLZXkoZW50cnkpXTsgfTtcbiAgICAgICAgLy8gcmVtb3ZlIHRoZSBmb3JjZWQtaGlkZGVuIHNlZ3NcbiAgICAgICAgZm9yICh2YXIgbGV2ZWwgPSAwOyBsZXZlbCA8IGVudHJpZXNCeUxldmVsLmxlbmd0aDsgbGV2ZWwgKz0gMSkge1xuICAgICAgICAgICAgZW50cmllc0J5TGV2ZWxbbGV2ZWxdID0gZW50cmllc0J5TGV2ZWxbbGV2ZWxdLmZpbHRlcihleGNsdWRlSGlkZGVuKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGlkZGVuU2VncztcbiAgICB9O1xuICAgIERheUdyaWRTZWdIaWVyYXJjaHkucHJvdG90eXBlLmhhbmRsZUludmFsaWRJbnNlcnRpb24gPSBmdW5jdGlvbiAoaW5zZXJ0aW9uLCBlbnRyeSwgaGlkZGVuRW50cmllcykge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBlbnRyaWVzQnlMZXZlbCA9IF9hLmVudHJpZXNCeUxldmVsLCBmb3JjZUhpZGRlbiA9IF9hLmZvcmNlSGlkZGVuO1xuICAgICAgICB2YXIgdG91Y2hpbmdFbnRyeSA9IGluc2VydGlvbi50b3VjaGluZ0VudHJ5LCB0b3VjaGluZ0xldmVsID0gaW5zZXJ0aW9uLnRvdWNoaW5nTGV2ZWwsIHRvdWNoaW5nTGF0ZXJhbCA9IGluc2VydGlvbi50b3VjaGluZ0xhdGVyYWw7XG4gICAgICAgIGlmICh0aGlzLmhpZGRlbkNvbnN1bWVzICYmIHRvdWNoaW5nRW50cnkpIHtcbiAgICAgICAgICAgIHZhciB0b3VjaGluZ0VudHJ5SWQgPSBidWlsZEVudHJ5S2V5KHRvdWNoaW5nRW50cnkpO1xuICAgICAgICAgICAgLy8gaWYgbm90IGFscmVhZHkgaGlkZGVuXG4gICAgICAgICAgICBpZiAoIWZvcmNlSGlkZGVuW3RvdWNoaW5nRW50cnlJZF0pIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5hbGxvd1Jlc2xpY2luZykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGxhY2Vob2xkZXJFbnRyeSA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCB0b3VjaGluZ0VudHJ5KSwgeyBzcGFuOiBpbnRlcnNlY3RTcGFucyh0b3VjaGluZ0VudHJ5LnNwYW4sIGVudHJ5LnNwYW4pIH0pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGxhY2Vob2xkZXJFbnRyeUlkID0gYnVpbGRFbnRyeUtleShwbGFjZWhvbGRlckVudHJ5KTtcbiAgICAgICAgICAgICAgICAgICAgZm9yY2VIaWRkZW5bcGxhY2Vob2xkZXJFbnRyeUlkXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGVudHJpZXNCeUxldmVsW3RvdWNoaW5nTGV2ZWxdW3RvdWNoaW5nTGF0ZXJhbF0gPSBwbGFjZWhvbGRlckVudHJ5OyAvLyByZXBsYWNlIHRvdWNoaW5nRW50cnkgd2l0aCBvdXIgcGxhY2Vob2xkZXJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zcGxpdEVudHJ5KHRvdWNoaW5nRW50cnksIGVudHJ5LCBoaWRkZW5FbnRyaWVzKTsgLy8gc3BsaXQgdXAgdGhlIHRvdWNoaW5nRW50cnksIHJlaW5zZXJ0IGl0XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmb3JjZUhpZGRlblt0b3VjaGluZ0VudHJ5SWRdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaGlkZGVuRW50cmllcy5wdXNoKHRvdWNoaW5nRW50cnkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5oYW5kbGVJbnZhbGlkSW5zZXJ0aW9uLmNhbGwodGhpcywgaW5zZXJ0aW9uLCBlbnRyeSwgaGlkZGVuRW50cmllcyk7XG4gICAgfTtcbiAgICByZXR1cm4gRGF5R3JpZFNlZ0hpZXJhcmNoeTtcbn0oU2VnSGllcmFyY2h5KSk7XG5cbnZhciBUYWJsZVJvdyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVGFibGVSb3csIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVGFibGVSb3coKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5jZWxsRWxSZWZzID0gbmV3IFJlZk1hcCgpOyAvLyB0aGUgPHRkPlxuICAgICAgICBfdGhpcy5mcmFtZUVsUmVmcyA9IG5ldyBSZWZNYXAoKTsgLy8gdGhlIGZjLWRheWdyaWQtZGF5LWZyYW1lXG4gICAgICAgIF90aGlzLmZnRWxSZWZzID0gbmV3IFJlZk1hcCgpOyAvLyB0aGUgZmMtZGF5Z3JpZC1kYXktZXZlbnRzXG4gICAgICAgIF90aGlzLnNlZ0hhcm5lc3NSZWZzID0gbmV3IFJlZk1hcCgpOyAvLyBpbmRleGVkIGJ5IFwiaW5zdGFuY2VJZDpmaXJzdENvbFwiXG4gICAgICAgIF90aGlzLnJvb3RFbFJlZiA9IGNyZWF0ZVJlZigpO1xuICAgICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGZyYW1lUG9zaXRpb25zOiBudWxsLFxuICAgICAgICAgICAgbWF4Q29udGVudEhlaWdodDogbnVsbCxcbiAgICAgICAgICAgIGV2ZW50SW5zdGFuY2VIZWlnaHRzOiB7fSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBUYWJsZVJvdy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBwcm9wcyA9IF9hLnByb3BzLCBzdGF0ZSA9IF9hLnN0YXRlLCBjb250ZXh0ID0gX2EuY29udGV4dDtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBjb250ZXh0Lm9wdGlvbnM7XG4gICAgICAgIHZhciBjb2xDbnQgPSBwcm9wcy5jZWxscy5sZW5ndGg7XG4gICAgICAgIHZhciBidXNpbmVzc0hvdXJzQnlDb2wgPSBzcGxpdFNlZ3NCeUZpcnN0Q29sKHByb3BzLmJ1c2luZXNzSG91clNlZ3MsIGNvbENudCk7XG4gICAgICAgIHZhciBiZ0V2ZW50U2Vnc0J5Q29sID0gc3BsaXRTZWdzQnlGaXJzdENvbChwcm9wcy5iZ0V2ZW50U2VncywgY29sQ250KTtcbiAgICAgICAgdmFyIGhpZ2hsaWdodFNlZ3NCeUNvbCA9IHNwbGl0U2Vnc0J5Rmlyc3RDb2wodGhpcy5nZXRIaWdobGlnaHRTZWdzKCksIGNvbENudCk7XG4gICAgICAgIHZhciBtaXJyb3JTZWdzQnlDb2wgPSBzcGxpdFNlZ3NCeUZpcnN0Q29sKHRoaXMuZ2V0TWlycm9yU2VncygpLCBjb2xDbnQpO1xuICAgICAgICB2YXIgX2IgPSBjb21wdXRlRmdTZWdQbGFjZW1lbnQoc29ydEV2ZW50U2Vncyhwcm9wcy5mZ0V2ZW50U2Vncywgb3B0aW9ucy5ldmVudE9yZGVyKSwgcHJvcHMuZGF5TWF4RXZlbnRzLCBwcm9wcy5kYXlNYXhFdmVudFJvd3MsIG9wdGlvbnMuZXZlbnRPcmRlclN0cmljdCwgc3RhdGUuZXZlbnRJbnN0YW5jZUhlaWdodHMsIHN0YXRlLm1heENvbnRlbnRIZWlnaHQsIHByb3BzLmNlbGxzKSwgc2luZ2xlQ29sUGxhY2VtZW50cyA9IF9iLnNpbmdsZUNvbFBsYWNlbWVudHMsIG11bHRpQ29sUGxhY2VtZW50cyA9IF9iLm11bHRpQ29sUGxhY2VtZW50cywgbW9yZUNudHMgPSBfYi5tb3JlQ250cywgbW9yZU1hcmdpblRvcHMgPSBfYi5tb3JlTWFyZ2luVG9wcztcbiAgICAgICAgdmFyIGlzRm9yY2VkSW52aXNpYmxlID0gLy8gVE9ETzogbWVzc3kgd2F5IHRvIGNvbXB1dGUgdGhpc1xuICAgICAgICAgKHByb3BzLmV2ZW50RHJhZyAmJiBwcm9wcy5ldmVudERyYWcuYWZmZWN0ZWRJbnN0YW5jZXMpIHx8XG4gICAgICAgICAgICAocHJvcHMuZXZlbnRSZXNpemUgJiYgcHJvcHMuZXZlbnRSZXNpemUuYWZmZWN0ZWRJbnN0YW5jZXMpIHx8XG4gICAgICAgICAgICB7fTtcbiAgICAgICAgcmV0dXJuIChjcmVhdGVFbGVtZW50KFwidHJcIiwgeyByZWY6IHRoaXMucm9vdEVsUmVmLCByb2xlOiBcInJvd1wiIH0sXG4gICAgICAgICAgICBwcm9wcy5yZW5kZXJJbnRybyAmJiBwcm9wcy5yZW5kZXJJbnRybygpLFxuICAgICAgICAgICAgcHJvcHMuY2VsbHMubWFwKGZ1bmN0aW9uIChjZWxsLCBjb2wpIHtcbiAgICAgICAgICAgICAgICB2YXIgbm9ybWFsRmdOb2RlcyA9IF90aGlzLnJlbmRlckZnU2Vncyhjb2wsIHByb3BzLmZvclByaW50ID8gc2luZ2xlQ29sUGxhY2VtZW50c1tjb2xdIDogbXVsdGlDb2xQbGFjZW1lbnRzW2NvbF0sIHByb3BzLnRvZGF5UmFuZ2UsIGlzRm9yY2VkSW52aXNpYmxlKTtcbiAgICAgICAgICAgICAgICB2YXIgbWlycm9yRmdOb2RlcyA9IF90aGlzLnJlbmRlckZnU2Vncyhjb2wsIGJ1aWxkTWlycm9yUGxhY2VtZW50cyhtaXJyb3JTZWdzQnlDb2xbY29sXSwgbXVsdGlDb2xQbGFjZW1lbnRzKSwgcHJvcHMudG9kYXlSYW5nZSwge30sIEJvb2xlYW4ocHJvcHMuZXZlbnREcmFnKSwgQm9vbGVhbihwcm9wcy5ldmVudFJlc2l6ZSksIGZhbHNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoVGFibGVDZWxsLCB7IGtleTogY2VsbC5rZXksIGVsUmVmOiBfdGhpcy5jZWxsRWxSZWZzLmNyZWF0ZVJlZihjZWxsLmtleSksIGlubmVyRWxSZWY6IF90aGlzLmZyYW1lRWxSZWZzLmNyZWF0ZVJlZihjZWxsLmtleSkgLyogRkYgPHRkPiBwcm9ibGVtLCBidXQgb2theSB0byB1c2UgZm9yIGxlZnQvcmlnaHQuIFRPRE86IHJlbmFtZSBwcm9wICovLCBkYXRlUHJvZmlsZTogcHJvcHMuZGF0ZVByb2ZpbGUsIGRhdGU6IGNlbGwuZGF0ZSwgc2hvd0RheU51bWJlcjogcHJvcHMuc2hvd0RheU51bWJlcnMsIHNob3dXZWVrTnVtYmVyOiBwcm9wcy5zaG93V2Vla051bWJlcnMgJiYgY29sID09PSAwLCBmb3JjZURheVRvcDogcHJvcHMuc2hvd1dlZWtOdW1iZXJzIC8qIGV2ZW4gZGlzcGxheWluZyB3ZWVrbnVtIGZvciByb3csIG5vdCBuZWNlc3NhcmlseSBkYXkgKi8sIHRvZGF5UmFuZ2U6IHByb3BzLnRvZGF5UmFuZ2UsIGV2ZW50U2VsZWN0aW9uOiBwcm9wcy5ldmVudFNlbGVjdGlvbiwgZXZlbnREcmFnOiBwcm9wcy5ldmVudERyYWcsIGV2ZW50UmVzaXplOiBwcm9wcy5ldmVudFJlc2l6ZSwgZXh0cmFIb29rUHJvcHM6IGNlbGwuZXh0cmFIb29rUHJvcHMsIGV4dHJhRGF0YUF0dHJzOiBjZWxsLmV4dHJhRGF0YUF0dHJzLCBleHRyYUNsYXNzTmFtZXM6IGNlbGwuZXh0cmFDbGFzc05hbWVzLCBleHRyYURhdGVTcGFuOiBjZWxsLmV4dHJhRGF0ZVNwYW4sIG1vcmVDbnQ6IG1vcmVDbnRzW2NvbF0sIG1vcmVNYXJnaW5Ub3A6IG1vcmVNYXJnaW5Ub3BzW2NvbF0sIHNpbmdsZVBsYWNlbWVudHM6IHNpbmdsZUNvbFBsYWNlbWVudHNbY29sXSwgZmdDb250ZW50RWxSZWY6IF90aGlzLmZnRWxSZWZzLmNyZWF0ZVJlZihjZWxsLmtleSksIGZnQ29udGVudDogKCAvLyBGcmFnbWVudCBzY29wZXMgdGhlIGtleXNcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudChGcmFnbWVudCwgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoRnJhZ21lbnQsIG51bGwsIG5vcm1hbEZnTm9kZXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudChGcmFnbWVudCwgbnVsbCwgbWlycm9yRmdOb2RlcykpKSwgYmdDb250ZW50OiAoIC8vIEZyYWdtZW50IHNjb3BlcyB0aGUga2V5c1xuICAgICAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50KEZyYWdtZW50LCBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVuZGVyRmlsbFNlZ3MoaGlnaGxpZ2h0U2Vnc0J5Q29sW2NvbF0sICdoaWdobGlnaHQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnJlbmRlckZpbGxTZWdzKGJ1c2luZXNzSG91cnNCeUNvbFtjb2xdLCAnbm9uLWJ1c2luZXNzJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZW5kZXJGaWxsU2VncyhiZ0V2ZW50U2Vnc0J5Q29sW2NvbF0sICdiZy1ldmVudCcpKSkgfSkpO1xuICAgICAgICAgICAgfSkpKTtcbiAgICB9O1xuICAgIFRhYmxlUm93LnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy51cGRhdGVTaXppbmcodHJ1ZSk7XG4gICAgfTtcbiAgICBUYWJsZVJvdy5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgICAgIHZhciBjdXJyZW50UHJvcHMgPSB0aGlzLnByb3BzO1xuICAgICAgICB0aGlzLnVwZGF0ZVNpemluZyghaXNQcm9wc0VxdWFsKHByZXZQcm9wcywgY3VycmVudFByb3BzKSk7XG4gICAgfTtcbiAgICBUYWJsZVJvdy5wcm90b3R5cGUuZ2V0SGlnaGxpZ2h0U2VncyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICAgICAgaWYgKHByb3BzLmV2ZW50RHJhZyAmJiBwcm9wcy5ldmVudERyYWcuc2Vncy5sZW5ndGgpIHsgLy8gbWVzc3kgY2hlY2tcbiAgICAgICAgICAgIHJldHVybiBwcm9wcy5ldmVudERyYWcuc2VncztcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvcHMuZXZlbnRSZXNpemUgJiYgcHJvcHMuZXZlbnRSZXNpemUuc2Vncy5sZW5ndGgpIHsgLy8gbWVzc3kgY2hlY2tcbiAgICAgICAgICAgIHJldHVybiBwcm9wcy5ldmVudFJlc2l6ZS5zZWdzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcm9wcy5kYXRlU2VsZWN0aW9uU2VncztcbiAgICB9O1xuICAgIFRhYmxlUm93LnByb3RvdHlwZS5nZXRNaXJyb3JTZWdzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgICAgICBpZiAocHJvcHMuZXZlbnRSZXNpemUgJiYgcHJvcHMuZXZlbnRSZXNpemUuc2Vncy5sZW5ndGgpIHsgLy8gbWVzc3kgY2hlY2tcbiAgICAgICAgICAgIHJldHVybiBwcm9wcy5ldmVudFJlc2l6ZS5zZWdzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9O1xuICAgIFRhYmxlUm93LnByb3RvdHlwZS5yZW5kZXJGZ1NlZ3MgPSBmdW5jdGlvbiAoY29sLCBzZWdQbGFjZW1lbnRzLCB0b2RheVJhbmdlLCBpc0ZvcmNlZEludmlzaWJsZSwgaXNEcmFnZ2luZywgaXNSZXNpemluZywgaXNEYXRlU2VsZWN0aW5nKSB7XG4gICAgICAgIHZhciBjb250ZXh0ID0gdGhpcy5jb250ZXh0O1xuICAgICAgICB2YXIgZXZlbnRTZWxlY3Rpb24gPSB0aGlzLnByb3BzLmV2ZW50U2VsZWN0aW9uO1xuICAgICAgICB2YXIgZnJhbWVQb3NpdGlvbnMgPSB0aGlzLnN0YXRlLmZyYW1lUG9zaXRpb25zO1xuICAgICAgICB2YXIgZGVmYXVsdERpc3BsYXlFdmVudEVuZCA9IHRoaXMucHJvcHMuY2VsbHMubGVuZ3RoID09PSAxOyAvLyBjb2xDbnQgPT09IDFcbiAgICAgICAgdmFyIGlzTWlycm9yID0gaXNEcmFnZ2luZyB8fCBpc1Jlc2l6aW5nIHx8IGlzRGF0ZVNlbGVjdGluZztcbiAgICAgICAgdmFyIG5vZGVzID0gW107XG4gICAgICAgIGlmIChmcmFtZVBvc2l0aW9ucykge1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBzZWdQbGFjZW1lbnRzXzEgPSBzZWdQbGFjZW1lbnRzOyBfaSA8IHNlZ1BsYWNlbWVudHNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgcGxhY2VtZW50ID0gc2VnUGxhY2VtZW50c18xW19pXTtcbiAgICAgICAgICAgICAgICB2YXIgc2VnID0gcGxhY2VtZW50LnNlZztcbiAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2VJZCA9IHNlZy5ldmVudFJhbmdlLmluc3RhbmNlLmluc3RhbmNlSWQ7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IGluc3RhbmNlSWQgKyAnOicgKyBjb2w7XG4gICAgICAgICAgICAgICAgdmFyIGlzVmlzaWJsZSA9IHBsYWNlbWVudC5pc1Zpc2libGUgJiYgIWlzRm9yY2VkSW52aXNpYmxlW2luc3RhbmNlSWRdO1xuICAgICAgICAgICAgICAgIHZhciBpc0Fic29sdXRlID0gcGxhY2VtZW50LmlzQWJzb2x1dGU7XG4gICAgICAgICAgICAgICAgdmFyIGxlZnQgPSAnJztcbiAgICAgICAgICAgICAgICB2YXIgcmlnaHQgPSAnJztcbiAgICAgICAgICAgICAgICBpZiAoaXNBYnNvbHV0ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29udGV4dC5pc1J0bCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCA9IGZyYW1lUG9zaXRpb25zLmxlZnRzW3NlZy5sYXN0Q29sXSAtIGZyYW1lUG9zaXRpb25zLmxlZnRzW3NlZy5maXJzdENvbF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0ID0gZnJhbWVQb3NpdGlvbnMucmlnaHRzW3NlZy5maXJzdENvbF0gLSBmcmFtZVBvc2l0aW9ucy5yaWdodHNbc2VnLmxhc3RDb2xdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAga25vd24gYnVnOiBldmVudHMgdGhhdCBhcmUgZm9yY2UgdG8gYmUgbGlzdC1pdGVtIGJ1dCBzcGFuIG11bHRpcGxlIGRheXMgc3RpbGwgdGFrZSB1cCBzcGFjZSBpbiBsYXRlciBjb2x1bW5zXG4gICAgICAgICAgICAgICAgdG9kbzogaW4gcHJpbnQgdmlldywgZm9yIG11bHRpLWRheSBldmVudHMsIGRvbid0IGRpc3BsYXkgdGl0bGUgd2l0aGluIG5vbi1zdGFydC9lbmQgc2Vnc1xuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgbm9kZXMucHVzaChjcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiAnZmMtZGF5Z3JpZC1ldmVudC1oYXJuZXNzJyArIChpc0Fic29sdXRlID8gJyBmYy1kYXlncmlkLWV2ZW50LWhhcm5lc3MtYWJzJyA6ICcnKSwga2V5OiBrZXksIHJlZjogaXNNaXJyb3IgPyBudWxsIDogdGhpcy5zZWdIYXJuZXNzUmVmcy5jcmVhdGVSZWYoa2V5KSwgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpc2liaWxpdHk6IGlzVmlzaWJsZSA/ICcnIDogJ2hpZGRlbicsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5Ub3A6IGlzQWJzb2x1dGUgPyAnJyA6IHBsYWNlbWVudC5tYXJnaW5Ub3AsXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3A6IGlzQWJzb2x1dGUgPyBwbGFjZW1lbnQuYWJzb2x1dGVUb3AgOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IGxlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICByaWdodDogcmlnaHQsXG4gICAgICAgICAgICAgICAgICAgIH0gfSwgaGFzTGlzdEl0ZW1EaXNwbGF5KHNlZykgPyAoY3JlYXRlRWxlbWVudChUYWJsZUxpc3RJdGVtRXZlbnQsIF9fYXNzaWduKHsgc2VnOiBzZWcsIGlzRHJhZ2dpbmc6IGlzRHJhZ2dpbmcsIGlzU2VsZWN0ZWQ6IGluc3RhbmNlSWQgPT09IGV2ZW50U2VsZWN0aW9uLCBkZWZhdWx0RGlzcGxheUV2ZW50RW5kOiBkZWZhdWx0RGlzcGxheUV2ZW50RW5kIH0sIGdldFNlZ01ldGEoc2VnLCB0b2RheVJhbmdlKSkpKSA6IChjcmVhdGVFbGVtZW50KFRhYmxlQmxvY2tFdmVudCwgX19hc3NpZ24oeyBzZWc6IHNlZywgaXNEcmFnZ2luZzogaXNEcmFnZ2luZywgaXNSZXNpemluZzogaXNSZXNpemluZywgaXNEYXRlU2VsZWN0aW5nOiBpc0RhdGVTZWxlY3RpbmcsIGlzU2VsZWN0ZWQ6IGluc3RhbmNlSWQgPT09IGV2ZW50U2VsZWN0aW9uLCBkZWZhdWx0RGlzcGxheUV2ZW50RW5kOiBkZWZhdWx0RGlzcGxheUV2ZW50RW5kIH0sIGdldFNlZ01ldGEoc2VnLCB0b2RheVJhbmdlKSkpKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBub2RlcztcbiAgICB9O1xuICAgIFRhYmxlUm93LnByb3RvdHlwZS5yZW5kZXJGaWxsU2VncyA9IGZ1bmN0aW9uIChzZWdzLCBmaWxsVHlwZSkge1xuICAgICAgICB2YXIgaXNSdGwgPSB0aGlzLmNvbnRleHQuaXNSdGw7XG4gICAgICAgIHZhciB0b2RheVJhbmdlID0gdGhpcy5wcm9wcy50b2RheVJhbmdlO1xuICAgICAgICB2YXIgZnJhbWVQb3NpdGlvbnMgPSB0aGlzLnN0YXRlLmZyYW1lUG9zaXRpb25zO1xuICAgICAgICB2YXIgbm9kZXMgPSBbXTtcbiAgICAgICAgaWYgKGZyYW1lUG9zaXRpb25zKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHNlZ3NfMSA9IHNlZ3M7IF9pIDwgc2Vnc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBzZWcgPSBzZWdzXzFbX2ldO1xuICAgICAgICAgICAgICAgIHZhciBsZWZ0UmlnaHRDc3MgPSBpc1J0bCA/IHtcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IGZyYW1lUG9zaXRpb25zLmxlZnRzW3NlZy5sYXN0Q29sXSAtIGZyYW1lUG9zaXRpb25zLmxlZnRzW3NlZy5maXJzdENvbF0sXG4gICAgICAgICAgICAgICAgfSA6IHtcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IGZyYW1lUG9zaXRpb25zLnJpZ2h0c1tzZWcuZmlyc3RDb2xdIC0gZnJhbWVQb3NpdGlvbnMucmlnaHRzW3NlZy5sYXN0Q29sXSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIG5vZGVzLnB1c2goY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGtleTogYnVpbGRFdmVudFJhbmdlS2V5KHNlZy5ldmVudFJhbmdlKSwgY2xhc3NOYW1lOiBcImZjLWRheWdyaWQtYmctaGFybmVzc1wiLCBzdHlsZTogbGVmdFJpZ2h0Q3NzIH0sIGZpbGxUeXBlID09PSAnYmctZXZlbnQnID9cbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudChCZ0V2ZW50LCBfX2Fzc2lnbih7IHNlZzogc2VnIH0sIGdldFNlZ01ldGEoc2VnLCB0b2RheVJhbmdlKSkpIDpcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyRmlsbChmaWxsVHlwZSkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3JlYXRlRWxlbWVudC5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW0ZyYWdtZW50LCB7fV0sIG5vZGVzKSk7XG4gICAgfTtcbiAgICBUYWJsZVJvdy5wcm90b3R5cGUudXBkYXRlU2l6aW5nID0gZnVuY3Rpb24gKGlzRXh0ZXJuYWxTaXppbmdDaGFuZ2UpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgcHJvcHMgPSBfYS5wcm9wcywgZnJhbWVFbFJlZnMgPSBfYS5mcmFtZUVsUmVmcztcbiAgICAgICAgaWYgKCFwcm9wcy5mb3JQcmludCAmJlxuICAgICAgICAgICAgcHJvcHMuY2xpZW50V2lkdGggIT09IG51bGwgLy8gcG9zaXRpb25pbmcgcmVhZHk/XG4gICAgICAgICkge1xuICAgICAgICAgICAgaWYgKGlzRXh0ZXJuYWxTaXppbmdDaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgZnJhbWVFbHMgPSBwcm9wcy5jZWxscy5tYXAoZnVuY3Rpb24gKGNlbGwpIHsgcmV0dXJuIGZyYW1lRWxSZWZzLmN1cnJlbnRNYXBbY2VsbC5rZXldOyB9KTtcbiAgICAgICAgICAgICAgICBpZiAoZnJhbWVFbHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvcmlnaW5FbCA9IHRoaXMucm9vdEVsUmVmLmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWVQb3NpdGlvbnM6IG5ldyBQb3NpdGlvbkNhY2hlKG9yaWdpbkVsLCBmcmFtZUVscywgdHJ1ZSwgLy8gaXNIb3Jpem9udGFsXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWxzZSksXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBvbGRJbnN0YW5jZUhlaWdodHMgPSB0aGlzLnN0YXRlLmV2ZW50SW5zdGFuY2VIZWlnaHRzO1xuICAgICAgICAgICAgdmFyIG5ld0luc3RhbmNlSGVpZ2h0cyA9IHRoaXMucXVlcnlFdmVudEluc3RhbmNlSGVpZ2h0cygpO1xuICAgICAgICAgICAgdmFyIGxpbWl0QnlDb250ZW50SGVpZ2h0ID0gcHJvcHMuZGF5TWF4RXZlbnRzID09PSB0cnVlIHx8IHByb3BzLmRheU1heEV2ZW50Um93cyA9PT0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIC8vIEhBQ0sgdG8gcHJldmVudCBvc2NpbGxhdGlvbnMgb2YgZXZlbnRzIGJlaW5nIHNob3duL2hpZGRlbiBmcm9tIG1heC1ldmVudC1yb3dzXG4gICAgICAgICAgICAgICAgLy8gRXNzZW50aWFsbHksIG9uY2UgeW91IGNvbXB1dGUgYW4gZWxlbWVudCdzIGhlaWdodCwgbmV2ZXIgbnVsbC1vdXQuXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogYWx3YXlzIGRpc3BsYXkgYWxsIGV2ZW50cywgYXMgdmlzaWJpbGl0eTpoaWRkZW4/XG4gICAgICAgICAgICAgICAgZXZlbnRJbnN0YW5jZUhlaWdodHM6IF9fYXNzaWduKF9fYXNzaWduKHt9LCBvbGRJbnN0YW5jZUhlaWdodHMpLCBuZXdJbnN0YW5jZUhlaWdodHMpLFxuICAgICAgICAgICAgICAgIG1heENvbnRlbnRIZWlnaHQ6IGxpbWl0QnlDb250ZW50SGVpZ2h0ID8gdGhpcy5jb21wdXRlTWF4Q29udGVudEhlaWdodCgpIDogbnVsbCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUYWJsZVJvdy5wcm90b3R5cGUucXVlcnlFdmVudEluc3RhbmNlSGVpZ2h0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNlZ0VsTWFwID0gdGhpcy5zZWdIYXJuZXNzUmVmcy5jdXJyZW50TWFwO1xuICAgICAgICB2YXIgZXZlbnRJbnN0YW5jZUhlaWdodHMgPSB7fTtcbiAgICAgICAgLy8gZ2V0IHRoZSBtYXggaGVpZ2h0IGFtb25nc3QgaW5zdGFuY2Ugc2Vnc1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gc2VnRWxNYXApIHtcbiAgICAgICAgICAgIHZhciBoZWlnaHQgPSBNYXRoLnJvdW5kKHNlZ0VsTWFwW2tleV0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0KTtcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZUlkID0ga2V5LnNwbGl0KCc6JylbMF07IC8vIGRlY29uc3RydWN0IGhvdyByZW5kZXJGZ1NlZ3MgbWFrZXMgdGhlIGtleVxuICAgICAgICAgICAgZXZlbnRJbnN0YW5jZUhlaWdodHNbaW5zdGFuY2VJZF0gPSBNYXRoLm1heChldmVudEluc3RhbmNlSGVpZ2h0c1tpbnN0YW5jZUlkXSB8fCAwLCBoZWlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBldmVudEluc3RhbmNlSGVpZ2h0cztcbiAgICB9O1xuICAgIFRhYmxlUm93LnByb3RvdHlwZS5jb21wdXRlTWF4Q29udGVudEhlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGZpcnN0S2V5ID0gdGhpcy5wcm9wcy5jZWxsc1swXS5rZXk7XG4gICAgICAgIHZhciBjZWxsRWwgPSB0aGlzLmNlbGxFbFJlZnMuY3VycmVudE1hcFtmaXJzdEtleV07XG4gICAgICAgIHZhciBmY0NvbnRhaW5lckVsID0gdGhpcy5mZ0VsUmVmcy5jdXJyZW50TWFwW2ZpcnN0S2V5XTtcbiAgICAgICAgcmV0dXJuIGNlbGxFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b20gLSBmY0NvbnRhaW5lckVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcbiAgICB9O1xuICAgIFRhYmxlUm93LnByb3RvdHlwZS5nZXRDZWxsRWxzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZWxNYXAgPSB0aGlzLmNlbGxFbFJlZnMuY3VycmVudE1hcDtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2VsbHMubWFwKGZ1bmN0aW9uIChjZWxsKSB7IHJldHVybiBlbE1hcFtjZWxsLmtleV07IH0pO1xuICAgIH07XG4gICAgcmV0dXJuIFRhYmxlUm93O1xufShEYXRlQ29tcG9uZW50KSk7XG5UYWJsZVJvdy5hZGRTdGF0ZUVxdWFsaXR5KHtcbiAgICBldmVudEluc3RhbmNlSGVpZ2h0czogaXNQcm9wc0VxdWFsLFxufSk7XG5mdW5jdGlvbiBidWlsZE1pcnJvclBsYWNlbWVudHMobWlycm9yU2VncywgY29sUGxhY2VtZW50cykge1xuICAgIGlmICghbWlycm9yU2Vncy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICB2YXIgdG9wc0J5SW5zdGFuY2VJZCA9IGJ1aWxkQWJzb2x1dGVUb3BIYXNoKGNvbFBsYWNlbWVudHMpOyAvLyBUT0RPOiBjYWNoZSB0aGlzIGF0IGZpcnN0IHJlbmRlcj9cbiAgICByZXR1cm4gbWlycm9yU2Vncy5tYXAoZnVuY3Rpb24gKHNlZykgeyByZXR1cm4gKHtcbiAgICAgICAgc2VnOiBzZWcsXG4gICAgICAgIGlzVmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgaXNBYnNvbHV0ZTogdHJ1ZSxcbiAgICAgICAgYWJzb2x1dGVUb3A6IHRvcHNCeUluc3RhbmNlSWRbc2VnLmV2ZW50UmFuZ2UuaW5zdGFuY2UuaW5zdGFuY2VJZF0sXG4gICAgICAgIG1hcmdpblRvcDogMCxcbiAgICB9KTsgfSk7XG59XG5mdW5jdGlvbiBidWlsZEFic29sdXRlVG9wSGFzaChjb2xQbGFjZW1lbnRzKSB7XG4gICAgdmFyIHRvcHNCeUluc3RhbmNlSWQgPSB7fTtcbiAgICBmb3IgKHZhciBfaSA9IDAsIGNvbFBsYWNlbWVudHNfMSA9IGNvbFBsYWNlbWVudHM7IF9pIDwgY29sUGxhY2VtZW50c18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgcGxhY2VtZW50cyA9IGNvbFBsYWNlbWVudHNfMVtfaV07XG4gICAgICAgIGZvciAodmFyIF9hID0gMCwgcGxhY2VtZW50c18xID0gcGxhY2VtZW50czsgX2EgPCBwbGFjZW1lbnRzXzEubGVuZ3RoOyBfYSsrKSB7XG4gICAgICAgICAgICB2YXIgcGxhY2VtZW50ID0gcGxhY2VtZW50c18xW19hXTtcbiAgICAgICAgICAgIHRvcHNCeUluc3RhbmNlSWRbcGxhY2VtZW50LnNlZy5ldmVudFJhbmdlLmluc3RhbmNlLmluc3RhbmNlSWRdID0gcGxhY2VtZW50LmFic29sdXRlVG9wO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0b3BzQnlJbnN0YW5jZUlkO1xufVxuXG52YXIgVGFibGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFRhYmxlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRhYmxlKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc3BsaXRCdXNpbmVzc0hvdXJTZWdzID0gbWVtb2l6ZShzcGxpdFNlZ3NCeVJvdyk7XG4gICAgICAgIF90aGlzLnNwbGl0QmdFdmVudFNlZ3MgPSBtZW1vaXplKHNwbGl0U2Vnc0J5Um93KTtcbiAgICAgICAgX3RoaXMuc3BsaXRGZ0V2ZW50U2VncyA9IG1lbW9pemUoc3BsaXRTZWdzQnlSb3cpO1xuICAgICAgICBfdGhpcy5zcGxpdERhdGVTZWxlY3Rpb25TZWdzID0gbWVtb2l6ZShzcGxpdFNlZ3NCeVJvdyk7XG4gICAgICAgIF90aGlzLnNwbGl0RXZlbnREcmFnID0gbWVtb2l6ZShzcGxpdEludGVyYWN0aW9uQnlSb3cpO1xuICAgICAgICBfdGhpcy5zcGxpdEV2ZW50UmVzaXplID0gbWVtb2l6ZShzcGxpdEludGVyYWN0aW9uQnlSb3cpO1xuICAgICAgICBfdGhpcy5yb3dSZWZzID0gbmV3IFJlZk1hcCgpO1xuICAgICAgICBfdGhpcy5oYW5kbGVSb290RWwgPSBmdW5jdGlvbiAocm9vdEVsKSB7XG4gICAgICAgICAgICBfdGhpcy5yb290RWwgPSByb290RWw7XG4gICAgICAgICAgICBpZiAocm9vdEVsKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuY29udGV4dC5yZWdpc3RlckludGVyYWN0aXZlQ29tcG9uZW50KF90aGlzLCB7XG4gICAgICAgICAgICAgICAgICAgIGVsOiByb290RWwsXG4gICAgICAgICAgICAgICAgICAgIGlzSGl0Q29tYm9BbGxvd2VkOiBfdGhpcy5wcm9wcy5pc0hpdENvbWJvQWxsb3dlZCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIF90aGlzLmNvbnRleHQudW5yZWdpc3RlckludGVyYWN0aXZlQ29tcG9uZW50KF90aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBUYWJsZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgICAgICB2YXIgZGF0ZVByb2ZpbGUgPSBwcm9wcy5kYXRlUHJvZmlsZSwgZGF5TWF4RXZlbnRSb3dzID0gcHJvcHMuZGF5TWF4RXZlbnRSb3dzLCBkYXlNYXhFdmVudHMgPSBwcm9wcy5kYXlNYXhFdmVudHMsIGV4cGFuZFJvd3MgPSBwcm9wcy5leHBhbmRSb3dzO1xuICAgICAgICB2YXIgcm93Q250ID0gcHJvcHMuY2VsbHMubGVuZ3RoO1xuICAgICAgICB2YXIgYnVzaW5lc3NIb3VyU2Vnc0J5Um93ID0gdGhpcy5zcGxpdEJ1c2luZXNzSG91clNlZ3MocHJvcHMuYnVzaW5lc3NIb3VyU2Vncywgcm93Q250KTtcbiAgICAgICAgdmFyIGJnRXZlbnRTZWdzQnlSb3cgPSB0aGlzLnNwbGl0QmdFdmVudFNlZ3MocHJvcHMuYmdFdmVudFNlZ3MsIHJvd0NudCk7XG4gICAgICAgIHZhciBmZ0V2ZW50U2Vnc0J5Um93ID0gdGhpcy5zcGxpdEZnRXZlbnRTZWdzKHByb3BzLmZnRXZlbnRTZWdzLCByb3dDbnQpO1xuICAgICAgICB2YXIgZGF0ZVNlbGVjdGlvblNlZ3NCeVJvdyA9IHRoaXMuc3BsaXREYXRlU2VsZWN0aW9uU2Vncyhwcm9wcy5kYXRlU2VsZWN0aW9uU2Vncywgcm93Q250KTtcbiAgICAgICAgdmFyIGV2ZW50RHJhZ0J5Um93ID0gdGhpcy5zcGxpdEV2ZW50RHJhZyhwcm9wcy5ldmVudERyYWcsIHJvd0NudCk7XG4gICAgICAgIHZhciBldmVudFJlc2l6ZUJ5Um93ID0gdGhpcy5zcGxpdEV2ZW50UmVzaXplKHByb3BzLmV2ZW50UmVzaXplLCByb3dDbnQpO1xuICAgICAgICB2YXIgbGltaXRWaWFCYWxhbmNlZCA9IGRheU1heEV2ZW50cyA9PT0gdHJ1ZSB8fCBkYXlNYXhFdmVudFJvd3MgPT09IHRydWU7XG4gICAgICAgIC8vIGlmIHJvd3MgY2FuJ3QgZXhwYW5kIHRvIGZpbGwgZml4ZWQgaGVpZ2h0LCBjYW4ndCBkbyBiYWxhbmNlZC1oZWlnaHQgZXZlbnQgbGltaXRcbiAgICAgICAgLy8gVE9ETzogYmVzdCBwbGFjZSB0byBub3JtYWxpemUgdGhlc2Ugb3B0aW9ucz9cbiAgICAgICAgaWYgKGxpbWl0VmlhQmFsYW5jZWQgJiYgIWV4cGFuZFJvd3MpIHtcbiAgICAgICAgICAgIGxpbWl0VmlhQmFsYW5jZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGRheU1heEV2ZW50Um93cyA9IG51bGw7XG4gICAgICAgICAgICBkYXlNYXhFdmVudHMgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjbGFzc05hbWVzID0gW1xuICAgICAgICAgICAgJ2ZjLWRheWdyaWQtYm9keScsXG4gICAgICAgICAgICBsaW1pdFZpYUJhbGFuY2VkID8gJ2ZjLWRheWdyaWQtYm9keS1iYWxhbmNlZCcgOiAnZmMtZGF5Z3JpZC1ib2R5LXVuYmFsYW5jZWQnLFxuICAgICAgICAgICAgZXhwYW5kUm93cyA/ICcnIDogJ2ZjLWRheWdyaWQtYm9keS1uYXR1cmFsJywgLy8gd2lsbCBoZWlnaHQgb2Ygb25lIHJvdyBkZXBlbmQgb24gdGhlIG90aGVycz9cbiAgICAgICAgXTtcbiAgICAgICAgcmV0dXJuIChjcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWVzLmpvaW4oJyAnKSwgcmVmOiB0aGlzLmhhbmRsZVJvb3RFbCwgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAvLyB0aGVzZSBwcm9wcyBhcmUgaW1wb3J0YW50IHRvIGdpdmUgdGhpcyB3cmFwcGVyIGNvcnJlY3QgZGltZW5zaW9ucyBmb3IgaW50ZXJhY3Rpb25zXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogaWYgd2Ugc2V0IGl0IGhlcmUsIGNhbiB3ZSBhdm9pZCBnaXZpbmcgdG8gaW5uZXIgdGFibGVzP1xuICAgICAgICAgICAgICAgIHdpZHRoOiBwcm9wcy5jbGllbnRXaWR0aCxcbiAgICAgICAgICAgICAgICBtaW5XaWR0aDogcHJvcHMudGFibGVNaW5XaWR0aCxcbiAgICAgICAgICAgIH0gfSxcbiAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoTm93VGltZXIsIHsgdW5pdDogXCJkYXlcIiB9LCBmdW5jdGlvbiAobm93RGF0ZSwgdG9kYXlSYW5nZSkgeyByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoRnJhZ21lbnQsIG51bGwsXG4gICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudChcInRhYmxlXCIsIHsgcm9sZTogXCJwcmVzZW50YXRpb25cIiwgY2xhc3NOYW1lOiBcImZjLXNjcm9sbGdyaWQtc3luYy10YWJsZVwiLCBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHByb3BzLmNsaWVudFdpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWluV2lkdGg6IHByb3BzLnRhYmxlTWluV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGV4cGFuZFJvd3MgPyBwcm9wcy5jbGllbnRIZWlnaHQgOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgfSB9LFxuICAgICAgICAgICAgICAgICAgICBwcm9wcy5jb2xHcm91cE5vZGUsXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoXCJ0Ym9keVwiLCB7IHJvbGU6IFwicHJlc2VudGF0aW9uXCIgfSwgcHJvcHMuY2VsbHMubWFwKGZ1bmN0aW9uIChjZWxscywgcm93KSB7IHJldHVybiAoY3JlYXRlRWxlbWVudChUYWJsZVJvdywgeyByZWY6IF90aGlzLnJvd1JlZnMuY3JlYXRlUmVmKHJvdyksIGtleTogY2VsbHMubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBjZWxsc1swXS5kYXRlLnRvSVNPU3RyaW5nKCkgLyogYmVzdD8gb3IgcHV0IGtleSBvbiBjZWxsPyBvciB1c2UgZGlmZiBmb3JtYXR0ZXI/ICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiByb3cgLy8gaW4gY2FzZSB0aGVyZSBhcmUgbm8gY2VsbHMgKGxpa2Ugd2hlbiByZXNvdXJjZSB2aWV3IGlzIGxvYWRpbmcpXG4gICAgICAgICAgICAgICAgICAgICAgICAsIHNob3dEYXlOdW1iZXJzOiByb3dDbnQgPiAxLCBzaG93V2Vla051bWJlcnM6IHByb3BzLnNob3dXZWVrTnVtYmVycywgdG9kYXlSYW5nZTogdG9kYXlSYW5nZSwgZGF0ZVByb2ZpbGU6IGRhdGVQcm9maWxlLCBjZWxsczogY2VsbHMsIHJlbmRlckludHJvOiBwcm9wcy5yZW5kZXJSb3dJbnRybywgYnVzaW5lc3NIb3VyU2VnczogYnVzaW5lc3NIb3VyU2Vnc0J5Um93W3Jvd10sIGV2ZW50U2VsZWN0aW9uOiBwcm9wcy5ldmVudFNlbGVjdGlvbiwgYmdFdmVudFNlZ3M6IGJnRXZlbnRTZWdzQnlSb3dbcm93XS5maWx0ZXIoaXNTZWdBbGxEYXkpIC8qIGhhY2sgKi8sIGZnRXZlbnRTZWdzOiBmZ0V2ZW50U2Vnc0J5Um93W3Jvd10sIGRhdGVTZWxlY3Rpb25TZWdzOiBkYXRlU2VsZWN0aW9uU2Vnc0J5Um93W3Jvd10sIGV2ZW50RHJhZzogZXZlbnREcmFnQnlSb3dbcm93XSwgZXZlbnRSZXNpemU6IGV2ZW50UmVzaXplQnlSb3dbcm93XSwgZGF5TWF4RXZlbnRzOiBkYXlNYXhFdmVudHMsIGRheU1heEV2ZW50Um93czogZGF5TWF4RXZlbnRSb3dzLCBjbGllbnRXaWR0aDogcHJvcHMuY2xpZW50V2lkdGgsIGNsaWVudEhlaWdodDogcHJvcHMuY2xpZW50SGVpZ2h0LCBmb3JQcmludDogcHJvcHMuZm9yUHJpbnQgfSkpOyB9KSkpKSk7IH0pKSk7XG4gICAgfTtcbiAgICAvLyBIaXQgU3lzdGVtXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIFRhYmxlLnByb3RvdHlwZS5wcmVwYXJlSGl0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5yb3dQb3NpdGlvbnMgPSBuZXcgUG9zaXRpb25DYWNoZSh0aGlzLnJvb3RFbCwgdGhpcy5yb3dSZWZzLmNvbGxlY3QoKS5tYXAoZnVuY3Rpb24gKHJvd09iaikgeyByZXR1cm4gcm93T2JqLmdldENlbGxFbHMoKVswXTsgfSksIC8vIGZpcnN0IGNlbGwgZWwgaW4gZWFjaCByb3cuIFRPRE86IG5vdCBvcHRpbWFsXG4gICAgICAgIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgdGhpcy5jb2xQb3NpdGlvbnMgPSBuZXcgUG9zaXRpb25DYWNoZSh0aGlzLnJvb3RFbCwgdGhpcy5yb3dSZWZzLmN1cnJlbnRNYXBbMF0uZ2V0Q2VsbEVscygpLCAvLyBjZWxsIGVscyBpbiBmaXJzdCByb3dcbiAgICAgICAgdHJ1ZSwgLy8gaG9yaXpvbnRhbFxuICAgICAgICBmYWxzZSk7XG4gICAgfTtcbiAgICBUYWJsZS5wcm90b3R5cGUucXVlcnlIaXQgPSBmdW5jdGlvbiAocG9zaXRpb25MZWZ0LCBwb3NpdGlvblRvcCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBjb2xQb3NpdGlvbnMgPSBfYS5jb2xQb3NpdGlvbnMsIHJvd1Bvc2l0aW9ucyA9IF9hLnJvd1Bvc2l0aW9ucztcbiAgICAgICAgdmFyIGNvbCA9IGNvbFBvc2l0aW9ucy5sZWZ0VG9JbmRleChwb3NpdGlvbkxlZnQpO1xuICAgICAgICB2YXIgcm93ID0gcm93UG9zaXRpb25zLnRvcFRvSW5kZXgocG9zaXRpb25Ub3ApO1xuICAgICAgICBpZiAocm93ICE9IG51bGwgJiYgY29sICE9IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBjZWxsID0gdGhpcy5wcm9wcy5jZWxsc1tyb3ddW2NvbF07XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGRhdGVQcm9maWxlOiB0aGlzLnByb3BzLmRhdGVQcm9maWxlLFxuICAgICAgICAgICAgICAgIGRhdGVTcGFuOiBfX2Fzc2lnbih7IHJhbmdlOiB0aGlzLmdldENlbGxSYW5nZShyb3csIGNvbCksIGFsbERheTogdHJ1ZSB9LCBjZWxsLmV4dHJhRGF0ZVNwYW4pLFxuICAgICAgICAgICAgICAgIGRheUVsOiB0aGlzLmdldENlbGxFbChyb3csIGNvbCksXG4gICAgICAgICAgICAgICAgcmVjdDoge1xuICAgICAgICAgICAgICAgICAgICBsZWZ0OiBjb2xQb3NpdGlvbnMubGVmdHNbY29sXSxcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IGNvbFBvc2l0aW9ucy5yaWdodHNbY29sXSxcbiAgICAgICAgICAgICAgICAgICAgdG9wOiByb3dQb3NpdGlvbnMudG9wc1tyb3ddLFxuICAgICAgICAgICAgICAgICAgICBib3R0b206IHJvd1Bvc2l0aW9ucy5ib3R0b21zW3Jvd10sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBsYXllcjogMCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBUYWJsZS5wcm90b3R5cGUuZ2V0Q2VsbEVsID0gZnVuY3Rpb24gKHJvdywgY29sKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvd1JlZnMuY3VycmVudE1hcFtyb3ddLmdldENlbGxFbHMoKVtjb2xdOyAvLyBUT0RPOiBub3Qgb3B0aW1hbFxuICAgIH07XG4gICAgVGFibGUucHJvdG90eXBlLmdldENlbGxSYW5nZSA9IGZ1bmN0aW9uIChyb3csIGNvbCkge1xuICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLnByb3BzLmNlbGxzW3Jvd11bY29sXS5kYXRlO1xuICAgICAgICB2YXIgZW5kID0gYWRkRGF5cyhzdGFydCwgMSk7XG4gICAgICAgIHJldHVybiB7IHN0YXJ0OiBzdGFydCwgZW5kOiBlbmQgfTtcbiAgICB9O1xuICAgIHJldHVybiBUYWJsZTtcbn0oRGF0ZUNvbXBvbmVudCkpO1xuZnVuY3Rpb24gaXNTZWdBbGxEYXkoc2VnKSB7XG4gICAgcmV0dXJuIHNlZy5ldmVudFJhbmdlLmRlZi5hbGxEYXk7XG59XG5cbnZhciBEYXlUYWJsZVNsaWNlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRGF5VGFibGVTbGljZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRGF5VGFibGVTbGljZXIoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5mb3JjZURheUlmTGlzdEl0ZW0gPSB0cnVlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIERheVRhYmxlU2xpY2VyLnByb3RvdHlwZS5zbGljZVJhbmdlID0gZnVuY3Rpb24gKGRhdGVSYW5nZSwgZGF5VGFibGVNb2RlbCkge1xuICAgICAgICByZXR1cm4gZGF5VGFibGVNb2RlbC5zbGljZVJhbmdlKGRhdGVSYW5nZSk7XG4gICAgfTtcbiAgICByZXR1cm4gRGF5VGFibGVTbGljZXI7XG59KFNsaWNlcikpO1xuXG52YXIgRGF5VGFibGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKERheVRhYmxlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIERheVRhYmxlKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc2xpY2VyID0gbmV3IERheVRhYmxlU2xpY2VyKCk7XG4gICAgICAgIF90aGlzLnRhYmxlUmVmID0gY3JlYXRlUmVmKCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRGF5VGFibGUucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgcHJvcHMgPSBfYS5wcm9wcywgY29udGV4dCA9IF9hLmNvbnRleHQ7XG4gICAgICAgIHJldHVybiAoY3JlYXRlRWxlbWVudChUYWJsZSwgX19hc3NpZ24oeyByZWY6IHRoaXMudGFibGVSZWYgfSwgdGhpcy5zbGljZXIuc2xpY2VQcm9wcyhwcm9wcywgcHJvcHMuZGF0ZVByb2ZpbGUsIHByb3BzLm5leHREYXlUaHJlc2hvbGQsIGNvbnRleHQsIHByb3BzLmRheVRhYmxlTW9kZWwpLCB7IGRhdGVQcm9maWxlOiBwcm9wcy5kYXRlUHJvZmlsZSwgY2VsbHM6IHByb3BzLmRheVRhYmxlTW9kZWwuY2VsbHMsIGNvbEdyb3VwTm9kZTogcHJvcHMuY29sR3JvdXBOb2RlLCB0YWJsZU1pbldpZHRoOiBwcm9wcy50YWJsZU1pbldpZHRoLCByZW5kZXJSb3dJbnRybzogcHJvcHMucmVuZGVyUm93SW50cm8sIGRheU1heEV2ZW50czogcHJvcHMuZGF5TWF4RXZlbnRzLCBkYXlNYXhFdmVudFJvd3M6IHByb3BzLmRheU1heEV2ZW50Um93cywgc2hvd1dlZWtOdW1iZXJzOiBwcm9wcy5zaG93V2Vla051bWJlcnMsIGV4cGFuZFJvd3M6IHByb3BzLmV4cGFuZFJvd3MsIGhlYWRlckFsaWduRWxSZWY6IHByb3BzLmhlYWRlckFsaWduRWxSZWYsIGNsaWVudFdpZHRoOiBwcm9wcy5jbGllbnRXaWR0aCwgY2xpZW50SGVpZ2h0OiBwcm9wcy5jbGllbnRIZWlnaHQsIGZvclByaW50OiBwcm9wcy5mb3JQcmludCB9KSkpO1xuICAgIH07XG4gICAgcmV0dXJuIERheVRhYmxlO1xufShEYXRlQ29tcG9uZW50KSk7XG5cbnZhciBEYXlUYWJsZVZpZXcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKERheVRhYmxlVmlldywgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBEYXlUYWJsZVZpZXcoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5idWlsZERheVRhYmxlTW9kZWwgPSBtZW1vaXplKGJ1aWxkRGF5VGFibGVNb2RlbCk7XG4gICAgICAgIF90aGlzLmhlYWRlclJlZiA9IGNyZWF0ZVJlZigpO1xuICAgICAgICBfdGhpcy50YWJsZVJlZiA9IGNyZWF0ZVJlZigpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIERheVRhYmxlVmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgX2EgPSB0aGlzLmNvbnRleHQsIG9wdGlvbnMgPSBfYS5vcHRpb25zLCBkYXRlUHJvZmlsZUdlbmVyYXRvciA9IF9hLmRhdGVQcm9maWxlR2VuZXJhdG9yO1xuICAgICAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgICAgICB2YXIgZGF5VGFibGVNb2RlbCA9IHRoaXMuYnVpbGREYXlUYWJsZU1vZGVsKHByb3BzLmRhdGVQcm9maWxlLCBkYXRlUHJvZmlsZUdlbmVyYXRvcik7XG4gICAgICAgIHZhciBoZWFkZXJDb250ZW50ID0gb3B0aW9ucy5kYXlIZWFkZXJzICYmIChjcmVhdGVFbGVtZW50KERheUhlYWRlciwgeyByZWY6IHRoaXMuaGVhZGVyUmVmLCBkYXRlUHJvZmlsZTogcHJvcHMuZGF0ZVByb2ZpbGUsIGRhdGVzOiBkYXlUYWJsZU1vZGVsLmhlYWRlckRhdGVzLCBkYXRlc1JlcERpc3RpbmN0RGF5czogZGF5VGFibGVNb2RlbC5yb3dDbnQgPT09IDEgfSkpO1xuICAgICAgICB2YXIgYm9keUNvbnRlbnQgPSBmdW5jdGlvbiAoY29udGVudEFyZykgeyByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoRGF5VGFibGUsIHsgcmVmOiBfdGhpcy50YWJsZVJlZiwgZGF0ZVByb2ZpbGU6IHByb3BzLmRhdGVQcm9maWxlLCBkYXlUYWJsZU1vZGVsOiBkYXlUYWJsZU1vZGVsLCBidXNpbmVzc0hvdXJzOiBwcm9wcy5idXNpbmVzc0hvdXJzLCBkYXRlU2VsZWN0aW9uOiBwcm9wcy5kYXRlU2VsZWN0aW9uLCBldmVudFN0b3JlOiBwcm9wcy5ldmVudFN0b3JlLCBldmVudFVpQmFzZXM6IHByb3BzLmV2ZW50VWlCYXNlcywgZXZlbnRTZWxlY3Rpb246IHByb3BzLmV2ZW50U2VsZWN0aW9uLCBldmVudERyYWc6IHByb3BzLmV2ZW50RHJhZywgZXZlbnRSZXNpemU6IHByb3BzLmV2ZW50UmVzaXplLCBuZXh0RGF5VGhyZXNob2xkOiBvcHRpb25zLm5leHREYXlUaHJlc2hvbGQsIGNvbEdyb3VwTm9kZTogY29udGVudEFyZy50YWJsZUNvbEdyb3VwTm9kZSwgdGFibGVNaW5XaWR0aDogY29udGVudEFyZy50YWJsZU1pbldpZHRoLCBkYXlNYXhFdmVudHM6IG9wdGlvbnMuZGF5TWF4RXZlbnRzLCBkYXlNYXhFdmVudFJvd3M6IG9wdGlvbnMuZGF5TWF4RXZlbnRSb3dzLCBzaG93V2Vla051bWJlcnM6IG9wdGlvbnMud2Vla051bWJlcnMsIGV4cGFuZFJvd3M6ICFwcm9wcy5pc0hlaWdodEF1dG8sIGhlYWRlckFsaWduRWxSZWY6IF90aGlzLmhlYWRlckVsUmVmLCBjbGllbnRXaWR0aDogY29udGVudEFyZy5jbGllbnRXaWR0aCwgY2xpZW50SGVpZ2h0OiBjb250ZW50QXJnLmNsaWVudEhlaWdodCwgZm9yUHJpbnQ6IHByb3BzLmZvclByaW50IH0pKTsgfTtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMuZGF5TWluV2lkdGhcbiAgICAgICAgICAgID8gdGhpcy5yZW5kZXJIU2Nyb2xsTGF5b3V0KGhlYWRlckNvbnRlbnQsIGJvZHlDb250ZW50LCBkYXlUYWJsZU1vZGVsLmNvbENudCwgb3B0aW9ucy5kYXlNaW5XaWR0aClcbiAgICAgICAgICAgIDogdGhpcy5yZW5kZXJTaW1wbGVMYXlvdXQoaGVhZGVyQ29udGVudCwgYm9keUNvbnRlbnQpO1xuICAgIH07XG4gICAgcmV0dXJuIERheVRhYmxlVmlldztcbn0oVGFibGVWaWV3KSk7XG5mdW5jdGlvbiBidWlsZERheVRhYmxlTW9kZWwoZGF0ZVByb2ZpbGUsIGRhdGVQcm9maWxlR2VuZXJhdG9yKSB7XG4gICAgdmFyIGRheVNlcmllcyA9IG5ldyBEYXlTZXJpZXNNb2RlbChkYXRlUHJvZmlsZS5yZW5kZXJSYW5nZSwgZGF0ZVByb2ZpbGVHZW5lcmF0b3IpO1xuICAgIHJldHVybiBuZXcgRGF5VGFibGVNb2RlbChkYXlTZXJpZXMsIC95ZWFyfG1vbnRofHdlZWsvLnRlc3QoZGF0ZVByb2ZpbGUuY3VycmVudFJhbmdlVW5pdCkpO1xufVxuXG52YXIgVGFibGVEYXRlUHJvZmlsZUdlbmVyYXRvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVGFibGVEYXRlUHJvZmlsZUdlbmVyYXRvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUYWJsZURhdGVQcm9maWxlR2VuZXJhdG9yKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIC8vIENvbXB1dGVzIHRoZSBkYXRlIHJhbmdlIHRoYXQgd2lsbCBiZSByZW5kZXJlZC5cbiAgICBUYWJsZURhdGVQcm9maWxlR2VuZXJhdG9yLnByb3RvdHlwZS5idWlsZFJlbmRlclJhbmdlID0gZnVuY3Rpb24gKGN1cnJlbnRSYW5nZSwgY3VycmVudFJhbmdlVW5pdCwgaXNSYW5nZUFsbERheSkge1xuICAgICAgICB2YXIgZGF0ZUVudiA9IHRoaXMucHJvcHMuZGF0ZUVudjtcbiAgICAgICAgdmFyIHJlbmRlclJhbmdlID0gX3N1cGVyLnByb3RvdHlwZS5idWlsZFJlbmRlclJhbmdlLmNhbGwodGhpcywgY3VycmVudFJhbmdlLCBjdXJyZW50UmFuZ2VVbml0LCBpc1JhbmdlQWxsRGF5KTtcbiAgICAgICAgdmFyIHN0YXJ0ID0gcmVuZGVyUmFuZ2Uuc3RhcnQ7XG4gICAgICAgIHZhciBlbmQgPSByZW5kZXJSYW5nZS5lbmQ7XG4gICAgICAgIHZhciBlbmRPZldlZWs7XG4gICAgICAgIC8vIHllYXIgYW5kIG1vbnRoIHZpZXdzIHNob3VsZCBiZSBhbGlnbmVkIHdpdGggd2Vla3MuIHRoaXMgaXMgYWxyZWFkeSBkb25lIGZvciB3ZWVrXG4gICAgICAgIGlmICgvXih5ZWFyfG1vbnRoKSQvLnRlc3QoY3VycmVudFJhbmdlVW5pdCkpIHtcbiAgICAgICAgICAgIHN0YXJ0ID0gZGF0ZUVudi5zdGFydE9mV2VlayhzdGFydCk7XG4gICAgICAgICAgICAvLyBtYWtlIGVuZC1vZi13ZWVrIGlmIG5vdCBhbHJlYWR5XG4gICAgICAgICAgICBlbmRPZldlZWsgPSBkYXRlRW52LnN0YXJ0T2ZXZWVrKGVuZCk7XG4gICAgICAgICAgICBpZiAoZW5kT2ZXZWVrLnZhbHVlT2YoKSAhPT0gZW5kLnZhbHVlT2YoKSkge1xuICAgICAgICAgICAgICAgIGVuZCA9IGFkZFdlZWtzKGVuZE9mV2VlaywgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gZW5zdXJlIDYgd2Vla3NcbiAgICAgICAgaWYgKHRoaXMucHJvcHMubW9udGhNb2RlICYmXG4gICAgICAgICAgICB0aGlzLnByb3BzLmZpeGVkV2Vla0NvdW50KSB7XG4gICAgICAgICAgICB2YXIgcm93Q250ID0gTWF0aC5jZWlsKC8vIGNvdWxkIGJlIHBhcnRpYWwgd2Vla3MgZHVlIHRvIGhpZGRlbkRheXNcbiAgICAgICAgICAgIGRpZmZXZWVrcyhzdGFydCwgZW5kKSk7XG4gICAgICAgICAgICBlbmQgPSBhZGRXZWVrcyhlbmQsIDYgLSByb3dDbnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHN0YXJ0OiBzdGFydCwgZW5kOiBlbmQgfTtcbiAgICB9O1xuICAgIHJldHVybiBUYWJsZURhdGVQcm9maWxlR2VuZXJhdG9yO1xufShEYXRlUHJvZmlsZUdlbmVyYXRvcikpO1xuXG52YXIgbWFpbiA9IGNyZWF0ZVBsdWdpbih7XG4gICAgaW5pdGlhbFZpZXc6ICdkYXlHcmlkTW9udGgnLFxuICAgIHZpZXdzOiB7XG4gICAgICAgIGRheUdyaWQ6IHtcbiAgICAgICAgICAgIGNvbXBvbmVudDogRGF5VGFibGVWaWV3LFxuICAgICAgICAgICAgZGF0ZVByb2ZpbGVHZW5lcmF0b3JDbGFzczogVGFibGVEYXRlUHJvZmlsZUdlbmVyYXRvcixcbiAgICAgICAgfSxcbiAgICAgICAgZGF5R3JpZERheToge1xuICAgICAgICAgICAgdHlwZTogJ2RheUdyaWQnLFxuICAgICAgICAgICAgZHVyYXRpb246IHsgZGF5czogMSB9LFxuICAgICAgICB9LFxuICAgICAgICBkYXlHcmlkV2Vlazoge1xuICAgICAgICAgICAgdHlwZTogJ2RheUdyaWQnLFxuICAgICAgICAgICAgZHVyYXRpb246IHsgd2Vla3M6IDEgfSxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5R3JpZE1vbnRoOiB7XG4gICAgICAgICAgICB0eXBlOiAnZGF5R3JpZCcsXG4gICAgICAgICAgICBkdXJhdGlvbjogeyBtb250aHM6IDEgfSxcbiAgICAgICAgICAgIG1vbnRoTW9kZTogdHJ1ZSxcbiAgICAgICAgICAgIGZpeGVkV2Vla0NvdW50OiB0cnVlLFxuICAgICAgICB9LFxuICAgIH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgbWFpbjtcbmV4cG9ydCB7IERheVRhYmxlVmlldyBhcyBEYXlHcmlkVmlldywgRGF5VGFibGUsIERheVRhYmxlU2xpY2VyLCBUYWJsZSwgVGFibGVWaWV3LCBidWlsZERheVRhYmxlTW9kZWwgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1haW4uanMubWFwXG4iXSwibmFtZXMiOlsiY3JlYXRlUmVmIiwiZ2V0U3RpY2t5SGVhZGVyRGF0ZXMiLCJjcmVhdGVFbGVtZW50IiwiVmlld1Jvb3QiLCJTaW1wbGVTY3JvbGxHcmlkIiwiZ2V0U3RpY2t5Rm9vdGVyU2Nyb2xsYmFyIiwicmVuZGVyU2Nyb2xsU2hpbSIsIkRhdGVDb21wb25lbnQiLCJidWlsZE5hdkxpbmtBdHRycyIsIkRheUNlbGxDb250ZW50IiwiRnJhZ21lbnQiLCJCYXNlQ29tcG9uZW50IiwiY3JlYXRlRm9ybWF0dGVyIiwiU3RhbmRhcmRFdmVudCIsImJ1aWxkU2VnVGltZVRleHQiLCJFdmVudFJvb3QiLCJnZXRTZWdBbmNob3JBdHRycyIsIm1lbW9pemUiLCJNb3JlTGlua1Jvb3QiLCJnZXRTZWdNZXRhIiwiY3JlYXRlQXJpYUNsaWNrQXR0cnMiLCJnZXRVbmlxdWVEb21JZCIsInNldFJlZiIsIkRheUNlbGxSb290IiwiV2Vla051bWJlclJvb3QiLCJidWlsZEVudHJ5S2V5IiwiaW50ZXJzZWN0U3BhbnMiLCJTZWdIaWVyYXJjaHkiLCJpbnRlcnNlY3RSYW5nZXMiLCJhZGREYXlzIiwiUmVmTWFwIiwic29ydEV2ZW50U2VncyIsImlzUHJvcHNFcXVhbCIsImJ1aWxkRXZlbnRSYW5nZUtleSIsIkJnRXZlbnQiLCJyZW5kZXJGaWxsIiwiUG9zaXRpb25DYWNoZSIsIk5vd1RpbWVyIiwiU2xpY2VyIiwiRGF5SGVhZGVyIiwiRGF5U2VyaWVzTW9kZWwiLCJEYXlUYWJsZU1vZGVsIiwiYWRkV2Vla3MiLCJkaWZmV2Vla3MiLCJEYXRlUHJvZmlsZUdlbmVyYXRvciIsImNyZWF0ZVBsdWdpbiIsIl9fZXh0ZW5kcyIsIl9fYXNzaWduIiwiX19zcHJlYWRBcnJheSIsIlRhYmxlVmlldyIsIl9zdXBlciIsIl90aGlzIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJoZWFkZXJFbFJlZiIsInByb3RvdHlwZSIsInJlbmRlclNpbXBsZUxheW91dCIsImhlYWRlclJvd0NvbnRlbnQiLCJib2R5Q29udGVudCIsIl9hIiwicHJvcHMiLCJjb250ZXh0Iiwic2VjdGlvbnMiLCJzdGlja3lIZWFkZXJEYXRlcyIsIm9wdGlvbnMiLCJwdXNoIiwidHlwZSIsImtleSIsImlzU3RpY2t5IiwiY2h1bmsiLCJlbFJlZiIsInRhYmxlQ2xhc3NOYW1lIiwicm93Q29udGVudCIsImxpcXVpZCIsImNvbnRlbnQiLCJ2aWV3U3BlYyIsInJvb3RFbFJlZiIsImNsYXNzTmFtZXMiLCJyZWYiLCJjbGFzc05hbWUiLCJjb25jYXQiLCJqb2luIiwiaXNIZWlnaHRBdXRvIiwiZm9yUHJpbnQiLCJjb2xsYXBzaWJsZVdpZHRoIiwiY29scyIsInJlbmRlckhTY3JvbGxMYXlvdXQiLCJjb2xDbnQiLCJkYXlNaW5XaWR0aCIsIlNjcm9sbEdyaWQiLCJwbHVnaW5Ib29rcyIsInNjcm9sbEdyaWRJbXBsIiwiRXJyb3IiLCJzdGlja3lGb290ZXJTY3JvbGxiYXIiLCJjaHVua3MiLCJjb2xHcm91cHMiLCJzcGFuIiwibWluV2lkdGgiLCJzcGxpdFNlZ3NCeVJvdyIsInNlZ3MiLCJyb3dDbnQiLCJieVJvdyIsImkiLCJfaSIsInNlZ3NfMSIsImxlbmd0aCIsInNlZyIsInJvdyIsInNwbGl0U2Vnc0J5Rmlyc3RDb2wiLCJieUNvbCIsInNlZ3NfMiIsImZpcnN0Q29sIiwic3BsaXRJbnRlcmFjdGlvbkJ5Um93IiwidWkiLCJhZmZlY3RlZEluc3RhbmNlcyIsImlzRXZlbnQiLCJUYWJsZUNlbGxUb3AiLCJyZW5kZXIiLCJuYXZMaW5rQXR0cnMiLCJkYXRlIiwiZGF0ZVByb2ZpbGUiLCJ0b2RheVJhbmdlIiwic2hvd0RheU51bWJlciIsImV4dHJhSG9va1Byb3BzIiwiZGVmYXVsdENvbnRlbnQiLCJyZW5kZXJUb3BJbm5lciIsImlubmVyRWxSZWYiLCJpbm5lckNvbnRlbnQiLCJmb3JjZURheVRvcCIsImlkIiwiZGF5TnVtYmVySWQiLCJkYXlOdW1iZXJUZXh0IiwiREVGQVVMVF9UQUJMRV9FVkVOVF9USU1FX0ZPUk1BVCIsImhvdXIiLCJtaW51dGUiLCJvbWl0WmVyb01pbnV0ZSIsIm1lcmlkaWVtIiwiaGFzTGlzdEl0ZW1EaXNwbGF5IiwiZGlzcGxheSIsImV2ZW50UmFuZ2UiLCJkZWYiLCJhbGxEYXkiLCJsYXN0Q29sIiwiaXNTdGFydCIsImlzRW5kIiwiVGFibGVCbG9ja0V2ZW50IiwiZXh0cmFDbGFzc05hbWVzIiwiZGVmYXVsdFRpbWVGb3JtYXQiLCJkZWZhdWx0RGlzcGxheUV2ZW50RW5kIiwiZGlzYWJsZVJlc2l6aW5nIiwiVGFibGVMaXN0SXRlbUV2ZW50IiwidGltZUZvcm1hdCIsImV2ZW50VGltZUZvcm1hdCIsInRpbWVUZXh0IiwicmVuZGVySW5uZXJDb250ZW50IiwiaXNEcmFnZ2luZyIsImlzUmVzaXppbmciLCJpc0RhdGVTZWxlY3RpbmciLCJpc1NlbGVjdGVkIiwiaXNQYXN0IiwiaXNGdXR1cmUiLCJpc1RvZGF5IiwiaW5uZXJQcm9wcyIsInN0eWxlIiwiYm9yZGVyQ29sb3IiLCJiYWNrZ3JvdW5kQ29sb3IiLCJldmVudCIsInRpdGxlIiwiVGFibGVDZWxsTW9yZUxpbmsiLCJjb21waWxlU2VncyIsInNpbmdsZVBsYWNlbWVudHMiLCJhbGxTZWdzIiwiaW52aXNpYmxlU2VncyIsImFsbERheURhdGUiLCJtb3JlQ250IiwiaGlkZGVuU2VncyIsImFsaWdubWVudEVsUmVmIiwiYWxpZ25HcmlkVG9wIiwiZXh0cmFEYXRlU3BhbiIsInBvcG92ZXJDb250ZW50IiwiaXNGb3JjZWRJbnZpc2libGUiLCJldmVudERyYWciLCJldmVudFJlc2l6ZSIsIm1hcCIsImluc3RhbmNlSWQiLCJpbnN0YW5jZSIsInZpc2liaWxpdHkiLCJldmVudFNlbGVjdGlvbiIsImhhbmRsZUNsaWNrIiwiaXNFeHBhbmRlZCIsInBvcG92ZXJJZCIsInNpbmdsZVBsYWNlbWVudHNfMSIsInBsYWNlbWVudCIsImlzVmlzaWJsZSIsIkRFRkFVTFRfV0VFS19OVU1fRk9STUFUIiwid2VlayIsIlRhYmxlQ2VsbCIsInN0YXRlIiwiaGFuZGxlUm9vdEVsIiwiZWwiLCJkYXlFbFJlZiIsImRheUNsYXNzTmFtZXMiLCJyb290RGF0YUF0dHJzIiwiaXNEaXNhYmxlZCIsInJvbGUiLCJleHRyYURhdGFBdHRycyIsInNob3dXZWVrTnVtYmVyIiwiZGVmYXVsdEZvcm1hdCIsIndlZWtFbFJlZiIsIndlZWtDbGFzc05hbWVzIiwiZmdDb250ZW50RWxSZWYiLCJmZ0NvbnRlbnQiLCJtYXJnaW5Ub3AiLCJtb3JlTWFyZ2luVG9wIiwiYmdDb250ZW50IiwiY29tcHV0ZUZnU2VnUGxhY2VtZW50IiwiZGF5TWF4RXZlbnRzIiwiZGF5TWF4RXZlbnRSb3dzIiwic3RyaWN0T3JkZXIiLCJldmVudEluc3RhbmNlSGVpZ2h0cyIsIm1heENvbnRlbnRIZWlnaHQiLCJjZWxscyIsImhpZXJhcmNoeSIsIkRheUdyaWRTZWdIaWVyYXJjaHkiLCJhbGxvd1Jlc2xpY2luZyIsIm1heENvb3JkIiwiaGlkZGVuQ29uc3VtZXMiLCJtYXhTdGFja0NudCIsInNlZ0lucHV0cyIsInVua25vd25IZWlnaHRTZWdzIiwiZXZlbnRIZWlnaHQiLCJpbmRleCIsInRoaWNrbmVzcyIsInN0YXJ0IiwiZW5kIiwiaGlkZGVuRW50cmllcyIsImFkZFNlZ3MiLCJzZWdSZWN0cyIsInRvUmVjdHMiLCJwbGFjZVJlY3RzIiwic2luZ2xlQ29sUGxhY2VtZW50cyIsIm11bHRpQ29sUGxhY2VtZW50cyIsImxlZnRvdmVyTWFyZ2lucyIsIm1vcmVDbnRzIiwibW9yZU1hcmdpblRvcHMiLCJ1bmtub3duSGVpZ2h0U2Vnc18xIiwiaXNBYnNvbHV0ZSIsImFic29sdXRlVG9wIiwiY29sIiwicmVzbGljZVNlZyIsIl9iIiwiaGlkZGVuRW50cmllc18xIiwiaGlkZGVuRW50cnkiLCJoaWRkZW5TcGFuIiwiYWxsUmVjdHMiLCJyZWN0c0J5RWFjaENvbCIsImdyb3VwUmVjdHNCeUVhY2hDb2wiLCJyZWN0cyIsImN1cnJlbnRIZWlnaHQiLCJjdXJyZW50TWFyZ2luVG9wIiwicmVjdHNfMSIsInJlY3QiLCJsZXZlbENvb3JkIiwibXVsdGlQbGFjZW1lbnRzIiwicmVjdHNfMiIsImlzRmlyc3RDb2wiLCJyZWN0c18zIiwic3BhblN0YXJ0Iiwic3BhbkVuZCIsIm9yaWdSYW5nZSIsInJhbmdlIiwic2xpY2VkUmFuZ2UiLCJkdXJhdGlvbkVkaXRhYmxlIiwidmFsdWVPZiIsImZvcmNlSGlkZGVuIiwiY2FsbCIsImVudHJpZXNCeUxldmVsIiwiZXhjbHVkZUhpZGRlbiIsImVudHJ5IiwibGV2ZWwiLCJmaWx0ZXIiLCJoYW5kbGVJbnZhbGlkSW5zZXJ0aW9uIiwiaW5zZXJ0aW9uIiwidG91Y2hpbmdFbnRyeSIsInRvdWNoaW5nTGV2ZWwiLCJ0b3VjaGluZ0xhdGVyYWwiLCJ0b3VjaGluZ0VudHJ5SWQiLCJwbGFjZWhvbGRlckVudHJ5IiwicGxhY2Vob2xkZXJFbnRyeUlkIiwic3BsaXRFbnRyeSIsIlRhYmxlUm93IiwiY2VsbEVsUmVmcyIsImZyYW1lRWxSZWZzIiwiZmdFbFJlZnMiLCJzZWdIYXJuZXNzUmVmcyIsImZyYW1lUG9zaXRpb25zIiwiYnVzaW5lc3NIb3Vyc0J5Q29sIiwiYnVzaW5lc3NIb3VyU2VncyIsImJnRXZlbnRTZWdzQnlDb2wiLCJiZ0V2ZW50U2VncyIsImhpZ2hsaWdodFNlZ3NCeUNvbCIsImdldEhpZ2hsaWdodFNlZ3MiLCJtaXJyb3JTZWdzQnlDb2wiLCJnZXRNaXJyb3JTZWdzIiwiZmdFdmVudFNlZ3MiLCJldmVudE9yZGVyIiwiZXZlbnRPcmRlclN0cmljdCIsInJlbmRlckludHJvIiwiY2VsbCIsIm5vcm1hbEZnTm9kZXMiLCJyZW5kZXJGZ1NlZ3MiLCJtaXJyb3JGZ05vZGVzIiwiYnVpbGRNaXJyb3JQbGFjZW1lbnRzIiwiQm9vbGVhbiIsInNob3dEYXlOdW1iZXJzIiwic2hvd1dlZWtOdW1iZXJzIiwicmVuZGVyRmlsbFNlZ3MiLCJjb21wb25lbnREaWRNb3VudCIsInVwZGF0ZVNpemluZyIsImNvbXBvbmVudERpZFVwZGF0ZSIsInByZXZQcm9wcyIsInByZXZTdGF0ZSIsImN1cnJlbnRQcm9wcyIsImRhdGVTZWxlY3Rpb25TZWdzIiwic2VnUGxhY2VtZW50cyIsImlzTWlycm9yIiwibm9kZXMiLCJzZWdQbGFjZW1lbnRzXzEiLCJsZWZ0IiwicmlnaHQiLCJpc1J0bCIsImxlZnRzIiwicmlnaHRzIiwidG9wIiwiZmlsbFR5cGUiLCJsZWZ0UmlnaHRDc3MiLCJpc0V4dGVybmFsU2l6aW5nQ2hhbmdlIiwiY2xpZW50V2lkdGgiLCJmcmFtZUVscyIsImN1cnJlbnRNYXAiLCJvcmlnaW5FbCIsImN1cnJlbnQiLCJzZXRTdGF0ZSIsIm9sZEluc3RhbmNlSGVpZ2h0cyIsIm5ld0luc3RhbmNlSGVpZ2h0cyIsInF1ZXJ5RXZlbnRJbnN0YW5jZUhlaWdodHMiLCJsaW1pdEJ5Q29udGVudEhlaWdodCIsImNvbXB1dGVNYXhDb250ZW50SGVpZ2h0Iiwic2VnRWxNYXAiLCJoZWlnaHQiLCJNYXRoIiwicm91bmQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJzcGxpdCIsIm1heCIsImZpcnN0S2V5IiwiY2VsbEVsIiwiZmNDb250YWluZXJFbCIsImJvdHRvbSIsImdldENlbGxFbHMiLCJlbE1hcCIsImFkZFN0YXRlRXF1YWxpdHkiLCJtaXJyb3JTZWdzIiwiY29sUGxhY2VtZW50cyIsInRvcHNCeUluc3RhbmNlSWQiLCJidWlsZEFic29sdXRlVG9wSGFzaCIsImNvbFBsYWNlbWVudHNfMSIsInBsYWNlbWVudHMiLCJwbGFjZW1lbnRzXzEiLCJUYWJsZSIsInNwbGl0QnVzaW5lc3NIb3VyU2VncyIsInNwbGl0QmdFdmVudFNlZ3MiLCJzcGxpdEZnRXZlbnRTZWdzIiwic3BsaXREYXRlU2VsZWN0aW9uU2VncyIsInNwbGl0RXZlbnREcmFnIiwic3BsaXRFdmVudFJlc2l6ZSIsInJvd1JlZnMiLCJyb290RWwiLCJyZWdpc3RlckludGVyYWN0aXZlQ29tcG9uZW50IiwiaXNIaXRDb21ib0FsbG93ZWQiLCJ1bnJlZ2lzdGVySW50ZXJhY3RpdmVDb21wb25lbnQiLCJleHBhbmRSb3dzIiwiYnVzaW5lc3NIb3VyU2Vnc0J5Um93IiwiYmdFdmVudFNlZ3NCeVJvdyIsImZnRXZlbnRTZWdzQnlSb3ciLCJkYXRlU2VsZWN0aW9uU2Vnc0J5Um93IiwiZXZlbnREcmFnQnlSb3ciLCJldmVudFJlc2l6ZUJ5Um93IiwibGltaXRWaWFCYWxhbmNlZCIsIndpZHRoIiwidGFibGVNaW5XaWR0aCIsInVuaXQiLCJub3dEYXRlIiwiY2xpZW50SGVpZ2h0IiwiY29sR3JvdXBOb2RlIiwidG9JU09TdHJpbmciLCJyZW5kZXJSb3dJbnRybyIsImlzU2VnQWxsRGF5IiwicHJlcGFyZUhpdHMiLCJyb3dQb3NpdGlvbnMiLCJjb2xsZWN0Iiwicm93T2JqIiwiY29sUG9zaXRpb25zIiwicXVlcnlIaXQiLCJwb3NpdGlvbkxlZnQiLCJwb3NpdGlvblRvcCIsImxlZnRUb0luZGV4IiwidG9wVG9JbmRleCIsImRhdGVTcGFuIiwiZ2V0Q2VsbFJhbmdlIiwiZGF5RWwiLCJnZXRDZWxsRWwiLCJ0b3BzIiwiYm90dG9tcyIsImxheWVyIiwiRGF5VGFibGVTbGljZXIiLCJmb3JjZURheUlmTGlzdEl0ZW0iLCJzbGljZVJhbmdlIiwiZGF0ZVJhbmdlIiwiZGF5VGFibGVNb2RlbCIsIkRheVRhYmxlIiwic2xpY2VyIiwidGFibGVSZWYiLCJzbGljZVByb3BzIiwibmV4dERheVRocmVzaG9sZCIsImhlYWRlckFsaWduRWxSZWYiLCJEYXlUYWJsZVZpZXciLCJidWlsZERheVRhYmxlTW9kZWwiLCJoZWFkZXJSZWYiLCJkYXRlUHJvZmlsZUdlbmVyYXRvciIsImhlYWRlckNvbnRlbnQiLCJkYXlIZWFkZXJzIiwiZGF0ZXMiLCJoZWFkZXJEYXRlcyIsImRhdGVzUmVwRGlzdGluY3REYXlzIiwiY29udGVudEFyZyIsImJ1c2luZXNzSG91cnMiLCJkYXRlU2VsZWN0aW9uIiwiZXZlbnRTdG9yZSIsImV2ZW50VWlCYXNlcyIsInRhYmxlQ29sR3JvdXBOb2RlIiwid2Vla051bWJlcnMiLCJkYXlTZXJpZXMiLCJyZW5kZXJSYW5nZSIsInRlc3QiLCJjdXJyZW50UmFuZ2VVbml0IiwiVGFibGVEYXRlUHJvZmlsZUdlbmVyYXRvciIsImJ1aWxkUmVuZGVyUmFuZ2UiLCJjdXJyZW50UmFuZ2UiLCJpc1JhbmdlQWxsRGF5IiwiZGF0ZUVudiIsImVuZE9mV2VlayIsInN0YXJ0T2ZXZWVrIiwibW9udGhNb2RlIiwiZml4ZWRXZWVrQ291bnQiLCJjZWlsIiwibWFpbiIsImluaXRpYWxWaWV3Iiwidmlld3MiLCJkYXlHcmlkIiwiY29tcG9uZW50IiwiZGF0ZVByb2ZpbGVHZW5lcmF0b3JDbGFzcyIsImRheUdyaWREYXkiLCJkdXJhdGlvbiIsImRheXMiLCJkYXlHcmlkV2VlayIsIndlZWtzIiwiZGF5R3JpZE1vbnRoIiwibW9udGhzIiwiRGF5R3JpZFZpZXciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@fullcalendar/daygrid/main.js\n");

/***/ }),

/***/ "./node_modules/@fullcalendar/interaction/main.js":
/*!********************************************************!*\
  !*** ./node_modules/@fullcalendar/interaction/main.js ***!
  \********************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Draggable\": function() { return /* binding */ ExternalDraggable1; },\n/* harmony export */   \"FeaturefulElementDragging\": function() { return /* binding */ FeaturefulElementDragging1; },\n/* harmony export */   \"PointerDragging\": function() { return /* binding */ PointerDragging1; },\n/* harmony export */   \"ThirdPartyDraggable\": function() { return /* binding */ ThirdPartyDraggable1; }\n/* harmony export */ });\n/* harmony import */ var _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fullcalendar/common */ \"./node_modules/@fullcalendar/common/main.js\");\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nfunction _instanceof(left, right) {\n    if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n        return !!right[Symbol.hasInstance](left);\n    } else {\n        return left instanceof right;\n    }\n}\n/*!\nFullCalendar v5.10.2\nDocs & License: https://fullcalendar.io/\n(c) 2021 Adam Shaw\n*/ \n\n_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.config.touchMouseIgnoreWait = 500;\nvar ignoreMouseDepth = 0;\nvar listenerCnt = 0;\nvar isWindowTouchMoveCancelled = false;\n/*\nUses a \"pointer\" abstraction, which monitors UI events for both mouse and touch.\nTracks when the pointer \"drags\" on a certain element, meaning down+move+up.\n\nAlso, tracks if there was touch-scrolling.\nAlso, can prevent touch-scrolling from happening.\nAlso, can fire pointermove events when scrolling happens underneath, even when no real pointer movement.\n\nemits:\n- pointerdown\n- pointermove\n- pointerup\n*/ var PointerDragging1 = /** @class */ function() {\n    var PointerDragging = function PointerDragging(containerEl) {\n        var _this = this;\n        this.subjectEl = null;\n        // options that can be directly assigned by caller\n        this.selector = \"\"; // will cause subjectEl in all emitted events to be this element\n        this.handleSelector = \"\";\n        this.shouldIgnoreMove = false;\n        this.shouldWatchScroll = true; // for simulating pointermove on scroll\n        // internal states\n        this.isDragging = false;\n        this.isTouchDragging = false;\n        this.wasTouchScroll = false;\n        // Mouse\n        // ----------------------------------------------------------------------------------------------------\n        this.handleMouseDown = function(ev) {\n            if (!_this.shouldIgnoreMouse() && isPrimaryMouseButton(ev) && _this.tryStart(ev)) {\n                var pev = _this.createEventFromMouse(ev, true);\n                _this.emitter.trigger(\"pointerdown\", pev);\n                _this.initScrollWatch(pev);\n                if (!_this.shouldIgnoreMove) {\n                    document.addEventListener(\"mousemove\", _this.handleMouseMove);\n                }\n                document.addEventListener(\"mouseup\", _this.handleMouseUp);\n            }\n        };\n        this.handleMouseMove = function(ev) {\n            var pev = _this.createEventFromMouse(ev);\n            _this.recordCoords(pev);\n            _this.emitter.trigger(\"pointermove\", pev);\n        };\n        this.handleMouseUp = function(ev) {\n            document.removeEventListener(\"mousemove\", _this.handleMouseMove);\n            document.removeEventListener(\"mouseup\", _this.handleMouseUp);\n            _this.emitter.trigger(\"pointerup\", _this.createEventFromMouse(ev));\n            _this.cleanup(); // call last so that pointerup has access to props\n        };\n        // Touch\n        // ----------------------------------------------------------------------------------------------------\n        this.handleTouchStart = function(ev) {\n            if (_this.tryStart(ev)) {\n                _this.isTouchDragging = true;\n                var pev = _this.createEventFromTouch(ev, true);\n                _this.emitter.trigger(\"pointerdown\", pev);\n                _this.initScrollWatch(pev);\n                // unlike mouse, need to attach to target, not document\n                // https://stackoverflow.com/a/45760014\n                var targetEl = ev.target;\n                if (!_this.shouldIgnoreMove) {\n                    targetEl.addEventListener(\"touchmove\", _this.handleTouchMove);\n                }\n                targetEl.addEventListener(\"touchend\", _this.handleTouchEnd);\n                targetEl.addEventListener(\"touchcancel\", _this.handleTouchEnd); // treat it as a touch end\n                // attach a handler to get called when ANY scroll action happens on the page.\n                // this was impossible to do with normal on/off because 'scroll' doesn't bubble.\n                // http://stackoverflow.com/a/32954565/96342\n                window.addEventListener(\"scroll\", _this.handleTouchScroll, true);\n            }\n        };\n        this.handleTouchMove = function(ev) {\n            var pev = _this.createEventFromTouch(ev);\n            _this.recordCoords(pev);\n            _this.emitter.trigger(\"pointermove\", pev);\n        };\n        this.handleTouchEnd = function(ev) {\n            if (_this.isDragging) {\n                var targetEl = ev.target;\n                targetEl.removeEventListener(\"touchmove\", _this.handleTouchMove);\n                targetEl.removeEventListener(\"touchend\", _this.handleTouchEnd);\n                targetEl.removeEventListener(\"touchcancel\", _this.handleTouchEnd);\n                window.removeEventListener(\"scroll\", _this.handleTouchScroll, true); // useCaptured=true\n                _this.emitter.trigger(\"pointerup\", _this.createEventFromTouch(ev));\n                _this.cleanup(); // call last so that pointerup has access to props\n                _this.isTouchDragging = false;\n                startIgnoringMouse();\n            }\n        };\n        this.handleTouchScroll = function() {\n            _this.wasTouchScroll = true;\n        };\n        this.handleScroll = function(ev) {\n            if (!_this.shouldIgnoreMove) {\n                var pageX = window.pageXOffset - _this.prevScrollX + _this.prevPageX;\n                var pageY = window.pageYOffset - _this.prevScrollY + _this.prevPageY;\n                _this.emitter.trigger(\"pointermove\", {\n                    origEvent: ev,\n                    isTouch: _this.isTouchDragging,\n                    subjectEl: _this.subjectEl,\n                    pageX: pageX,\n                    pageY: pageY,\n                    deltaX: pageX - _this.origPageX,\n                    deltaY: pageY - _this.origPageY\n                });\n            }\n        };\n        this.containerEl = containerEl;\n        this.emitter = new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.Emitter();\n        containerEl.addEventListener(\"mousedown\", this.handleMouseDown);\n        containerEl.addEventListener(\"touchstart\", this.handleTouchStart, {\n            passive: true\n        });\n        listenerCreated();\n    };\n    PointerDragging.prototype.destroy = function() {\n        this.containerEl.removeEventListener(\"mousedown\", this.handleMouseDown);\n        this.containerEl.removeEventListener(\"touchstart\", this.handleTouchStart, {\n            passive: true\n        });\n        listenerDestroyed();\n    };\n    PointerDragging.prototype.tryStart = function(ev) {\n        var subjectEl = this.querySubjectEl(ev);\n        var downEl = ev.target;\n        if (subjectEl && (!this.handleSelector || (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.elementClosest)(downEl, this.handleSelector))) {\n            this.subjectEl = subjectEl;\n            this.isDragging = true; // do this first so cancelTouchScroll will work\n            this.wasTouchScroll = false;\n            return true;\n        }\n        return false;\n    };\n    PointerDragging.prototype.cleanup = function() {\n        isWindowTouchMoveCancelled = false;\n        this.isDragging = false;\n        this.subjectEl = null;\n        // keep wasTouchScroll around for later access\n        this.destroyScrollWatch();\n    };\n    PointerDragging.prototype.querySubjectEl = function(ev) {\n        if (this.selector) {\n            return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.elementClosest)(ev.target, this.selector);\n        }\n        return this.containerEl;\n    };\n    PointerDragging.prototype.shouldIgnoreMouse = function() {\n        return ignoreMouseDepth || this.isTouchDragging;\n    };\n    // can be called by user of this class, to cancel touch-based scrolling for the current drag\n    PointerDragging.prototype.cancelTouchScroll = function() {\n        if (this.isDragging) {\n            isWindowTouchMoveCancelled = true;\n        }\n    };\n    // Scrolling that simulates pointermoves\n    // ----------------------------------------------------------------------------------------------------\n    PointerDragging.prototype.initScrollWatch = function(ev) {\n        if (this.shouldWatchScroll) {\n            this.recordCoords(ev);\n            window.addEventListener(\"scroll\", this.handleScroll, true); // useCapture=true\n        }\n    };\n    PointerDragging.prototype.recordCoords = function(ev) {\n        if (this.shouldWatchScroll) {\n            this.prevPageX = ev.pageX;\n            this.prevPageY = ev.pageY;\n            this.prevScrollX = window.pageXOffset;\n            this.prevScrollY = window.pageYOffset;\n        }\n    };\n    PointerDragging.prototype.destroyScrollWatch = function() {\n        if (this.shouldWatchScroll) {\n            window.removeEventListener(\"scroll\", this.handleScroll, true); // useCaptured=true\n        }\n    };\n    // Event Normalization\n    // ----------------------------------------------------------------------------------------------------\n    PointerDragging.prototype.createEventFromMouse = function(ev, isFirst) {\n        var deltaX = 0;\n        var deltaY = 0;\n        // TODO: repeat code\n        if (isFirst) {\n            this.origPageX = ev.pageX;\n            this.origPageY = ev.pageY;\n        } else {\n            deltaX = ev.pageX - this.origPageX;\n            deltaY = ev.pageY - this.origPageY;\n        }\n        return {\n            origEvent: ev,\n            isTouch: false,\n            subjectEl: this.subjectEl,\n            pageX: ev.pageX,\n            pageY: ev.pageY,\n            deltaX: deltaX,\n            deltaY: deltaY\n        };\n    };\n    PointerDragging.prototype.createEventFromTouch = function(ev, isFirst) {\n        var touches = ev.touches;\n        var pageX;\n        var pageY;\n        var deltaX = 0;\n        var deltaY = 0;\n        // if touch coords available, prefer,\n        // because FF would give bad ev.pageX ev.pageY\n        if (touches && touches.length) {\n            pageX = touches[0].pageX;\n            pageY = touches[0].pageY;\n        } else {\n            pageX = ev.pageX;\n            pageY = ev.pageY;\n        }\n        // TODO: repeat code\n        if (isFirst) {\n            this.origPageX = pageX;\n            this.origPageY = pageY;\n        } else {\n            deltaX = pageX - this.origPageX;\n            deltaY = pageY - this.origPageY;\n        }\n        return {\n            origEvent: ev,\n            isTouch: true,\n            subjectEl: this.subjectEl,\n            pageX: pageX,\n            pageY: pageY,\n            deltaX: deltaX,\n            deltaY: deltaY\n        };\n    };\n    return PointerDragging;\n}();\n// Returns a boolean whether this was a left mouse click and no ctrl key (which means right click on Mac)\nfunction isPrimaryMouseButton(ev) {\n    return ev.button === 0 && !ev.ctrlKey;\n}\n// Ignoring fake mouse events generated by touch\n// ----------------------------------------------------------------------------------------------------\nfunction startIgnoringMouse() {\n    ignoreMouseDepth += 1;\n    setTimeout(function() {\n        ignoreMouseDepth -= 1;\n    }, _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.config.touchMouseIgnoreWait);\n}\n// We want to attach touchmove as early as possible for Safari\n// ----------------------------------------------------------------------------------------------------\nfunction listenerCreated() {\n    listenerCnt += 1;\n    if (listenerCnt === 1) {\n        window.addEventListener(\"touchmove\", onWindowTouchMove, {\n            passive: false\n        });\n    }\n}\nfunction listenerDestroyed() {\n    listenerCnt -= 1;\n    if (!listenerCnt) {\n        window.removeEventListener(\"touchmove\", onWindowTouchMove, {\n            passive: false\n        });\n    }\n}\nfunction onWindowTouchMove(ev) {\n    if (isWindowTouchMoveCancelled) {\n        ev.preventDefault();\n    }\n}\n/*\nAn effect in which an element follows the movement of a pointer across the screen.\nThe moving element is a clone of some other element.\nMust call start + handleMove + stop.\n*/ var ElementMirror1 = /** @class */ function() {\n    var ElementMirror = function ElementMirror() {\n        this.isVisible = false; // must be explicitly enabled\n        this.sourceEl = null;\n        this.mirrorEl = null;\n        this.sourceElRect = null; // screen coords relative to viewport\n        // options that can be set directly by caller\n        this.parentNode = document.body; // HIGHLY SUGGESTED to set this to sidestep ShadowDOM issues\n        this.zIndex = 9999;\n        this.revertDuration = 0;\n    };\n    ElementMirror.prototype.start = function(sourceEl, pageX, pageY) {\n        this.sourceEl = sourceEl;\n        this.sourceElRect = this.sourceEl.getBoundingClientRect();\n        this.origScreenX = pageX - window.pageXOffset;\n        this.origScreenY = pageY - window.pageYOffset;\n        this.deltaX = 0;\n        this.deltaY = 0;\n        this.updateElPosition();\n    };\n    ElementMirror.prototype.handleMove = function(pageX, pageY) {\n        this.deltaX = pageX - window.pageXOffset - this.origScreenX;\n        this.deltaY = pageY - window.pageYOffset - this.origScreenY;\n        this.updateElPosition();\n    };\n    // can be called before start\n    ElementMirror.prototype.setIsVisible = function(bool) {\n        if (bool) {\n            if (!this.isVisible) {\n                if (this.mirrorEl) {\n                    this.mirrorEl.style.display = \"\";\n                }\n                this.isVisible = bool; // needs to happen before updateElPosition\n                this.updateElPosition(); // because was not updating the position while invisible\n            }\n        } else if (this.isVisible) {\n            if (this.mirrorEl) {\n                this.mirrorEl.style.display = \"none\";\n            }\n            this.isVisible = bool;\n        }\n    };\n    // always async\n    ElementMirror.prototype.stop = function(needsRevertAnimation, callback) {\n        var _this = this;\n        var done = function done() {\n            _this.cleanup();\n            callback();\n        };\n        if (needsRevertAnimation && this.mirrorEl && this.isVisible && this.revertDuration && (this.deltaX || this.deltaY) // if same coords, transition won't work\n        ) {\n            this.doRevertAnimation(done, this.revertDuration);\n        } else {\n            setTimeout(done, 0);\n        }\n    };\n    ElementMirror.prototype.doRevertAnimation = function(callback, revertDuration) {\n        var mirrorEl = this.mirrorEl;\n        var finalSourceElRect = this.sourceEl.getBoundingClientRect(); // because autoscrolling might have happened\n        mirrorEl.style.transition = \"top \" + revertDuration + \"ms,\" + \"left \" + revertDuration + \"ms\";\n        (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.applyStyle)(mirrorEl, {\n            left: finalSourceElRect.left,\n            top: finalSourceElRect.top\n        });\n        (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.whenTransitionDone)(mirrorEl, function() {\n            mirrorEl.style.transition = \"\";\n            callback();\n        });\n    };\n    ElementMirror.prototype.cleanup = function() {\n        if (this.mirrorEl) {\n            (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.removeElement)(this.mirrorEl);\n            this.mirrorEl = null;\n        }\n        this.sourceEl = null;\n    };\n    ElementMirror.prototype.updateElPosition = function() {\n        if (this.sourceEl && this.isVisible) {\n            (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.applyStyle)(this.getMirrorEl(), {\n                left: this.sourceElRect.left + this.deltaX,\n                top: this.sourceElRect.top + this.deltaY\n            });\n        }\n    };\n    ElementMirror.prototype.getMirrorEl = function() {\n        var sourceElRect = this.sourceElRect;\n        var mirrorEl = this.mirrorEl;\n        if (!mirrorEl) {\n            mirrorEl = this.mirrorEl = this.sourceEl.cloneNode(true); // cloneChildren=true\n            // we don't want long taps or any mouse interaction causing selection/menus.\n            // would use preventSelection(), but that prevents selectstart, causing problems.\n            mirrorEl.classList.add(\"fc-unselectable\");\n            mirrorEl.classList.add(\"fc-event-dragging\");\n            (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.applyStyle)(mirrorEl, {\n                position: \"fixed\",\n                zIndex: this.zIndex,\n                visibility: \"\",\n                boxSizing: \"border-box\",\n                width: sourceElRect.right - sourceElRect.left,\n                height: sourceElRect.bottom - sourceElRect.top,\n                right: \"auto\",\n                bottom: \"auto\",\n                margin: 0\n            });\n            this.parentNode.appendChild(mirrorEl);\n        }\n        return mirrorEl;\n    };\n    return ElementMirror;\n}();\n/*\nIs a cache for a given element's scroll information (all the info that ScrollController stores)\nin addition the \"client rectangle\" of the element.. the area within the scrollbars.\n\nThe cache can be in one of two modes:\n- doesListening:false - ignores when the container is scrolled by someone else\n- doesListening:true - watch for scrolling and update the cache\n*/ var ScrollGeomCache1 = /** @class */ function(_super) {\n    var ScrollGeomCache = function ScrollGeomCache(scrollController, doesListening) {\n        var _this = _super.call(this) || this;\n        _this.handleScroll = function() {\n            _this.scrollTop = _this.scrollController.getScrollTop();\n            _this.scrollLeft = _this.scrollController.getScrollLeft();\n            _this.handleScrollChange();\n        };\n        _this.scrollController = scrollController;\n        _this.doesListening = doesListening;\n        _this.scrollTop = _this.origScrollTop = scrollController.getScrollTop();\n        _this.scrollLeft = _this.origScrollLeft = scrollController.getScrollLeft();\n        _this.scrollWidth = scrollController.getScrollWidth();\n        _this.scrollHeight = scrollController.getScrollHeight();\n        _this.clientWidth = scrollController.getClientWidth();\n        _this.clientHeight = scrollController.getClientHeight();\n        _this.clientRect = _this.computeClientRect(); // do last in case it needs cached values\n        if (_this.doesListening) {\n            _this.getEventTarget().addEventListener(\"scroll\", _this.handleScroll);\n        }\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__extends)(ScrollGeomCache, _super);\n    ScrollGeomCache.prototype.destroy = function() {\n        if (this.doesListening) {\n            this.getEventTarget().removeEventListener(\"scroll\", this.handleScroll);\n        }\n    };\n    ScrollGeomCache.prototype.getScrollTop = function() {\n        return this.scrollTop;\n    };\n    ScrollGeomCache.prototype.getScrollLeft = function() {\n        return this.scrollLeft;\n    };\n    ScrollGeomCache.prototype.setScrollTop = function(top) {\n        this.scrollController.setScrollTop(top);\n        if (!this.doesListening) {\n            // we are not relying on the element to normalize out-of-bounds scroll values\n            // so we need to sanitize ourselves\n            this.scrollTop = Math.max(Math.min(top, this.getMaxScrollTop()), 0);\n            this.handleScrollChange();\n        }\n    };\n    ScrollGeomCache.prototype.setScrollLeft = function(top) {\n        this.scrollController.setScrollLeft(top);\n        if (!this.doesListening) {\n            // we are not relying on the element to normalize out-of-bounds scroll values\n            // so we need to sanitize ourselves\n            this.scrollLeft = Math.max(Math.min(top, this.getMaxScrollLeft()), 0);\n            this.handleScrollChange();\n        }\n    };\n    ScrollGeomCache.prototype.getClientWidth = function() {\n        return this.clientWidth;\n    };\n    ScrollGeomCache.prototype.getClientHeight = function() {\n        return this.clientHeight;\n    };\n    ScrollGeomCache.prototype.getScrollWidth = function() {\n        return this.scrollWidth;\n    };\n    ScrollGeomCache.prototype.getScrollHeight = function() {\n        return this.scrollHeight;\n    };\n    ScrollGeomCache.prototype.handleScrollChange = function() {};\n    return ScrollGeomCache;\n}(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.ScrollController);\nvar ElementScrollGeomCache1 = /** @class */ function(_super) {\n    var ElementScrollGeomCache = function ElementScrollGeomCache(el, doesListening) {\n        return _super.call(this, new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.ElementScrollController(el), doesListening) || this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__extends)(ElementScrollGeomCache, _super);\n    ElementScrollGeomCache.prototype.getEventTarget = function() {\n        return this.scrollController.el;\n    };\n    ElementScrollGeomCache.prototype.computeClientRect = function() {\n        return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.computeInnerRect)(this.scrollController.el);\n    };\n    return ElementScrollGeomCache;\n}(ScrollGeomCache1);\nvar WindowScrollGeomCache1 = /** @class */ function(_super) {\n    var WindowScrollGeomCache = function WindowScrollGeomCache(doesListening) {\n        return _super.call(this, new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.WindowScrollController(), doesListening) || this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__extends)(WindowScrollGeomCache, _super);\n    WindowScrollGeomCache.prototype.getEventTarget = function() {\n        return window;\n    };\n    WindowScrollGeomCache.prototype.computeClientRect = function() {\n        return {\n            left: this.scrollLeft,\n            right: this.scrollLeft + this.clientWidth,\n            top: this.scrollTop,\n            bottom: this.scrollTop + this.clientHeight\n        };\n    };\n    // the window is the only scroll object that changes it's rectangle relative\n    // to the document's topleft as it scrolls\n    WindowScrollGeomCache.prototype.handleScrollChange = function() {\n        this.clientRect = this.computeClientRect();\n    };\n    return WindowScrollGeomCache;\n}(ScrollGeomCache1);\n// If available we are using native \"performance\" API instead of \"Date\"\n// Read more about it on MDN:\n// https://developer.mozilla.org/en-US/docs/Web/API/Performance\nvar getTime = typeof performance === \"function\" ? performance.now : Date.now;\n/*\nFor a pointer interaction, automatically scrolls certain scroll containers when the pointer\napproaches the edge.\n\nThe caller must call start + handleMove + stop.\n*/ var AutoScroller1 = /** @class */ function() {\n    var AutoScroller = function AutoScroller() {\n        var _this = this;\n        // options that can be set by caller\n        this.isEnabled = true;\n        this.scrollQuery = [\n            window,\n            \".fc-scroller\"\n        ];\n        this.edgeThreshold = 50; // pixels\n        this.maxVelocity = 300; // pixels per second\n        // internal state\n        this.pointerScreenX = null;\n        this.pointerScreenY = null;\n        this.isAnimating = false;\n        this.scrollCaches = null;\n        // protect against the initial pointerdown being too close to an edge and starting the scroll\n        this.everMovedUp = false;\n        this.everMovedDown = false;\n        this.everMovedLeft = false;\n        this.everMovedRight = false;\n        this.animate = function() {\n            if (_this.isAnimating) {\n                var edge = _this.computeBestEdge(_this.pointerScreenX + window.pageXOffset, _this.pointerScreenY + window.pageYOffset);\n                if (edge) {\n                    var now = getTime();\n                    _this.handleSide(edge, (now - _this.msSinceRequest) / 1000);\n                    _this.requestAnimation(now);\n                } else {\n                    _this.isAnimating = false; // will stop animation\n                }\n            }\n        };\n    };\n    AutoScroller.prototype.start = function(pageX, pageY, scrollStartEl) {\n        if (this.isEnabled) {\n            this.scrollCaches = this.buildCaches(scrollStartEl);\n            this.pointerScreenX = null;\n            this.pointerScreenY = null;\n            this.everMovedUp = false;\n            this.everMovedDown = false;\n            this.everMovedLeft = false;\n            this.everMovedRight = false;\n            this.handleMove(pageX, pageY);\n        }\n    };\n    AutoScroller.prototype.handleMove = function(pageX, pageY) {\n        if (this.isEnabled) {\n            var pointerScreenX = pageX - window.pageXOffset;\n            var pointerScreenY = pageY - window.pageYOffset;\n            var yDelta = this.pointerScreenY === null ? 0 : pointerScreenY - this.pointerScreenY;\n            var xDelta = this.pointerScreenX === null ? 0 : pointerScreenX - this.pointerScreenX;\n            if (yDelta < 0) {\n                this.everMovedUp = true;\n            } else if (yDelta > 0) {\n                this.everMovedDown = true;\n            }\n            if (xDelta < 0) {\n                this.everMovedLeft = true;\n            } else if (xDelta > 0) {\n                this.everMovedRight = true;\n            }\n            this.pointerScreenX = pointerScreenX;\n            this.pointerScreenY = pointerScreenY;\n            if (!this.isAnimating) {\n                this.isAnimating = true;\n                this.requestAnimation(getTime());\n            }\n        }\n    };\n    AutoScroller.prototype.stop = function() {\n        if (this.isEnabled) {\n            this.isAnimating = false; // will stop animation\n            for(var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++){\n                var scrollCache = _a[_i];\n                scrollCache.destroy();\n            }\n            this.scrollCaches = null;\n        }\n    };\n    AutoScroller.prototype.requestAnimation = function(now) {\n        this.msSinceRequest = now;\n        requestAnimationFrame(this.animate);\n    };\n    AutoScroller.prototype.handleSide = function(edge, seconds) {\n        var scrollCache = edge.scrollCache;\n        var edgeThreshold = this.edgeThreshold;\n        var invDistance = edgeThreshold - edge.distance;\n        var velocity = invDistance * invDistance / (edgeThreshold * edgeThreshold) * this.maxVelocity * seconds;\n        var sign = 1;\n        switch(edge.name){\n            case \"left\":\n                sign = -1;\n            // falls through\n            case \"right\":\n                scrollCache.setScrollLeft(scrollCache.getScrollLeft() + velocity * sign);\n                break;\n            case \"top\":\n                sign = -1;\n            // falls through\n            case \"bottom\":\n                scrollCache.setScrollTop(scrollCache.getScrollTop() + velocity * sign);\n                break;\n        }\n    };\n    // left/top are relative to document topleft\n    AutoScroller.prototype.computeBestEdge = function(left, top) {\n        var edgeThreshold = this.edgeThreshold;\n        var bestSide = null;\n        var scrollCaches = this.scrollCaches || [];\n        for(var _i = 0, scrollCaches_1 = scrollCaches; _i < scrollCaches_1.length; _i++){\n            var scrollCache = scrollCaches_1[_i];\n            var rect = scrollCache.clientRect;\n            var leftDist = left - rect.left;\n            var rightDist = rect.right - left;\n            var topDist = top - rect.top;\n            var bottomDist = rect.bottom - top;\n            // completely within the rect?\n            if (leftDist >= 0 && rightDist >= 0 && topDist >= 0 && bottomDist >= 0) {\n                if (topDist <= edgeThreshold && this.everMovedUp && scrollCache.canScrollUp() && (!bestSide || bestSide.distance > topDist)) {\n                    bestSide = {\n                        scrollCache: scrollCache,\n                        name: \"top\",\n                        distance: topDist\n                    };\n                }\n                if (bottomDist <= edgeThreshold && this.everMovedDown && scrollCache.canScrollDown() && (!bestSide || bestSide.distance > bottomDist)) {\n                    bestSide = {\n                        scrollCache: scrollCache,\n                        name: \"bottom\",\n                        distance: bottomDist\n                    };\n                }\n                if (leftDist <= edgeThreshold && this.everMovedLeft && scrollCache.canScrollLeft() && (!bestSide || bestSide.distance > leftDist)) {\n                    bestSide = {\n                        scrollCache: scrollCache,\n                        name: \"left\",\n                        distance: leftDist\n                    };\n                }\n                if (rightDist <= edgeThreshold && this.everMovedRight && scrollCache.canScrollRight() && (!bestSide || bestSide.distance > rightDist)) {\n                    bestSide = {\n                        scrollCache: scrollCache,\n                        name: \"right\",\n                        distance: rightDist\n                    };\n                }\n            }\n        }\n        return bestSide;\n    };\n    AutoScroller.prototype.buildCaches = function(scrollStartEl) {\n        return this.queryScrollEls(scrollStartEl).map(function(el) {\n            if (el === window) {\n                return new WindowScrollGeomCache1(false); // false = don't listen to user-generated scrolls\n            }\n            return new ElementScrollGeomCache1(el, false); // false = don't listen to user-generated scrolls\n        });\n    };\n    AutoScroller.prototype.queryScrollEls = function(scrollStartEl) {\n        var els = [];\n        for(var _i = 0, _a = this.scrollQuery; _i < _a.length; _i++){\n            var query = _a[_i];\n            if (typeof query === \"object\") {\n                els.push(query);\n            } else {\n                els.push.apply(els, Array.prototype.slice.call((0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.getElRoot)(scrollStartEl).querySelectorAll(query)));\n            }\n        }\n        return els;\n    };\n    return AutoScroller;\n}();\n/*\nMonitors dragging on an element. Has a number of high-level features:\n- minimum distance required before dragging\n- minimum wait time (\"delay\") before dragging\n- a mirror element that follows the pointer\n*/ var FeaturefulElementDragging1 = /** @class */ function(_super) {\n    var FeaturefulElementDragging = function FeaturefulElementDragging(containerEl, selector) {\n        var _this = _super.call(this, containerEl) || this;\n        _this.containerEl = containerEl;\n        // options that can be directly set by caller\n        // the caller can also set the PointerDragging's options as well\n        _this.delay = null;\n        _this.minDistance = 0;\n        _this.touchScrollAllowed = true; // prevents drag from starting and blocks scrolling during drag\n        _this.mirrorNeedsRevert = false;\n        _this.isInteracting = false; // is the user validly moving the pointer? lasts until pointerup\n        _this.isDragging = false; // is it INTENTFULLY dragging? lasts until after revert animation\n        _this.isDelayEnded = false;\n        _this.isDistanceSurpassed = false;\n        _this.delayTimeoutId = null;\n        _this.onPointerDown = function(ev) {\n            if (!_this.isDragging) {\n                _this.isInteracting = true;\n                _this.isDelayEnded = false;\n                _this.isDistanceSurpassed = false;\n                (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.preventSelection)(document.body);\n                (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.preventContextMenu)(document.body);\n                // prevent links from being visited if there's an eventual drag.\n                // also prevents selection in older browsers (maybe?).\n                // not necessary for touch, besides, browser would complain about passiveness.\n                if (!ev.isTouch) {\n                    ev.origEvent.preventDefault();\n                }\n                _this.emitter.trigger(\"pointerdown\", ev);\n                if (_this.isInteracting && !_this.pointer.shouldIgnoreMove) {\n                    // actions related to initiating dragstart+dragmove+dragend...\n                    _this.mirror.setIsVisible(false); // reset. caller must set-visible\n                    _this.mirror.start(ev.subjectEl, ev.pageX, ev.pageY); // must happen on first pointer down\n                    _this.startDelay(ev);\n                    if (!_this.minDistance) {\n                        _this.handleDistanceSurpassed(ev);\n                    }\n                }\n            }\n        };\n        _this.onPointerMove = function(ev) {\n            if (_this.isInteracting) {\n                _this.emitter.trigger(\"pointermove\", ev);\n                if (!_this.isDistanceSurpassed) {\n                    var minDistance = _this.minDistance;\n                    var distanceSq = void 0; // current distance from the origin, squared\n                    var deltaX = ev.deltaX, deltaY = ev.deltaY;\n                    distanceSq = deltaX * deltaX + deltaY * deltaY;\n                    if (distanceSq >= minDistance * minDistance) {\n                        _this.handleDistanceSurpassed(ev);\n                    }\n                }\n                if (_this.isDragging) {\n                    // a real pointer move? (not one simulated by scrolling)\n                    if (ev.origEvent.type !== \"scroll\") {\n                        _this.mirror.handleMove(ev.pageX, ev.pageY);\n                        _this.autoScroller.handleMove(ev.pageX, ev.pageY);\n                    }\n                    _this.emitter.trigger(\"dragmove\", ev);\n                }\n            }\n        };\n        _this.onPointerUp = function(ev) {\n            if (_this.isInteracting) {\n                _this.isInteracting = false;\n                (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.allowSelection)(document.body);\n                (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.allowContextMenu)(document.body);\n                _this.emitter.trigger(\"pointerup\", ev); // can potentially set mirrorNeedsRevert\n                if (_this.isDragging) {\n                    _this.autoScroller.stop();\n                    _this.tryStopDrag(ev); // which will stop the mirror\n                }\n                if (_this.delayTimeoutId) {\n                    clearTimeout(_this.delayTimeoutId);\n                    _this.delayTimeoutId = null;\n                }\n            }\n        };\n        var pointer = _this.pointer = new PointerDragging1(containerEl);\n        pointer.emitter.on(\"pointerdown\", _this.onPointerDown);\n        pointer.emitter.on(\"pointermove\", _this.onPointerMove);\n        pointer.emitter.on(\"pointerup\", _this.onPointerUp);\n        if (selector) {\n            pointer.selector = selector;\n        }\n        _this.mirror = new ElementMirror1();\n        _this.autoScroller = new AutoScroller1();\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__extends)(FeaturefulElementDragging, _super);\n    FeaturefulElementDragging.prototype.destroy = function() {\n        this.pointer.destroy();\n        // HACK: simulate a pointer-up to end the current drag\n        // TODO: fire 'dragend' directly and stop interaction. discourage use of pointerup event (b/c might not fire)\n        this.onPointerUp({});\n    };\n    FeaturefulElementDragging.prototype.startDelay = function(ev) {\n        var _this = this;\n        if (typeof this.delay === \"number\") {\n            this.delayTimeoutId = setTimeout(function() {\n                _this.delayTimeoutId = null;\n                _this.handleDelayEnd(ev);\n            }, this.delay); // not assignable to number!\n        } else {\n            this.handleDelayEnd(ev);\n        }\n    };\n    FeaturefulElementDragging.prototype.handleDelayEnd = function(ev) {\n        this.isDelayEnded = true;\n        this.tryStartDrag(ev);\n    };\n    FeaturefulElementDragging.prototype.handleDistanceSurpassed = function(ev) {\n        this.isDistanceSurpassed = true;\n        this.tryStartDrag(ev);\n    };\n    FeaturefulElementDragging.prototype.tryStartDrag = function(ev) {\n        if (this.isDelayEnded && this.isDistanceSurpassed) {\n            if (!this.pointer.wasTouchScroll || this.touchScrollAllowed) {\n                this.isDragging = true;\n                this.mirrorNeedsRevert = false;\n                this.autoScroller.start(ev.pageX, ev.pageY, this.containerEl);\n                this.emitter.trigger(\"dragstart\", ev);\n                if (this.touchScrollAllowed === false) {\n                    this.pointer.cancelTouchScroll();\n                }\n            }\n        }\n    };\n    FeaturefulElementDragging.prototype.tryStopDrag = function(ev) {\n        // .stop() is ALWAYS asynchronous, which we NEED because we want all pointerup events\n        // that come from the document to fire beforehand. much more convenient this way.\n        this.mirror.stop(this.mirrorNeedsRevert, this.stopDrag.bind(this, ev));\n    };\n    FeaturefulElementDragging.prototype.stopDrag = function(ev) {\n        this.isDragging = false;\n        this.emitter.trigger(\"dragend\", ev);\n    };\n    // fill in the implementations...\n    FeaturefulElementDragging.prototype.setIgnoreMove = function(bool) {\n        this.pointer.shouldIgnoreMove = bool;\n    };\n    FeaturefulElementDragging.prototype.setMirrorIsVisible = function(bool) {\n        this.mirror.setIsVisible(bool);\n    };\n    FeaturefulElementDragging.prototype.setMirrorNeedsRevert = function(bool) {\n        this.mirrorNeedsRevert = bool;\n    };\n    FeaturefulElementDragging.prototype.setAutoScrollEnabled = function(bool) {\n        this.autoScroller.isEnabled = bool;\n    };\n    return FeaturefulElementDragging;\n}(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.ElementDragging);\n/*\nWhen this class is instantiated, it records the offset of an element (relative to the document topleft),\nand continues to monitor scrolling, updating the cached coordinates if it needs to.\nDoes not access the DOM after instantiation, so highly performant.\n\nAlso keeps track of all scrolling/overflow:hidden containers that are parents of the given element\nand an determine if a given point is inside the combined clipping rectangle.\n*/ var OffsetTracker1 = /** @class */ function() {\n    var OffsetTracker = function OffsetTracker(el) {\n        this.origRect = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.computeRect)(el);\n        // will work fine for divs that have overflow:hidden\n        this.scrollCaches = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.getClippingParents)(el).map(function(scrollEl) {\n            return new ElementScrollGeomCache1(scrollEl, true);\n        });\n    };\n    OffsetTracker.prototype.destroy = function() {\n        for(var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++){\n            var scrollCache = _a[_i];\n            scrollCache.destroy();\n        }\n    };\n    OffsetTracker.prototype.computeLeft = function() {\n        var left = this.origRect.left;\n        for(var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++){\n            var scrollCache = _a[_i];\n            left += scrollCache.origScrollLeft - scrollCache.getScrollLeft();\n        }\n        return left;\n    };\n    OffsetTracker.prototype.computeTop = function() {\n        var top = this.origRect.top;\n        for(var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++){\n            var scrollCache = _a[_i];\n            top += scrollCache.origScrollTop - scrollCache.getScrollTop();\n        }\n        return top;\n    };\n    OffsetTracker.prototype.isWithinClipping = function(pageX, pageY) {\n        var point = {\n            left: pageX,\n            top: pageY\n        };\n        for(var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++){\n            var scrollCache = _a[_i];\n            if (!isIgnoredClipping(scrollCache.getEventTarget()) && !(0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.pointInsideRect)(point, scrollCache.clientRect)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    return OffsetTracker;\n}();\n// certain clipping containers should never constrain interactions, like <html> and <body>\n// https://github.com/fullcalendar/fullcalendar/issues/3615\nfunction isIgnoredClipping(node) {\n    var tagName = node.tagName;\n    return tagName === \"HTML\" || tagName === \"BODY\";\n}\n/*\nTracks movement over multiple droppable areas (aka \"hits\")\nthat exist in one or more DateComponents.\nRelies on an existing draggable.\n\nemits:\n- pointerdown\n- dragstart\n- hitchange - fires initially, even if not over a hit\n- pointerup\n- (hitchange - again, to null, if ended over a hit)\n- dragend\n*/ var HitDragging1 = /** @class */ function() {\n    var HitDragging = function HitDragging(dragging, droppableStore) {\n        var _this = this;\n        // options that can be set by caller\n        this.useSubjectCenter = false;\n        this.requireInitial = true; // if doesn't start out on a hit, won't emit any events\n        this.initialHit = null;\n        this.movingHit = null;\n        this.finalHit = null; // won't ever be populated if shouldIgnoreMove\n        this.handlePointerDown = function(ev) {\n            var _$dragging = _this.dragging;\n            _this.initialHit = null;\n            _this.movingHit = null;\n            _this.finalHit = null;\n            _this.prepareHits();\n            _this.processFirstCoord(ev);\n            if (_this.initialHit || !_this.requireInitial) {\n                _$dragging.setIgnoreMove(false);\n                // TODO: fire this before computing processFirstCoord, so listeners can cancel. this gets fired by almost every handler :(\n                _this.emitter.trigger(\"pointerdown\", ev);\n            } else {\n                _$dragging.setIgnoreMove(true);\n            }\n        };\n        this.handleDragStart = function(ev) {\n            _this.emitter.trigger(\"dragstart\", ev);\n            _this.handleMove(ev, true); // force = fire even if initially null\n        };\n        this.handleDragMove = function(ev) {\n            _this.emitter.trigger(\"dragmove\", ev);\n            _this.handleMove(ev);\n        };\n        this.handlePointerUp = function(ev) {\n            _this.releaseHits();\n            _this.emitter.trigger(\"pointerup\", ev);\n        };\n        this.handleDragEnd = function(ev) {\n            if (_this.movingHit) {\n                _this.emitter.trigger(\"hitupdate\", null, true, ev);\n            }\n            _this.finalHit = _this.movingHit;\n            _this.movingHit = null;\n            _this.emitter.trigger(\"dragend\", ev);\n        };\n        this.droppableStore = droppableStore;\n        dragging.emitter.on(\"pointerdown\", this.handlePointerDown);\n        dragging.emitter.on(\"dragstart\", this.handleDragStart);\n        dragging.emitter.on(\"dragmove\", this.handleDragMove);\n        dragging.emitter.on(\"pointerup\", this.handlePointerUp);\n        dragging.emitter.on(\"dragend\", this.handleDragEnd);\n        this.dragging = dragging;\n        this.emitter = new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.Emitter();\n    };\n    // sets initialHit\n    // sets coordAdjust\n    HitDragging.prototype.processFirstCoord = function(ev) {\n        var origPoint = {\n            left: ev.pageX,\n            top: ev.pageY\n        };\n        var adjustedPoint = origPoint;\n        var subjectEl = ev.subjectEl;\n        var subjectRect;\n        if (_instanceof(subjectEl, HTMLElement)) {\n            subjectRect = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.computeRect)(subjectEl);\n            adjustedPoint = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.constrainPoint)(adjustedPoint, subjectRect);\n        }\n        var initialHit = this.initialHit = this.queryHitForOffset(adjustedPoint.left, adjustedPoint.top);\n        if (initialHit) {\n            if (this.useSubjectCenter && subjectRect) {\n                var slicedSubjectRect = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.intersectRects)(subjectRect, initialHit.rect);\n                if (slicedSubjectRect) {\n                    adjustedPoint = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.getRectCenter)(slicedSubjectRect);\n                }\n            }\n            this.coordAdjust = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.diffPoints)(adjustedPoint, origPoint);\n        } else {\n            this.coordAdjust = {\n                left: 0,\n                top: 0\n            };\n        }\n    };\n    HitDragging.prototype.handleMove = function(ev, forceHandle) {\n        var hit = this.queryHitForOffset(ev.pageX + this.coordAdjust.left, ev.pageY + this.coordAdjust.top);\n        if (forceHandle || !isHitsEqual(this.movingHit, hit)) {\n            this.movingHit = hit;\n            this.emitter.trigger(\"hitupdate\", hit, false, ev);\n        }\n    };\n    HitDragging.prototype.prepareHits = function() {\n        this.offsetTrackers = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.mapHash)(this.droppableStore, function(interactionSettings) {\n            interactionSettings.component.prepareHits();\n            return new OffsetTracker1(interactionSettings.el);\n        });\n    };\n    HitDragging.prototype.releaseHits = function() {\n        var offsetTrackers = this.offsetTrackers;\n        for(var id in offsetTrackers){\n            offsetTrackers[id].destroy();\n        }\n        this.offsetTrackers = {};\n    };\n    HitDragging.prototype.queryHitForOffset = function(offsetLeft, offsetTop) {\n        var _a = this, droppableStore = _a.droppableStore, offsetTrackers = _a.offsetTrackers;\n        var bestHit = null;\n        for(var id in droppableStore){\n            var component = droppableStore[id].component;\n            var offsetTracker = offsetTrackers[id];\n            if (offsetTracker && offsetTracker.isWithinClipping(offsetLeft, offsetTop)) {\n                var originLeft = offsetTracker.computeLeft();\n                var originTop = offsetTracker.computeTop();\n                var positionLeft = offsetLeft - originLeft;\n                var positionTop = offsetTop - originTop;\n                var origRect = offsetTracker.origRect;\n                var width = origRect.right - origRect.left;\n                var height = origRect.bottom - origRect.top;\n                if (// must be within the element's bounds\n                positionLeft >= 0 && positionLeft < width && positionTop >= 0 && positionTop < height) {\n                    var hit = component.queryHit(positionLeft, positionTop, width, height);\n                    if (hit && // make sure the hit is within activeRange, meaning it's not a dead cell\n                    (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.rangeContainsRange)(hit.dateProfile.activeRange, hit.dateSpan.range) && (!bestHit || hit.layer > bestHit.layer)) {\n                        hit.componentId = id;\n                        hit.context = component.context;\n                        // TODO: better way to re-orient rectangle\n                        hit.rect.left += originLeft;\n                        hit.rect.right += originLeft;\n                        hit.rect.top += originTop;\n                        hit.rect.bottom += originTop;\n                        bestHit = hit;\n                    }\n                }\n            }\n        }\n        return bestHit;\n    };\n    return HitDragging;\n}();\nfunction isHitsEqual(hit0, hit1) {\n    if (!hit0 && !hit1) {\n        return true;\n    }\n    if (Boolean(hit0) !== Boolean(hit1)) {\n        return false;\n    }\n    return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.isDateSpansEqual)(hit0.dateSpan, hit1.dateSpan);\n}\nfunction buildDatePointApiWithContext(dateSpan, context) {\n    var props = {};\n    for(var _i = 0, _a = context.pluginHooks.datePointTransforms; _i < _a.length; _i++){\n        var transform = _a[_i];\n        (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)(props, transform(dateSpan, context));\n    }\n    (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)(props, buildDatePointApi(dateSpan, context.dateEnv));\n    return props;\n}\nfunction buildDatePointApi(span, dateEnv) {\n    return {\n        date: dateEnv.toDate(span.range.start),\n        dateStr: dateEnv.formatIso(span.range.start, {\n            omitTime: span.allDay\n        }),\n        allDay: span.allDay\n    };\n}\n/*\nMonitors when the user clicks on a specific date/time of a component.\nA pointerdown+pointerup on the same \"hit\" constitutes a click.\n*/ var DateClicking1 = /** @class */ function(_super) {\n    var DateClicking = function DateClicking(settings) {\n        var _this = _super.call(this, settings) || this;\n        _this.handlePointerDown = function(pev) {\n            var dragging = _this.dragging;\n            var downEl = pev.origEvent.target;\n            // do this in pointerdown (not dragend) because DOM might be mutated by the time dragend is fired\n            dragging.setIgnoreMove(!_this.component.isValidDateDownEl(downEl));\n        };\n        // won't even fire if moving was ignored\n        _this.handleDragEnd = function(ev) {\n            var component = _this.component;\n            var pointer = _this.dragging.pointer;\n            if (!pointer.wasTouchScroll) {\n                var _a = _this.hitDragging, initialHit = _a.initialHit, finalHit = _a.finalHit;\n                if (initialHit && finalHit && isHitsEqual(initialHit, finalHit)) {\n                    var context = component.context;\n                    var arg = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, buildDatePointApiWithContext(initialHit.dateSpan, context)), {\n                        dayEl: initialHit.dayEl,\n                        jsEvent: ev.origEvent,\n                        view: context.viewApi || context.calendarApi.view\n                    });\n                    context.emitter.trigger(\"dateClick\", arg);\n                }\n            }\n        };\n        // we DO want to watch pointer moves because otherwise finalHit won't get populated\n        _this.dragging = new FeaturefulElementDragging1(settings.el);\n        _this.dragging.autoScroller.isEnabled = false;\n        var hitDragging = _this.hitDragging = new HitDragging1(_this.dragging, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.interactionSettingsToStore)(settings));\n        hitDragging.emitter.on(\"pointerdown\", _this.handlePointerDown);\n        hitDragging.emitter.on(\"dragend\", _this.handleDragEnd);\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__extends)(DateClicking, _super);\n    DateClicking.prototype.destroy = function() {\n        this.dragging.destroy();\n    };\n    return DateClicking;\n}(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.Interaction);\n/*\nTracks when the user selects a portion of time of a component,\nconstituted by a drag over date cells, with a possible delay at the beginning of the drag.\n*/ var DateSelecting1 = /** @class */ function(_super) {\n    var DateSelecting = function DateSelecting(settings) {\n        var _this = _super.call(this, settings) || this;\n        _this.dragSelection = null;\n        _this.handlePointerDown = function(ev) {\n            var _a = _this, component = _a.component, dragging = _a.dragging;\n            var options = component.context.options;\n            var canSelect = options.selectable && component.isValidDateDownEl(ev.origEvent.target);\n            // don't bother to watch expensive moves if component won't do selection\n            dragging.setIgnoreMove(!canSelect);\n            // if touch, require user to hold down\n            dragging.delay = ev.isTouch ? getComponentTouchDelay$1(component) : null;\n        };\n        _this.handleDragStart = function(ev) {\n            _this.component.context.calendarApi.unselect(ev); // unselect previous selections\n        };\n        _this.handleHitUpdate = function(hit, isFinal) {\n            var context = _this.component.context;\n            var dragSelection = null;\n            var isInvalid = false;\n            if (hit) {\n                var initialHit = _this.hitDragging.initialHit;\n                var disallowed = hit.componentId === initialHit.componentId && _this.isHitComboAllowed && !_this.isHitComboAllowed(initialHit, hit);\n                if (!disallowed) {\n                    dragSelection = joinHitsIntoSelection(initialHit, hit, context.pluginHooks.dateSelectionTransformers);\n                }\n                if (!dragSelection || !(0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.isDateSelectionValid)(dragSelection, hit.dateProfile, context)) {\n                    isInvalid = true;\n                    dragSelection = null;\n                }\n            }\n            if (dragSelection) {\n                context.dispatch({\n                    type: \"SELECT_DATES\",\n                    selection: dragSelection\n                });\n            } else if (!isFinal) {\n                context.dispatch({\n                    type: \"UNSELECT_DATES\"\n                });\n            }\n            if (!isInvalid) {\n                (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.enableCursor)();\n            } else {\n                (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.disableCursor)();\n            }\n            if (!isFinal) {\n                _this.dragSelection = dragSelection; // only clear if moved away from all hits while dragging\n            }\n        };\n        _this.handlePointerUp = function(pev) {\n            if (_this.dragSelection) {\n                // selection is already rendered, so just need to report selection\n                (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.triggerDateSelect)(_this.dragSelection, pev, _this.component.context);\n                _this.dragSelection = null;\n            }\n        };\n        var component1 = settings.component;\n        var options1 = component1.context.options;\n        var dragging1 = _this.dragging = new FeaturefulElementDragging1(settings.el);\n        dragging1.touchScrollAllowed = false;\n        dragging1.minDistance = options1.selectMinDistance || 0;\n        dragging1.autoScroller.isEnabled = options1.dragScroll;\n        var hitDragging = _this.hitDragging = new HitDragging1(_this.dragging, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.interactionSettingsToStore)(settings));\n        hitDragging.emitter.on(\"pointerdown\", _this.handlePointerDown);\n        hitDragging.emitter.on(\"dragstart\", _this.handleDragStart);\n        hitDragging.emitter.on(\"hitupdate\", _this.handleHitUpdate);\n        hitDragging.emitter.on(\"pointerup\", _this.handlePointerUp);\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__extends)(DateSelecting, _super);\n    DateSelecting.prototype.destroy = function() {\n        this.dragging.destroy();\n    };\n    return DateSelecting;\n}(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.Interaction);\nfunction getComponentTouchDelay$1(component) {\n    var options = component.context.options;\n    var delay = options.selectLongPressDelay;\n    if (delay == null) {\n        delay = options.longPressDelay;\n    }\n    return delay;\n}\nfunction joinHitsIntoSelection(hit0, hit1, dateSelectionTransformers) {\n    var dateSpan0 = hit0.dateSpan;\n    var dateSpan1 = hit1.dateSpan;\n    var ms = [\n        dateSpan0.range.start,\n        dateSpan0.range.end,\n        dateSpan1.range.start,\n        dateSpan1.range.end, \n    ];\n    ms.sort(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.compareNumbers);\n    var props = {};\n    for(var _i = 0, dateSelectionTransformers_1 = dateSelectionTransformers; _i < dateSelectionTransformers_1.length; _i++){\n        var transformer = dateSelectionTransformers_1[_i];\n        var res = transformer(hit0, hit1);\n        if (res === false) {\n            return null;\n        }\n        if (res) {\n            (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)(props, res);\n        }\n    }\n    props.range = {\n        start: ms[0],\n        end: ms[3]\n    };\n    props.allDay = dateSpan0.allDay;\n    return props;\n}\nvar EventDragging = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__extends)(EventDragging1, _super);\n    function EventDragging1(settings) {\n        var _this = _super.call(this, settings) || this;\n        // internal state\n        _this.subjectEl = null;\n        _this.subjectSeg = null; // the seg being selected/dragged\n        _this.isDragging = false;\n        _this.eventRange = null;\n        _this.relevantEvents = null; // the events being dragged\n        _this.receivingContext = null;\n        _this.validMutation = null;\n        _this.mutatedRelevantEvents = null;\n        _this.handlePointerDown = function(ev) {\n            var origTarget = ev.origEvent.target;\n            var _a = _this, component = _a.component, dragging = _a.dragging;\n            var mirror = dragging.mirror;\n            var options = component.context.options;\n            var initialContext = component.context;\n            _this.subjectEl = ev.subjectEl;\n            var subjectSeg = _this.subjectSeg = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.getElSeg)(ev.subjectEl);\n            var eventRange = _this.eventRange = subjectSeg.eventRange;\n            var eventInstanceId = eventRange.instance.instanceId;\n            _this.relevantEvents = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.getRelevantEvents)(initialContext.getCurrentData().eventStore, eventInstanceId);\n            dragging.minDistance = ev.isTouch ? 0 : options.eventDragMinDistance;\n            dragging.delay = // only do a touch delay if touch and this event hasn't been selected yet\n            (ev.isTouch && eventInstanceId !== component.props.eventSelection) ? getComponentTouchDelay(component) : null;\n            if (options.fixedMirrorParent) {\n                mirror.parentNode = options.fixedMirrorParent;\n            } else {\n                mirror.parentNode = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.elementClosest)(origTarget, \".fc\");\n            }\n            mirror.revertDuration = options.dragRevertDuration;\n            var isValid = component.isValidSegDownEl(origTarget) && !(0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.elementClosest)(origTarget, \".fc-event-resizer\"); // NOT on a resizer\n            dragging.setIgnoreMove(!isValid);\n            // disable dragging for elements that are resizable (ie, selectable)\n            // but are not draggable\n            _this.isDragging = isValid && ev.subjectEl.classList.contains(\"fc-event-draggable\");\n        };\n        _this.handleDragStart = function(ev) {\n            var initialContext = _this.component.context;\n            var eventRange = _this.eventRange;\n            var eventInstanceId = eventRange.instance.instanceId;\n            if (ev.isTouch) {\n                // need to select a different event?\n                if (eventInstanceId !== _this.component.props.eventSelection) {\n                    initialContext.dispatch({\n                        type: \"SELECT_EVENT\",\n                        eventInstanceId: eventInstanceId\n                    });\n                }\n            } else {\n                // if now using mouse, but was previous touch interaction, clear selected event\n                initialContext.dispatch({\n                    type: \"UNSELECT_EVENT\"\n                });\n            }\n            if (_this.isDragging) {\n                initialContext.calendarApi.unselect(ev); // unselect *date* selection\n                initialContext.emitter.trigger(\"eventDragStart\", {\n                    el: _this.subjectEl,\n                    event: new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.EventApi(initialContext, eventRange.def, eventRange.instance),\n                    jsEvent: ev.origEvent,\n                    view: initialContext.viewApi\n                });\n            }\n        };\n        _this.handleHitUpdate = function(hit, isFinal) {\n            if (!_this.isDragging) {\n                return;\n            }\n            var relevantEvents = _this.relevantEvents;\n            var initialHit = _this.hitDragging.initialHit;\n            var initialContext = _this.component.context;\n            // states based on new hit\n            var receivingContext = null;\n            var mutation = null;\n            var mutatedRelevantEvents = null;\n            var isInvalid = false;\n            var interaction = {\n                affectedEvents: relevantEvents,\n                mutatedEvents: (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.createEmptyEventStore)(),\n                isEvent: true\n            };\n            if (hit) {\n                receivingContext = hit.context;\n                var receivingOptions = receivingContext.options;\n                if (initialContext === receivingContext || receivingOptions.editable && receivingOptions.droppable) {\n                    mutation = computeEventMutation(initialHit, hit, receivingContext.getCurrentData().pluginHooks.eventDragMutationMassagers);\n                    if (mutation) {\n                        mutatedRelevantEvents = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.applyMutationToEventStore)(relevantEvents, receivingContext.getCurrentData().eventUiBases, mutation, receivingContext);\n                        interaction.mutatedEvents = mutatedRelevantEvents;\n                        if (!(0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.isInteractionValid)(interaction, hit.dateProfile, receivingContext)) {\n                            isInvalid = true;\n                            mutation = null;\n                            mutatedRelevantEvents = null;\n                            interaction.mutatedEvents = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.createEmptyEventStore)();\n                        }\n                    }\n                } else {\n                    receivingContext = null;\n                }\n            }\n            _this.displayDrag(receivingContext, interaction);\n            if (!isInvalid) {\n                (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.enableCursor)();\n            } else {\n                (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.disableCursor)();\n            }\n            if (!isFinal) {\n                if (initialContext === receivingContext && isHitsEqual(initialHit, hit)) {\n                    mutation = null;\n                }\n                _this.dragging.setMirrorNeedsRevert(!mutation);\n                // render the mirror if no already-rendered mirror\n                // TODO: wish we could somehow wait for dispatch to guarantee render\n                _this.dragging.setMirrorIsVisible(!hit || !(0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.getElRoot)(_this.subjectEl).querySelector(\".fc-event-mirror\"));\n                // assign states based on new hit\n                _this.receivingContext = receivingContext;\n                _this.validMutation = mutation;\n                _this.mutatedRelevantEvents = mutatedRelevantEvents;\n            }\n        };\n        _this.handlePointerUp = function() {\n            if (!_this.isDragging) {\n                _this.cleanup(); // because handleDragEnd won't fire\n            }\n        };\n        _this.handleDragEnd = function(ev) {\n            if (_this.isDragging) {\n                var initialContext_1 = _this.component.context;\n                var initialView = initialContext_1.viewApi;\n                var _a = _this, receivingContext_1 = _a.receivingContext, validMutation = _a.validMutation;\n                var eventDef = _this.eventRange.def;\n                var eventInstance = _this.eventRange.instance;\n                var eventApi = new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.EventApi(initialContext_1, eventDef, eventInstance);\n                var relevantEvents_1 = _this.relevantEvents;\n                var mutatedRelevantEvents_1 = _this.mutatedRelevantEvents;\n                var finalHit = _this.hitDragging.finalHit;\n                _this.clearDrag(); // must happen after revert animation\n                initialContext_1.emitter.trigger(\"eventDragStop\", {\n                    el: _this.subjectEl,\n                    event: eventApi,\n                    jsEvent: ev.origEvent,\n                    view: initialView\n                });\n                if (validMutation) {\n                    // dropped within same calendar\n                    if (receivingContext_1 === initialContext_1) {\n                        var updatedEventApi = new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.EventApi(initialContext_1, mutatedRelevantEvents_1.defs[eventDef.defId], eventInstance ? mutatedRelevantEvents_1.instances[eventInstance.instanceId] : null);\n                        initialContext_1.dispatch({\n                            type: \"MERGE_EVENTS\",\n                            eventStore: mutatedRelevantEvents_1\n                        });\n                        var eventChangeArg = {\n                            oldEvent: eventApi,\n                            event: updatedEventApi,\n                            relatedEvents: (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.buildEventApis)(mutatedRelevantEvents_1, initialContext_1, eventInstance),\n                            revert: function revert() {\n                                initialContext_1.dispatch({\n                                    type: \"MERGE_EVENTS\",\n                                    eventStore: relevantEvents_1\n                                });\n                            }\n                        };\n                        var transformed = {};\n                        for(var _i = 0, _b = initialContext_1.getCurrentData().pluginHooks.eventDropTransformers; _i < _b.length; _i++){\n                            var transformer = _b[_i];\n                            (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)(transformed, transformer(validMutation, initialContext_1));\n                        }\n                        initialContext_1.emitter.trigger(\"eventDrop\", (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, eventChangeArg), transformed), {\n                            el: ev.subjectEl,\n                            delta: validMutation.datesDelta,\n                            jsEvent: ev.origEvent,\n                            view: initialView\n                        }));\n                        initialContext_1.emitter.trigger(\"eventChange\", eventChangeArg);\n                    // dropped in different calendar\n                    } else if (receivingContext_1) {\n                        var eventRemoveArg = {\n                            event: eventApi,\n                            relatedEvents: (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.buildEventApis)(relevantEvents_1, initialContext_1, eventInstance),\n                            revert: function revert() {\n                                initialContext_1.dispatch({\n                                    type: \"MERGE_EVENTS\",\n                                    eventStore: relevantEvents_1\n                                });\n                            }\n                        };\n                        initialContext_1.emitter.trigger(\"eventLeave\", (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, eventRemoveArg), {\n                            draggedEl: ev.subjectEl,\n                            view: initialView\n                        }));\n                        initialContext_1.dispatch({\n                            type: \"REMOVE_EVENTS\",\n                            eventStore: relevantEvents_1\n                        });\n                        initialContext_1.emitter.trigger(\"eventRemove\", eventRemoveArg);\n                        var addedEventDef = mutatedRelevantEvents_1.defs[eventDef.defId];\n                        var addedEventInstance = mutatedRelevantEvents_1.instances[eventInstance.instanceId];\n                        var addedEventApi = new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.EventApi(receivingContext_1, addedEventDef, addedEventInstance);\n                        receivingContext_1.dispatch({\n                            type: \"MERGE_EVENTS\",\n                            eventStore: mutatedRelevantEvents_1\n                        });\n                        var eventAddArg = {\n                            event: addedEventApi,\n                            relatedEvents: (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.buildEventApis)(mutatedRelevantEvents_1, receivingContext_1, addedEventInstance),\n                            revert: function revert() {\n                                receivingContext_1.dispatch({\n                                    type: \"REMOVE_EVENTS\",\n                                    eventStore: mutatedRelevantEvents_1\n                                });\n                            }\n                        };\n                        receivingContext_1.emitter.trigger(\"eventAdd\", eventAddArg);\n                        if (ev.isTouch) {\n                            receivingContext_1.dispatch({\n                                type: \"SELECT_EVENT\",\n                                eventInstanceId: eventInstance.instanceId\n                            });\n                        }\n                        receivingContext_1.emitter.trigger(\"drop\", (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, buildDatePointApiWithContext(finalHit.dateSpan, receivingContext_1)), {\n                            draggedEl: ev.subjectEl,\n                            jsEvent: ev.origEvent,\n                            view: finalHit.context.viewApi\n                        }));\n                        receivingContext_1.emitter.trigger(\"eventReceive\", (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, eventAddArg), {\n                            draggedEl: ev.subjectEl,\n                            view: finalHit.context.viewApi\n                        }));\n                    }\n                } else {\n                    initialContext_1.emitter.trigger(\"_noEventDrop\");\n                }\n            }\n            _this.cleanup();\n        };\n        var component2 = _this.component;\n        var options2 = component2.context.options;\n        var dragging2 = _this.dragging = new FeaturefulElementDragging1(settings.el);\n        dragging2.pointer.selector = EventDragging1.SELECTOR;\n        dragging2.touchScrollAllowed = false;\n        dragging2.autoScroller.isEnabled = options2.dragScroll;\n        var hitDragging = _this.hitDragging = new HitDragging1(_this.dragging, _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.interactionSettingsStore);\n        hitDragging.useSubjectCenter = settings.useEventCenter;\n        hitDragging.emitter.on(\"pointerdown\", _this.handlePointerDown);\n        hitDragging.emitter.on(\"dragstart\", _this.handleDragStart);\n        hitDragging.emitter.on(\"hitupdate\", _this.handleHitUpdate);\n        hitDragging.emitter.on(\"pointerup\", _this.handlePointerUp);\n        hitDragging.emitter.on(\"dragend\", _this.handleDragEnd);\n        return _this;\n    }\n    EventDragging1.prototype.destroy = function() {\n        this.dragging.destroy();\n    };\n    // render a drag state on the next receivingCalendar\n    EventDragging1.prototype.displayDrag = function(nextContext, state) {\n        var initialContext = this.component.context;\n        var prevContext = this.receivingContext;\n        // does the previous calendar need to be cleared?\n        if (prevContext && prevContext !== nextContext) {\n            // does the initial calendar need to be cleared?\n            // if so, don't clear all the way. we still need to to hide the affectedEvents\n            if (prevContext === initialContext) {\n                prevContext.dispatch({\n                    type: \"SET_EVENT_DRAG\",\n                    state: {\n                        affectedEvents: state.affectedEvents,\n                        mutatedEvents: (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.createEmptyEventStore)(),\n                        isEvent: true\n                    }\n                });\n            // completely clear the old calendar if it wasn't the initial\n            } else {\n                prevContext.dispatch({\n                    type: \"UNSET_EVENT_DRAG\"\n                });\n            }\n        }\n        if (nextContext) {\n            nextContext.dispatch({\n                type: \"SET_EVENT_DRAG\",\n                state: state\n            });\n        }\n    };\n    EventDragging1.prototype.clearDrag = function() {\n        var initialCalendar = this.component.context;\n        var receivingContext = this.receivingContext;\n        if (receivingContext) {\n            receivingContext.dispatch({\n                type: \"UNSET_EVENT_DRAG\"\n            });\n        }\n        // the initial calendar might have an dummy drag state from displayDrag\n        if (initialCalendar !== receivingContext) {\n            initialCalendar.dispatch({\n                type: \"UNSET_EVENT_DRAG\"\n            });\n        }\n    };\n    EventDragging1.prototype.cleanup = function() {\n        this.subjectSeg = null;\n        this.isDragging = false;\n        this.eventRange = null;\n        this.relevantEvents = null;\n        this.receivingContext = null;\n        this.validMutation = null;\n        this.mutatedRelevantEvents = null;\n    };\n    // TODO: test this in IE11\n    // QUESTION: why do we need it on the resizable???\n    EventDragging1.SELECTOR = \".fc-event-draggable, .fc-event-resizable\";\n    return EventDragging1;\n}(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.Interaction);\nfunction computeEventMutation(hit0, hit1, massagers) {\n    var dateSpan0 = hit0.dateSpan;\n    var dateSpan1 = hit1.dateSpan;\n    var date0 = dateSpan0.range.start;\n    var date1 = dateSpan1.range.start;\n    var standardProps = {};\n    if (dateSpan0.allDay !== dateSpan1.allDay) {\n        standardProps.allDay = dateSpan1.allDay;\n        standardProps.hasEnd = hit1.context.options.allDayMaintainDuration;\n        if (dateSpan1.allDay) {\n            // means date1 is already start-of-day,\n            // but date0 needs to be converted\n            date0 = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.startOfDay)(date0);\n        }\n    }\n    var delta = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.diffDates)(date0, date1, hit0.context.dateEnv, hit0.componentId === hit1.componentId ? hit0.largeUnit : null);\n    if (delta.milliseconds) {\n        standardProps.allDay = false;\n    }\n    var mutation = {\n        datesDelta: delta,\n        standardProps: standardProps\n    };\n    for(var _i = 0, massagers_1 = massagers; _i < massagers_1.length; _i++){\n        var massager = massagers_1[_i];\n        massager(mutation, hit0, hit1);\n    }\n    return mutation;\n}\nfunction getComponentTouchDelay(component) {\n    var options = component.context.options;\n    var delay = options.eventLongPressDelay;\n    if (delay == null) {\n        delay = options.longPressDelay;\n    }\n    return delay;\n}\nvar EventResizing1 = /** @class */ function(_super) {\n    var EventResizing = function EventResizing(settings) {\n        var _this = _super.call(this, settings) || this;\n        // internal state\n        _this.draggingSegEl = null;\n        _this.draggingSeg = null; // TODO: rename to resizingSeg? subjectSeg?\n        _this.eventRange = null;\n        _this.relevantEvents = null;\n        _this.validMutation = null;\n        _this.mutatedRelevantEvents = null;\n        _this.handlePointerDown = function(ev) {\n            var component = _this.component;\n            var segEl = _this.querySegEl(ev);\n            var seg = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.getElSeg)(segEl);\n            var eventRange = _this.eventRange = seg.eventRange;\n            _this.dragging.minDistance = component.context.options.eventDragMinDistance;\n            // if touch, need to be working with a selected event\n            _this.dragging.setIgnoreMove(!_this.component.isValidSegDownEl(ev.origEvent.target) || ev.isTouch && _this.component.props.eventSelection !== eventRange.instance.instanceId);\n        };\n        _this.handleDragStart = function(ev) {\n            var context = _this.component.context;\n            var eventRange = _this.eventRange;\n            _this.relevantEvents = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.getRelevantEvents)(context.getCurrentData().eventStore, _this.eventRange.instance.instanceId);\n            var segEl = _this.querySegEl(ev);\n            _this.draggingSegEl = segEl;\n            _this.draggingSeg = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.getElSeg)(segEl);\n            context.calendarApi.unselect();\n            context.emitter.trigger(\"eventResizeStart\", {\n                el: segEl,\n                event: new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.EventApi(context, eventRange.def, eventRange.instance),\n                jsEvent: ev.origEvent,\n                view: context.viewApi\n            });\n        };\n        _this.handleHitUpdate = function(hit, isFinal, ev) {\n            var context = _this.component.context;\n            var relevantEvents = _this.relevantEvents;\n            var initialHit = _this.hitDragging.initialHit;\n            var eventInstance = _this.eventRange.instance;\n            var mutation = null;\n            var mutatedRelevantEvents = null;\n            var isInvalid = false;\n            var interaction = {\n                affectedEvents: relevantEvents,\n                mutatedEvents: (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.createEmptyEventStore)(),\n                isEvent: true\n            };\n            if (hit) {\n                var disallowed = hit.componentId === initialHit.componentId && _this.isHitComboAllowed && !_this.isHitComboAllowed(initialHit, hit);\n                if (!disallowed) {\n                    mutation = computeMutation(initialHit, hit, ev.subjectEl.classList.contains(\"fc-event-resizer-start\"), eventInstance.range);\n                }\n            }\n            if (mutation) {\n                mutatedRelevantEvents = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.applyMutationToEventStore)(relevantEvents, context.getCurrentData().eventUiBases, mutation, context);\n                interaction.mutatedEvents = mutatedRelevantEvents;\n                if (!(0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.isInteractionValid)(interaction, hit.dateProfile, context)) {\n                    isInvalid = true;\n                    mutation = null;\n                    mutatedRelevantEvents = null;\n                    interaction.mutatedEvents = null;\n                }\n            }\n            if (mutatedRelevantEvents) {\n                context.dispatch({\n                    type: \"SET_EVENT_RESIZE\",\n                    state: interaction\n                });\n            } else {\n                context.dispatch({\n                    type: \"UNSET_EVENT_RESIZE\"\n                });\n            }\n            if (!isInvalid) {\n                (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.enableCursor)();\n            } else {\n                (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.disableCursor)();\n            }\n            if (!isFinal) {\n                if (mutation && isHitsEqual(initialHit, hit)) {\n                    mutation = null;\n                }\n                _this.validMutation = mutation;\n                _this.mutatedRelevantEvents = mutatedRelevantEvents;\n            }\n        };\n        _this.handleDragEnd = function(ev) {\n            var context = _this.component.context;\n            var eventDef = _this.eventRange.def;\n            var eventInstance = _this.eventRange.instance;\n            var eventApi = new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.EventApi(context, eventDef, eventInstance);\n            var relevantEvents = _this.relevantEvents;\n            var mutatedRelevantEvents = _this.mutatedRelevantEvents;\n            context.emitter.trigger(\"eventResizeStop\", {\n                el: _this.draggingSegEl,\n                event: eventApi,\n                jsEvent: ev.origEvent,\n                view: context.viewApi\n            });\n            if (_this.validMutation) {\n                var updatedEventApi = new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.EventApi(context, mutatedRelevantEvents.defs[eventDef.defId], eventInstance ? mutatedRelevantEvents.instances[eventInstance.instanceId] : null);\n                context.dispatch({\n                    type: \"MERGE_EVENTS\",\n                    eventStore: mutatedRelevantEvents\n                });\n                var eventChangeArg = {\n                    oldEvent: eventApi,\n                    event: updatedEventApi,\n                    relatedEvents: (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.buildEventApis)(mutatedRelevantEvents, context, eventInstance),\n                    revert: function revert() {\n                        context.dispatch({\n                            type: \"MERGE_EVENTS\",\n                            eventStore: relevantEvents\n                        });\n                    }\n                };\n                context.emitter.trigger(\"eventResize\", (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, eventChangeArg), {\n                    el: _this.draggingSegEl,\n                    startDelta: _this.validMutation.startDelta || (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.createDuration)(0),\n                    endDelta: _this.validMutation.endDelta || (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.createDuration)(0),\n                    jsEvent: ev.origEvent,\n                    view: context.viewApi\n                }));\n                context.emitter.trigger(\"eventChange\", eventChangeArg);\n            } else {\n                context.emitter.trigger(\"_noEventResize\");\n            }\n            // reset all internal state\n            _this.draggingSeg = null;\n            _this.relevantEvents = null;\n            _this.validMutation = null;\n        // okay to keep eventInstance around. useful to set it in handlePointerDown\n        };\n        var component3 = settings.component;\n        var dragging = _this.dragging = new FeaturefulElementDragging1(settings.el);\n        dragging.pointer.selector = \".fc-event-resizer\";\n        dragging.touchScrollAllowed = false;\n        dragging.autoScroller.isEnabled = component3.context.options.dragScroll;\n        var hitDragging = _this.hitDragging = new HitDragging1(_this.dragging, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.interactionSettingsToStore)(settings));\n        hitDragging.emitter.on(\"pointerdown\", _this.handlePointerDown);\n        hitDragging.emitter.on(\"dragstart\", _this.handleDragStart);\n        hitDragging.emitter.on(\"hitupdate\", _this.handleHitUpdate);\n        hitDragging.emitter.on(\"dragend\", _this.handleDragEnd);\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__extends)(EventResizing, _super);\n    EventResizing.prototype.destroy = function() {\n        this.dragging.destroy();\n    };\n    EventResizing.prototype.querySegEl = function(ev) {\n        return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.elementClosest)(ev.subjectEl, \".fc-event\");\n    };\n    return EventResizing;\n}(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.Interaction);\nfunction computeMutation(hit0, hit1, isFromStart, instanceRange) {\n    var dateEnv = hit0.context.dateEnv;\n    var date0 = hit0.dateSpan.range.start;\n    var date1 = hit1.dateSpan.range.start;\n    var delta = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.diffDates)(date0, date1, dateEnv, hit0.largeUnit);\n    if (isFromStart) {\n        if (dateEnv.add(instanceRange.start, delta) < instanceRange.end) {\n            return {\n                startDelta: delta\n            };\n        }\n    } else if (dateEnv.add(instanceRange.end, delta) > instanceRange.start) {\n        return {\n            endDelta: delta\n        };\n    }\n    return null;\n}\nvar UnselectAuto1 = /** @class */ function() {\n    var UnselectAuto = function UnselectAuto(context) {\n        var _this = this;\n        this.context = context;\n        this.isRecentPointerDateSelect = false; // wish we could use a selector to detect date selection, but uses hit system\n        this.matchesCancel = false;\n        this.matchesEvent = false;\n        this.onSelect = function(selectInfo) {\n            if (selectInfo.jsEvent) {\n                _this.isRecentPointerDateSelect = true;\n            }\n        };\n        this.onDocumentPointerDown = function(pev) {\n            var unselectCancel = _this.context.options.unselectCancel;\n            var downEl = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.getEventTargetViaRoot)(pev.origEvent);\n            _this.matchesCancel = !!(0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.elementClosest)(downEl, unselectCancel);\n            _this.matchesEvent = !!(0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.elementClosest)(downEl, EventDragging.SELECTOR); // interaction started on an event?\n        };\n        this.onDocumentPointerUp = function(pev) {\n            var _$context = _this.context;\n            var documentPointer = _this.documentPointer;\n            var calendarState = _$context.getCurrentData();\n            // touch-scrolling should never unfocus any type of selection\n            if (!documentPointer.wasTouchScroll) {\n                if (calendarState.dateSelection && !_this.isRecentPointerDateSelect // a new pointer-initiated date selection since last onDocumentPointerUp?\n                ) {\n                    var unselectAuto = _$context.options.unselectAuto;\n                    if (unselectAuto && (!unselectAuto || !_this.matchesCancel)) {\n                        _$context.calendarApi.unselect(pev);\n                    }\n                }\n                if (calendarState.eventSelection && !_this.matchesEvent // interaction DIDN'T start on an event\n                ) {\n                    _$context.dispatch({\n                        type: \"UNSELECT_EVENT\"\n                    });\n                }\n            }\n            _this.isRecentPointerDateSelect = false;\n        };\n        var documentPointer1 = this.documentPointer = new PointerDragging1(document);\n        documentPointer1.shouldIgnoreMove = true;\n        documentPointer1.shouldWatchScroll = false;\n        documentPointer1.emitter.on(\"pointerdown\", this.onDocumentPointerDown);\n        documentPointer1.emitter.on(\"pointerup\", this.onDocumentPointerUp);\n        /*\n        TODO: better way to know about whether there was a selection with the pointer\n        */ context.emitter.on(\"select\", this.onSelect);\n    };\n    UnselectAuto.prototype.destroy = function() {\n        this.context.emitter.off(\"select\", this.onSelect);\n        this.documentPointer.destroy();\n    };\n    return UnselectAuto;\n}();\nvar OPTION_REFINERS = {\n    fixedMirrorParent: _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.identity\n};\nvar LISTENER_REFINERS = {\n    dateClick: _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.identity,\n    eventDragStart: _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.identity,\n    eventDragStop: _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.identity,\n    eventDrop: _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.identity,\n    eventResizeStart: _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.identity,\n    eventResizeStop: _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.identity,\n    eventResize: _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.identity,\n    drop: _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.identity,\n    eventReceive: _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.identity,\n    eventLeave: _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.identity\n};\n/*\nGiven an already instantiated draggable object for one-or-more elements,\nInterprets any dragging as an attempt to drag an events that lives outside\nof a calendar onto a calendar.\n*/ var ExternalElementDragging1 = /** @class */ function() {\n    var ExternalElementDragging = function ExternalElementDragging(dragging, suppliedDragMeta) {\n        var _this = this;\n        this.receivingContext = null;\n        this.droppableEvent = null; // will exist for all drags, even if create:false\n        this.suppliedDragMeta = null;\n        this.dragMeta = null;\n        this.handleDragStart = function(ev) {\n            _this.dragMeta = _this.buildDragMeta(ev.subjectEl);\n        };\n        this.handleHitUpdate = function(hit, isFinal, ev) {\n            var _$dragging = _this.hitDragging.dragging;\n            var receivingContext = null;\n            var droppableEvent = null;\n            var isInvalid = false;\n            var interaction = {\n                affectedEvents: (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.createEmptyEventStore)(),\n                mutatedEvents: (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.createEmptyEventStore)(),\n                isEvent: _this.dragMeta.create\n            };\n            if (hit) {\n                receivingContext = hit.context;\n                if (_this.canDropElOnCalendar(ev.subjectEl, receivingContext)) {\n                    droppableEvent = computeEventForDateSpan(hit.dateSpan, _this.dragMeta, receivingContext);\n                    interaction.mutatedEvents = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.eventTupleToStore)(droppableEvent);\n                    isInvalid = !(0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.isInteractionValid)(interaction, hit.dateProfile, receivingContext);\n                    if (isInvalid) {\n                        interaction.mutatedEvents = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.createEmptyEventStore)();\n                        droppableEvent = null;\n                    }\n                }\n            }\n            _this.displayDrag(receivingContext, interaction);\n            // show mirror if no already-rendered mirror element OR if we are shutting down the mirror (?)\n            // TODO: wish we could somehow wait for dispatch to guarantee render\n            _$dragging.setMirrorIsVisible(isFinal || !droppableEvent || !document.querySelector(\".fc-event-mirror\"));\n            if (!isInvalid) {\n                (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.enableCursor)();\n            } else {\n                (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.disableCursor)();\n            }\n            if (!isFinal) {\n                _$dragging.setMirrorNeedsRevert(!droppableEvent);\n                _this.receivingContext = receivingContext;\n                _this.droppableEvent = droppableEvent;\n            }\n        };\n        this.handleDragEnd = function(pev) {\n            var _a = _this, receivingContext = _a.receivingContext, droppableEvent = _a.droppableEvent;\n            _this.clearDrag();\n            if (receivingContext && droppableEvent) {\n                var finalHit = _this.hitDragging.finalHit;\n                var finalView = finalHit.context.viewApi;\n                var dragMeta = _this.dragMeta;\n                receivingContext.emitter.trigger(\"drop\", (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, buildDatePointApiWithContext(finalHit.dateSpan, receivingContext)), {\n                    draggedEl: pev.subjectEl,\n                    jsEvent: pev.origEvent,\n                    view: finalView\n                }));\n                if (dragMeta.create) {\n                    var addingEvents_1 = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.eventTupleToStore)(droppableEvent);\n                    receivingContext.dispatch({\n                        type: \"MERGE_EVENTS\",\n                        eventStore: addingEvents_1\n                    });\n                    if (pev.isTouch) {\n                        receivingContext.dispatch({\n                            type: \"SELECT_EVENT\",\n                            eventInstanceId: droppableEvent.instance.instanceId\n                        });\n                    }\n                    // signal that an external event landed\n                    receivingContext.emitter.trigger(\"eventReceive\", {\n                        event: new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.EventApi(receivingContext, droppableEvent.def, droppableEvent.instance),\n                        relatedEvents: [],\n                        revert: function revert() {\n                            receivingContext.dispatch({\n                                type: \"REMOVE_EVENTS\",\n                                eventStore: addingEvents_1\n                            });\n                        },\n                        draggedEl: pev.subjectEl,\n                        view: finalView\n                    });\n                }\n            }\n            _this.receivingContext = null;\n            _this.droppableEvent = null;\n        };\n        var hitDragging = this.hitDragging = new HitDragging1(dragging, _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.interactionSettingsStore);\n        hitDragging.requireInitial = false; // will start outside of a component\n        hitDragging.emitter.on(\"dragstart\", this.handleDragStart);\n        hitDragging.emitter.on(\"hitupdate\", this.handleHitUpdate);\n        hitDragging.emitter.on(\"dragend\", this.handleDragEnd);\n        this.suppliedDragMeta = suppliedDragMeta;\n    };\n    ExternalElementDragging.prototype.buildDragMeta = function(subjectEl) {\n        if (typeof this.suppliedDragMeta === \"object\") {\n            return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.parseDragMeta)(this.suppliedDragMeta);\n        }\n        if (typeof this.suppliedDragMeta === \"function\") {\n            return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.parseDragMeta)(this.suppliedDragMeta(subjectEl));\n        }\n        return getDragMetaFromEl(subjectEl);\n    };\n    ExternalElementDragging.prototype.displayDrag = function(nextContext, state) {\n        var prevContext = this.receivingContext;\n        if (prevContext && prevContext !== nextContext) {\n            prevContext.dispatch({\n                type: \"UNSET_EVENT_DRAG\"\n            });\n        }\n        if (nextContext) {\n            nextContext.dispatch({\n                type: \"SET_EVENT_DRAG\",\n                state: state\n            });\n        }\n    };\n    ExternalElementDragging.prototype.clearDrag = function() {\n        if (this.receivingContext) {\n            this.receivingContext.dispatch({\n                type: \"UNSET_EVENT_DRAG\"\n            });\n        }\n    };\n    ExternalElementDragging.prototype.canDropElOnCalendar = function(el, receivingContext) {\n        var dropAccept = receivingContext.options.dropAccept;\n        if (typeof dropAccept === \"function\") {\n            return dropAccept.call(receivingContext.calendarApi, el);\n        }\n        if (typeof dropAccept === \"string\" && dropAccept) {\n            return Boolean((0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.elementMatches)(el, dropAccept));\n        }\n        return true;\n    };\n    return ExternalElementDragging;\n}();\n// Utils for computing event store from the DragMeta\n// ----------------------------------------------------------------------------------------------------\nfunction computeEventForDateSpan(dateSpan, dragMeta, context) {\n    var defProps = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, dragMeta.leftoverProps);\n    for(var _i = 0, _a = context.pluginHooks.externalDefTransforms; _i < _a.length; _i++){\n        var transform = _a[_i];\n        (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)(defProps, transform(dateSpan, dragMeta));\n    }\n    var _b = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.refineEventDef)(defProps, context), refined = _b.refined, extra = _b.extra;\n    var def = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.parseEventDef)(refined, extra, dragMeta.sourceId, dateSpan.allDay, context.options.forceEventDuration || Boolean(dragMeta.duration), context);\n    var start = dateSpan.range.start;\n    // only rely on time info if drop zone is all-day,\n    // otherwise, we already know the time\n    if (dateSpan.allDay && dragMeta.startTime) {\n        start = context.dateEnv.add(start, dragMeta.startTime);\n    }\n    var end = dragMeta.duration ? context.dateEnv.add(start, dragMeta.duration) : (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.getDefaultEventEnd)(dateSpan.allDay, start, context);\n    var instance = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.createEventInstance)(def.defId, {\n        start: start,\n        end: end\n    });\n    return {\n        def: def,\n        instance: instance\n    };\n}\n// Utils for extracting data from element\n// ----------------------------------------------------------------------------------------------------\nfunction getDragMetaFromEl(el) {\n    var str = getEmbeddedElData(el, \"event\");\n    var obj = str ? JSON.parse(str) : {\n        create: false\n    }; // if no embedded data, assume no event creation\n    return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.parseDragMeta)(obj);\n}\n_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.config.dataAttrPrefix = \"\";\nfunction getEmbeddedElData(el, name) {\n    var prefix = _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.config.dataAttrPrefix;\n    var prefixedName = (prefix ? prefix + \"-\" : \"\") + name;\n    return el.getAttribute(\"data-\" + prefixedName) || \"\";\n}\n/*\nMakes an element (that is *external* to any calendar) draggable.\nCan pass in data that determines how an event will be created when dropped onto a calendar.\nLeverages FullCalendar's internal drag-n-drop functionality WITHOUT a third-party drag system.\n*/ var ExternalDraggable1 = /** @class */ function() {\n    var ExternalDraggable = function ExternalDraggable(el, settings) {\n        var _this = this;\n        if (settings === void 0) {\n            settings = {};\n        }\n        this.handlePointerDown = function(ev) {\n            var dragging = _this.dragging;\n            var _a = _this.settings, minDistance = _a.minDistance, longPressDelay = _a.longPressDelay;\n            dragging.minDistance = minDistance != null ? minDistance : ev.isTouch ? 0 : _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.BASE_OPTION_DEFAULTS.eventDragMinDistance;\n            dragging.delay = ev.isTouch ? longPressDelay != null ? longPressDelay : _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.BASE_OPTION_DEFAULTS.longPressDelay : 0;\n        };\n        this.handleDragStart = function(ev) {\n            if (ev.isTouch && _this.dragging.delay && ev.subjectEl.classList.contains(\"fc-event\")) {\n                _this.dragging.mirror.getMirrorEl().classList.add(\"fc-event-selected\");\n            }\n        };\n        this.settings = settings;\n        var dragging3 = this.dragging = new FeaturefulElementDragging1(el);\n        dragging3.touchScrollAllowed = false;\n        if (settings.itemSelector != null) {\n            dragging3.pointer.selector = settings.itemSelector;\n        }\n        if (settings.appendTo != null) {\n            dragging3.mirror.parentNode = settings.appendTo; // TODO: write tests\n        }\n        dragging3.emitter.on(\"pointerdown\", this.handlePointerDown);\n        dragging3.emitter.on(\"dragstart\", this.handleDragStart);\n        new ExternalElementDragging1(dragging3, settings.eventData); // eslint-disable-line no-new\n    };\n    ExternalDraggable.prototype.destroy = function() {\n        this.dragging.destroy();\n    };\n    return ExternalDraggable;\n}();\n/*\nDetects when a *THIRD-PARTY* drag-n-drop system interacts with elements.\nThe third-party system is responsible for drawing the visuals effects of the drag.\nThis class simply monitors for pointer movements and fires events.\nIt also has the ability to hide the moving element (the \"mirror\") during the drag.\n*/ var InferredElementDragging1 = /** @class */ function(_super) {\n    var InferredElementDragging = function InferredElementDragging(containerEl) {\n        var _this = _super.call(this, containerEl) || this;\n        _this.shouldIgnoreMove = false;\n        _this.mirrorSelector = \"\";\n        _this.currentMirrorEl = null;\n        _this.handlePointerDown = function(ev) {\n            _this.emitter.trigger(\"pointerdown\", ev);\n            if (!_this.shouldIgnoreMove) {\n                // fire dragstart right away. does not support delay or min-distance\n                _this.emitter.trigger(\"dragstart\", ev);\n            }\n        };\n        _this.handlePointerMove = function(ev) {\n            if (!_this.shouldIgnoreMove) {\n                _this.emitter.trigger(\"dragmove\", ev);\n            }\n        };\n        _this.handlePointerUp = function(ev) {\n            _this.emitter.trigger(\"pointerup\", ev);\n            if (!_this.shouldIgnoreMove) {\n                // fire dragend right away. does not support a revert animation\n                _this.emitter.trigger(\"dragend\", ev);\n            }\n        };\n        var pointer = _this.pointer = new PointerDragging1(containerEl);\n        pointer.emitter.on(\"pointerdown\", _this.handlePointerDown);\n        pointer.emitter.on(\"pointermove\", _this.handlePointerMove);\n        pointer.emitter.on(\"pointerup\", _this.handlePointerUp);\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__extends)(InferredElementDragging, _super);\n    InferredElementDragging.prototype.destroy = function() {\n        this.pointer.destroy();\n    };\n    InferredElementDragging.prototype.setIgnoreMove = function(bool) {\n        this.shouldIgnoreMove = bool;\n    };\n    InferredElementDragging.prototype.setMirrorIsVisible = function(bool) {\n        if (bool) {\n            // restore a previously hidden element.\n            // use the reference in case the selector class has already been removed.\n            if (this.currentMirrorEl) {\n                this.currentMirrorEl.style.visibility = \"\";\n                this.currentMirrorEl = null;\n            }\n        } else {\n            var mirrorEl = this.mirrorSelector ? document.querySelector(this.mirrorSelector) : null;\n            if (mirrorEl) {\n                this.currentMirrorEl = mirrorEl;\n                mirrorEl.style.visibility = \"hidden\";\n            }\n        }\n    };\n    return InferredElementDragging;\n}(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.ElementDragging);\n/*\nBridges third-party drag-n-drop systems with FullCalendar.\nMust be instantiated and destroyed by caller.\n*/ var ThirdPartyDraggable1 = /** @class */ function() {\n    var ThirdPartyDraggable = function ThirdPartyDraggable(containerOrSettings, settings) {\n        var containerEl = document;\n        if (// wish we could just test instanceof EventTarget, but doesn't work in IE11\n        containerOrSettings === document || _instanceof(containerOrSettings, Element)) {\n            containerEl = containerOrSettings;\n            settings = settings || {};\n        } else {\n            settings = containerOrSettings || {};\n        }\n        var dragging = this.dragging = new InferredElementDragging1(containerEl);\n        if (typeof settings.itemSelector === \"string\") {\n            dragging.pointer.selector = settings.itemSelector;\n        } else if (containerEl === document) {\n            dragging.pointer.selector = \"[data-event]\";\n        }\n        if (typeof settings.mirrorSelector === \"string\") {\n            dragging.mirrorSelector = settings.mirrorSelector;\n        }\n        new ExternalElementDragging1(dragging, settings.eventData); // eslint-disable-line no-new\n    };\n    ThirdPartyDraggable.prototype.destroy = function() {\n        this.dragging.destroy();\n    };\n    return ThirdPartyDraggable;\n}();\nvar main = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__.createPlugin)({\n    componentInteractions: [\n        DateClicking1,\n        DateSelecting1,\n        EventDragging,\n        EventResizing1\n    ],\n    calendarInteractions: [\n        UnselectAuto1\n    ],\n    elementDraggingImpl: FeaturefulElementDragging1,\n    optionRefiners: OPTION_REFINERS,\n    listenerRefiners: LISTENER_REFINERS\n});\n/* harmony default export */ __webpack_exports__[\"default\"] = (main);\n //# sourceMappingURL=main.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@fullcalendar/interaction/main.js\n");

/***/ }),

/***/ "./node_modules/@fullcalendar/react/dist/main.js":
/*!*******************************************************!*\
  !*** ./node_modules/@fullcalendar/react/dist/main.js ***!
  \*******************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _vdom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vdom */ \"./node_modules/@fullcalendar/react/dist/vdom.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _fullcalendar_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @fullcalendar/common */ \"./node_modules/@fullcalendar/common/main.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _fullcalendar_common__WEBPACK_IMPORTED_MODULE_2__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _fullcalendar_common__WEBPACK_IMPORTED_MODULE_2__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\n\n\n\nvar FullCalendar1 = /** @class */ function(_super) {\n    var FullCalendar = function FullCalendar() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._calendarApi = new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_2__.CalendarApi();\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(FullCalendar, _super);\n    FullCalendar.prototype.render = function() {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_2__.CalendarDataProvider, {\n            optionOverrides: this.props,\n            calendarApi: this._calendarApi\n        }, function(data) {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_2__.CalendarRoot, {\n                options: data.calendarOptions,\n                theme: data.theme,\n                emitter: data.emitter\n            }, function(classNames, height, isHeightAuto, forPrint) {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n                    className: classNames.join(\" \"),\n                    style: {\n                        height: height\n                    }\n                }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_2__.CalendarContent, (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({\n                    isHeightAuto: isHeightAuto,\n                    forPrint: forPrint\n                }, data)));\n            });\n        });\n    };\n    FullCalendar.prototype.getApi = function() {\n        return this._calendarApi;\n    };\n    return FullCalendar;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component);\n/* harmony default export */ __webpack_exports__[\"default\"] = (FullCalendar1);\n// export all important utils/types\n //# sourceMappingURL=main.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGZ1bGxjYWxlbmRhci9yZWFjdC9kaXN0L21haW4uanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQTRDO0FBQzVCO0FBQ2U7QUFDeUU7QUFDeEcsSUFBSU8sYUFBWSxHQUFHLGFBQWEsQ0FBRSxTQUFVQyxNQUFNLEVBQUU7UUFFdkNELFlBQVksR0FBckIsU0FBU0EsWUFBWSxHQUFHO1FBQ3BCLElBQUlFLEtBQUssR0FBR0QsTUFBTSxLQUFLLElBQUksSUFBSUEsTUFBTSxDQUFDRSxLQUFLLENBQUMsSUFBSSxFQUFFQyxTQUFTLENBQUMsSUFBSSxJQUFJO1FBQ3BFRixLQUFLLENBQUNHLFlBQVksR0FBRyxJQUFJVCw2REFBVyxFQUFFLENBQUM7UUFDdkMsT0FBT00sS0FBSyxDQUFDO0tBQ2hCO0lBTERSLGdEQUFTLENBQUNNLFlBQVksRUFBRUMsTUFBTSxDQUFDLENBQUM7SUFNaENELFlBQVksQ0FBQ00sU0FBUyxDQUFDQyxNQUFNLEdBQUcsV0FBWTtRQUN4QyxxQkFBUVosZ0RBQW1CLENBQUNFLHNFQUFvQixFQUFFO1lBQUVZLGVBQWUsRUFBRSxJQUFJLENBQUNDLEtBQUs7WUFBRUMsV0FBVyxFQUFFLElBQUksQ0FBQ04sWUFBWTtTQUFFLEVBQUUsU0FBVU8sSUFBSSxFQUFFO1lBQUUscUJBQVFqQixnREFBbUIsQ0FBQ0ksOERBQVksRUFBRTtnQkFBRWMsT0FBTyxFQUFFRCxJQUFJLENBQUNFLGVBQWU7Z0JBQUVDLEtBQUssRUFBRUgsSUFBSSxDQUFDRyxLQUFLO2dCQUFFQyxPQUFPLEVBQUVKLElBQUksQ0FBQ0ksT0FBTzthQUFFLEVBQUUsU0FBVUMsVUFBVSxFQUFFQyxNQUFNLEVBQUVDLFlBQVksRUFBRUMsUUFBUSxFQUFFO2dCQUFFLHFCQUFRekIsZ0RBQW1CLENBQUMsS0FBSyxFQUFFO29CQUFFMEIsU0FBUyxFQUFFSixVQUFVLENBQUNLLElBQUksQ0FBQyxHQUFHLENBQUM7b0JBQUVDLEtBQUssRUFBRTt3QkFBRUwsTUFBTSxFQUFFQSxNQUFNO3FCQUFFO2lCQUFFLGdCQUNqWnZCLGdEQUFtQixDQUFDRyxpRUFBZSxFQUFFTCwrQ0FBUSxDQUFDO29CQUFFMEIsWUFBWSxFQUFFQSxZQUFZO29CQUFFQyxRQUFRLEVBQUVBLFFBQVE7aUJBQUUsRUFBRVIsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFFO2FBQUUsQ0FBQyxDQUFFO1NBQUUsQ0FBQyxDQUFFO0tBQzVILENBQUM7SUFDRlosWUFBWSxDQUFDTSxTQUFTLENBQUNrQixNQUFNLEdBQUcsV0FBWTtRQUN4QyxPQUFPLElBQUksQ0FBQ25CLFlBQVksQ0FBQztLQUM1QixDQUFDO0lBQ0YsT0FBT0wsWUFBWSxDQUFDO0NBQ3ZCLENBQUNMLDRDQUFlLENBQUM7QUFDbEIsK0RBQWVLLGFBQVksRUFBQztBQUM1QixtQ0FBbUM7QUFDRSxDQUNyQyxnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BmdWxsY2FsZW5kYXIvcmVhY3QvZGlzdC9tYWluLmpzPzUzNGIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19hc3NpZ24sIF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0ICcuL3Zkb20nO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ2FsZW5kYXJBcGksIENhbGVuZGFyRGF0YVByb3ZpZGVyLCBDYWxlbmRhckNvbnRlbnQsIENhbGVuZGFyUm9vdCB9IGZyb20gJ0BmdWxsY2FsZW5kYXIvY29tbW9uJztcbnZhciBGdWxsQ2FsZW5kYXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEZ1bGxDYWxlbmRhciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBGdWxsQ2FsZW5kYXIoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fY2FsZW5kYXJBcGkgPSBuZXcgQ2FsZW5kYXJBcGkoKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBGdWxsQ2FsZW5kYXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KENhbGVuZGFyRGF0YVByb3ZpZGVyLCB7IG9wdGlvbk92ZXJyaWRlczogdGhpcy5wcm9wcywgY2FsZW5kYXJBcGk6IHRoaXMuX2NhbGVuZGFyQXBpIH0sIGZ1bmN0aW9uIChkYXRhKSB7IHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChDYWxlbmRhclJvb3QsIHsgb3B0aW9uczogZGF0YS5jYWxlbmRhck9wdGlvbnMsIHRoZW1lOiBkYXRhLnRoZW1lLCBlbWl0dGVyOiBkYXRhLmVtaXR0ZXIgfSwgZnVuY3Rpb24gKGNsYXNzTmFtZXMsIGhlaWdodCwgaXNIZWlnaHRBdXRvLCBmb3JQcmludCkgeyByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IGNsYXNzTmFtZXMuam9pbignICcpLCBzdHlsZTogeyBoZWlnaHQ6IGhlaWdodCB9IH0sXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KENhbGVuZGFyQ29udGVudCwgX19hc3NpZ24oeyBpc0hlaWdodEF1dG86IGlzSGVpZ2h0QXV0bywgZm9yUHJpbnQ6IGZvclByaW50IH0sIGRhdGEpKSkpOyB9KSk7IH0pKTtcbiAgICB9O1xuICAgIEZ1bGxDYWxlbmRhci5wcm90b3R5cGUuZ2V0QXBpID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2FsZW5kYXJBcGk7XG4gICAgfTtcbiAgICByZXR1cm4gRnVsbENhbGVuZGFyO1xufShSZWFjdC5Db21wb25lbnQpKTtcbmV4cG9ydCBkZWZhdWx0IEZ1bGxDYWxlbmRhcjtcbi8vIGV4cG9ydCBhbGwgaW1wb3J0YW50IHV0aWxzL3R5cGVzXG5leHBvcnQgKiBmcm9tICdAZnVsbGNhbGVuZGFyL2NvbW1vbic7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYWluLmpzLm1hcCJdLCJuYW1lcyI6WyJfX2Fzc2lnbiIsIl9fZXh0ZW5kcyIsIlJlYWN0IiwiQ2FsZW5kYXJBcGkiLCJDYWxlbmRhckRhdGFQcm92aWRlciIsIkNhbGVuZGFyQ29udGVudCIsIkNhbGVuZGFyUm9vdCIsIkZ1bGxDYWxlbmRhciIsIl9zdXBlciIsIl90aGlzIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJfY2FsZW5kYXJBcGkiLCJwcm90b3R5cGUiLCJyZW5kZXIiLCJjcmVhdGVFbGVtZW50Iiwib3B0aW9uT3ZlcnJpZGVzIiwicHJvcHMiLCJjYWxlbmRhckFwaSIsImRhdGEiLCJvcHRpb25zIiwiY2FsZW5kYXJPcHRpb25zIiwidGhlbWUiLCJlbWl0dGVyIiwiY2xhc3NOYW1lcyIsImhlaWdodCIsImlzSGVpZ2h0QXV0byIsImZvclByaW50IiwiY2xhc3NOYW1lIiwiam9pbiIsInN0eWxlIiwiZ2V0QXBpIiwiQ29tcG9uZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@fullcalendar/react/dist/main.js\n");

/***/ }),

/***/ "./node_modules/@fullcalendar/react/dist/vdom.js":
/*!*******************************************************!*\
  !*** ./node_modules/@fullcalendar/react/dist/vdom.js ***!
  \*******************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"flushSync\": function() { return /* binding */ flushSync; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"./node_modules/react-dom/index.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_1__);\n\n\n(typeof globalThis !== \"undefined\" ? globalThis : window).FullCalendarVDom = {\n    Component: react__WEBPACK_IMPORTED_MODULE_0__.Component,\n    createElement: react__WEBPACK_IMPORTED_MODULE_0__.createElement,\n    render: react_dom__WEBPACK_IMPORTED_MODULE_1__.render,\n    createRef: react__WEBPACK_IMPORTED_MODULE_0__.createRef,\n    Fragment: react__WEBPACK_IMPORTED_MODULE_0__.Fragment,\n    createContext: react__WEBPACK_IMPORTED_MODULE_0__.createContext,\n    createPortal: react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal,\n    flushSync: flushSync,\n    unmountComponentAtNode: react_dom__WEBPACK_IMPORTED_MODULE_1__.unmountComponentAtNode // never called by FullCalendar's React component\n};\nfunction flushSync(callback) {\n    // always sync from top-level\n    callback();\n} //# sourceMappingURL=vdom.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGZ1bGxjYWxlbmRhci9yZWFjdC9kaXN0L3Zkb20uanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBK0I7QUFDTztBQUN0QyxDQUFDLE9BQU9FLFVBQVUsS0FBSyxXQUFXLEdBQUdBLFVBQVUsR0FBR0MsTUFBTSxDQUFDLENBQUNDLGdCQUFnQixHQUFHO0lBQ3pFQyxTQUFTLEVBQUVMLDRDQUFlO0lBQzFCTSxhQUFhLEVBQUVOLGdEQUFtQjtJQUNsQ08sTUFBTSxFQUFFTiw2Q0FBZTtJQUN2Qk8sU0FBUyxFQUFFUiw0Q0FBZTtJQUMxQlMsUUFBUSxFQUFFVCwyQ0FBYztJQUN4QlUsYUFBYSxFQUFFVixnREFBbUI7SUFDbENXLFlBQVksRUFBRVYsbURBQXFCO0lBQ25DVyxTQUFTLEVBQUVBLFNBQVM7SUFDcEJDLHNCQUFzQixFQUFFWiw2REFBK0IsQ0FBQyxpREFBaUQ7Q0FDNUcsQ0FBQztBQUNLLFNBQVNXLFNBQVMsQ0FBQ0UsUUFBUSxFQUFFO0lBQ2hDLDZCQUE2QjtJQUM3QkEsUUFBUSxFQUFFLENBQUM7Q0FDZCxDQUNELGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGZ1bGxjYWxlbmRhci9yZWFjdC9kaXN0L3Zkb20uanM/NGRlMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyByZWFjdERvbSBmcm9tICdyZWFjdC1kb20nO1xuKHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiB3aW5kb3cpLkZ1bGxDYWxlbmRhclZEb20gPSB7XG4gICAgQ29tcG9uZW50OiByZWFjdC5Db21wb25lbnQsXG4gICAgY3JlYXRlRWxlbWVudDogcmVhY3QuY3JlYXRlRWxlbWVudCxcbiAgICByZW5kZXI6IHJlYWN0RG9tLnJlbmRlcixcbiAgICBjcmVhdGVSZWY6IHJlYWN0LmNyZWF0ZVJlZixcbiAgICBGcmFnbWVudDogcmVhY3QuRnJhZ21lbnQsXG4gICAgY3JlYXRlQ29udGV4dDogcmVhY3QuY3JlYXRlQ29udGV4dCxcbiAgICBjcmVhdGVQb3J0YWw6IHJlYWN0RG9tLmNyZWF0ZVBvcnRhbCxcbiAgICBmbHVzaFN5bmM6IGZsdXNoU3luYyxcbiAgICB1bm1vdW50Q29tcG9uZW50QXROb2RlOiByZWFjdERvbS51bm1vdW50Q29tcG9uZW50QXROb2RlIC8vIG5ldmVyIGNhbGxlZCBieSBGdWxsQ2FsZW5kYXIncyBSZWFjdCBjb21wb25lbnRcbn07XG5leHBvcnQgZnVuY3Rpb24gZmx1c2hTeW5jKGNhbGxiYWNrKSB7XG4gICAgLy8gYWx3YXlzIHN5bmMgZnJvbSB0b3AtbGV2ZWxcbiAgICBjYWxsYmFjaygpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmRvbS5qcy5tYXAiXSwibmFtZXMiOlsicmVhY3QiLCJyZWFjdERvbSIsImdsb2JhbFRoaXMiLCJ3aW5kb3ciLCJGdWxsQ2FsZW5kYXJWRG9tIiwiQ29tcG9uZW50IiwiY3JlYXRlRWxlbWVudCIsInJlbmRlciIsImNyZWF0ZVJlZiIsIkZyYWdtZW50IiwiY3JlYXRlQ29udGV4dCIsImNyZWF0ZVBvcnRhbCIsImZsdXNoU3luYyIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJjYWxsYmFjayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@fullcalendar/react/dist/vdom.js\n");

/***/ }),

/***/ "./node_modules/@fullcalendar/timegrid/main.js":
/*!*****************************************************!*\
  !*** ./node_modules/@fullcalendar/timegrid/main.js ***!
  \*****************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DayTimeCols\": function() { return /* binding */ DayTimeCols1; },\n/* harmony export */   \"DayTimeColsSlicer\": function() { return /* binding */ DayTimeColsSlicer1; },\n/* harmony export */   \"DayTimeColsView\": function() { return /* binding */ DayTimeColsView1; },\n/* harmony export */   \"TimeCols\": function() { return /* binding */ TimeCols1; },\n/* harmony export */   \"TimeColsSlatsCoords\": function() { return /* binding */ TimeColsSlatsCoords1; },\n/* harmony export */   \"TimeColsView\": function() { return /* binding */ TimeColsView1; },\n/* harmony export */   \"buildDayRanges\": function() { return /* binding */ buildDayRanges; },\n/* harmony export */   \"buildSlatMetas\": function() { return /* binding */ buildSlatMetas; },\n/* harmony export */   \"buildTimeColsModel\": function() { return /* binding */ buildTimeColsModel; }\n/* harmony export */ });\n/* harmony import */ var _main_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./main.css */ \"./node_modules/@fullcalendar/timegrid/main.css\");\n/* harmony import */ var _main_css__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_main_css__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @fullcalendar/common */ \"./node_modules/@fullcalendar/common/main.js\");\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _fullcalendar_daygrid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @fullcalendar/daygrid */ \"./node_modules/@fullcalendar/daygrid/main.js\");\n/*!\nFullCalendar v5.10.2\nDocs & License: https://fullcalendar.io/\n(c) 2021 Adam Shaw\n*/ \n\n\n\nvar AllDaySplitter1 = /** @class */ function(_super) {\n    var AllDaySplitter = function AllDaySplitter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(AllDaySplitter, _super);\n    AllDaySplitter.prototype.getKeyInfo = function() {\n        return {\n            allDay: {},\n            timed: {}\n        };\n    };\n    AllDaySplitter.prototype.getKeysForDateSpan = function(dateSpan) {\n        if (dateSpan.allDay) {\n            return [\n                \"allDay\"\n            ];\n        }\n        return [\n            \"timed\"\n        ];\n    };\n    AllDaySplitter.prototype.getKeysForEventDef = function(eventDef) {\n        if (!eventDef.allDay) {\n            return [\n                \"timed\"\n            ];\n        }\n        if ((0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.hasBgRendering)(eventDef)) {\n            return [\n                \"timed\",\n                \"allDay\"\n            ];\n        }\n        return [\n            \"allDay\"\n        ];\n    };\n    return AllDaySplitter;\n}(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.Splitter);\nvar DEFAULT_SLAT_LABEL_FORMAT = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createFormatter)({\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    omitZeroMinute: true,\n    meridiem: \"short\"\n});\nfunction TimeColsAxisCell(props) {\n    var classNames = [\n        \"fc-timegrid-slot\",\n        \"fc-timegrid-slot-label\",\n        props.isLabeled ? \"fc-scrollgrid-shrink\" : \"fc-timegrid-slot-minor\", \n    ];\n    return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.ViewContextType.Consumer, null, function(context) {\n        if (!props.isLabeled) {\n            return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"td\", {\n                className: classNames.join(\" \"),\n                \"data-time\": props.isoTimeStr\n            });\n        }\n        var dateEnv = context.dateEnv, options = context.options, viewApi = context.viewApi;\n        var labelFormat = options.slotLabelFormat == null ? DEFAULT_SLAT_LABEL_FORMAT : Array.isArray(options.slotLabelFormat) ? (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createFormatter)(options.slotLabelFormat[0]) : (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createFormatter)(options.slotLabelFormat);\n        var hookProps = {\n            level: 0,\n            time: props.time,\n            date: dateEnv.toDate(props.date),\n            view: viewApi,\n            text: dateEnv.format(props.date, labelFormat)\n        };\n        return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.RenderHook, {\n            hookProps: hookProps,\n            classNames: options.slotLabelClassNames,\n            content: options.slotLabelContent,\n            defaultContent: renderInnerContent,\n            didMount: options.slotLabelDidMount,\n            willUnmount: options.slotLabelWillUnmount\n        }, function(rootElRef, customClassNames, innerElRef, innerContent) {\n            return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"td\", {\n                ref: rootElRef,\n                className: classNames.concat(customClassNames).join(\" \"),\n                \"data-time\": props.isoTimeStr\n            }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                className: \"fc-timegrid-slot-label-frame fc-scrollgrid-shrink-frame\"\n            }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                className: \"fc-timegrid-slot-label-cushion fc-scrollgrid-shrink-cushion\",\n                ref: innerElRef\n            }, innerContent)));\n        });\n    });\n}\n_c = TimeColsAxisCell;\nfunction renderInnerContent(props) {\n    return props.text;\n}\nvar TimeBodyAxis1 = /** @class */ function(_super) {\n    var TimeBodyAxis = function TimeBodyAxis() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(TimeBodyAxis, _super);\n    TimeBodyAxis.prototype.render = function() {\n        return this.props.slatMetas.map(function(slatMeta) {\n            return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"tr\", {\n                key: slatMeta.key\n            }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(TimeColsAxisCell, (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, slatMeta)));\n        });\n    };\n    return TimeBodyAxis;\n}(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.BaseComponent);\nvar DEFAULT_WEEK_NUM_FORMAT = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createFormatter)({\n    week: \"short\"\n});\nvar AUTO_ALL_DAY_MAX_EVENT_ROWS = 5;\nvar TimeColsView1 = /** @class */ function(_super) {\n    var TimeColsView = function TimeColsView() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.allDaySplitter = new AllDaySplitter1(); // for use by subclasses\n        _this.headerElRef = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n        _this.rootElRef = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n        _this.scrollerElRef = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n        _this.state = {\n            slatCoords: null\n        };\n        _this.handleScrollTopRequest = function(scrollTop) {\n            var scrollerEl = _this.scrollerElRef.current;\n            if (scrollerEl) {\n                scrollerEl.scrollTop = scrollTop;\n            }\n        };\n        /* Header Render Methods\n        ------------------------------------------------------------------------------------------------------------------*/ _this.renderHeadAxis = function(rowKey, frameHeight) {\n            if (frameHeight === void 0) {\n                frameHeight = \"\";\n            }\n            var options = _this.context.options;\n            var dateProfile = _this.props.dateProfile;\n            var range = dateProfile.renderRange;\n            var dayCnt = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.diffDays)(range.start, range.end);\n            var navLinkAttrs = dayCnt === 1 // only do in day views (to avoid doing in week views that dont need it)\n             ? (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.buildNavLinkAttrs)(_this.context, range.start, \"week\") : {};\n            if (options.weekNumbers && rowKey === \"day\") {\n                return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.WeekNumberRoot, {\n                    date: range.start,\n                    defaultFormat: DEFAULT_WEEK_NUM_FORMAT\n                }, function(rootElRef, classNames, innerElRef, innerContent) {\n                    return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"th\", {\n                        ref: rootElRef,\n                        \"aria-hidden\": true,\n                        className: [\n                            \"fc-timegrid-axis\",\n                            \"fc-scrollgrid-shrink\", \n                        ].concat(classNames).join(\" \")\n                    }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                        className: \"fc-timegrid-axis-frame fc-scrollgrid-shrink-frame fc-timegrid-axis-frame-liquid\",\n                        style: {\n                            height: frameHeight\n                        }\n                    }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"a\", (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({\n                        ref: innerElRef,\n                        className: \"fc-timegrid-axis-cushion fc-scrollgrid-shrink-cushion fc-scrollgrid-sync-inner\"\n                    }, navLinkAttrs), innerContent)));\n                });\n            }\n            return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"th\", {\n                \"aria-hidden\": true,\n                className: \"fc-timegrid-axis\"\n            }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                className: \"fc-timegrid-axis-frame\",\n                style: {\n                    height: frameHeight\n                }\n            }));\n        };\n        /* Table Component Render Methods\n        ------------------------------------------------------------------------------------------------------------------*/ // only a one-way height sync. we don't send the axis inner-content height to the DayGrid,\n        // but DayGrid still needs to have classNames on inner elements in order to measure.\n        _this.renderTableRowAxis = function(rowHeight) {\n            var _a = _this.context, options = _a.options, viewApi = _a.viewApi;\n            var hookProps = {\n                text: options.allDayText,\n                view: viewApi\n            };\n            return(// TODO: make reusable hook. used in list view too\n            (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.RenderHook, {\n                hookProps: hookProps,\n                classNames: options.allDayClassNames,\n                content: options.allDayContent,\n                defaultContent: renderAllDayInner,\n                didMount: options.allDayDidMount,\n                willUnmount: options.allDayWillUnmount\n            }, function(rootElRef, classNames, innerElRef, innerContent) {\n                return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"td\", {\n                    ref: rootElRef,\n                    \"aria-hidden\": true,\n                    className: [\n                        \"fc-timegrid-axis\",\n                        \"fc-scrollgrid-shrink\", \n                    ].concat(classNames).join(\" \")\n                }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                    className: \"fc-timegrid-axis-frame fc-scrollgrid-shrink-frame\" + (rowHeight == null ? \" fc-timegrid-axis-frame-liquid\" : \"\"),\n                    style: {\n                        height: rowHeight\n                    }\n                }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"span\", {\n                    className: \"fc-timegrid-axis-cushion fc-scrollgrid-shrink-cushion fc-scrollgrid-sync-inner\",\n                    ref: innerElRef\n                }, innerContent)));\n            }));\n        };\n        _this.handleSlatCoords = function(slatCoords) {\n            _this.setState({\n                slatCoords: slatCoords\n            });\n        };\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(TimeColsView, _super);\n    // rendering\n    // ----------------------------------------------------------------------------------------------------\n    TimeColsView.prototype.renderSimpleLayout = function(headerRowContent, allDayContent, timeContent) {\n        var _a = this, context = _a.context, props = _a.props;\n        var sections = [];\n        var stickyHeaderDates = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.getStickyHeaderDates)(context.options);\n        if (headerRowContent) {\n            sections.push({\n                type: \"header\",\n                key: \"header\",\n                isSticky: stickyHeaderDates,\n                chunk: {\n                    elRef: this.headerElRef,\n                    tableClassName: \"fc-col-header\",\n                    rowContent: headerRowContent\n                }\n            });\n        }\n        if (allDayContent) {\n            sections.push({\n                type: \"body\",\n                key: \"all-day\",\n                chunk: {\n                    content: allDayContent\n                }\n            });\n            sections.push({\n                type: \"body\",\n                key: \"all-day-divider\",\n                outerContent: (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"tr\", {\n                    role: \"presentation\",\n                    className: \"fc-scrollgrid-section\"\n                }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"td\", {\n                    className: \"fc-timegrid-divider \" + context.theme.getClass(\"tableCellShaded\")\n                }))\n            });\n        }\n        sections.push({\n            type: \"body\",\n            key: \"body\",\n            liquid: true,\n            expandRows: Boolean(context.options.expandRows),\n            chunk: {\n                scrollerElRef: this.scrollerElRef,\n                content: timeContent\n            }\n        });\n        return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.ViewRoot, {\n            viewSpec: context.viewSpec,\n            elRef: this.rootElRef\n        }, function(rootElRef, classNames) {\n            return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                className: [\n                    \"fc-timegrid\"\n                ].concat(classNames).join(\" \"),\n                ref: rootElRef\n            }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.SimpleScrollGrid, {\n                liquid: !props.isHeightAuto && !props.forPrint,\n                collapsibleWidth: props.forPrint,\n                cols: [\n                    {\n                        width: \"shrink\"\n                    }\n                ],\n                sections: sections\n            }));\n        });\n    };\n    TimeColsView.prototype.renderHScrollLayout = function(headerRowContent, allDayContent, timeContent, colCnt, dayMinWidth, slatMetas, slatCoords) {\n        var _this = this;\n        var ScrollGrid = this.context.pluginHooks.scrollGridImpl;\n        if (!ScrollGrid) {\n            throw new Error(\"No ScrollGrid implementation\");\n        }\n        var _a = this, context = _a.context, props = _a.props;\n        var stickyHeaderDates = !props.forPrint && (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.getStickyHeaderDates)(context.options);\n        var stickyFooterScrollbar = !props.forPrint && (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.getStickyFooterScrollbar)(context.options);\n        var sections = [];\n        if (headerRowContent) {\n            sections.push({\n                type: \"header\",\n                key: \"header\",\n                isSticky: stickyHeaderDates,\n                syncRowHeights: true,\n                chunks: [\n                    {\n                        key: \"axis\",\n                        rowContent: function rowContent(arg) {\n                            return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"tr\", {\n                                role: \"presentation\"\n                            }, _this.renderHeadAxis(\"day\", arg.rowSyncHeights[0]));\n                        }\n                    },\n                    {\n                        key: \"cols\",\n                        elRef: this.headerElRef,\n                        tableClassName: \"fc-col-header\",\n                        rowContent: headerRowContent\n                    }, \n                ]\n            });\n        }\n        if (allDayContent) {\n            sections.push({\n                type: \"body\",\n                key: \"all-day\",\n                syncRowHeights: true,\n                chunks: [\n                    {\n                        key: \"axis\",\n                        rowContent: function rowContent(contentArg) {\n                            return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"tr\", {\n                                role: \"presentation\"\n                            }, _this.renderTableRowAxis(contentArg.rowSyncHeights[0]));\n                        }\n                    },\n                    {\n                        key: \"cols\",\n                        content: allDayContent\n                    }, \n                ]\n            });\n            sections.push({\n                key: \"all-day-divider\",\n                type: \"body\",\n                outerContent: (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"tr\", {\n                    role: \"presentation\",\n                    className: \"fc-scrollgrid-section\"\n                }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"td\", {\n                    colSpan: 2,\n                    className: \"fc-timegrid-divider \" + context.theme.getClass(\"tableCellShaded\")\n                }))\n            });\n        }\n        var isNowIndicator = context.options.nowIndicator;\n        sections.push({\n            type: \"body\",\n            key: \"body\",\n            liquid: true,\n            expandRows: Boolean(context.options.expandRows),\n            chunks: [\n                {\n                    key: \"axis\",\n                    content: function content(arg) {\n                        return(// TODO: make this now-indicator arrow more DRY with TimeColsContent\n                        (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                            className: \"fc-timegrid-axis-chunk\"\n                        }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"table\", {\n                            \"aria-hidden\": true,\n                            style: {\n                                height: arg.expandRows ? arg.clientHeight : \"\"\n                            }\n                        }, arg.tableColGroupNode, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"tbody\", null, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(TimeBodyAxis1, {\n                            slatMetas: slatMetas\n                        }))), (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                            className: \"fc-timegrid-now-indicator-container\"\n                        }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.NowTimer, {\n                            unit: isNowIndicator ? \"minute\" : \"day\" /* hacky */ \n                        }, function(nowDate) {\n                            var nowIndicatorTop = isNowIndicator && slatCoords && slatCoords.safeComputeTop(nowDate); // might return void\n                            if (typeof nowIndicatorTop === \"number\") {\n                                return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.NowIndicatorRoot, {\n                                    isAxis: true,\n                                    date: nowDate\n                                }, function(rootElRef, classNames, innerElRef, innerContent) {\n                                    return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                                        ref: rootElRef,\n                                        className: [\n                                            \"fc-timegrid-now-indicator-arrow\"\n                                        ].concat(classNames).join(\" \"),\n                                        style: {\n                                            top: nowIndicatorTop\n                                        }\n                                    }, innerContent);\n                                });\n                            }\n                            return null;\n                        }))));\n                    }\n                },\n                {\n                    key: \"cols\",\n                    scrollerElRef: this.scrollerElRef,\n                    content: timeContent\n                }, \n            ]\n        });\n        if (stickyFooterScrollbar) {\n            sections.push({\n                key: \"footer\",\n                type: \"footer\",\n                isSticky: true,\n                chunks: [\n                    {\n                        key: \"axis\",\n                        content: _fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.renderScrollShim\n                    },\n                    {\n                        key: \"cols\",\n                        content: _fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.renderScrollShim\n                    }, \n                ]\n            });\n        }\n        return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.ViewRoot, {\n            viewSpec: context.viewSpec,\n            elRef: this.rootElRef\n        }, function(rootElRef, classNames) {\n            return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                className: [\n                    \"fc-timegrid\"\n                ].concat(classNames).join(\" \"),\n                ref: rootElRef\n            }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(ScrollGrid, {\n                liquid: !props.isHeightAuto && !props.forPrint,\n                collapsibleWidth: false,\n                colGroups: [\n                    {\n                        width: \"shrink\",\n                        cols: [\n                            {\n                                width: \"shrink\"\n                            }\n                        ]\n                    },\n                    {\n                        cols: [\n                            {\n                                span: colCnt,\n                                minWidth: dayMinWidth\n                            }\n                        ]\n                    }, \n                ],\n                sections: sections\n            }));\n        });\n    };\n    /* Dimensions\n    ------------------------------------------------------------------------------------------------------------------*/ TimeColsView.prototype.getAllDayMaxEventProps = function() {\n        var _a = this.context.options, dayMaxEvents = _a.dayMaxEvents, dayMaxEventRows = _a.dayMaxEventRows;\n        if (dayMaxEvents === true || dayMaxEventRows === true) {\n            dayMaxEvents = undefined;\n            dayMaxEventRows = AUTO_ALL_DAY_MAX_EVENT_ROWS; // make sure \"auto\" goes to a real number\n        }\n        return {\n            dayMaxEvents: dayMaxEvents,\n            dayMaxEventRows: dayMaxEventRows\n        };\n    };\n    return TimeColsView;\n}(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.DateComponent);\nfunction renderAllDayInner(hookProps) {\n    return hookProps.text;\n}\nvar TimeColsSlatsCoords1 = /** @class */ function() {\n    var TimeColsSlatsCoords = function TimeColsSlatsCoords(positions, dateProfile, slotDuration) {\n        this.positions = positions;\n        this.dateProfile = dateProfile;\n        this.slotDuration = slotDuration;\n    };\n    TimeColsSlatsCoords.prototype.safeComputeTop = function(date) {\n        var dateProfile = this.dateProfile;\n        if ((0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.rangeContainsMarker)(dateProfile.currentRange, date)) {\n            var startOfDayDate = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.startOfDay)(date);\n            var timeMs = date.valueOf() - startOfDayDate.valueOf();\n            if (timeMs >= (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.asRoughMs)(dateProfile.slotMinTime) && timeMs < (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.asRoughMs)(dateProfile.slotMaxTime)) {\n                return this.computeTimeTop((0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createDuration)(timeMs));\n            }\n        }\n        return null;\n    };\n    // Computes the top coordinate, relative to the bounds of the grid, of the given date.\n    // A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.\n    TimeColsSlatsCoords.prototype.computeDateTop = function(when, startOfDayDate) {\n        if (!startOfDayDate) {\n            startOfDayDate = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.startOfDay)(when);\n        }\n        return this.computeTimeTop((0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createDuration)(when.valueOf() - startOfDayDate.valueOf()));\n    };\n    // Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).\n    // This is a makeshify way to compute the time-top. Assumes all slatMetas dates are uniform.\n    // Eventually allow computation with arbirary slat dates.\n    TimeColsSlatsCoords.prototype.computeTimeTop = function(duration) {\n        var _a = this, positions = _a.positions, dateProfile = _a.dateProfile;\n        var len = positions.els.length;\n        // floating-point value of # of slots covered\n        var slatCoverage = (duration.milliseconds - (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.asRoughMs)(dateProfile.slotMinTime)) / (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.asRoughMs)(this.slotDuration);\n        var slatIndex;\n        var slatRemainder;\n        // compute a floating-point number for how many slats should be progressed through.\n        // from 0 to number of slats (inclusive)\n        // constrained because slotMinTime/slotMaxTime might be customized.\n        slatCoverage = Math.max(0, slatCoverage);\n        slatCoverage = Math.min(len, slatCoverage);\n        // an integer index of the furthest whole slat\n        // from 0 to number slats (*exclusive*, so len-1)\n        slatIndex = Math.floor(slatCoverage);\n        slatIndex = Math.min(slatIndex, len - 1);\n        // how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.\n        // could be 1.0 if slatCoverage is covering *all* the slots\n        slatRemainder = slatCoverage - slatIndex;\n        return positions.tops[slatIndex] + positions.getHeight(slatIndex) * slatRemainder;\n    };\n    return TimeColsSlatsCoords;\n}();\nvar TimeColsSlatsBody1 = /** @class */ function(_super) {\n    var TimeColsSlatsBody = function TimeColsSlatsBody() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(TimeColsSlatsBody, _super);\n    TimeColsSlatsBody.prototype.render = function() {\n        var _a = this, props = _a.props, context = _a.context;\n        var options = context.options;\n        var slatElRefs = props.slatElRefs;\n        return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"tbody\", null, props.slatMetas.map(function(slatMeta, i) {\n            var hookProps = {\n                time: slatMeta.time,\n                date: context.dateEnv.toDate(slatMeta.date),\n                view: context.viewApi\n            };\n            var classNames = [\n                \"fc-timegrid-slot\",\n                \"fc-timegrid-slot-lane\",\n                slatMeta.isLabeled ? \"\" : \"fc-timegrid-slot-minor\", \n            ];\n            return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"tr\", {\n                key: slatMeta.key,\n                ref: slatElRefs.createRef(slatMeta.key)\n            }, props.axis && (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(TimeColsAxisCell, (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, slatMeta)), (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.RenderHook, {\n                hookProps: hookProps,\n                classNames: options.slotLaneClassNames,\n                content: options.slotLaneContent,\n                didMount: options.slotLaneDidMount,\n                willUnmount: options.slotLaneWillUnmount\n            }, function(rootElRef, customClassNames, innerElRef, innerContent) {\n                return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"td\", {\n                    ref: rootElRef,\n                    className: classNames.concat(customClassNames).join(\" \"),\n                    \"data-time\": slatMeta.isoTimeStr\n                }, innerContent);\n            }));\n        }));\n    };\n    return TimeColsSlatsBody;\n}(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.BaseComponent);\n/*\nfor the horizontal \"slats\" that run width-wise. Has a time axis on a side. Depends on RTL.\n*/ var TimeColsSlats1 = /** @class */ function(_super) {\n    var TimeColsSlats = function TimeColsSlats() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.rootElRef = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n        _this.slatElRefs = new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.RefMap();\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(TimeColsSlats, _super);\n    TimeColsSlats.prototype.render = function() {\n        var _a = this, props = _a.props, context = _a.context;\n        return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n            ref: this.rootElRef,\n            className: \"fc-timegrid-slots\"\n        }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"table\", {\n            \"aria-hidden\": true,\n            className: context.theme.getClass(\"table\"),\n            style: {\n                minWidth: props.tableMinWidth,\n                width: props.clientWidth,\n                height: props.minHeight\n            }\n        }, props.tableColGroupNode /* relies on there only being a single <col> for the axis */ , (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(TimeColsSlatsBody1, {\n            slatElRefs: this.slatElRefs,\n            axis: props.axis,\n            slatMetas: props.slatMetas\n        })));\n    };\n    TimeColsSlats.prototype.componentDidMount = function() {\n        this.updateSizing();\n    };\n    TimeColsSlats.prototype.componentDidUpdate = function() {\n        this.updateSizing();\n    };\n    TimeColsSlats.prototype.componentWillUnmount = function() {\n        if (this.props.onCoords) {\n            this.props.onCoords(null);\n        }\n    };\n    TimeColsSlats.prototype.updateSizing = function() {\n        var _a = this, context = _a.context, props = _a.props;\n        if (props.onCoords && props.clientWidth !== null // means sizing has stabilized\n        ) {\n            var rootEl = this.rootElRef.current;\n            if (rootEl.offsetHeight) {\n                props.onCoords(new TimeColsSlatsCoords1(new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.PositionCache(this.rootElRef.current, collectSlatEls(this.slatElRefs.currentMap, props.slatMetas), false, true), this.props.dateProfile, context.options.slotDuration));\n            }\n        }\n    };\n    return TimeColsSlats;\n}(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.BaseComponent);\nfunction collectSlatEls(elMap, slatMetas) {\n    return slatMetas.map(function(slatMeta) {\n        return elMap[slatMeta.key];\n    });\n}\nfunction splitSegsByCol(segs, colCnt) {\n    var segsByCol = [];\n    var i;\n    for(i = 0; i < colCnt; i += 1){\n        segsByCol.push([]);\n    }\n    if (segs) {\n        for(i = 0; i < segs.length; i += 1){\n            segsByCol[segs[i].col].push(segs[i]);\n        }\n    }\n    return segsByCol;\n}\nfunction splitInteractionByCol(ui, colCnt) {\n    var byRow = [];\n    if (!ui) {\n        for(var i = 0; i < colCnt; i += 1){\n            byRow[i] = null;\n        }\n    } else {\n        for(var i = 0; i < colCnt; i += 1){\n            byRow[i] = {\n                affectedInstances: ui.affectedInstances,\n                isEvent: ui.isEvent,\n                segs: []\n            };\n        }\n        for(var _i = 0, _a = ui.segs; _i < _a.length; _i++){\n            var seg = _a[_i];\n            byRow[seg.col].segs.push(seg);\n        }\n    }\n    return byRow;\n}\nvar TimeColMoreLink1 = /** @class */ function(_super) {\n    var TimeColMoreLink = function TimeColMoreLink() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.rootElRef = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(TimeColMoreLink, _super);\n    TimeColMoreLink.prototype.render = function() {\n        var _this = this;\n        var props = this.props;\n        return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.MoreLinkRoot, {\n            allDayDate: null,\n            moreCnt: props.hiddenSegs.length,\n            allSegs: props.hiddenSegs,\n            hiddenSegs: props.hiddenSegs,\n            alignmentElRef: this.rootElRef,\n            defaultContent: renderMoreLinkInner,\n            extraDateSpan: props.extraDateSpan,\n            dateProfile: props.dateProfile,\n            todayRange: props.todayRange,\n            popoverContent: function popoverContent() {\n                return renderPlainFgSegs(props.hiddenSegs, props);\n            }\n        }, function(rootElRef, classNames, innerElRef, innerContent, handleClick, title, isExpanded, popoverId) {\n            return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"a\", {\n                ref: function ref(el) {\n                    (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.setRef)(rootElRef, el);\n                    (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.setRef)(_this.rootElRef, el);\n                },\n                className: [\n                    \"fc-timegrid-more-link\"\n                ].concat(classNames).join(\" \"),\n                style: {\n                    top: props.top,\n                    bottom: props.bottom\n                },\n                onClick: handleClick,\n                title: title,\n                \"aria-expanded\": isExpanded,\n                \"aria-controls\": popoverId\n            }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                ref: innerElRef,\n                className: \"fc-timegrid-more-link-inner fc-sticky\"\n            }, innerContent));\n        });\n    };\n    return TimeColMoreLink;\n}(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.BaseComponent);\nfunction renderMoreLinkInner(props) {\n    return props.shortText;\n}\n// segInputs assumed sorted\nfunction buildPositioning(segInputs, strictOrder, maxStackCnt) {\n    var hierarchy = new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.SegHierarchy();\n    if (strictOrder != null) {\n        hierarchy.strictOrder = strictOrder;\n    }\n    if (maxStackCnt != null) {\n        hierarchy.maxStackCnt = maxStackCnt;\n    }\n    var hiddenEntries = hierarchy.addSegs(segInputs);\n    var hiddenGroups = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.groupIntersectingEntries)(hiddenEntries);\n    var web = buildWeb(hierarchy);\n    web = stretchWeb(web, 1); // all levelCoords/thickness will have 0.0-1.0\n    var segRects = webToRects(web);\n    return {\n        segRects: segRects,\n        hiddenGroups: hiddenGroups\n    };\n}\nfunction buildWeb(hierarchy) {\n    var entriesByLevel = hierarchy.entriesByLevel;\n    var buildNode = cacheable(function(level, lateral) {\n        return level + \":\" + lateral;\n    }, function(level, lateral) {\n        var siblingRange = findNextLevelSegs(hierarchy, level, lateral);\n        var nextLevelRes = buildNodes(siblingRange, buildNode);\n        var entry = entriesByLevel[level][lateral];\n        return [\n            (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, entry), {\n                nextLevelNodes: nextLevelRes[0]\n            }),\n            entry.thickness + nextLevelRes[1]\n        ];\n    });\n    return buildNodes(entriesByLevel.length ? {\n        level: 0,\n        lateralStart: 0,\n        lateralEnd: entriesByLevel[0].length\n    } : null, buildNode)[0];\n}\nfunction buildNodes(siblingRange, buildNode) {\n    if (!siblingRange) {\n        return [\n            [],\n            0\n        ];\n    }\n    var level = siblingRange.level, lateralStart = siblingRange.lateralStart, lateralEnd = siblingRange.lateralEnd;\n    var lateral = lateralStart;\n    var pairs = [];\n    while(lateral < lateralEnd){\n        pairs.push(buildNode(level, lateral));\n        lateral += 1;\n    }\n    pairs.sort(cmpDescPressures);\n    return [\n        pairs.map(extractNode),\n        pairs[0][1]\n    ];\n}\nfunction cmpDescPressures(a, b) {\n    return b[1] - a[1];\n}\nfunction extractNode(a) {\n    return a[0];\n}\nfunction findNextLevelSegs(hierarchy, subjectLevel, subjectLateral) {\n    var levelCoords = hierarchy.levelCoords, entriesByLevel = hierarchy.entriesByLevel;\n    var subjectEntry = entriesByLevel[subjectLevel][subjectLateral];\n    var afterSubject = levelCoords[subjectLevel] + subjectEntry.thickness;\n    var levelCnt = levelCoords.length;\n    var level = subjectLevel;\n    // skip past levels that are too high up\n    for(; level < levelCnt && levelCoords[level] < afterSubject; level += 1); // do nothing\n    for(; level < levelCnt; level += 1){\n        var entries = entriesByLevel[level];\n        var entry = void 0;\n        var searchIndex = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.binarySearch)(entries, subjectEntry.span.start, _fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.getEntrySpanEnd);\n        var lateralStart = searchIndex[0] + searchIndex[1]; // if exact match (which doesn't collide), go to next one\n        var lateralEnd = lateralStart;\n        while((entry = entries[lateralEnd]) && entry.span.start < subjectEntry.span.end){\n            lateralEnd += 1;\n        }\n        if (lateralStart < lateralEnd) {\n            return {\n                level: level,\n                lateralStart: lateralStart,\n                lateralEnd: lateralEnd\n            };\n        }\n    }\n    return null;\n}\nfunction stretchWeb(topLevelNodes, totalThickness) {\n    var stretchNode = cacheable(function(node, startCoord, prevThickness) {\n        return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.buildEntryKey)(node);\n    }, function(node, startCoord, prevThickness) {\n        var nextLevelNodes = node.nextLevelNodes, thickness = node.thickness;\n        var allThickness = thickness + prevThickness;\n        var thicknessFraction = thickness / allThickness;\n        var endCoord;\n        var newChildren = [];\n        if (!nextLevelNodes.length) {\n            endCoord = totalThickness;\n        } else {\n            for(var _i = 0, nextLevelNodes_1 = nextLevelNodes; _i < nextLevelNodes_1.length; _i++){\n                var childNode = nextLevelNodes_1[_i];\n                if (endCoord === undefined) {\n                    var res = stretchNode(childNode, startCoord, allThickness);\n                    endCoord = res[0];\n                    newChildren.push(res[1]);\n                } else {\n                    var res = stretchNode(childNode, endCoord, 0);\n                    newChildren.push(res[1]);\n                }\n            }\n        }\n        var newThickness = (endCoord - startCoord) * thicknessFraction;\n        return [\n            endCoord - newThickness,\n            (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, node), {\n                thickness: newThickness,\n                nextLevelNodes: newChildren\n            })\n        ];\n    });\n    return topLevelNodes.map(function(node) {\n        return stretchNode(node, 0, 0)[1];\n    });\n}\n// not sorted in any particular order\nfunction webToRects(topLevelNodes) {\n    var processNodes = function processNodes(nodes, levelCoord, stackDepth) {\n        var stackForward = 0;\n        for(var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++){\n            var node = nodes_1[_i];\n            stackForward = Math.max(processNode(node, levelCoord, stackDepth), stackForward);\n        }\n        return stackForward;\n    };\n    var rects = [];\n    var processNode = cacheable(function(node, levelCoord, stackDepth) {\n        return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.buildEntryKey)(node);\n    }, function(node, levelCoord, stackDepth) {\n        var rect = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, node), {\n            levelCoord: levelCoord,\n            stackDepth: stackDepth,\n            stackForward: 0\n        });\n        rects.push(rect);\n        return rect.stackForward = processNodes(node.nextLevelNodes, levelCoord + node.thickness, stackDepth + 1) + 1;\n    });\n    processNodes(topLevelNodes, 0, 0);\n    return rects; // TODO: sort rects by levelCoord to be consistent with toRects?\n}\n// TODO: move to general util\nfunction cacheable(keyFunc, workFunc) {\n    var cache = {};\n    return function() {\n        var args = [];\n        for(var _i = 0; _i < arguments.length; _i++){\n            args[_i] = arguments[_i];\n        }\n        var key = keyFunc.apply(void 0, args);\n        return key in cache ? cache[key] : cache[key] = workFunc.apply(void 0, args);\n    };\n}\nfunction computeSegVCoords(segs, colDate, slatCoords, eventMinHeight) {\n    if (slatCoords === void 0) {\n        slatCoords = null;\n    }\n    if (eventMinHeight === void 0) {\n        eventMinHeight = 0;\n    }\n    var vcoords = [];\n    if (slatCoords) {\n        for(var i = 0; i < segs.length; i += 1){\n            var seg = segs[i];\n            var spanStart = slatCoords.computeDateTop(seg.start, colDate);\n            var spanEnd = Math.max(spanStart + (eventMinHeight || 0), slatCoords.computeDateTop(seg.end, colDate));\n            vcoords.push({\n                start: Math.round(spanStart),\n                end: Math.round(spanEnd)\n            });\n        }\n    }\n    return vcoords;\n}\nfunction computeFgSegPlacements(segs, segVCoords, eventOrderStrict, eventMaxStack) {\n    var segInputs = [];\n    var dumbSegs = []; // segs without coords\n    for(var i = 0; i < segs.length; i += 1){\n        var vcoords = segVCoords[i];\n        if (vcoords) {\n            segInputs.push({\n                index: i,\n                thickness: 1,\n                span: vcoords\n            });\n        } else {\n            dumbSegs.push(segs[i]);\n        }\n    }\n    var _a = buildPositioning(segInputs, eventOrderStrict, eventMaxStack), segRects = _a.segRects, hiddenGroups = _a.hiddenGroups;\n    var segPlacements = [];\n    for(var _i = 0, segRects_1 = segRects; _i < segRects_1.length; _i++){\n        var segRect = segRects_1[_i];\n        segPlacements.push({\n            seg: segs[segRect.index],\n            rect: segRect\n        });\n    }\n    for(var _b = 0, dumbSegs_1 = dumbSegs; _b < dumbSegs_1.length; _b++){\n        var dumbSeg = dumbSegs_1[_b];\n        segPlacements.push({\n            seg: dumbSeg,\n            rect: null\n        });\n    }\n    return {\n        segPlacements: segPlacements,\n        hiddenGroups: hiddenGroups\n    };\n}\nvar DEFAULT_TIME_FORMAT = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createFormatter)({\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    meridiem: false\n});\nvar TimeColEvent1 = /** @class */ function(_super) {\n    var TimeColEvent = function TimeColEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(TimeColEvent, _super);\n    TimeColEvent.prototype.render = function() {\n        var classNames = [\n            \"fc-timegrid-event\",\n            \"fc-v-event\", \n        ];\n        if (this.props.isShort) {\n            classNames.push(\"fc-timegrid-event-short\");\n        }\n        return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.StandardEvent, (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, this.props, {\n            defaultTimeFormat: DEFAULT_TIME_FORMAT,\n            extraClassNames: classNames\n        }));\n    };\n    return TimeColEvent;\n}(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.BaseComponent);\nvar TimeColMisc1 = /** @class */ function(_super) {\n    var TimeColMisc = function TimeColMisc() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(TimeColMisc, _super);\n    TimeColMisc.prototype.render = function() {\n        var props = this.props;\n        return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.DayCellContent, {\n            date: props.date,\n            dateProfile: props.dateProfile,\n            todayRange: props.todayRange,\n            extraHookProps: props.extraHookProps\n        }, function(innerElRef, innerContent) {\n            return innerContent && (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                className: \"fc-timegrid-col-misc\",\n                ref: innerElRef\n            }, innerContent);\n        });\n    };\n    return TimeColMisc;\n}(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.BaseComponent);\nvar TimeCol1 = /** @class */ function(_super) {\n    var TimeCol = function TimeCol() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.sortEventSegs = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.memoize)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.sortEventSegs);\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(TimeCol, _super);\n    // TODO: memoize event-placement?\n    TimeCol.prototype.render = function() {\n        var _this = this;\n        var _a = this, props = _a.props, context = _a.context;\n        var isSelectMirror = context.options.selectMirror;\n        var mirrorSegs = props.eventDrag && props.eventDrag.segs || props.eventResize && props.eventResize.segs || isSelectMirror && props.dateSelectionSegs || [];\n        var interactionAffectedInstances = props.eventDrag && props.eventDrag.affectedInstances || props.eventResize && props.eventResize.affectedInstances || {};\n        var sortedFgSegs = this.sortEventSegs(props.fgEventSegs, context.options.eventOrder);\n        return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.DayCellRoot, {\n            elRef: props.elRef,\n            date: props.date,\n            dateProfile: props.dateProfile,\n            todayRange: props.todayRange,\n            extraHookProps: props.extraHookProps\n        }, function(rootElRef, classNames, dataAttrs) {\n            return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"td\", (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({\n                ref: rootElRef,\n                role: \"gridcell\",\n                className: [\n                    \"fc-timegrid-col\"\n                ].concat(classNames, props.extraClassNames || []).join(\" \")\n            }, dataAttrs, props.extraDataAttrs), (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                className: \"fc-timegrid-col-frame\"\n            }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                className: \"fc-timegrid-col-bg\"\n            }, _this.renderFillSegs(props.businessHourSegs, \"non-business\"), _this.renderFillSegs(props.bgEventSegs, \"bg-event\"), _this.renderFillSegs(props.dateSelectionSegs, \"highlight\")), (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                className: \"fc-timegrid-col-events\"\n            }, _this.renderFgSegs(sortedFgSegs, interactionAffectedInstances, false, false, false)), (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                className: \"fc-timegrid-col-events\"\n            }, _this.renderFgSegs(mirrorSegs, {}, Boolean(props.eventDrag), Boolean(props.eventResize), Boolean(isSelectMirror))), (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                className: \"fc-timegrid-now-indicator-container\"\n            }, _this.renderNowIndicator(props.nowIndicatorSegs)), (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(TimeColMisc1, {\n                date: props.date,\n                dateProfile: props.dateProfile,\n                todayRange: props.todayRange,\n                extraHookProps: props.extraHookProps\n            })));\n        });\n    };\n    TimeCol.prototype.renderFgSegs = function(sortedFgSegs, segIsInvisible, isDragging, isResizing, isDateSelecting) {\n        var props = this.props;\n        if (props.forPrint) {\n            return renderPlainFgSegs(sortedFgSegs, props);\n        }\n        return this.renderPositionedFgSegs(sortedFgSegs, segIsInvisible, isDragging, isResizing, isDateSelecting);\n    };\n    TimeCol.prototype.renderPositionedFgSegs = function(segs, segIsInvisible, isDragging, isResizing, isDateSelecting) {\n        var _this = this;\n        var _a = this.context.options, eventMaxStack = _a.eventMaxStack, eventShortHeight = _a.eventShortHeight, eventOrderStrict = _a.eventOrderStrict, eventMinHeight = _a.eventMinHeight;\n        var _b = this.props, date = _b.date, slatCoords = _b.slatCoords, eventSelection = _b.eventSelection, todayRange = _b.todayRange, nowDate = _b.nowDate;\n        var isMirror = isDragging || isResizing || isDateSelecting;\n        var segVCoords = computeSegVCoords(segs, date, slatCoords, eventMinHeight);\n        var _c1 = computeFgSegPlacements(segs, segVCoords, eventOrderStrict, eventMaxStack), segPlacements = _c1.segPlacements, hiddenGroups = _c1.hiddenGroups;\n        return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, this.renderHiddenGroups(hiddenGroups, segs), segPlacements.map(function(segPlacement) {\n            var seg = segPlacement.seg, rect = segPlacement.rect;\n            var instanceId = seg.eventRange.instance.instanceId;\n            var isVisible = isMirror || Boolean(!segIsInvisible[instanceId] && rect);\n            var vStyle = computeSegVStyle(rect && rect.span);\n            var hStyle = !isMirror && rect ? _this.computeSegHStyle(rect) : {\n                left: 0,\n                right: 0\n            };\n            var isInset = Boolean(rect) && rect.stackForward > 0;\n            var isShort = Boolean(rect) && rect.span.end - rect.span.start < eventShortHeight; // look at other places for this problem\n            return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                className: \"fc-timegrid-event-harness\" + (isInset ? \" fc-timegrid-event-harness-inset\" : \"\"),\n                key: instanceId,\n                style: (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({\n                    visibility: isVisible ? \"\" : \"hidden\"\n                }, vStyle), hStyle)\n            }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(TimeColEvent1, (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({\n                seg: seg,\n                isDragging: isDragging,\n                isResizing: isResizing,\n                isDateSelecting: isDateSelecting,\n                isSelected: instanceId === eventSelection,\n                isShort: isShort\n            }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.getSegMeta)(seg, todayRange, nowDate))));\n        }));\n    };\n    // will already have eventMinHeight applied because segInputs already had it\n    TimeCol.prototype.renderHiddenGroups = function(hiddenGroups, segs) {\n        var _a = this.props, extraDateSpan = _a.extraDateSpan, dateProfile = _a.dateProfile, todayRange = _a.todayRange, nowDate = _a.nowDate, eventSelection = _a.eventSelection, eventDrag = _a.eventDrag, eventResize = _a.eventResize;\n        return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, hiddenGroups.map(function(hiddenGroup) {\n            var positionCss = computeSegVStyle(hiddenGroup.span);\n            var hiddenSegs = compileSegsFromEntries(hiddenGroup.entries, segs);\n            return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(TimeColMoreLink1, {\n                key: (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.buildIsoString)((0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.computeEarliestSegStart)(hiddenSegs)),\n                hiddenSegs: hiddenSegs,\n                top: positionCss.top,\n                bottom: positionCss.bottom,\n                extraDateSpan: extraDateSpan,\n                dateProfile: dateProfile,\n                todayRange: todayRange,\n                nowDate: nowDate,\n                eventSelection: eventSelection,\n                eventDrag: eventDrag,\n                eventResize: eventResize\n            });\n        }));\n    };\n    TimeCol.prototype.renderFillSegs = function(segs, fillType) {\n        var _a = this, props = _a.props, context = _a.context;\n        var segVCoords = computeSegVCoords(segs, props.date, props.slatCoords, context.options.eventMinHeight); // don't assume all populated\n        var children = segVCoords.map(function(vcoords, i) {\n            var seg = segs[i];\n            return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                key: (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.buildEventRangeKey)(seg.eventRange),\n                className: \"fc-timegrid-bg-harness\",\n                style: computeSegVStyle(vcoords)\n            }, fillType === \"bg-event\" ? (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.BgEvent, (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({\n                seg: seg\n            }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.getSegMeta)(seg, props.todayRange, props.nowDate))) : (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.renderFill)(fillType));\n        });\n        return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, children);\n    };\n    TimeCol.prototype.renderNowIndicator = function(segs) {\n        var _a = this.props, slatCoords = _a.slatCoords, date = _a.date;\n        if (!slatCoords) {\n            return null;\n        }\n        return segs.map(function(seg, i) {\n            return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.NowIndicatorRoot, {\n                isAxis: false,\n                date: date,\n                // key doesn't matter. will only ever be one\n                key: i\n            }, function(rootElRef, classNames, innerElRef, innerContent) {\n                return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                    ref: rootElRef,\n                    className: [\n                        \"fc-timegrid-now-indicator-line\"\n                    ].concat(classNames).join(\" \"),\n                    style: {\n                        top: slatCoords.computeDateTop(seg.start, date)\n                    }\n                }, innerContent);\n            });\n        });\n    };\n    TimeCol.prototype.computeSegHStyle = function(segHCoords) {\n        var _a = this.context, isRtl = _a.isRtl, options = _a.options;\n        var shouldOverlap = options.slotEventOverlap;\n        var nearCoord = segHCoords.levelCoord; // the left side if LTR. the right side if RTL. floating-point\n        var farCoord = segHCoords.levelCoord + segHCoords.thickness; // the right side if LTR. the left side if RTL. floating-point\n        var left; // amount of space from left edge, a fraction of the total width\n        var right; // amount of space from right edge, a fraction of the total width\n        if (shouldOverlap) {\n            // double the width, but don't go beyond the maximum forward coordinate (1.0)\n            farCoord = Math.min(1, nearCoord + (farCoord - nearCoord) * 2);\n        }\n        if (isRtl) {\n            left = 1 - farCoord;\n            right = nearCoord;\n        } else {\n            left = nearCoord;\n            right = 1 - farCoord;\n        }\n        var props = {\n            zIndex: segHCoords.stackDepth + 1,\n            left: left * 100 + \"%\",\n            right: right * 100 + \"%\"\n        };\n        if (shouldOverlap && !segHCoords.stackForward) {\n            // add padding to the edge so that forward stacked events don't cover the resizer's icon\n            props[isRtl ? \"marginLeft\" : \"marginRight\"] = 10 * 2; // 10 is a guesstimate of the icon's width\n        }\n        return props;\n    };\n    return TimeCol;\n}(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.BaseComponent);\nfunction renderPlainFgSegs(sortedFgSegs, _a) {\n    var todayRange = _a.todayRange, nowDate = _a.nowDate, eventSelection = _a.eventSelection, eventDrag = _a.eventDrag, eventResize = _a.eventResize;\n    var hiddenInstances = (eventDrag ? eventDrag.affectedInstances : null) || (eventResize ? eventResize.affectedInstances : null) || {};\n    return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, sortedFgSegs.map(function(seg) {\n        var instanceId = seg.eventRange.instance.instanceId;\n        return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n            key: instanceId,\n            style: {\n                visibility: hiddenInstances[instanceId] ? \"hidden\" : \"\"\n            }\n        }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(TimeColEvent1, (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({\n            seg: seg,\n            isDragging: false,\n            isResizing: false,\n            isDateSelecting: false,\n            isSelected: instanceId === eventSelection,\n            isShort: false\n        }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.getSegMeta)(seg, todayRange, nowDate))));\n    }));\n}\nfunction computeSegVStyle(segVCoords) {\n    if (!segVCoords) {\n        return {\n            top: \"\",\n            bottom: \"\"\n        };\n    }\n    return {\n        top: segVCoords.start,\n        bottom: -segVCoords.end\n    };\n}\nfunction compileSegsFromEntries(segEntries, allSegs) {\n    return segEntries.map(function(segEntry) {\n        return allSegs[segEntry.index];\n    });\n}\nvar TimeColsContent1 = /** @class */ function(_super) {\n    var TimeColsContent = function TimeColsContent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.splitFgEventSegs = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.memoize)(splitSegsByCol);\n        _this.splitBgEventSegs = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.memoize)(splitSegsByCol);\n        _this.splitBusinessHourSegs = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.memoize)(splitSegsByCol);\n        _this.splitNowIndicatorSegs = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.memoize)(splitSegsByCol);\n        _this.splitDateSelectionSegs = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.memoize)(splitSegsByCol);\n        _this.splitEventDrag = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.memoize)(splitInteractionByCol);\n        _this.splitEventResize = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.memoize)(splitInteractionByCol);\n        _this.rootElRef = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n        _this.cellElRefs = new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.RefMap();\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(TimeColsContent, _super);\n    TimeColsContent.prototype.render = function() {\n        var _this = this;\n        var _a = this, props = _a.props, context = _a.context;\n        var nowIndicatorTop = context.options.nowIndicator && props.slatCoords && props.slatCoords.safeComputeTop(props.nowDate); // might return void\n        var colCnt = props.cells.length;\n        var fgEventSegsByRow = this.splitFgEventSegs(props.fgEventSegs, colCnt);\n        var bgEventSegsByRow = this.splitBgEventSegs(props.bgEventSegs, colCnt);\n        var businessHourSegsByRow = this.splitBusinessHourSegs(props.businessHourSegs, colCnt);\n        var nowIndicatorSegsByRow = this.splitNowIndicatorSegs(props.nowIndicatorSegs, colCnt);\n        var dateSelectionSegsByRow = this.splitDateSelectionSegs(props.dateSelectionSegs, colCnt);\n        var eventDragByRow = this.splitEventDrag(props.eventDrag, colCnt);\n        var eventResizeByRow = this.splitEventResize(props.eventResize, colCnt);\n        return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n            className: \"fc-timegrid-cols\",\n            ref: this.rootElRef\n        }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"table\", {\n            role: \"presentation\",\n            style: {\n                minWidth: props.tableMinWidth,\n                width: props.clientWidth\n            }\n        }, props.tableColGroupNode, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"tbody\", {\n            role: \"presentation\"\n        }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"tr\", {\n            role: \"row\"\n        }, props.axis && (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"td\", {\n            \"aria-hidden\": true,\n            className: \"fc-timegrid-col fc-timegrid-axis\"\n        }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n            className: \"fc-timegrid-col-frame\"\n        }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n            className: \"fc-timegrid-now-indicator-container\"\n        }, typeof nowIndicatorTop === \"number\" && (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.NowIndicatorRoot, {\n            isAxis: true,\n            date: props.nowDate\n        }, function(rootElRef, classNames, innerElRef, innerContent) {\n            return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n                ref: rootElRef,\n                className: [\n                    \"fc-timegrid-now-indicator-arrow\"\n                ].concat(classNames).join(\" \"),\n                style: {\n                    top: nowIndicatorTop\n                }\n            }, innerContent);\n        })))), props.cells.map(function(cell, i) {\n            return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(TimeCol1, {\n                key: cell.key,\n                elRef: _this.cellElRefs.createRef(cell.key),\n                dateProfile: props.dateProfile,\n                date: cell.date,\n                nowDate: props.nowDate,\n                todayRange: props.todayRange,\n                extraHookProps: cell.extraHookProps,\n                extraDataAttrs: cell.extraDataAttrs,\n                extraClassNames: cell.extraClassNames,\n                extraDateSpan: cell.extraDateSpan,\n                fgEventSegs: fgEventSegsByRow[i],\n                bgEventSegs: bgEventSegsByRow[i],\n                businessHourSegs: businessHourSegsByRow[i],\n                nowIndicatorSegs: nowIndicatorSegsByRow[i],\n                dateSelectionSegs: dateSelectionSegsByRow[i],\n                eventDrag: eventDragByRow[i],\n                eventResize: eventResizeByRow[i],\n                slatCoords: props.slatCoords,\n                eventSelection: props.eventSelection,\n                forPrint: props.forPrint\n            });\n        })))));\n    };\n    TimeColsContent.prototype.componentDidMount = function() {\n        this.updateCoords();\n    };\n    TimeColsContent.prototype.componentDidUpdate = function() {\n        this.updateCoords();\n    };\n    TimeColsContent.prototype.updateCoords = function() {\n        var props = this.props;\n        if (props.onColCoords && props.clientWidth !== null // means sizing has stabilized\n        ) {\n            props.onColCoords(new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.PositionCache(this.rootElRef.current, collectCellEls(this.cellElRefs.currentMap, props.cells), true, false));\n        }\n    };\n    return TimeColsContent;\n}(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.BaseComponent);\nfunction collectCellEls(elMap, cells) {\n    return cells.map(function(cell) {\n        return elMap[cell.key];\n    });\n}\n/* A component that renders one or more columns of vertical time slots\n----------------------------------------------------------------------------------------------------------------------*/ var TimeCols1 = /** @class */ function(_super) {\n    var TimeCols = function TimeCols() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.processSlotOptions = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.memoize)(processSlotOptions);\n        _this.state = {\n            slatCoords: null\n        };\n        _this.handleRootEl = function(el) {\n            if (el) {\n                _this.context.registerInteractiveComponent(_this, {\n                    el: el,\n                    isHitComboAllowed: _this.props.isHitComboAllowed\n                });\n            } else {\n                _this.context.unregisterInteractiveComponent(_this);\n            }\n        };\n        _this.handleScrollRequest = function(request) {\n            var onScrollTopRequest = _this.props.onScrollTopRequest;\n            var slatCoords = _this.state.slatCoords;\n            if (onScrollTopRequest && slatCoords) {\n                if (request.time) {\n                    var top_1 = slatCoords.computeTimeTop(request.time);\n                    top_1 = Math.ceil(top_1); // zoom can give weird floating-point values. rather scroll a little bit further\n                    if (top_1) {\n                        top_1 += 1; // to overcome top border that slots beyond the first have. looks better\n                    }\n                    onScrollTopRequest(top_1);\n                }\n                return true;\n            }\n            return false;\n        };\n        _this.handleColCoords = function(colCoords) {\n            _this.colCoords = colCoords;\n        };\n        _this.handleSlatCoords = function(slatCoords) {\n            _this.setState({\n                slatCoords: slatCoords\n            });\n            if (_this.props.onSlatCoords) {\n                _this.props.onSlatCoords(slatCoords);\n            }\n        };\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(TimeCols, _super);\n    TimeCols.prototype.render = function() {\n        var _a = this, props = _a.props, state = _a.state;\n        return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"div\", {\n            className: \"fc-timegrid-body\",\n            ref: this.handleRootEl,\n            style: {\n                // these props are important to give this wrapper correct dimensions for interactions\n                // TODO: if we set it here, can we avoid giving to inner tables?\n                width: props.clientWidth,\n                minWidth: props.tableMinWidth\n            }\n        }, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(TimeColsSlats1, {\n            axis: props.axis,\n            dateProfile: props.dateProfile,\n            slatMetas: props.slatMetas,\n            clientWidth: props.clientWidth,\n            minHeight: props.expandRows ? props.clientHeight : \"\",\n            tableMinWidth: props.tableMinWidth,\n            tableColGroupNode: props.axis ? props.tableColGroupNode : null,\n            onCoords: this.handleSlatCoords\n        }), (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(TimeColsContent1, {\n            cells: props.cells,\n            axis: props.axis,\n            dateProfile: props.dateProfile,\n            businessHourSegs: props.businessHourSegs,\n            bgEventSegs: props.bgEventSegs,\n            fgEventSegs: props.fgEventSegs,\n            dateSelectionSegs: props.dateSelectionSegs,\n            eventSelection: props.eventSelection,\n            eventDrag: props.eventDrag,\n            eventResize: props.eventResize,\n            todayRange: props.todayRange,\n            nowDate: props.nowDate,\n            nowIndicatorSegs: props.nowIndicatorSegs,\n            clientWidth: props.clientWidth,\n            tableMinWidth: props.tableMinWidth,\n            tableColGroupNode: props.tableColGroupNode,\n            slatCoords: state.slatCoords,\n            onColCoords: this.handleColCoords,\n            forPrint: props.forPrint\n        }));\n    };\n    TimeCols.prototype.componentDidMount = function() {\n        this.scrollResponder = this.context.createScrollResponder(this.handleScrollRequest);\n    };\n    TimeCols.prototype.componentDidUpdate = function(prevProps) {\n        this.scrollResponder.update(prevProps.dateProfile !== this.props.dateProfile);\n    };\n    TimeCols.prototype.componentWillUnmount = function() {\n        this.scrollResponder.detach();\n    };\n    TimeCols.prototype.queryHit = function(positionLeft, positionTop) {\n        var _a = this.context, dateEnv = _a.dateEnv, options = _a.options;\n        var colCoords = this.colCoords;\n        var dateProfile = this.props.dateProfile;\n        var slatCoords = this.state.slatCoords;\n        var _b = this.processSlotOptions(this.props.slotDuration, options.snapDuration), snapDuration = _b.snapDuration, snapsPerSlot = _b.snapsPerSlot;\n        var colIndex = colCoords.leftToIndex(positionLeft);\n        var slatIndex = slatCoords.positions.topToIndex(positionTop);\n        if (colIndex != null && slatIndex != null) {\n            var cell = this.props.cells[colIndex];\n            var slatTop = slatCoords.positions.tops[slatIndex];\n            var slatHeight = slatCoords.positions.getHeight(slatIndex);\n            var partial = (positionTop - slatTop) / slatHeight; // floating point number between 0 and 1\n            var localSnapIndex = Math.floor(partial * snapsPerSlot); // the snap # relative to start of slat\n            var snapIndex = slatIndex * snapsPerSlot + localSnapIndex;\n            var dayDate = this.props.cells[colIndex].date;\n            var time = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.addDurations)(dateProfile.slotMinTime, (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.multiplyDuration)(snapDuration, snapIndex));\n            var start = dateEnv.add(dayDate, time);\n            var end = dateEnv.add(start, snapDuration);\n            return {\n                dateProfile: dateProfile,\n                dateSpan: (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({\n                    range: {\n                        start: start,\n                        end: end\n                    },\n                    allDay: false\n                }, cell.extraDateSpan),\n                dayEl: colCoords.els[colIndex],\n                rect: {\n                    left: colCoords.lefts[colIndex],\n                    right: colCoords.rights[colIndex],\n                    top: slatTop,\n                    bottom: slatTop + slatHeight\n                },\n                layer: 0\n            };\n        }\n        return null;\n    };\n    return TimeCols;\n}(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.DateComponent);\nfunction processSlotOptions(slotDuration, snapDurationOverride) {\n    var snapDuration = snapDurationOverride || slotDuration;\n    var snapsPerSlot = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.wholeDivideDurations)(slotDuration, snapDuration);\n    if (snapsPerSlot === null) {\n        snapDuration = slotDuration;\n        snapsPerSlot = 1;\n    // TODO: say warning?\n    }\n    return {\n        snapDuration: snapDuration,\n        snapsPerSlot: snapsPerSlot\n    };\n}\nvar DayTimeColsSlicer1 = /** @class */ function(_super) {\n    var DayTimeColsSlicer = function DayTimeColsSlicer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(DayTimeColsSlicer, _super);\n    DayTimeColsSlicer.prototype.sliceRange = function(range, dayRanges) {\n        var segs = [];\n        for(var col = 0; col < dayRanges.length; col += 1){\n            var segRange = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.intersectRanges)(range, dayRanges[col]);\n            if (segRange) {\n                segs.push({\n                    start: segRange.start,\n                    end: segRange.end,\n                    isStart: segRange.start.valueOf() === range.start.valueOf(),\n                    isEnd: segRange.end.valueOf() === range.end.valueOf(),\n                    col: col\n                });\n            }\n        }\n        return segs;\n    };\n    return DayTimeColsSlicer;\n}(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.Slicer);\nvar DayTimeCols1 = /** @class */ function(_super) {\n    var DayTimeCols = function DayTimeCols() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.buildDayRanges = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.memoize)(buildDayRanges);\n        _this.slicer = new DayTimeColsSlicer1();\n        _this.timeColsRef = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(DayTimeCols, _super);\n    DayTimeCols.prototype.render = function() {\n        var _this = this;\n        var _a = this, props = _a.props, context = _a.context;\n        var dateProfile = props.dateProfile, dayTableModel = props.dayTableModel;\n        var isNowIndicator = context.options.nowIndicator;\n        var dayRanges = this.buildDayRanges(dayTableModel, dateProfile, context.dateEnv);\n        // give it the first row of cells\n        // TODO: would move this further down hierarchy, but sliceNowDate needs it\n        return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.NowTimer, {\n            unit: isNowIndicator ? \"minute\" : \"day\"\n        }, function(nowDate, todayRange) {\n            return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(TimeCols1, (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({\n                ref: _this.timeColsRef\n            }, _this.slicer.sliceProps(props, dateProfile, null, context, dayRanges), {\n                forPrint: props.forPrint,\n                axis: props.axis,\n                dateProfile: dateProfile,\n                slatMetas: props.slatMetas,\n                slotDuration: props.slotDuration,\n                cells: dayTableModel.cells[0],\n                tableColGroupNode: props.tableColGroupNode,\n                tableMinWidth: props.tableMinWidth,\n                clientWidth: props.clientWidth,\n                clientHeight: props.clientHeight,\n                expandRows: props.expandRows,\n                nowDate: nowDate,\n                nowIndicatorSegs: isNowIndicator && _this.slicer.sliceNowDate(nowDate, context, dayRanges),\n                todayRange: todayRange,\n                onScrollTopRequest: props.onScrollTopRequest,\n                onSlatCoords: props.onSlatCoords\n            }));\n        });\n    };\n    return DayTimeCols;\n}(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.DateComponent);\nfunction buildDayRanges(dayTableModel, dateProfile, dateEnv) {\n    var ranges = [];\n    for(var _i = 0, _a = dayTableModel.headerDates; _i < _a.length; _i++){\n        var date = _a[_i];\n        ranges.push({\n            start: dateEnv.add(date, dateProfile.slotMinTime),\n            end: dateEnv.add(date, dateProfile.slotMaxTime)\n        });\n    }\n    return ranges;\n}\n// potential nice values for the slot-duration and interval-duration\n// from largest to smallest\nvar STOCK_SUB_DURATIONS = [\n    {\n        hours: 1\n    },\n    {\n        minutes: 30\n    },\n    {\n        minutes: 15\n    },\n    {\n        seconds: 30\n    },\n    {\n        seconds: 15\n    }, \n];\nfunction buildSlatMetas(slotMinTime, slotMaxTime, explicitLabelInterval, slotDuration, dateEnv) {\n    var dayStart = new Date(0);\n    var slatTime = slotMinTime;\n    var slatIterator = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createDuration)(0);\n    var labelInterval = explicitLabelInterval || computeLabelInterval(slotDuration);\n    var metas = [];\n    while((0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.asRoughMs)(slatTime) < (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.asRoughMs)(slotMaxTime)){\n        var date = dateEnv.add(dayStart, slatTime);\n        var isLabeled = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.wholeDivideDurations)(slatIterator, labelInterval) !== null;\n        metas.push({\n            date: date,\n            time: slatTime,\n            key: date.toISOString(),\n            isoTimeStr: (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.formatIsoTimeString)(date),\n            isLabeled: isLabeled\n        });\n        slatTime = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.addDurations)(slatTime, slotDuration);\n        slatIterator = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.addDurations)(slatIterator, slotDuration);\n    }\n    return metas;\n}\n// Computes an automatic value for slotLabelInterval\nfunction computeLabelInterval(slotDuration) {\n    var i;\n    var labelInterval;\n    var slotsPerLabel;\n    // find the smallest stock label interval that results in more than one slots-per-label\n    for(i = STOCK_SUB_DURATIONS.length - 1; i >= 0; i -= 1){\n        labelInterval = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createDuration)(STOCK_SUB_DURATIONS[i]);\n        slotsPerLabel = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.wholeDivideDurations)(labelInterval, slotDuration);\n        if (slotsPerLabel !== null && slotsPerLabel > 1) {\n            return labelInterval;\n        }\n    }\n    return slotDuration; // fall back\n}\nvar DayTimeColsView1 = /** @class */ function(_super) {\n    var DayTimeColsView = function DayTimeColsView() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.buildTimeColsModel = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.memoize)(buildTimeColsModel);\n        _this.buildSlatMetas = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.memoize)(buildSlatMetas);\n        return _this;\n    };\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(DayTimeColsView, _super);\n    DayTimeColsView.prototype.render = function() {\n        var _this = this;\n        var _a = this.context, options = _a.options, dateEnv = _a.dateEnv, dateProfileGenerator = _a.dateProfileGenerator;\n        var props = this.props;\n        var dateProfile = props.dateProfile;\n        var dayTableModel = this.buildTimeColsModel(dateProfile, dateProfileGenerator);\n        var splitProps = this.allDaySplitter.splitProps(props);\n        var slatMetas = this.buildSlatMetas(dateProfile.slotMinTime, dateProfile.slotMaxTime, options.slotLabelInterval, options.slotDuration, dateEnv);\n        var dayMinWidth = options.dayMinWidth;\n        var hasAttachedAxis = !dayMinWidth;\n        var hasDetachedAxis = dayMinWidth;\n        var headerContent = options.dayHeaders && (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.DayHeader, {\n            dates: dayTableModel.headerDates,\n            dateProfile: dateProfile,\n            datesRepDistinctDays: true,\n            renderIntro: hasAttachedAxis ? this.renderHeadAxis : null\n        });\n        var allDayContent = options.allDaySlot !== false && function(contentArg) {\n            return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(_fullcalendar_daygrid__WEBPACK_IMPORTED_MODULE_2__.DayTable, (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, splitProps.allDay, {\n                dateProfile: dateProfile,\n                dayTableModel: dayTableModel,\n                nextDayThreshold: options.nextDayThreshold,\n                tableMinWidth: contentArg.tableMinWidth,\n                colGroupNode: contentArg.tableColGroupNode,\n                renderRowIntro: hasAttachedAxis ? _this.renderTableRowAxis : null,\n                showWeekNumbers: false,\n                expandRows: false,\n                headerAlignElRef: _this.headerElRef,\n                clientWidth: contentArg.clientWidth,\n                clientHeight: contentArg.clientHeight,\n                forPrint: props.forPrint\n            }, _this.getAllDayMaxEventProps()));\n        };\n        var timeGridContent = function timeGridContent(contentArg) {\n            return (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createElement)(DayTimeCols1, (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, splitProps.timed, {\n                dayTableModel: dayTableModel,\n                dateProfile: dateProfile,\n                axis: hasAttachedAxis,\n                slotDuration: options.slotDuration,\n                slatMetas: slatMetas,\n                forPrint: props.forPrint,\n                tableColGroupNode: contentArg.tableColGroupNode,\n                tableMinWidth: contentArg.tableMinWidth,\n                clientWidth: contentArg.clientWidth,\n                clientHeight: contentArg.clientHeight,\n                onSlatCoords: _this.handleSlatCoords,\n                expandRows: contentArg.expandRows,\n                onScrollTopRequest: _this.handleScrollTopRequest\n            }));\n        };\n        return hasDetachedAxis ? this.renderHScrollLayout(headerContent, allDayContent, timeGridContent, dayTableModel.colCnt, dayMinWidth, slatMetas, this.state.slatCoords) : this.renderSimpleLayout(headerContent, allDayContent, timeGridContent);\n    };\n    return DayTimeColsView;\n}(TimeColsView1);\nfunction buildTimeColsModel(dateProfile, dateProfileGenerator) {\n    var daySeries = new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.DaySeriesModel(dateProfile.renderRange, dateProfileGenerator);\n    return new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.DayTableModel(daySeries, false);\n}\nvar OPTION_REFINERS = {\n    allDaySlot: Boolean\n};\nvar main = (0,_fullcalendar_common__WEBPACK_IMPORTED_MODULE_1__.createPlugin)({\n    initialView: \"timeGridWeek\",\n    optionRefiners: OPTION_REFINERS,\n    views: {\n        timeGrid: {\n            component: DayTimeColsView1,\n            usesMinMaxTime: true,\n            allDaySlot: true,\n            slotDuration: \"00:30:00\",\n            slotEventOverlap: true\n        },\n        timeGridDay: {\n            type: \"timeGrid\",\n            duration: {\n                days: 1\n            }\n        },\n        timeGridWeek: {\n            type: \"timeGrid\",\n            duration: {\n                weeks: 1\n            }\n        }\n    }\n});\n/* harmony default export */ __webpack_exports__[\"default\"] = (main);\n //# sourceMappingURL=main.js.map\nvar _c;\n$RefreshReg$(_c, \"TimeColsAxisCell\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@fullcalendar/timegrid/main.js\n");

/***/ }),

/***/ "./node_modules/tslib/tslib.es6.js":
/*!*****************************************!*\
  !*** ./node_modules/tslib/tslib.es6.js ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"__extends\": function() { return /* binding */ __extends; },\n/* harmony export */   \"__assign\": function() { return /* binding */ __assign; },\n/* harmony export */   \"__rest\": function() { return /* binding */ __rest; },\n/* harmony export */   \"__decorate\": function() { return /* binding */ __decorate; },\n/* harmony export */   \"__param\": function() { return /* binding */ __param; },\n/* harmony export */   \"__metadata\": function() { return /* binding */ __metadata; },\n/* harmony export */   \"__awaiter\": function() { return /* binding */ __awaiter; },\n/* harmony export */   \"__generator\": function() { return /* binding */ __generator; },\n/* harmony export */   \"__createBinding\": function() { return /* binding */ __createBinding; },\n/* harmony export */   \"__exportStar\": function() { return /* binding */ __exportStar; },\n/* harmony export */   \"__values\": function() { return /* binding */ __values; },\n/* harmony export */   \"__read\": function() { return /* binding */ __read; },\n/* harmony export */   \"__spread\": function() { return /* binding */ __spread; },\n/* harmony export */   \"__spreadArrays\": function() { return /* binding */ __spreadArrays; },\n/* harmony export */   \"__spreadArray\": function() { return /* binding */ __spreadArray; },\n/* harmony export */   \"__await\": function() { return /* binding */ __await; },\n/* harmony export */   \"__asyncGenerator\": function() { return /* binding */ __asyncGenerator; },\n/* harmony export */   \"__asyncDelegator\": function() { return /* binding */ __asyncDelegator; },\n/* harmony export */   \"__asyncValues\": function() { return /* binding */ __asyncValues; },\n/* harmony export */   \"__makeTemplateObject\": function() { return /* binding */ __makeTemplateObject; },\n/* harmony export */   \"__importStar\": function() { return /* binding */ __importStar; },\n/* harmony export */   \"__importDefault\": function() { return /* binding */ __importDefault; },\n/* harmony export */   \"__classPrivateFieldGet\": function() { return /* binding */ __classPrivateFieldGet; },\n/* harmony export */   \"__classPrivateFieldSet\": function() { return /* binding */ __classPrivateFieldSet; }\n/* harmony export */ });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nvar __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nfunction __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nfunction __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nfunction __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nfunction __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q087QUFDUDtBQUNBO0FBQ0EsMkdBQTJHLHVGQUF1RixjQUFjO0FBQ2hOLHVCQUF1Qiw4QkFBOEIsZ0RBQWdELHdEQUF3RDtBQUM3Siw2Q0FBNkMsc0NBQXNDLFVBQVUsbUJBQW1CLElBQUk7QUFDcEg7QUFDQTtBQUNPO0FBQ1AsaUNBQWlDLHVDQUF1QyxZQUFZLEtBQUssT0FBTztBQUNoRztBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyw0QkFBNEI7QUFDdEUsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLDZDQUE2QztBQUM3QztBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYuanM/YTY1YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2NyZWF0ZUJpbmRpbmcgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xyXG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIG9bazJdID0gbVtrXTtcclxufSk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIG8pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgcCkpIF9fY3JlYXRlQmluZGluZyhvLCBtLCBwKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcclxuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcclxuICAgIGlmICghbSkgcmV0dXJuIG87XHJcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuLyoqIEBkZXByZWNhdGVkICovXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuLyoqIEBkZXByZWNhdGVkICovXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcclxuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xyXG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxyXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcclxuICAgIHJldHVybiByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheSh0bywgZnJvbSwgcGFjaykge1xyXG4gICAgaWYgKHBhY2sgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgZm9yICh2YXIgaSA9IDAsIGwgPSBmcm9tLmxlbmd0aCwgYXI7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XHJcbiAgICAgICAgICAgIGlmICghYXIpIGFyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSwgMCwgaSk7XHJcbiAgICAgICAgICAgIGFyW2ldID0gZnJvbVtpXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdG8uY29uY2F0KGFyIHx8IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20pKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XHJcbiAgICB2YXIgaSwgcDtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xyXG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XHJcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xyXG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcclxuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcclxuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xyXG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRTZXQocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xyXG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xyXG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xyXG59XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/tslib/tslib.es6.js\n");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["pages/_app","main"], function() { return __webpack_exec__("./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2FmusclePurpose&absolutePagePath=%2FUsers%2Fdong%2FCAPSTONE_UPDATE%2Fpages%2FmusclePurpose.js!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);