{"ast":null,"code":"import { all, call, fork, put, takeLatest, take } from 'redux-saga/effects';\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_SUCCESS, LOAD_POSTS_REQUEST, ADD_COMMENT_REQUEST, ADD_COMMENT_FAILURE, ADD_COMMENT_SUCCESS } from '../reducers/post';\n\nfunction addPostAPI(data) {// return axios.post('/signup',data)\n}\n\nfunction* addPost(action) {\n  try {\n    // const result=yield call(addPostAPI,action.data)\n    console.log('ddddddddd');\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(data) {// return axios.post('/loadPosts',data)\n}\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(loadPostsAPI,action.data)\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {// return axios.post('/loadPosts',data)\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPßI,action.data)\n    yield put({\n      type: ADD_COMMENT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* rootSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["/Users/dong/CapstonProject/sagas/post.js"],"names":["all","call","fork","put","takeLatest","take","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_SUCCESS","LOAD_POSTS_REQUEST","ADD_COMMENT_REQUEST","ADD_COMMENT_FAILURE","ADD_COMMENT_SUCCESS","addPostAPI","data","addPost","action","console","log","type","err","error","response","loadPostsAPI","loadPosts","addCommentAPI","addComment","watchAddPost","watchLoadPosts","watchAddComment","rootSaga"],"mappings":"AACA,SAASA,GAAT,EAAaC,IAAb,EAAkBC,IAAlB,EAAuBC,GAAvB,EAA2BC,UAA3B,EAAuCC,IAAvC,QAAkD,oBAAlD;AAEA,SAASC,gBAAT,EAA2BC,gBAA3B,EAA6CC,gBAA7C,EAA+DC,kBAA/D,EAAmFC,kBAAnF,EAAsGC,kBAAtG,EAA0HC,mBAA1H,EAA8IC,mBAA9I,EAAkKC,mBAAlK,QAA4L,kBAA5L;;AAGA,SAASC,UAAT,CAAoBC,IAApB,EAAyB,CACzB;AACC;;AAED,UAAUC,OAAV,CAAkBC,MAAlB,EAAyB;AAErB,MAAG;AACC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACE,UAAMjB,GAAG,CAAC;AACNkB,MAAAA,IAAI,EAACb,gBADC;AAENQ,MAAAA,IAAI,EAACE,MAAM,CAACF;AAFN,KAAD,CAAT;AAIH,GAPH,CAOG,OAAMM,GAAN,EAAU;AACP,UAAMnB,GAAG,CAAC;AACNkB,MAAAA,IAAI,EAACf,gBADC;AAENiB,MAAAA,KAAK,EAACD,GAAG,CAACE,QAAJ,CAAaR;AAFb,KAAD,CAAT;AAKH;AACN;;AAGD,SAASS,YAAT,CAAsBT,IAAtB,EAA2B,CACvB;AACC;;AAGL,UAAUU,SAAV,CAAoBR,MAApB,EAA2B;AACvB,MAAG;AACC;AACA,UAAMf,GAAG,CAAC;AACNkB,MAAAA,IAAI,EAACX,kBADC;AAENM,MAAAA,IAAI,EAACE,MAAM,CAACF;AAFN,KAAD,CAAT;AAKH,GAPD,CAOC,OAAMM,GAAN,EAAU;AACP,UAAMnB,GAAG,CAAC;AACNkB,MAAAA,IAAI,EAACZ,kBADC;AAENc,MAAAA,KAAK,EAACD,GAAG,CAACE,QAAJ,CAAaR;AAFb,KAAD,CAAT;AAMH;AACJ;;AAED,SAASW,aAAT,CAAuBX,IAAvB,EAA4B,CACxB;AACC;;AAGL,UAAUY,UAAV,CAAqBV,MAArB,EAA4B;AACxB,MAAG;AACC;AACA,UAAMf,GAAG,CAAC;AACNkB,MAAAA,IAAI,EAACP;AADC,KAAD,CAAT;AAIH,GAND,CAMC,OAAMQ,GAAN,EAAU;AACP,UAAMnB,GAAG,CAAC;AACNkB,MAAAA,IAAI,EAACR,mBADC;AAENU,MAAAA,KAAK,EAACD,GAAG,CAACE,QAAJ,CAAaR;AAFb,KAAD,CAAT;AAMH;AACJ;;AAID,UAAUa,YAAV,GAAwB;AACpB,QAAMzB,UAAU,CAACG,gBAAD,EAAkBU,OAAlB,CAAhB;AACH;;AAED,UAAUa,cAAV,GAA0B;AACtB,QAAM1B,UAAU,CAACO,kBAAD,EAAoBe,SAApB,CAAhB;AACH;;AACD,UAAUK,eAAV,GAA2B;AACvB,QAAM3B,UAAU,CAACQ,mBAAD,EAAqBgB,UAArB,CAAhB;AACH;;AAED,eAAe,UAAUI,QAAV,GAAoB;AAE/B,QAAMhC,GAAG,CAAC,CACNE,IAAI,CAAC2B,YAAD,CADE,EAEN3B,IAAI,CAAC4B,cAAD,CAFE,EAGN5B,IAAI,CAAC6B,eAAD,CAHE,CAAD,CAAT;AAQH","sourcesContent":["\nimport { all,call,fork,put,takeLatest, take} from 'redux-saga/effects'\n\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_SUCCESS,LOAD_POSTS_REQUEST, ADD_COMMENT_REQUEST,ADD_COMMENT_FAILURE,ADD_COMMENT_SUCCESS} from '../reducers/post'\n\n\nfunction addPostAPI(data){\n// return axios.post('/signup',data)\n}\n\nfunction* addPost(action){\n\n    try{\n        // const result=yield call(addPostAPI,action.data)\n        console.log('ddddddddd')\n          yield put({\n              type:ADD_POST_SUCCESS,\n              data:action.data\n          })\n      }catch(err){\n          yield put({\n              type:ADD_POST_FAILURE,\n              error:err.response.data,\n               \n          })\n      }\n}\n\n\nfunction loadPostsAPI(data){\n    // return axios.post('/loadPosts',data)\n    }\n    \n\nfunction* loadPosts(action){\n    try{\n        // const result = yield call(loadPostsAPI,action.data)\n        yield put({\n            type:LOAD_POSTS_SUCCESS,\n            data:action.data\n        })\n\n    }catch(err){\n        yield put({\n            type:LOAD_POSTS_FAILURE,\n            error:err.response.data,\n             \n        })\n\n    }\n}\n\nfunction addCommentAPI(data){\n    // return axios.post('/loadPosts',data)\n    }\n    \n\nfunction* addComment(action){\n    try{\n        // const result = yield call(addCommentAPßI,action.data)\n        yield put({\n            type:ADD_COMMENT_SUCCESS\n        })\n\n    }catch(err){\n        yield put({\n            type:ADD_COMMENT_FAILURE,\n            error:err.response.data,\n             \n        })\n\n    }\n}\n\n\n\nfunction* watchAddPost(){\n    yield takeLatest(ADD_POST_REQUEST,addPost)\n}\n\nfunction* watchLoadPosts(){\n    yield takeLatest(LOAD_POSTS_REQUEST,loadPosts)\n}\nfunction* watchAddComment(){\n    yield takeLatest(ADD_COMMENT_REQUEST,addComment)\n}\n\nexport default function* rootSaga(){\n\n    yield all([\n        fork(watchAddPost),\n        fork(watchLoadPosts),\n        fork(watchAddComment),\n        \n      \n    ])\n\n}\n"]},"metadata":{},"sourceType":"module"}