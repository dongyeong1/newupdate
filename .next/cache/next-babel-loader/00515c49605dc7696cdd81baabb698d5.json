{"ast":null,"code":"import { all, call, fork, put, takeLatest, take } from 'redux-saga/effects';\nimport { LOGIN_FAIL, LOGIN_REQUEST, LOGIN_SUCCESS, LOGOUT_REQUEST, LOGOUT_SUCCESS, LOGOUT_FAIL, SIGNUP_REQUEST, SIGNUP_SUCCESS, SIGNUP_FAIL } from '../reducers/user';\nimport axios from 'axios';\n\nfunction logInAPI(data) {\n  return axios.post('http://3.35.239.14/api/login', data);\n}\n\nfunction* login(action) {\n  const result = yield call(logInAPI, action.data);\n\n  try {\n    yield put({\n      type: LOGIN_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield {\n      type: LOGIN_FAIL,\n      data: 'error'\n    };\n  }\n}\n\nfunction logOutAPI(data) {// return axios.post('/logout',data)\n}\n\nfunction* logout() {\n  try {\n    // yield call(logOutAPI)\n    yield put({\n      type: LOGOUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOGOUT_FAIL,\n      error: 'error'\n    });\n  }\n}\n\nfunction signupAPI(data) {// return axios.post('/signup',data)\n}\n\nfunction* signup(action) {\n  try {\n    // const result=yield call(signupAPI,action.data)\n    yield put({\n      type: SIGNUP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGNUP_FAIL,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOGIN_REQUEST, login);\n}\n\nfunction* watchLogout() {\n  yield takeLatest(LOGOUT_REQUEST, logout);\n}\n\nfunction* watchSignup() {\n  yield takeLatest(SIGNUP_REQUEST, signup);\n}\n\nexport default function* rootSaga() {\n  yield all([fork(watchLogin), fork(watchLogout), fork(watchSignup)]);\n}","map":{"version":3,"sources":["/Users/dong/CapstonProject/sagas/user.js"],"names":["all","call","fork","put","takeLatest","take","LOGIN_FAIL","LOGIN_REQUEST","LOGIN_SUCCESS","LOGOUT_REQUEST","LOGOUT_SUCCESS","LOGOUT_FAIL","SIGNUP_REQUEST","SIGNUP_SUCCESS","SIGNUP_FAIL","axios","logInAPI","data","post","login","action","result","type","err","logOutAPI","logout","error","signupAPI","signup","response","watchLogin","watchLogout","watchSignup","rootSaga"],"mappings":"AACA,SAASA,GAAT,EAAaC,IAAb,EAAkBC,IAAlB,EAAuBC,GAAvB,EAA2BC,UAA3B,EAAuCC,IAAvC,QAAkD,oBAAlD;AACA,SAAQC,UAAR,EAAoBC,aAApB,EAAkCC,aAAlC,EAAgDC,cAAhD,EAAgEC,cAAhE,EAA+EC,WAA/E,EAA4FC,cAA5F,EAA2GC,cAA3G,EAA0HC,WAA1H,QAA4I,kBAA5I;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAuB;AACnB,SAAOF,KAAK,CAACG,IAAN,CAAW,8BAAX,EAA0CD,IAA1C,CAAP;AACH;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAuB;AACvB,QAAMC,MAAM,GAAE,MAAMpB,IAAI,CAACe,QAAD,EAAUI,MAAM,CAACH,IAAjB,CAAxB;;AACA,MAAG;AACH,UAAMd,GAAG,CAAC;AACNmB,MAAAA,IAAI,EAACd,aADC;AAENS,MAAAA,IAAI,EAACI,MAAM,CAACJ;AAFN,KAAD,CAAT;AAIC,GALD,CAKC,OAAMM,GAAN,EAAU;AACP,UAAM;AACFD,MAAAA,IAAI,EAAChB,UADH;AAEFW,MAAAA,IAAI,EAAC;AAFH,KAAN;AAIH;AACA;;AAGD,SAASO,SAAT,CAAmBP,IAAnB,EAAwB,CACpB;AACH;;AAED,UAAUQ,MAAV,GAAkB;AACd,MAAG;AACC;AACA,UAAMtB,GAAG,CAAC;AACNmB,MAAAA,IAAI,EAACZ;AADC,KAAD,CAAT;AAGH,GALD,CAKC,OAAMa,GAAN,EAAU;AACP,UAAMpB,GAAG,CAAC;AACNmB,MAAAA,IAAI,EAACX,WADC;AAENe,MAAAA,KAAK,EAAC;AAFA,KAAD,CAAT;AAKH;AACJ;;AAED,SAASC,SAAT,CAAmBV,IAAnB,EAAwB,CACxB;AACC;;AAED,UAAUW,MAAV,CAAiBR,MAAjB,EAAwB;AAEpB,MAAG;AACC;AAEE,UAAMjB,GAAG,CAAC;AACNmB,MAAAA,IAAI,EAACT;AADC,KAAD,CAAT;AAGH,GANH,CAMG,OAAMU,GAAN,EAAU;AACP,UAAMpB,GAAG,CAAC;AACNmB,MAAAA,IAAI,EAACR,WADC;AAENY,MAAAA,KAAK,EAACH,GAAG,CAACM,QAAJ,CAAaZ;AAFb,KAAD,CAAT;AAKH;AACN;;AAED,UAAUa,UAAV,GAAsB;AAClB,QAAM1B,UAAU,CAACG,aAAD,EAAeY,KAAf,CAAhB;AACH;;AAED,UAAUY,WAAV,GAAuB;AACnB,QAAM3B,UAAU,CAACK,cAAD,EAAgBgB,MAAhB,CAAhB;AACH;;AACD,UAAUO,WAAV,GAAuB;AACnB,QAAM5B,UAAU,CAACQ,cAAD,EAAgBgB,MAAhB,CAAhB;AACH;;AAED,eAAe,UAAUK,QAAV,GAAoB;AAE/B,QAAMjC,GAAG,CAAC,CACNE,IAAI,CAAC4B,UAAD,CADE,EAEN5B,IAAI,CAAC6B,WAAD,CAFE,EAGN7B,IAAI,CAAC8B,WAAD,CAHE,CAAD,CAAT;AAMH","sourcesContent":["\nimport { all,call,fork,put,takeLatest, take} from 'redux-saga/effects'\nimport {LOGIN_FAIL, LOGIN_REQUEST,LOGIN_SUCCESS,LOGOUT_REQUEST, LOGOUT_SUCCESS,LOGOUT_FAIL, SIGNUP_REQUEST,SIGNUP_SUCCESS,SIGNUP_FAIL} from '../reducers/user'\nimport axios from 'axios'\n\nfunction logInAPI(data){\n    return axios.post('http://3.35.239.14/api/login',data)\n}\n\nfunction* login(action){\nconst result =yield call(logInAPI,action.data)\ntry{\nyield put({\n    type:LOGIN_SUCCESS,\n    data:result.data\n})\n}catch(err){\n    yield({\n        type:LOGIN_FAIL,\n        data:'error'\n    })\n}\n} \n\n\nfunction logOutAPI(data){\n    // return axios.post('/logout',data)\n}\n\nfunction* logout(){\n    try{\n        // yield call(logOutAPI)\n        yield put({\n            type:LOGOUT_SUCCESS,\n        })\n    }catch(err){\n        yield put({\n            type:LOGOUT_FAIL,\n            error:'error'\n             \n        })\n    }\n} \n\nfunction signupAPI(data){\n// return axios.post('/signup',data)\n}\n\nfunction* signup(action){\n\n    try{\n        // const result=yield call(signupAPI,action.data)\n        \n          yield put({\n              type:SIGNUP_SUCCESS,\n          })\n      }catch(err){\n          yield put({\n              type:SIGNUP_FAIL,\n              error:err.response.data,\n               \n          })\n      }\n}\n\nfunction* watchLogin(){\n    yield takeLatest(LOGIN_REQUEST,login)\n}\n\nfunction* watchLogout(){\n    yield takeLatest(LOGOUT_REQUEST,logout)\n}\nfunction* watchSignup(){\n    yield takeLatest(SIGNUP_REQUEST,signup)\n}\n\nexport default function* rootSaga(){\n\n    yield all([\n        fork(watchLogin),\n        fork(watchLogout),\n        fork(watchSignup),\n    ])\n\n}"]},"metadata":{},"sourceType":"module"}