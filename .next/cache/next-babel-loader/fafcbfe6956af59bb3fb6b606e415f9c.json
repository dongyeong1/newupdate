{"ast":null,"code":"var _jsxFileName = \"/Users/dong/CapstonProject/component/map/selectMap.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { Polyline, Marker, StreetViewPanorama, MarkerClusterer } from '@react-google-maps/api';\nimport { InfoWindow } from '@react-google-maps/api';\nimport Router from 'next/router';\nimport { LOAD_MAP_REQUEST } from '../../reducers/map';\nimport { MOVING_MAP_REQUEST, BIKE_MAP_REQUEST, RUNNING_MAP_REQUEST, SEARCH_MAP_REQUEST, LOAD_MY_LOCATION_REQUEST } from '../../reducers/map';\nimport { Input, Button, Row, Col, Card, Pagination } from 'antd';\nimport GeomHandle from '../GoogleMap';\nimport SearchList from '../SearchList';\nimport Link from 'next/link';\nimport styled from \"styled-components\";\nimport wrapper from '../../store/configureStore';\nimport { SearchOutlined } from \"@ant-design/icons\";\nvar lat = 1;\nvar lng = 2;\n\nfunction selectMap({}) {\n  const {\n    myLocation\n  } = useSelector(state => state.map);\n  const {\n    0: geom,\n    1: setGeom\n  } = useState();\n  const {\n    Search\n  } = Input;\n  const {\n    0: loadMap,\n    1: setLoadMap\n  } = useState(false);\n\n  function getLocation() {\n    if (navigator.geolocation) {\n      // GPS를 지원하면\n      navigator.geolocation.getCurrentPosition(function (position) {\n        setGeom({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n        setLoadMap(true);\n      }, function (error) {\n        console.error(error);\n      }, {\n        enableHighAccuracy: false,\n        maximumAge: 0,\n        timeout: Infinity\n      });\n    } else {\n      alert('GPS를 지원하지 않습니다');\n    }\n  }\n\n  const {\n    0: isState,\n    1: setIsState\n  } = useState(false);\n  const {\n    0: mapState,\n    1: setMapState\n  } = useState('B');\n  const dispatch = useDispatch();\n  const mapContainerStyle = {\n    marginTop: 60,\n    height: \"720px\",\n    width: \"1000px\"\n  };\n  const {\n    searchMap\n  } = useSelector(state => state.map); // const [geom ,setGeom]=useState({lat:35.969997373905, lng: 128.45170755523503})\n\n  const {\n    0: mapref,\n    1: setMapRef\n  } = useState(null);\n  useEffect(() => {\n    getLocation();\n\n    if (mapref) {\n      dispatch({\n        type: LOAD_MY_LOCATION_REQUEST,\n        data: {\n          north: {\n            lat: mapref.getBounds().getNorthEast().lat(),\n            lng: mapref.getBounds().getNorthEast().lng()\n          },\n          south: {\n            lat: mapref.getBounds().getSouthWest().lat(),\n            lng: mapref.getBounds().getSouthWest().lng()\n          },\n          event: mapState\n        }\n      });\n    }\n  }, [loadMap]);\n\n  const handleOnLoad = map => {\n    setMapRef(map);\n    console.log('load됨');\n  };\n\n  const handleCenterChanged = () => {\n    dispatch({\n      type: MOVING_MAP_REQUEST,\n      data: {\n        north: {\n          lat: mapref.getBounds().getNorthEast().lat(),\n          lng: mapref.getBounds().getNorthEast().lng()\n        },\n        south: {\n          lat: mapref.getBounds().getSouthWest().lat(),\n          lng: mapref.getBounds().getSouthWest().lng()\n        },\n        event: mapState\n      }\n    });\n  }; //////markercluseter\n\n\n  const optionss = {\n    imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m' // so you must have m1.png, m2.png, m3.png, m4.png, m5.png and m6.png in that folder\n\n  };\n\n  function createKey(location) {\n    return location.lat + location.lng;\n  } //////markercluseter\n  ///주소검색\n\n\n  const {\n    searchmapLoading\n  } = useSelector(state => state.map);\n\n  const handleButton = async () => {\n    const currentAddr = document.getElementById('address').value;\n\n    if (currentAddr) {\n      const {\n        lat,\n        lng\n      } = await GeomHandle(currentAddr);\n      setGeom({\n        lat: lat,\n        lng: lng\n      });\n      dispatch({\n        type: SEARCH_MAP_REQUEST,\n        data: {\n          north: {\n            lat: mapref.getBounds().getNorthEast().lat(),\n            lng: mapref.getBounds().getNorthEast().lng()\n          },\n          south: {\n            lat: mapref.getBounds().getSouthWest().lat(),\n            lng: mapref.getBounds().getSouthWest().lng()\n          },\n          event: mapState\n        }\n      });\n      console.log('aaa', searchMap);\n    }\n  }; //주소검색\n  //polyline\n  //   const [propsPosition,setPropsPosition]=useState()\n\n\n  const {\n    0: propsId,\n    1: setPropsId\n  } = useState();\n  const {\n    0: infoPosition,\n    1: setInfoPosition\n  } = useState({\n    lat: '',\n    lng: ''\n  });\n  const {\n    0: target,\n    1: setTarget\n  } = useState(false);\n  const {\n    0: strokeWeight,\n    1: setStrokeWeight\n  } = useState(Array.from({\n    length: searchMap.length\n  }, () => 3));\n  const strokeWeights = Array.from({\n    length: searchMap.length\n  }, () => 3);\n\n  const polylineClick = positionData => {\n    setInfoPosition({\n      lat: positionData.gps.coordinates[3][1],\n      lng: positionData.gps.coordinates[3][0]\n    });\n    console.log('qqq', positionData);\n    setPropsId(positionData._id); // setPropsPosition(positionData)\n\n    setTarget(true);\n  };\n\n  function mouseOver(index) {\n    strokeWeights[index] = 10;\n    setStrokeWeight(strokeWeights);\n  }\n\n  function mouseOut(index) {\n    strokeWeights[index] = 3;\n    setStrokeWeight(strokeWeights);\n  } //polyline\n  //infoWindow\n\n\n  const closeClick = () => {\n    setTarget(false);\n  };\n\n  const divStyle = {\n    background: `white`,\n    border: `1px solid #ccc`,\n    padding: 15\n  };\n\n  const oneRoute = () => {\n    dispatch({\n      type: LOAD_MAP_REQUEST,\n      data: propsId\n    });\n    Router.push({\n      pathname: '/Route/[id]',\n      query: {\n        id: propsId\n      }\n    });\n    console.log('dong', searchMap);\n  }; //infoWindow\n  //   const [mapState,setMapState]=useState()\n  // const {mapState}=useSelector((state)=>state.map)\n\n\n  const bikeSelectMap = () => {\n    setMapState('B');\n    setIsState(true);\n  };\n\n  const runningSelectMap = () => {\n    setMapState('R');\n    setIsState(true);\n  };\n\n  useEffect(() => {\n    if (mapState === 'B' && isState === true) {\n      dispatch({\n        type: BIKE_MAP_REQUEST,\n        data: {\n          event: mapState,\n          north: {\n            lat: mapref.getBounds().getNorthEast().lat(),\n            lng: mapref.getBounds().getNorthEast().lng()\n          },\n          south: {\n            lat: mapref.getBounds().getSouthWest().lat(),\n            lng: mapref.getBounds().getSouthWest().lng()\n          }\n        }\n      });\n      setIsState(false);\n    } else if (mapState === 'R' && isState === true) {\n      dispatch({\n        type: RUNNING_MAP_REQUEST,\n        data: {\n          event: mapState,\n          north: {\n            lat: mapref.getBounds().getNorthEast().lat(),\n            lng: mapref.getBounds().getNorthEast().lng()\n          },\n          south: {\n            lat: mapref.getBounds().getSouthWest().lat(),\n            lng: mapref.getBounds().getSouthWest().lng()\n          }\n        }\n      });\n      setIsState(false);\n    }\n  }, [mapState, isState]);\n  return __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 5\n    }\n  }, __jsx(CardDiv, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 7\n    }\n  }, __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 9\n    }\n  }, __jsx(Col, {\n    span: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 11\n    }\n  }, __jsx(LeftDiv, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    style: {\n      height: \"25%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 15\n    }\n  }, __jsx(Search, {\n    loading: searchmapLoading,\n    onPressEnter: handleButton,\n    placeholder: \"\\uCF54\\uC2A4\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",\n    enterButton: true // allowClear\n    ,\n    icon: __jsx(SearchOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 25\n      }\n    }),\n    id: \"address\",\n    size: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 17\n    }\n  }), __jsx(Buttons, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 17\n    }\n  }, __jsx(Button, {\n    onClick: bikeSelectMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 19\n    }\n  }, \"\\uC790\\uC804\\uAC70\"), __jsx(Button, {\n    onClick: runningSelectMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 19\n    }\n  }, \"\\uB2EC\\uB9AC\\uAE30\")), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 17\n    }\n  }, \"\\uCF54\\uC2A4\\uCC3E\\uAE30\")), __jsx(RowDiv, {\n    gutter: [0, 16],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 15\n    }\n  }, searchMap.map((p, index) => __jsx(Col, {\n    span: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 19\n    }\n  }, __jsx(SearchList, {\n    setInfoPosition: setInfoPosition,\n    setPropsId: setPropsId,\n    setTarget: setTarget,\n    index: index,\n    setStrokeWeight: setStrokeWeight,\n    list: p,\n    key: p.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 21\n    }\n  })))), __jsx(Page, {\n    defaultCurrent: 1,\n    defaultPageSize: 3,\n    total: searchMap.lenth // onChange={onChangePage}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 15\n    }\n  }))), __jsx(Col, {\n    span: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 11\n    }\n  }, __jsx(LoadScript, {\n    googleMapsApiKey: \"AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 13\n    }\n  }, __jsx(GoogleMap, {\n    id: \"marker-example\",\n    mapContainerStyle: mapContainerStyle,\n    zoom: 13,\n    center: geom,\n    onLoad: handleOnLoad,\n    onDragEnd: handleCenterChanged // onZoomChanged={handleCenterChanged}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 15\n    }\n  }, __jsx(MarkerClusterer, {\n    options: optionss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 17\n    }\n  }, clusterer => searchMap.map(p => __jsx(Marker, {\n    key: createKey(p),\n    position: {\n      lat: p.start_latlng[1],\n      lng: p.start_latlng[0]\n    },\n    clusterer: clusterer,\n    icon: {\n      scaledSize: new google.maps.Size(30, 30)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 23\n    }\n  }))), searchMap.map((m, index) => __jsx(Polyline, {\n    onRightClick: () => polylineClick(m),\n    onMouseOver: () => mouseOver(index),\n    onMouseOut: () => mouseOut(index),\n    options: {\n      strokeWeight: strokeWeight[index],\n      clickable: true,\n      visible: true,\n      strokeColor: \"#FF0000\",\n      fillColor: \"#FF0000\"\n    },\n    path: m.gps.coordinates.map(p => ({\n      lat: p[1],\n      lng: p[0]\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 19\n    }\n  })), target && __jsx(InfoWindow, {\n    position: infoPosition,\n    onCloseClick: closeClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 19\n    }\n  }, __jsx(\"div\", {\n    style: divStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 21\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 23\n    }\n  }, \"\\uB3D9\\uC601\"), __jsx(\"button\", {\n    onClick: oneRoute,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 23\n    }\n  }, \"\\uC0C1\\uC138\\uBCF4\\uAE30\")))))))));\n}\n\nexport default selectMap;\nexport const getStaticProps = wrapper.getStaticProps(async context => {\n  context.store.dispatch({\n    type: LOAD_MY_LOCATION_REQUEST,\n    data: {\n      north: {\n        lat: mapref.getBounds().getNorthEast().lat(),\n        lng: mapref.getBounds().getNorthEast().lng()\n      },\n      south: {\n        lat: mapref.getBounds().getSouthWest().lat(),\n        lng: mapref.getBounds().getSouthWest().lng()\n      },\n      event: mapState\n    }\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nconst Container = styled.div`\n  // 전체 div\n  width: 100%;\n\n  .ant-input {\n    border-radius: 15px;\n    border-radius: 1px solid #1890ff;\n  }\n\n  .ant-input-group-wrapper {\n    margin-bottom: 20px;\n  }\n\n  .ant-input-group {\n    width: 90%;\n    width: 100%;\n    // margin: 0 auto;\n  }\n\n  .ant-input-search {\n    border-radius: 9px !important;\n    // position: relative;\n    // right: 15px;\n    // z-index: 1;\n  }\n\n  .ant-input-search-button {\n    // border-radius: 55% !important;\n    // border-top-right-radius: 9px !important;\n    // border-bottom-right-radius: 9px !important;\n  }\n`;\nconst mapContainerStyle = {\n  // Google Map 스타일\n  width: \"100%\",\n  height: \"80vh\",\n  borderRadius: \"15px\",\n  padding: \"0 30px\"\n};\nconst CardDiv = styled(Card)`\n  width: 100%;\n\n  border-radius: 15px;\n  box-shadow: 0 1px 2px -2px rgb(0 0 0 / 16%), 0 3px 6px 0 rgb(0 0 0 / 12%);\n`; // const RightDiv = styled.div``;\n\nconst LeftDiv = styled.div`\n  display: inline-block;\n  width: 100%;\n  height: 100%;\n  padding: 0 5%;\n\n  p {\n    font-size: 30px;\n    font-weight: bold;\n    margin: 30px auto;\n  }\n`;\nconst Page = styled(Pagination)`\n  text-align: center;\n`;\nconst Buttons = styled.div`\n  display: inline-block;\n  width: 90%;\n  width: 100%;\n\n  Button {\n    height: 33px;\n    border-radius: 15px;\n    margin-right: 10px;\n  }\n\n  Button:hover {\n    background: #1683e8;\n    border-color: #1683e8;\n    color: #fff;\n  }\n\n  Button:focus {\n    background: #1683e8;\n    color: #fff;\n  }\n`;\nconst RowDiv = styled(Row)`\n  display: inline-block;\n  width: 100%;\n  height: 65%;\n  border: 1px solid grey;\n  padding-bottom: 30px;\n`;","map":{"version":3,"sources":["/Users/dong/CapstonProject/component/map/selectMap.js"],"names":["React","useState","useEffect","useDispatch","useSelector","GoogleMap","LoadScript","Polyline","Marker","StreetViewPanorama","MarkerClusterer","InfoWindow","Router","LOAD_MAP_REQUEST","MOVING_MAP_REQUEST","BIKE_MAP_REQUEST","RUNNING_MAP_REQUEST","SEARCH_MAP_REQUEST","LOAD_MY_LOCATION_REQUEST","Input","Button","Row","Col","Card","Pagination","GeomHandle","SearchList","Link","styled","wrapper","SearchOutlined","lat","lng","selectMap","myLocation","state","map","geom","setGeom","Search","loadMap","setLoadMap","getLocation","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","error","console","enableHighAccuracy","maximumAge","timeout","Infinity","alert","isState","setIsState","mapState","setMapState","dispatch","mapContainerStyle","marginTop","height","width","searchMap","mapref","setMapRef","type","data","north","getBounds","getNorthEast","south","getSouthWest","event","handleOnLoad","log","handleCenterChanged","optionss","imagePath","createKey","location","searchmapLoading","handleButton","currentAddr","document","getElementById","value","propsId","setPropsId","infoPosition","setInfoPosition","target","setTarget","strokeWeight","setStrokeWeight","Array","from","length","strokeWeights","polylineClick","positionData","gps","coordinates","_id","mouseOver","index","mouseOut","closeClick","divStyle","background","border","padding","oneRoute","push","pathname","query","id","bikeSelectMap","runningSelectMap","p","lenth","clusterer","start_latlng","scaledSize","google","maps","Size","m","clickable","visible","strokeColor","fillColor","getStaticProps","context","store","END","sagaTask","toPromise","Container","div","borderRadius","CardDiv","LeftDiv","Page","Buttons","RowDiv"],"mappings":"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","sourcesContent":["import React, {useState,useEffect} from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { Polyline ,Marker,StreetViewPanorama,MarkerClusterer} from '@react-google-maps/api';\nimport { InfoWindow } from '@react-google-maps/api';\nimport Router from 'next/router'\nimport {LOAD_MAP_REQUEST} from '../../reducers/map'\nimport { MOVING_MAP_REQUEST,BIKE_MAP_REQUEST,RUNNING_MAP_REQUEST,SEARCH_MAP_REQUEST,LOAD_MY_LOCATION_REQUEST } from '../../reducers/map';\nimport {Input,Button,Row,Col,Card,Pagination} from 'antd'\nimport GeomHandle from '../GoogleMap'\nimport SearchList from '../SearchList';\nimport Link from 'next/link';\nimport styled from \"styled-components\";\nimport wrapper from '../../store/configureStore';\nimport { SearchOutlined } from \"@ant-design/icons\";\n\n\n\n\n  var lat=1\n  var lng=2\n\n\nfunction selectMap({}) {\n    const {myLocation}=useSelector((state)=>state.map)\n\n    const [geom ,setGeom]=useState()\n    const { Search } = Input;\n\n\n    const [loadMap,setLoadMap]=useState(false)\n\n    function getLocation() {\n        if (navigator.geolocation) { // GPS를 지원하면\n          navigator.geolocation.getCurrentPosition(function(position) {\n             \n            setGeom({\n                lat:position.coords.latitude,\n                lng:position.coords.longitude\n            })\n            setLoadMap(true)\n\n           \n          }, function(error) {\n            console.error(error);\n          }, {\n            enableHighAccuracy: false,\n            maximumAge: 0,\n            timeout: Infinity\n          });\n        } else {\n          alert('GPS를 지원하지 않습니다');\n        }\n      }\n\n   \n   \n\n    const [isState,setIsState]=useState(false)\n    const [mapState,setMapState]= useState('B')\n\n   \n    const dispatch=useDispatch()\n\n    const mapContainerStyle = {\n    marginTop:60,\n    height: \"720px\",\n    width: \"1000px\"\n    };\n  \n\n    const {searchMap}=useSelector((state)=>state.map)\n\n    // const [geom ,setGeom]=useState({lat:35.969997373905, lng: 128.45170755523503})\n    const [mapref, setMapRef] = useState(null);\n\n    useEffect(()=>{\n        getLocation()\n        if(mapref){\n            dispatch({\n                type:LOAD_MY_LOCATION_REQUEST,\n                data:{\n                    north:{\n                      lat:mapref.getBounds().getNorthEast().lat(),\n                      lng:mapref.getBounds().getNorthEast().lng()\n                    },\n                    south:{\n                      lat:mapref.getBounds().getSouthWest().lat(),\n                      lng:mapref.getBounds().getSouthWest().lng()\n                    },\n                    event:mapState\n          \n                  }\n            })\n        }\n      \n    },[loadMap])\n\n\n    const handleOnLoad = map => {\n        setMapRef(map);\n        console.log('load됨')\n      };\n\n      const handleCenterChanged = () => {\n    \n        dispatch({ \n          type:MOVING_MAP_REQUEST,\n          data:{\n            north:{\n                lat:mapref.getBounds().getNorthEast().lat(),\n                lng:mapref.getBounds().getNorthEast().lng()\n              },\n              south:{\n                lat:mapref.getBounds().getSouthWest().lat(),\n                lng:mapref.getBounds().getSouthWest().lng()\n              },\n            event:mapState\n  \n          }\n        })\n      \n      }\n\n      //////markercluseter\n\n\n    const optionss = {\n        imagePath:\n        'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m', // so you must have m1.png, m2.png, m3.png, m4.png, m5.png and m6.png in that folder\n    }\n\n\n    function createKey(location) {\n        return location.lat + location.lng\n    }\n\n      //////markercluseter\n\n\n   ///주소검색\n\n    const {searchmapLoading}=useSelector((state)=>state.map)\n\n\n\n   const handleButton = async() => {\n       const currentAddr = document.getElementById('address').value\n       if (currentAddr){\n         const {lat, lng} = await GeomHandle(currentAddr)\n         setGeom({lat:lat,lng:lng})\n\n         dispatch({\n           type:SEARCH_MAP_REQUEST,\n           data:{\n            north:{\n              lat:mapref.getBounds().getNorthEast().lat(),\n              lng:mapref.getBounds().getNorthEast().lng()\n            },\n            south:{\n              lat:mapref.getBounds().getSouthWest().lat(),\n              lng:mapref.getBounds().getSouthWest().lng()\n            },\n            event:mapState\n  \n          }\n       })\n       console.log('aaa',searchMap)\n\n\n\n      \n       }\n     }\n\n\n   //주소검색\n\n\n\n      //polyline\n\n    //   const [propsPosition,setPropsPosition]=useState()\n\n      const [propsId,setPropsId]=useState()\n\n\n      const [infoPosition,setInfoPosition]=useState({\n        lat:'',\n        lng:'',\n        })\n    \n      const [target,setTarget]=useState(false)\n\n\n      const [strokeWeight,setStrokeWeight]=useState(Array.from({length: searchMap.length}, () => 3))\n      const strokeWeights= Array.from({length: searchMap.length}, () => 3);\n\n\n      const polylineClick=(positionData)=>{\n     \n    \n        setInfoPosition({\n            lat:positionData.gps.coordinates[3][1],\n            lng:positionData.gps.coordinates[3][0]\n        })\n        console.log('qqq',positionData)\n        setPropsId(positionData._id)\n        // setPropsPosition(positionData)\n        setTarget(true)\n        \n    }\n    \n\n    function mouseOver(index){\n        strokeWeights[index]=10\n        setStrokeWeight(strokeWeights)\n    }\n\n    function mouseOut(index){\n        strokeWeights[index]=3\n        setStrokeWeight(strokeWeights)\n\n    }\n\n      //polyline\n\n      //infoWindow\n      const closeClick=()=>{\n        setTarget(false)\n    }\n\n\n\n    const divStyle = {\n        background: `white`,\n        border: `1px solid #ccc`,\n        padding: 15\n    }\n\n\n  const oneRoute=()=>{\n    dispatch({\n               type:LOAD_MAP_REQUEST,\n               data:propsId\n             })\n               \n    Router.push({\n        pathname: '/Route/[id]',\n        query: {id:propsId},\n      });\n\n      console.log('dong',searchMap)\n}\n\n\n      //infoWindow\n\n    //   const [mapState,setMapState]=useState()\n    // const {mapState}=useSelector((state)=>state.map)\n    const bikeSelectMap=()=>{\n        setMapState('B')\n        setIsState(true)\n    }\n\n    const runningSelectMap=()=>{\n        setMapState('R')\n        setIsState(true)\n    }\n   \n    useEffect(()=>{\n\n        if(mapState==='B'&&isState===true){\n            dispatch({\n                type:BIKE_MAP_REQUEST,\n                data:{\n                    event:mapState,\n                    north:{\n                        lat:mapref.getBounds().getNorthEast().lat(),\n                        lng:mapref.getBounds().getNorthEast().lng()\n                      },\n                      south:{\n                        lat:mapref.getBounds().getSouthWest().lat(),\n                        lng:mapref.getBounds().getSouthWest().lng()\n                      },  \n                }\n            })\n            setIsState(false)\n        }else if(mapState==='R'&&isState===true){\n            dispatch({\n                type:RUNNING_MAP_REQUEST,\n                data:{\n                    event:mapState,\n                    north:{\n                        lat:mapref.getBounds().getNorthEast().lat(),\n                        lng:mapref.getBounds().getNorthEast().lng()\n                      },\n                      south:{\n                        lat:mapref.getBounds().getSouthWest().lat(),\n                        lng:mapref.getBounds().getSouthWest().lng()\n                      },\n                }\n            })\n            setIsState(false)\n\n        }\n    },[mapState,isState])\n\n\n\n  \n    \n\n\n  return (\n    <Container>\n      <CardDiv>\n        <Row>\n          <Col span={12}>\n            <LeftDiv>\n              <div style={{ height: \"25%\" }}>\n                <Search\n                  loading={searchmapLoading}\n                  onPressEnter={handleButton}\n                  placeholder=\"코스를 입력해주세요\"\n                  enterButton\n                  // allowClear\n                  icon={<SearchOutlined />}\n                  id=\"address\"\n                  size=\"large\"\n                />\n                <Buttons>\n                  <Button onClick={bikeSelectMap}>자전거</Button>\n                  <Button onClick={runningSelectMap}>달리기</Button>\n                </Buttons>\n                <p>코스찾기</p>\n              </div>\n              <RowDiv gutter={[0, 16]}>\n                {searchMap.map((p, index) => (\n                  <Col span={24}>\n                    <SearchList\n                      setInfoPosition={setInfoPosition}\n                      setPropsId={setPropsId}\n                      setTarget={setTarget}\n                      index={index}\n                      setStrokeWeight={setStrokeWeight}\n                      list={p}\n                      key={p.id}\n                    ></SearchList>\n                  </Col>\n                ))}\n              </RowDiv>\n              <Page\n                defaultCurrent={1}\n                defaultPageSize={3}\n                total={searchMap.lenth}\n                // onChange={onChangePage}\n              />\n            </LeftDiv>\n          </Col>\n\n          <Col span={12}>\n            <LoadScript googleMapsApiKey=\"AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE\">\n              <GoogleMap\n                id=\"marker-example\"\n                mapContainerStyle={mapContainerStyle}\n                zoom={13}\n                center={geom}\n                onLoad={handleOnLoad}\n                onDragEnd={handleCenterChanged}\n                // onZoomChanged={handleCenterChanged}\n              >\n                <MarkerClusterer options={optionss}>\n                  {(clusterer) =>\n                    searchMap.map((p) => (\n                      <Marker\n                        key={createKey(p)}\n                        position={{\n                          lat: p.start_latlng[1],\n                          lng: p.start_latlng[0],\n                        }}\n                        clusterer={clusterer}\n                        icon={{\n                          scaledSize: new google.maps.Size(30, 30),\n                        }}\n                      />\n                    ))\n                  }\n                </MarkerClusterer>\n\n                {searchMap.map((m, index) => (\n                  <Polyline\n                    onRightClick={() => polylineClick(m)}\n                    onMouseOver={() => mouseOver(index)}\n                    onMouseOut={() => mouseOut(index)}\n                    options={{\n                      strokeWeight: strokeWeight[index],\n                      clickable: true,\n                      visible: true,\n                      strokeColor: \"#FF0000\",\n                      fillColor: \"#FF0000\",\n                    }}\n                    path={m.gps.coordinates.map((p) => ({\n                      lat: p[1],\n                      lng: p[0],\n                    }))}\n                  ></Polyline>\n                ))}\n\n                {target && (\n                  <InfoWindow position={infoPosition} onCloseClick={closeClick}>\n                    <div style={divStyle}>\n                      <h1>동영</h1>\n                      {/* <Link href={{\n                        pathname:'/Route/[id]',\n                        query: {id:propsId},\n                    }}><a>상세보기</a></Link>\n                     */}\n                      <button onClick={oneRoute}>상세보기</button>\n                    </div>\n                  </InfoWindow>\n                )}\n              </GoogleMap>\n            </LoadScript>\n          </Col>\n        </Row>\n      </CardDiv>\n    </Container>\n  )\n}\n\n\n\n\nexport default selectMap\n\nexport const getStaticProps=wrapper.getStaticProps(async (context)=>{\n \n    context.store.dispatch({\n            type:LOAD_MY_LOCATION_REQUEST,\n            data:{\n                north:{\n                  lat:mapref.getBounds().getNorthEast().lat(),\n                  lng:mapref.getBounds().getNorthEast().lng()\n                },\n                south:{\n                  lat:mapref.getBounds().getSouthWest().lat(),\n                  lng:mapref.getBounds().getSouthWest().lng()\n                },\n                event:mapState\n      \n              }\n        })\n    context.store.dispatch(END)\n    await context.store.sagaTask.toPromise()\n\n})\n\n\nconst Container = styled.div`\n  // 전체 div\n  width: 100%;\n\n  .ant-input {\n    border-radius: 15px;\n    border-radius: 1px solid #1890ff;\n  }\n\n  .ant-input-group-wrapper {\n    margin-bottom: 20px;\n  }\n\n  .ant-input-group {\n    width: 90%;\n    width: 100%;\n    // margin: 0 auto;\n  }\n\n  .ant-input-search {\n    border-radius: 9px !important;\n    // position: relative;\n    // right: 15px;\n    // z-index: 1;\n  }\n\n  .ant-input-search-button {\n    // border-radius: 55% !important;\n    // border-top-right-radius: 9px !important;\n    // border-bottom-right-radius: 9px !important;\n  }\n`;\n\nconst mapContainerStyle = {\n  // Google Map 스타일\n  width: \"100%\",\n  height: \"80vh\",\n  borderRadius: \"15px\",\n  padding: \"0 30px\",\n};\n\nconst CardDiv = styled(Card)`\n  width: 100%;\n\n  border-radius: 15px;\n  box-shadow: 0 1px 2px -2px rgb(0 0 0 / 16%), 0 3px 6px 0 rgb(0 0 0 / 12%);\n`;\n\n// const RightDiv = styled.div``;\n\nconst LeftDiv = styled.div`\n  display: inline-block;\n  width: 100%;\n  height: 100%;\n  padding: 0 5%;\n\n  p {\n    font-size: 30px;\n    font-weight: bold;\n    margin: 30px auto;\n  }\n`;\n\nconst Page = styled(Pagination)`\n  text-align: center;\n`;\n\nconst Buttons = styled.div`\n  display: inline-block;\n  width: 90%;\n  width: 100%;\n\n  Button {\n    height: 33px;\n    border-radius: 15px;\n    margin-right: 10px;\n  }\n\n  Button:hover {\n    background: #1683e8;\n    border-color: #1683e8;\n    color: #fff;\n  }\n\n  Button:focus {\n    background: #1683e8;\n    color: #fff;\n  }\n`;\n\nconst RowDiv = styled(Row)`\n  display: inline-block;\n  width: 100%;\n  height: 65%;\n  border: 1px solid grey;\n  padding-bottom: 30px;\n`;\n\n\n\n"]},"metadata":{},"sourceType":"module"}