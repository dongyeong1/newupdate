{"ast":null,"code":"var _jsxFileName = \"/Users/dong/CapstonProject/component/geocode.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Autocomplete from \"react-google-autocomplete\";\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE\");\nGeocode.enableDebug();\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"getCity\", addressArray => {\n      let city = \"\";\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && \"administrative_area_level_2\" === addressArray[i].types[0]) {\n          city = addressArray[i].long_name;\n          return city;\n        }\n      }\n    });\n\n    _defineProperty(this, \"getArea\", addressArray => {\n      let area = \"\";\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0]) {\n          for (let j = 0; j < addressArray[i].types.length; j++) {\n            if (\"sublocality_level_1\" === addressArray[i].types[j] || \"locality\" === addressArray[i].types[j]) {\n              area = addressArray[i].long_name;\n              return area;\n            }\n          }\n        }\n      }\n    });\n\n    _defineProperty(this, \"getState\", addressArray => {\n      let state = \"\";\n\n      for (let i = 0; i < addressArray.length; i++) {\n        for (let i = 0; i < addressArray.length; i++) {\n          if (addressArray[i].types[0] && \"administrative_area_level_1\" === addressArray[i].types[0]) {\n            state = addressArray[i].long_name;\n            return state;\n          }\n        }\n      }\n    });\n\n    _defineProperty(this, \"onChange\", event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"onInfoWindowClose\", event => {});\n\n    _defineProperty(this, \"onPlaceSelected\", place => {\n      const address = place.formatted_address,\n            addressArray = place.address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray),\n            latValue = place.geometry.location.lat(),\n            lngValue = place.geometry.location.lng(); // Set these values in the state.\n\n      this.setState({\n        address: address ? address : \"\",\n        area: area ? area : \"\",\n        city: city ? city : \"\",\n        state: state ? state : \"\",\n        markerPosition: {\n          lat: latValue,\n          lng: lngValue\n        },\n        mapPosition: {\n          lat: latValue,\n          lng: lngValue\n        }\n      });\n    });\n\n    _defineProperty(this, \"onMarkerDragEnd\", event => {\n      console.log(\"event\", event);\n      let newLat = event.latLng.lat(),\n          newLng = event.latLng.lng(),\n          addressArray = [];\n      Geocode.fromLatLng(newLat, newLng).then(response => {\n        const address = response.results[0].formatted_address,\n              addressArray = response.results[0].address_components,\n              city = this.getCity(addressArray),\n              area = this.getArea(addressArray),\n              state = this.getState(addressArray);\n        this.setState({\n          address: address ? address : \"\",\n          area: area ? area : \"\",\n          city: city ? city : \"\",\n          state: state ? state : \"\"\n        });\n      }, error => {\n        console.error(error);\n      });\n    });\n\n    this.state = {\n      address: \"\",\n      city: \"\",\n      area: \"\",\n      state: \"\",\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      }\n    };\n  }\n  /**\n   * Get the current address from the default map position and set those values in the state\n   */\n\n\n  componentDidMount() {\n    Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng).then(response => {\n      const address = response.results[0].formatted_address,\n            addressArray = response.results[0].address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray);\n      console.log(\"city\", city, area, state);\n      this.setState({\n        address: address ? address : \"\",\n        area: area ? area : \"\",\n        city: city ? city : \"\",\n        state: state ? state : \"\"\n      });\n    }, error => {\n      console.error(error);\n    });\n  }\n  /**\n   * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n   *\n   * @param nextProps\n   * @param nextState\n   * @return {boolean}\n   */\n\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.markerPosition.lat !== this.props.center.lat || this.state.address !== nextState.address || this.state.city !== nextState.city || this.state.area !== nextState.area || this.state.state !== nextState.state) {\n      return true;\n    } else if (this.props.center.lat === nextProps.center.lat) {\n      return false;\n    }\n  }\n  /**\n   * Get the city and set the city input value to the one selected\n   *\n   * @param addressArray\n   * @return {string}\n   */\n\n\n  render() {\n    const AsyncMap = withScriptjs(withGoogleMap(props => __jsx(GoogleMap, {\n      google: this.props.google,\n      defaultZoom: this.props.zoom,\n      defaultCenter: {\n        lat: this.state.mapPosition.lat,\n        lng: this.state.mapPosition.lng\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }\n    }, __jsx(Autocomplete, {\n      style: {\n        width: \"100%\",\n        height: \"40px\",\n        paddingLeft: \"16px\",\n        marginTop: \"2px\",\n        marginBottom: \"100px\"\n      },\n      onPlaceSelected: this.onPlaceSelected,\n      types: [\"(regions)\"],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }\n    }), __jsx(Marker, {\n      google: this.props.google,\n      name: \"Dolores park\",\n      draggable: true,\n      onDragEnd: this.onMarkerDragEnd,\n      position: {\n        lat: this.state.markerPosition.lat,\n        lng: this.state.markerPosition.lng\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }\n    }), __jsx(Marker, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 11\n      }\n    }), __jsx(InfoWindow, {\n      onClose: this.onInfoWindowClose,\n      position: {\n        lat: this.state.markerPosition.lat + 0.0018,\n        lng: this.state.markerPosition.lng\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 13\n      }\n    }, __jsx(\"span\", {\n      style: {\n        padding: 0,\n        margin: 0\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 15\n      }\n    }, this.state.address))))));\n    let map;\n\n    if (this.props.center.lat !== undefined) {\n      map = __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 9\n        }\n      }, __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }\n      }, __jsx(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 13\n        }\n      }, __jsx(\"label\", {\n        htmlFor: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 15\n        }\n      }, \"City\"), __jsx(\"input\", {\n        type: \"text\",\n        name: \"city\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.city,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 15\n        }\n      })), __jsx(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 13\n        }\n      }, __jsx(\"label\", {\n        htmlFor: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 15\n        }\n      }, \"Area\"), __jsx(\"input\", {\n        type: \"text\",\n        name: \"area\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.area,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 15\n        }\n      })), __jsx(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 13\n        }\n      }, __jsx(\"label\", {\n        htmlFor: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 15\n        }\n      }, \"State\"), __jsx(\"input\", {\n        type: \"text\",\n        name: \"state\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.state,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 15\n        }\n      })), __jsx(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 13\n        }\n      }, __jsx(\"label\", {\n        htmlFor: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 15\n        }\n      }, \"Address\"), __jsx(\"input\", {\n        type: \"text\",\n        name: \"address\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.address,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 15\n        }\n      }))), __jsx(AsyncMap, {\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE&libraries=places\",\n        loadingElement: __jsx(\"div\", {\n          style: {\n            height: `100%`\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 29\n          }\n        }),\n        containerElement: __jsx(\"div\", {\n          style: {\n            height: this.props.height\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 31\n          }\n        }),\n        mapElement: __jsx(\"div\", {\n          style: {\n            height: `100%`\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 25\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }\n      }));\n    } else {\n      map = __jsx(\"div\", {\n        style: {\n          height: this.props.height\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 13\n        }\n      });\n    }\n\n    return map;\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/dong/CapstonProject/component/geocode.js"],"names":["React","Component","withGoogleMap","GoogleMap","withScriptjs","InfoWindow","Marker","Autocomplete","Geocode","setApiKey","enableDebug","Map","constructor","props","addressArray","city","i","length","types","long_name","area","j","state","event","setState","target","name","value","place","address","formatted_address","address_components","getCity","getArea","getState","latValue","geometry","location","lat","lngValue","lng","markerPosition","mapPosition","console","log","newLat","latLng","newLng","fromLatLng","then","response","results","error","center","componentDidMount","shouldComponentUpdate","nextProps","nextState","render","AsyncMap","google","zoom","width","height","paddingLeft","marginTop","marginBottom","onPlaceSelected","onMarkerDragEnd","onInfoWindowClose","padding","margin","map","undefined","onChange"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  withGoogleMap,\n  GoogleMap,\n  withScriptjs,\n  InfoWindow,\n  Marker\n} from \"react-google-maps\";\nimport Autocomplete from \"react-google-autocomplete\";\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE\");\nGeocode.enableDebug();\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      address: \"\",\n      city: \"\",\n      area: \"\",\n      state: \"\",\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      }\n    };\n  }\n  /**\n   * Get the current address from the default map position and set those values in the state\n   */\n  componentDidMount() {\n    Geocode.fromLatLng(\n      this.state.mapPosition.lat,\n      this.state.mapPosition.lng\n    ).then(\n      response => {\n        const address = response.results[0].formatted_address,\n          addressArray = response.results[0].address_components,\n          city = this.getCity(addressArray),\n          area = this.getArea(addressArray),\n          state = this.getState(addressArray);\n\n        console.log(\"city\", city, area, state);\n\n        this.setState({\n          address: address ? address : \"\",\n          area: area ? area : \"\",\n          city: city ? city : \"\",\n          state: state ? state : \"\"\n        });\n      },\n      error => {\n        console.error(error);\n      }\n    );\n  }\n  /**\n   * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n   *\n   * @param nextProps\n   * @param nextState\n   * @return {boolean}\n   */\n  shouldComponentUpdate(nextProps, nextState) {\n    if (\n      this.state.markerPosition.lat !== this.props.center.lat ||\n      this.state.address !== nextState.address ||\n      this.state.city !== nextState.city ||\n      this.state.area !== nextState.area ||\n      this.state.state !== nextState.state\n    ) {\n      return true;\n    } else if (this.props.center.lat === nextProps.center.lat) {\n      return false;\n    }\n  }\n  /**\n   * Get the city and set the city input value to the one selected\n   *\n   * @param addressArray\n   * @return {string}\n   */\n  getCity = addressArray => {\n    let city = \"\";\n    for (let i = 0; i < addressArray.length; i++) {\n      if (\n        addressArray[i].types[0] &&\n        \"administrative_area_level_2\" === addressArray[i].types[0]\n      ) {\n        city = addressArray[i].long_name;\n        return city;\n      }\n    }\n  };\n  /**\n   * Get the area and set the area input value to the one selected\n   *\n   * @param addressArray\n   * @return {string}\n   */\n  getArea = addressArray => {\n    let area = \"\";\n    for (let i = 0; i < addressArray.length; i++) {\n      if (addressArray[i].types[0]) {\n        for (let j = 0; j < addressArray[i].types.length; j++) {\n          if (\n            \"sublocality_level_1\" === addressArray[i].types[j] ||\n            \"locality\" === addressArray[i].types[j]\n          ) {\n            area = addressArray[i].long_name;\n            return area;\n          }\n        }\n      }\n    }\n  };\n  /**\n   * Get the address and set the address input value to the one selected\n   *\n   * @param addressArray\n   * @return {string}\n   */\n  getState = addressArray => {\n    let state = \"\";\n    for (let i = 0; i < addressArray.length; i++) {\n      for (let i = 0; i < addressArray.length; i++) {\n        if (\n          addressArray[i].types[0] &&\n          \"administrative_area_level_1\" === addressArray[i].types[0]\n        ) {\n          state = addressArray[i].long_name;\n          return state;\n        }\n      }\n    }\n  };\n  /**\n   * And function for city,state and address input\n   * @param event\n   */\n  onChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n  /**\n   * This Event triggers when the marker window is closed\n   *\n   * @param event\n   */\n  onInfoWindowClose = event => {};\n  /**\n   * When the user types an address in the search box\n   * @param place\n   */\n  onPlaceSelected = place => {\n    const address = place.formatted_address,\n      addressArray = place.address_components,\n      city = this.getCity(addressArray),\n      area = this.getArea(addressArray),\n      state = this.getState(addressArray),\n      latValue = place.geometry.location.lat(),\n      lngValue = place.geometry.location.lng();\n    // Set these values in the state.\n    this.setState({\n      address: address ? address : \"\",\n      area: area ? area : \"\",\n      city: city ? city : \"\",\n      state: state ? state : \"\",\n      markerPosition: {\n        lat: latValue,\n        lng: lngValue\n      },\n      mapPosition: {\n        lat: latValue,\n        lng: lngValue\n      }\n    });\n  };\n  /**\n   * When the marker is dragged you get the lat and long using the functions available from event object.\n   * Use geocode to get the address, city, area and state from the lat and lng positions.\n   * And then set those values in the state.\n   *\n   * @param event\n   */\n  onMarkerDragEnd = event => {\n    console.log(\"event\", event);\n    let newLat = event.latLng.lat(),\n      newLng = event.latLng.lng(),\n      addressArray = [];\n    Geocode.fromLatLng(newLat, newLng).then(\n      response => {\n        const address = response.results[0].formatted_address,\n          addressArray = response.results[0].address_components,\n          city = this.getCity(addressArray),\n          area = this.getArea(addressArray),\n          state = this.getState(addressArray);\n        this.setState({\n          address: address ? address : \"\",\n          area: area ? area : \"\",\n          city: city ? city : \"\",\n          state: state ? state : \"\"\n        });\n      },\n      error => {\n        console.error(error);\n      }\n    );\n  };\n  render() {\n    const AsyncMap = withScriptjs(\n      withGoogleMap(props => (\n        <GoogleMap\n          google={this.props.google}\n          defaultZoom={this.props.zoom}\n          defaultCenter={{\n            lat: this.state.mapPosition.lat,\n            lng: this.state.mapPosition.lng\n          }}\n        >\n          {/* For Auto complete Search Box */}\n          <Autocomplete\n            style={{\n              width: \"100%\",\n              height: \"40px\",\n              paddingLeft: \"16px\",\n              marginTop: \"2px\",\n              marginBottom: \"100px\"\n            }}\n            onPlaceSelected={this.onPlaceSelected}\n            types={[\"(regions)\"]}\n          />\n          {/*Marker*/}\n          <Marker\n            google={this.props.google}\n            name={\"Dolores park\"}\n            draggable={true}\n            onDragEnd={this.onMarkerDragEnd}\n            position={{\n              lat: this.state.markerPosition.lat,\n              lng: this.state.markerPosition.lng\n            }}\n          />\n          <Marker />\n          {/* InfoWindow on top of marker */}\n          <InfoWindow\n            onClose={this.onInfoWindowClose}\n            position={{\n              lat: this.state.markerPosition.lat + 0.0018,\n              lng: this.state.markerPosition.lng\n            }}\n          >\n            <div>\n              <span style={{ padding: 0, margin: 0 }}>\n                {this.state.address}\n              </span>\n            </div>\n          </InfoWindow>\n        </GoogleMap>\n      ))\n    );\n    let map;\n    if (this.props.center.lat !== undefined) {\n      map = (\n        <div>\n          <div>\n            <div className=\"form-group\">\n              <label htmlFor=\"\">City</label>\n              <input\n                type=\"text\"\n                name=\"city\"\n                className=\"form-control\"\n                onChange={this.onChange}\n                readOnly=\"readOnly\"\n                value={this.state.city}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"\">Area</label>\n              <input\n                type=\"text\"\n                name=\"area\"\n                className=\"form-control\"\n                onChange={this.onChange}\n                readOnly=\"readOnly\"\n                value={this.state.area}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"\">State</label>\n              <input\n                type=\"text\"\n                name=\"state\"\n                className=\"form-control\"\n                onChange={this.onChange}\n                readOnly=\"readOnly\"\n                value={this.state.state}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"\">Address</label>\n              <input\n                type=\"text\"\n                name=\"address\"\n                className=\"form-control\"\n                onChange={this.onChange}\n                readOnly=\"readOnly\"\n                value={this.state.address}\n              />\n            </div>\n          </div>\n          <AsyncMap\n            googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE&libraries=places\"\n            loadingElement={<div style={{ height: `100%` }} />}\n            containerElement={<div style={{ height: this.props.height }} />}\n            mapElement={<div style={{ height: `100%` }} />}\n          />\n        </div>\n      );\n    } else {\n      map = <div style={{ height: this.props.height }} />;\n    }\n    return map;\n  }\n}\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}