{"ast":null,"code":"var _jsxFileName = \"/Users/dong/CapstonProject/component/map/selectMap.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { Polyline, Marker, StreetViewPanorama, MarkerClusterer } from '@react-google-maps/api';\nimport { InfoWindow } from '@react-google-maps/api';\nimport Router from 'next/router';\nimport { LOAD_MAP_REQUEST } from '../../reducers/map';\nimport GeomHandle from '../GoogleMap';\n\nfunction selectMap({\n  mapState\n}) {\n  const mapContainerStyle = {\n    height: \"400px\",\n    width: \"800px\"\n  };\n  const {\n    searchMap\n  } = useSelector(state => state.map);\n  const {\n    0: geom,\n    1: setGeom\n  } = useState({\n    lat: 35.969997373905,\n    lng: 128.45170755523503\n  });\n  const {\n    0: mapref,\n    1: setMapRef\n  } = useState(null);\n\n  const handleOnLoad = map => {\n    setMapRef(map);\n  };\n\n  const handleCenterChanged = () => {\n    if (mapref) {\n      const zoom = mapref.getZoom();\n      const ne = mapref.getBounds().getNorthEast();\n      const sw = mapref.getBounds().getSouthWest();\n      console.log('zoom', zoom);\n      console.log('north', ne.lat(), ',', ne.lng());\n      console.log('south', sw.lat(), ',', sw.lng());\n    }\n\n    dispatch({\n      type: MOVING_MAP_REQUEST,\n      data: {\n        north: {\n          lat: ne.lat(),\n          lng: ne.lng()\n        },\n        south: {\n          lat: sw.lat(),\n          lng: ne.lat()\n        }\n      }\n    });\n  }; //////markercluseter\n\n\n  const optionss = {\n    imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m' // so you must have m1.png, m2.png, m3.png, m4.png, m5.png and m6.png in that folder\n\n  };\n\n  function createKey(location) {\n    return location.lat + location.lng;\n  } //////markercluseter\n  //polyline\n\n\n  const {\n    0: infoPosition,\n    1: setInfoPosition\n  } = useState({\n    lat: '',\n    lng: ''\n  });\n  const {\n    0: target,\n    1: setTarget\n  } = useState(false);\n  const {\n    0: strokeWeight,\n    1: setStrokeWeight\n  } = useState(Array.from({\n    length: searchMap.length\n  }, () => 5));\n  const strokeWeights = Array.from({\n    length: searchMap.length\n  }, () => 5);\n\n  const polylineClick = positionData => {\n    setInfoPosition({\n      lat: positionData.gps.coordinates[3][1],\n      lng: positionData.gps.coordinates[3][0]\n    });\n    setPropsId(positionData.id);\n    setPropsPosition(positionData);\n    setTarget(true);\n  };\n\n  function mouseOver(index) {\n    console.log('ssss', strokeWeight);\n    strokeWeights[index] = 10;\n    setStrokeWeight(strokeWeights);\n    console.log('over');\n  }\n\n  function mouseOut(index) {\n    strokeWeights[index] = 5;\n    setStrokeWeight(strokeWeights);\n    console.log('aaa');\n  } //polyline\n  //infoWindow\n\n\n  const closeClick = () => {\n    setTarget(false);\n  };\n\n  const divStyle = {\n    background: `white`,\n    border: `1px solid #ccc`,\n    padding: 15\n  };\n\n  const oneRoute = () => {\n    dispatch({\n      type: LOAD_MAP_REQUEST,\n      data: propsId\n    });\n    Router.push({\n      pathname: '/Route/[id]',\n      query: {\n        id: propsId\n      }\n    });\n    console.log('dong', searchMap);\n  }; //infoWindow\n\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 5\n    }\n  }, __jsx(LoadScript, {\n    googleMapsApiKey: \"AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 1\n    }\n  }, __jsx(GoogleMap, {\n    id: \"marker-example\",\n    mapContainerStyle: mapContainerStyle,\n    zoom: 13,\n    center: geom,\n    onLoad: handleOnLoad,\n    onDragEnd: handleCenterChanged // onZoomChanged={handleCenterChanged}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 11\n    }\n  }, __jsx(MarkerClusterer, {\n    options: optionss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 1\n    }\n  }, clusterer => searchMap.map(p => __jsx(Marker, {\n    key: createKey(p),\n    position: {\n      lat: p.start_latlng[1],\n      lng: p.start_latlng[0]\n    },\n    onClick: call,\n    clusterer: clusterer,\n    icon: {\n      scaledSize: new google.maps.Size(30, 30)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 15\n    }\n  }))), searchMap.map((m, index) => __jsx(Polyline, {\n    onRightClick: () => polylineClick(m),\n    onMouseOver: () => mouseOver(index),\n    onMouseOut: () => mouseOut(index),\n    options: {\n      strokeWeight: strokeWeight[index],\n      clickable: true,\n      visible: true,\n      strokeColor: '#FF0000',\n      fillColor: '#FF0000'\n    },\n    path: m.gps.coordinates.map(p => ({\n      lat: p[1],\n      lng: p[0]\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }\n  })), target && __jsx(InfoWindow, {\n    position: infoPosition,\n    onCloseClick: closeClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 14\n    }\n  }, __jsx(\"div\", {\n    style: divStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 13\n    }\n  }, \"\\uB3D9\\uC601\"), __jsx(\"button\", {\n    onClick: oneRoute,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }\n  }, \"\\uC0C1\\uC138\\uBCF4\\uAE30\"))))));\n}\n\nexport default selectMap;","map":{"version":3,"sources":["/Users/dong/CapstonProject/component/map/selectMap.js"],"names":["React","useState","useEffect","useDispatch","useSelector","GoogleMap","LoadScript","Polyline","Marker","StreetViewPanorama","MarkerClusterer","InfoWindow","Router","LOAD_MAP_REQUEST","GeomHandle","selectMap","mapState","mapContainerStyle","height","width","searchMap","state","map","geom","setGeom","lat","lng","mapref","setMapRef","handleOnLoad","handleCenterChanged","zoom","getZoom","ne","getBounds","getNorthEast","sw","getSouthWest","console","log","dispatch","type","MOVING_MAP_REQUEST","data","north","south","optionss","imagePath","createKey","location","infoPosition","setInfoPosition","target","setTarget","strokeWeight","setStrokeWeight","Array","from","length","strokeWeights","polylineClick","positionData","gps","coordinates","setPropsId","id","setPropsPosition","mouseOver","index","mouseOut","closeClick","divStyle","background","border","padding","oneRoute","propsId","push","pathname","query","clusterer","p","start_latlng","call","scaledSize","google","maps","Size","m","clickable","visible","strokeColor","fillColor"],"mappings":"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","sourcesContent":["import React, {useState,useEffect} from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { Polyline ,Marker,StreetViewPanorama,MarkerClusterer} from '@react-google-maps/api';\nimport { InfoWindow } from '@react-google-maps/api';\nimport Router from 'next/router'\nimport {LOAD_MAP_REQUEST} from '../../reducers/map'\n\nimport GeomHandle from '../GoogleMap'\n\nfunction selectMap({mapState}) {\n\n\n\nconst mapContainerStyle = {\n    height: \"400px\",\n    width: \"800px\"\n  };\n  \n\n    const {searchMap}=useSelector((state)=>state.map)\n\n    const [geom ,setGeom]=useState({lat:35.969997373905, lng: 128.45170755523503})\n    const [mapref, setMapRef] = useState(null);\n\n\n    const handleOnLoad = map => {\n        setMapRef(map);\n        \n      };\n\n\n      const handleCenterChanged = () => {\n        if (mapref) {\n          const zoom=mapref.getZoom()\n          const ne=mapref.getBounds().getNorthEast();\n          const sw=mapref.getBounds().getSouthWest();\n\n          console.log('zoom',zoom);\n          console.log('north', ne.lat(),',',ne.lng())\n          console.log('south',sw.lat(),',',sw.lng())\n        }\n        \n        dispatch({ \n          type:MOVING_MAP_REQUEST,\n          data:{\n            north:{\n              lat:ne.lat(),\n              lng:ne.lng()\n            },\n            south:{\n              lat:sw.lat(),\n              lng:ne.lat()\n            },\n  \n          }\n        })\n      \n      }\n\n      //////markercluseter\n\n\nconst optionss = {\n    imagePath:\n      'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m', // so you must have m1.png, m2.png, m3.png, m4.png, m5.png and m6.png in that folder\n  }\n\n\nfunction createKey(location) {\n    return location.lat + location.lng\n  }\n\n      //////markercluseter\n\n      //polyline\n\n      const [infoPosition,setInfoPosition]=useState({\n        lat:'',\n        lng:'',\n    })\n    \n      const [target,setTarget]=useState(false)\n\n\n      const [strokeWeight,setStrokeWeight]=useState(Array.from({length: searchMap.length}, () => 5))\n      const strokeWeights= Array.from({length: searchMap.length}, () => 5);\n\n\n      const polylineClick=(positionData)=>{\n     \n    \n        setInfoPosition({\n            lat:positionData.gps.coordinates[3][1],\n            lng:positionData.gps.coordinates[3][0]\n        })\n        setPropsId(positionData.id)\n        setPropsPosition(positionData)\n        setTarget(true)\n        \n    }\n    \n\nfunction mouseOver(index){\n    console.log('ssss',strokeWeight)\n    strokeWeights[index]=10\n    setStrokeWeight(strokeWeights)\n    console.log('over')\n}\n\nfunction mouseOut(index){\n    strokeWeights[index]=5\n    setStrokeWeight(strokeWeights)\n    console.log('aaa')\n\n}\n\n      //polyline\n\n      //infoWindow\n      const closeClick=()=>{\n        setTarget(false)\n    }\n\n\nconst divStyle = {\n    background: `white`,\n    border: `1px solid #ccc`,\n    padding: 15\n  }\n\n\n  const oneRoute=()=>{\n    dispatch({\n               type:LOAD_MAP_REQUEST,\n               data:propsId\n             })\n    Router.push({\n        pathname: '/Route/[id]',\n        query: {id:propsId},\n      });\n\n      console.log('dong',searchMap)\n}\n\n\n      //infoWindow\n\n\n  \n    \n\n    \n\n\n  return (\n    <div>\n\n<LoadScript\n        googleMapsApiKey=\"AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE\"\n        >\n            \n          <GoogleMap\n            id=\"marker-example\"\n            mapContainerStyle={mapContainerStyle}\n            zoom={13}\n            center={geom}\n            onLoad={handleOnLoad}\n            onDragEnd={handleCenterChanged}\n            // onZoomChanged={handleCenterChanged}\n          >\n\n<MarkerClusterer options={optionss}>\n          {(clusterer) =>\n            searchMap.map((p) => (\n              <Marker  key={createKey(p)} position={{lat:p.start_latlng[1],lng:p.start_latlng[0]}} onClick={call} clusterer={clusterer}  icon={{\n              scaledSize: new google.maps.Size(30,30),} } />\n            ))\n          }\n        </MarkerClusterer>\n      \n\n        {searchMap.map((m,index)=>(\n            <Polyline  onRightClick={()=>polylineClick(m)} onMouseOver={()=>mouseOver(index)} onMouseOut={()=>mouseOut(index)}  options={{strokeWeight:strokeWeight[index],clickable:true,visible:true,strokeColor: '#FF0000',fillColor: '#FF0000',}} path={m.gps.coordinates.map((p)=>(\n                {\n                    lat:p[1],\n                    lng:p[0]\n                }\n            ))}></Polyline>\n            \n            ))}\n            \n    {target&&<InfoWindow position={infoPosition} onCloseClick={closeClick}>\n        <div style={divStyle}>\n            <h1>동영</h1>\n                {/* <Link href={{\n                    pathname:'/Route/[id]',\n                    query: {id:propsId},\n                }}><a>상세보기</a></Link> */}\n            <button onClick={oneRoute}>상세보기</button>\n        </div>\n        </InfoWindow>} \n         \n\n        \n       \n            \n          </GoogleMap>\n          </LoadScript>\n             \n\n    </div>\n  )\n}\n\nexport default selectMap"]},"metadata":{},"sourceType":"module"}