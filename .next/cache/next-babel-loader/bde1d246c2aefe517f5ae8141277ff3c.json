{"ast":null,"code":"var _jsxFileName = \"/Users/dong/CapstonProject/pages/polyline.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { View, SafeAreaView, StyleSheet, FlatList, Button, Text } from 'react-native';\nimport MapView, { Marker } from 'react-native-maps';\nimport PolylineDirection from '@react-native-maps/polyline-direction';\nconst a = -36.888300;\nconst b = 174.608994;\nconst origin1 = {\n  latitude: a,\n  longitude: b\n};\nconst destination1 = {\n  latitude: -36.884421,\n  longitude: 174.611068\n};\nconst origin2 = {\n  latitude: -36.884421,\n  longitude: 174.611068\n};\nconst destination2 = {\n  latitude: -36.881972,\n  longitude: 174.615942\n};\nconst GOOGLE_MAPS_APIKEY = 'AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE';\nconst arr = [{\n  aaa: -36.888300,\n  bbb: 174.608994,\n  ccc: \"on\",\n  ddd: \"시간\"\n}, {\n  aaa: -36.884421,\n  bbb: 174.611068,\n  ccc: \"on\",\n  ddd: \"시간\"\n}, {\n  aaa: -36.881972,\n  bbb: 174.615942,\n  ccc: \"on\",\n  ddd: \"시간\"\n}, {\n  aaa: -36.879012,\n  bbb: 174.621020,\n  ccc: \"on\",\n  ddd: \"시간\"\n}, {\n  aaa: -36.874358,\n  bbb: 174.622397,\n  ccc: \"on\",\n  ddd: \"시간\"\n}, {\n  aaa: -36.877665,\n  bbb: 174.630180,\n  ccc: \"on\",\n  ddd: \"시간\"\n}];\n\nfunction polyline() {\n  const {\n    0: count,\n    1: setCount\n  } = useState(2);\n  const {\n    0: polyArr,\n    1: setPoly\n  } = useState([]);\n  React.useEffect(() => {\n    (async () => {\n      const data = await dataSettings(arr);\n      setPoly(data);\n    })();\n  }, []);\n  return __jsx(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, __jsx(MapView, {\n    style: {\n      flex: 1\n    },\n    region: {\n      latitude: a,\n      longitude: b,\n      latitudeDelta: 0.01,\n      longitudeDelta: 0.01\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, __jsx(Marker, {\n    coordinate: {\n      latitude: -36.888300,\n      longitude: 174.608994\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }), polypoly(polyArr)));\n}\n\nasync function dataSettings(arr_data) {\n  let returnArr = [];\n\n  for (let i = 0; i < arr_data.length - 1; i++) {\n    let data = arr_data[i];\n    let nextData = arr_data[i + 1];\n    returnArr.push({\n      startLati: data.aaa,\n      startLongi: data.bbb,\n      endLati: nextData.aaa,\n      endLongi: nextData.bbb,\n      onOff: data.ccc,\n      time: data.ddd\n    });\n  }\n\n  for (let i = 0; i < returnArr.length; i++) {\n    await fetch('https://maps.googleapis.com/maps/api/geocode/json?address=' + returnArr[i].startLati + ',' + returnArr[i].startLongi + '&key=' + GOOGLE_MAPS_APIKEY).then(response => response.json()).then(responseJson => {\n      console.log('??????? ADDRESS GEOCODE is BACK!! => ' + JSON.stringify(responseJson));\n    });\n  }\n\n  return returnArr;\n}\n\nfunction polypoly(imsi) {\n  let aaa = [];\n  console.log(\"뻉\" + imsi.length);\n  let leng = imsi.length;\n\n  for (let i = 0; i < leng; i++) {\n    aaa.push(__jsx(PolylineDirection, {\n      origin: {\n        latitude: imsi[i].startLati,\n        longitude: imsi[i].startLongi\n      },\n      destination: {\n        latitude: imsi[i].endLati,\n        longitude: imsi[i].endLongi\n      },\n      apiKey: GOOGLE_MAPS_APIKEY,\n      strokeWidth: i + 1,\n      strokeColor: \"#12bc00\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  return aaa;\n}\n\nexport default polyline;","map":{"version":3,"sources":["/Users/dong/CapstonProject/pages/polyline.js"],"names":["React","useState","View","SafeAreaView","StyleSheet","FlatList","Button","Text","MapView","Marker","PolylineDirection","a","b","origin1","latitude","longitude","destination1","origin2","destination2","GOOGLE_MAPS_APIKEY","arr","aaa","bbb","ccc","ddd","polyline","count","setCount","polyArr","setPoly","useEffect","data","dataSettings","flex","latitudeDelta","longitudeDelta","polypoly","arr_data","returnArr","i","length","nextData","push","startLati","startLongi","endLati","endLongi","onOff","time","fetch","then","response","json","responseJson","console","log","JSON","stringify","imsi","leng"],"mappings":"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","sourcesContent":[" \n\nimport React, { useState } from 'react';\n\n \n\nimport { View, SafeAreaView, StyleSheet, FlatList, Button, Text } from 'react-native';\n\n \n\nimport MapView, {Marker} from 'react-native-maps';\n\n \n\nimport PolylineDirection from '@react-native-maps/polyline-direction';\n\n \n\nconst a = -36.888300;\n\nconst b = 174.608994;\n\nconst origin1 = { latitude: a, longitude: b };\n\nconst destination1 = { latitude: -36.884421, longitude: 174.611068 };\n\n \n\nconst origin2 = { latitude: -36.884421, longitude: 174.611068 };\n\nconst destination2 = { latitude: -36.881972, longitude: 174.615942 };\n\n \n\nconst GOOGLE_MAPS_APIKEY = 'AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE';\n\n \n\nconst arr = [\n\n    {aaa:-36.888300,bbb:174.608994,ccc:\"on\",ddd:\"시간\"},  \n\n    {aaa:-36.884421,bbb:174.611068,ccc:\"on\",ddd:\"시간\"},   \n\n    {aaa:-36.881972,bbb:174.615942,ccc:\"on\",ddd:\"시간\"},\n\n    {aaa:-36.879012,bbb:174.621020,ccc:\"on\",ddd:\"시간\"},\n\n    {aaa:-36.874358,bbb:174.622397,ccc:\"on\",ddd:\"시간\"},\n\n    {aaa:-36.877665,bbb:174.630180,ccc:\"on\",ddd:\"시간\"}\n\n]\n\n \n\nfunction polyline() {\n\n    const [count, setCount] = useState(2);\n\n    const [polyArr, setPoly] = useState([]);\n\n \n\n    React.useEffect(() => {\n\n        (async () => {\n\n            const data = await dataSettings(arr);\n\n            setPoly(data);\n\n        })()\n\n    }, []);\n\n \n\n  return (\n\n    <View style={{ flex: 1 }}>\n\n      <MapView\n\n        style={{ flex: 1 }}\n\n        region={{\n\n          latitude: a,\n\n          longitude: b,\n\n          latitudeDelta: 0.01,\n\n          longitudeDelta: 0.01,\n\n        }}>\n\n \n\n        \n\n        <Marker coordinate={{ latitude: -36.888300, longitude: 174.608994 }} />\n\n \n\n        {polypoly(polyArr)}\n\n      </MapView>\n\n    </View>\n\n  );\n\n}\n\n\n\n\n\nasync function dataSettings(arr_data) {\n\n    let returnArr = [];\n\n    for (let i=0; i<arr_data.length-1; i++) {\n\n        let data = arr_data[i];\n\n        let nextData = arr_data[i+1];\n\n        returnArr.push({startLati:data.aaa, startLongi:data.bbb, endLati:nextData.aaa, endLongi:nextData.bbb, onOff:data.ccc, time:data.ddd})\n\n    }\n\n \n\n    for (let i=0; i<returnArr.length; i++) {\n\n        await fetch('https://maps.googleapis.com/maps/api/geocode/json?address=' + returnArr[i].startLati + ',' + returnArr[i].startLongi + '&key=' + GOOGLE_MAPS_APIKEY)\n\n           .then((response) => response.json())\n\n           .then((responseJson) => {\n\n               console.log('??????? ADDRESS GEOCODE is BACK!! => ' + JSON.stringify(responseJson));\n\n            })\n\n    }\n\n \n\n    return returnArr;\n\n}\n\n\n\n\n\nfunction polypoly(imsi) {\n\n    let aaa = [];\n\n    console.log(\"뻉\" + imsi.length);\n\n    let leng = imsi.length;\n\n    for (let i=0; i<leng; i++) {\n\n        aaa.push(\n\n        <PolylineDirection\n\n          origin={{latitude: imsi[i].startLati, longitude: imsi[i].startLongi}}\n\n          destination={{latitude: imsi[i].endLati, longitude: imsi[i].endLongi}}\n\n          apiKey={GOOGLE_MAPS_APIKEY}\n\n          strokeWidth={i+1}\n\n          strokeColor=\"#12bc00\"\n\n        />);\n\n    }\n\n    return aaa;\n\n}\n\n \n\nexport default polyline;"]},"metadata":{},"sourceType":"module"}