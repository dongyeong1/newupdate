{"ast":null,"code":"import { all, call, fork, put, takeLatest, take } from 'redux-saga/effects';\nimport { SEARCH_MAP_REQUEST, SEARCH_MAP_SUCCESS, SEARCH_MAP_FAILURE, LOAD_MAP_REQUEST, LOAD_MAP_SUCCESS, LOAD_MAP_FAILURE, MOVING_MAP_SUCCESS, MOVING_MAP_REQUEST, MOVING_MAP_FAILURE } from '../reducers/map';\n\nfunction searchMapAPI(data) {// return axios.post('/searchmap',data)\n}\n\nfunction* searchMap(action) {\n  try {\n    // const result = yield call(loadPostsAPI,action.data)\n    yield put({\n      type: SEARCH_MAP_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: SEARCH_MAP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadMapAPI(data) {// return axios.post('/searchmap',data)\n}\n\nfunction* loadMap(action) {\n  try {\n    // const result = yield call(loadPostsAPI,action.data)\n    yield put({\n      type: LOAD_MAP_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_MAP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction movingMapAPI(data) {// return axios.post('/searchmap',data)\n}\n\nfunction* movingMap(action) {\n  try {\n    // const result = yield call(loadPostsAPI,action.data)\n    yield put({\n      type: MOVING_MAP_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: MOVING_MAP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchSearchMap() {\n  yield takeLatest(SEARCH_MAP_REQUEST, searchMap);\n}\n\nfunction* wahchLoadMap() {\n  yield takeLatest(LOAD_MAP_REQUEST, loadMap);\n}\n\nfunction* watchMovingMap() {\n  yield takeLatest(MOVING_MAP_REQUEST, movingMap);\n}\n\nfunction* watchBikeMap() {\n  yield takeLatest(BIKE_MAP_REQUEST, loadMap);\n}\n\nfunction* watchRunningMap() {\n  yield takeLatest(RUNNING_MAP_REQUEST, movingMap);\n}\n\nexport default function* rootSaga() {\n  yield all([fork(watchSearchMap), fork(wahchLoadMap), fork(watchMovingMap), fork(watchBikeMap), fork(watchRunningMap)]);\n}","map":{"version":3,"sources":["/Users/dong/CapstonProject/sagas/map.js"],"names":["all","call","fork","put","takeLatest","take","SEARCH_MAP_REQUEST","SEARCH_MAP_SUCCESS","SEARCH_MAP_FAILURE","LOAD_MAP_REQUEST","LOAD_MAP_SUCCESS","LOAD_MAP_FAILURE","MOVING_MAP_SUCCESS","MOVING_MAP_REQUEST","MOVING_MAP_FAILURE","searchMapAPI","data","searchMap","action","type","err","error","response","loadMapAPI","loadMap","movingMapAPI","movingMap","watchSearchMap","wahchLoadMap","watchMovingMap","watchBikeMap","BIKE_MAP_REQUEST","watchRunningMap","RUNNING_MAP_REQUEST","rootSaga"],"mappings":"AAAA,SAASA,GAAT,EAAaC,IAAb,EAAkBC,IAAlB,EAAuBC,GAAvB,EAA2BC,UAA3B,EAAuCC,IAAvC,QAAkD,oBAAlD;AAEA,SAASC,kBAAT,EACAC,kBADA,EAEAC,kBAFA,EAGAC,gBAHA,EAIAC,gBAJA,EAKAC,gBALA,EAMAC,kBANA,EAOAC,kBAPA,EAQAC,kBARA,QASO,iBATP;;AAaA,SAASC,YAAT,CAAsBC,IAAtB,EAA2B,CACvB;AACC;;AAGL,UAAUC,SAAV,CAAoBC,MAApB,EAA2B;AACvB,MAAG;AACC;AACA,UAAMf,GAAG,CAAC;AACNgB,MAAAA,IAAI,EAACZ,kBADC;AAENS,MAAAA,IAAI,EAACE,MAAM,CAACF;AAFN,KAAD,CAAT;AAKH,GAPD,CAOC,OAAMI,GAAN,EAAU;AACP,UAAMjB,GAAG,CAAC;AACNgB,MAAAA,IAAI,EAACX,kBADC;AAENa,MAAAA,KAAK,EAACD,GAAG,CAACE,QAAJ,CAAaN;AAFb,KAAD,CAAT;AAMH;AACJ;;AAGD,SAASO,UAAT,CAAoBP,IAApB,EAAyB,CACrB;AACC;;AAGL,UAAUQ,OAAV,CAAkBN,MAAlB,EAAyB;AACrB,MAAG;AACC;AACA,UAAMf,GAAG,CAAC;AACNgB,MAAAA,IAAI,EAACT,gBADC;AAENM,MAAAA,IAAI,EAACE,MAAM,CAACF;AAFN,KAAD,CAAT;AAKH,GAPD,CAOC,OAAMI,GAAN,EAAU;AACP,UAAMjB,GAAG,CAAC;AACNgB,MAAAA,IAAI,EAACR,gBADC;AAENU,MAAAA,KAAK,EAACD,GAAG,CAACE,QAAJ,CAAaN;AAFb,KAAD,CAAT;AAMH;AACJ;;AAED,SAASS,YAAT,CAAsBT,IAAtB,EAA2B,CACvB;AACC;;AAGL,UAAUU,SAAV,CAAoBR,MAApB,EAA2B;AACvB,MAAG;AACC;AACA,UAAMf,GAAG,CAAC;AACNgB,MAAAA,IAAI,EAACP,kBADC;AAENI,MAAAA,IAAI,EAACE,MAAM,CAACF;AAFN,KAAD,CAAT;AAKH,GAPD,CAOC,OAAMI,GAAN,EAAU;AACP,UAAMjB,GAAG,CAAC;AACNgB,MAAAA,IAAI,EAACL,kBADC;AAENO,MAAAA,KAAK,EAACD,GAAG,CAACE,QAAJ,CAAaN;AAFb,KAAD,CAAT;AAKH;AACJ;;AAGD,UAAUW,cAAV,GAA0B;AACtB,QAAMvB,UAAU,CAACE,kBAAD,EAAoBW,SAApB,CAAhB;AACH;;AAED,UAAUW,YAAV,GAAwB;AACpB,QAAMxB,UAAU,CAACK,gBAAD,EAAkBe,OAAlB,CAAhB;AACH;;AAED,UAAUK,cAAV,GAA0B;AACtB,QAAMzB,UAAU,CAACS,kBAAD,EAAoBa,SAApB,CAAhB;AACH;;AAED,UAAUI,YAAV,GAAwB;AACpB,QAAM1B,UAAU,CAAC2B,gBAAD,EAAkBP,OAAlB,CAAhB;AACH;;AAED,UAAUQ,eAAV,GAA2B;AACvB,QAAM5B,UAAU,CAAC6B,mBAAD,EAAqBP,SAArB,CAAhB;AACH;;AAKD,eAAe,UAAUQ,QAAV,GAAoB;AAE/B,QAAMlC,GAAG,CAAC,CACNE,IAAI,CAACyB,cAAD,CADE,EAENzB,IAAI,CAAC0B,YAAD,CAFE,EAGN1B,IAAI,CAAC2B,cAAD,CAHE,EAIN3B,IAAI,CAAC4B,YAAD,CAJE,EAKN5B,IAAI,CAAC8B,eAAD,CALE,CAAD,CAAT;AAUH","sourcesContent":["import { all,call,fork,put,takeLatest, take} from 'redux-saga/effects'\n\nimport { SEARCH_MAP_REQUEST ,\nSEARCH_MAP_SUCCESS,\nSEARCH_MAP_FAILURE,\nLOAD_MAP_REQUEST,\nLOAD_MAP_SUCCESS,\nLOAD_MAP_FAILURE,\nMOVING_MAP_SUCCESS,\nMOVING_MAP_REQUEST,\nMOVING_MAP_FAILURE\n} from '../reducers/map'\n\n\n\nfunction searchMapAPI(data){\n    // return axios.post('/searchmap',data)\n    }\n    \n\nfunction* searchMap(action){\n    try{\n        // const result = yield call(loadPostsAPI,action.data)\n        yield put({\n            type:SEARCH_MAP_SUCCESS,\n            data:action.data\n        })\n\n    }catch(err){\n        yield put({\n            type:SEARCH_MAP_FAILURE,\n            error:err.response.data,\n             \n        })\n\n    }\n}\n\n\nfunction loadMapAPI(data){\n    // return axios.post('/searchmap',data)\n    }\n    \n\nfunction* loadMap(action){\n    try{\n        // const result = yield call(loadPostsAPI,action.data)\n        yield put({\n            type:LOAD_MAP_SUCCESS,\n            data:action.data\n        })\n\n    }catch(err){\n        yield put({\n            type:LOAD_MAP_FAILURE,\n            error:err.response.data,\n             \n        })\n\n    }\n}\n\nfunction movingMapAPI(data){\n    // return axios.post('/searchmap',data)\n    }\n    \n\nfunction* movingMap(action){\n    try{\n        // const result = yield call(loadPostsAPI,action.data)\n        yield put({\n            type:MOVING_MAP_SUCCESS,\n            data:action.data\n        })\n\n    }catch(err){\n        yield put({\n            type:MOVING_MAP_FAILURE,\n            error:err.response.data,\n        })\n\n    }\n}\n\n\nfunction* watchSearchMap(){\n    yield takeLatest(SEARCH_MAP_REQUEST,searchMap)\n}\n\nfunction* wahchLoadMap(){\n    yield takeLatest(LOAD_MAP_REQUEST,loadMap)\n}\n\nfunction* watchMovingMap(){\n    yield takeLatest(MOVING_MAP_REQUEST,movingMap)\n}\n\nfunction* watchBikeMap(){\n    yield takeLatest(BIKE_MAP_REQUEST,loadMap)\n}\n\nfunction* watchRunningMap(){\n    yield takeLatest(RUNNING_MAP_REQUEST,movingMap)\n}\n\n\n\n\nexport default function* rootSaga(){\n\n    yield all([\n        fork(watchSearchMap),\n        fork(wahchLoadMap),\n        fork(watchMovingMap),\n        fork(watchBikeMap),\n        fork(watchRunningMap)\n\n      \n    ])\n\n}\n"]},"metadata":{},"sourceType":"module"}