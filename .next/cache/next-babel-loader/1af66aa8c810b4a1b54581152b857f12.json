{"ast":null,"code":"import shortid from \"shortid\";\nimport produce from \"immer\";\nimport faker from 'faker';\nimport { FaLessThanEqual } from \"react-icons/fa\";\nexport const initialState = {\n  mainPosts: [],\n  addCommentDone: false,\n  addCommentLoading: false,\n  addCommentError: false,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  loadsPostsLoading: false,\n  loadsPostsDone: false,\n  loadsPostsError: null,\n  hasMorePosts: true,\n  loadMorePostLoading: false,\n  loadMorePostDone: false,\n  loadMorePostError: null,\n  deletePostLoading: false,\n  deletePostDone: false,\n  deletePostError: null\n};\nexport const LOAD_MORE_POST_SUCCESS = 'LOAD_MORE_POST_SUCCESS';\nexport const LOAD_MORE_POST_REQUEST = 'LOAD_MORE_POST_REQUEST';\nexport const LOAD_MORE_POST_FAILURE = 'LOAD_MORE_POST_FAILURE';\nexport const LOADS_POSTS_REQUEST = 'LOADS_POSTS_REQUEST';\nexport const LOADS_POSTS_SUCCESS = 'LOADS_POSTS_SUCCESS';\nexport const LOADS_POSTS_FAILURE = 'LOADS_POSTS_FAILURE';\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const DELETE_POST_REQUEST = 'DELETE_POST_REQUEST';\nexport const DELETE_POST_SUCCESS = 'DELETE_POST_SUCCESS';\nexport const DELETE_POST_FAILURE = 'DELETE_POST_FAILURE';\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true; // draft.hasMorePosts = draft.mainPosts.length < 50;\n        // draft.mainPosts = action.data.concat(draft.mainPosts);\n        //  백만들어지면 포스트 불러올것\n\n        console.log('nexq', action.data.nextPage);\n        draft.mainPosts = action.data;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = \"ㅇㅇㅇ\";\n        break;\n\n      case LOAD_MORE_POST_REQUEST:\n        draft.loadMorePostLoading = true;\n        draft.loadMorePostDone = false;\n        draft.loadMorePostError = null;\n        break;\n\n      case LOAD_MORE_POST_SUCCESS:\n        draft.loadMorePostLoading = false;\n        draft.loadMorePostDone = true;\n        draft.hasMorePosts = draft.mainPosts.data.length < 30; // draft.mainPosts = action.data.concat(draft.mainPosts);\n        //  백만들어지면 포스트 불러올것\n\n        draft.mainPosts.nextPage = action.data.nextPage;\n        draft.mainPosts.data.push(...action.data.data);\n        break;\n\n      case LOAD_MORE_POST_FAILURE:\n        draft.loadMorePostLoading = false;\n        draft.loadMorePostError = \"ㅇㅇㅇ\";\n        break;\n\n      case LOADS_POSTS_REQUEST:\n        draft.loadsPostsLoading = true;\n        draft.loadsPostsDone = false;\n        draft.loadsPostsError = null;\n        break;\n\n      case LOADS_POSTS_SUCCESS:\n        draft.loadsPostsLoading = false;\n        draft.loadsPostsDone = true;\n        draft.mainPosts = action.data;\n        break;\n\n      case LOADS_POSTS_FAILURE:\n        draft.loadsPostsLoading = false;\n        draft.loadsPostsError = \"ㅇㅇㅇ\";\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        const commentpost = draft.mainPosts.find(v => v.id === action.data.id);\n        commentpost.comment.unshift(action.data.result.comment); // draft.mainPosts.find((v)=>v.id===action.data.id)\n\n        draft.mainPosts = draft.mainPosts;\n        break;\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = 'ss';\n        break;\n\n      case DELETE_POST_REQUEST:\n        draft.deletePostLoading = true;\n        draft.deletePostDone = false;\n        break;\n\n      case DELETE_POST_SUCCESS:\n        draft.deletePostLoading = false;\n        draft.deletePostDone = true;\n        break;\n\n      case DELETE_POST_FAILURE:\n        draft.deletePostLoading = false;\n        draft.deletePostDone = false;\n        draft.deletePostError = 'error';\n        break;\n\n      default:\n        return state;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/dong/CapstonProject/reducers/post.js"],"names":["shortid","produce","faker","FaLessThanEqual","initialState","mainPosts","addCommentDone","addCommentLoading","addCommentError","loadPostsLoading","loadPostsDone","loadPostsError","loadsPostsLoading","loadsPostsDone","loadsPostsError","hasMorePosts","loadMorePostLoading","loadMorePostDone","loadMorePostError","deletePostLoading","deletePostDone","deletePostError","LOAD_MORE_POST_SUCCESS","LOAD_MORE_POST_REQUEST","LOAD_MORE_POST_FAILURE","LOADS_POSTS_REQUEST","LOADS_POSTS_SUCCESS","LOADS_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","DELETE_POST_REQUEST","DELETE_POST_SUCCESS","DELETE_POST_FAILURE","reducer","state","action","draft","type","ADD_POST_REQUEST","addPostLoading","addPostDone","addPostError","ADD_POST_SUCCESS","unshift","dummyPost","data","ADD_POST_FAILURE","error","console","log","nextPage","length","push","commentpost","find","v","id","comment","result"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,OAAP,MAAqB,OAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,gBAAhC;AAGA,OAAO,MAAMC,YAAY,GAAC;AAE1BC,EAAAA,SAAS,EAAC,EAFgB;AAIvBC,EAAAA,cAAc,EAAC,KAJQ;AAKvBC,EAAAA,iBAAiB,EAAC,KALK;AAMvBC,EAAAA,eAAe,EAAC,KANO;AAOvBC,EAAAA,gBAAgB,EAAE,KAPK;AAQvBC,EAAAA,aAAa,EAAE,KARQ;AASvBC,EAAAA,cAAc,EAAE,IATO;AAUvBC,EAAAA,iBAAiB,EAAE,KAVI;AAWvBC,EAAAA,cAAc,EAAE,KAXO;AAYvBC,EAAAA,eAAe,EAAE,IAZM;AAavBC,EAAAA,YAAY,EAAC,IAbU;AAcvBC,EAAAA,mBAAmB,EAAC,KAdG;AAevBC,EAAAA,gBAAgB,EAAC,KAfM;AAgBvBC,EAAAA,iBAAiB,EAAC,IAhBK;AAiBvBC,EAAAA,iBAAiB,EAAC,KAjBK;AAkBvBC,EAAAA,cAAc,EAAC,KAlBQ;AAmBvBC,EAAAA,eAAe,EAAC;AAnBO,CAAnB;AAuBP,OAAO,MAAMC,sBAAsB,GAAC,wBAA7B;AACP,OAAO,MAAMC,sBAAsB,GAAC,wBAA7B;AACP,OAAO,MAAMC,sBAAsB,GAAC,wBAA7B;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AAEP,OAAO,MAAMC,mBAAmB,GAAC,qBAA1B;AACP,OAAO,MAAMC,mBAAmB,GAAC,qBAA1B;AACP,OAAO,MAAMC,mBAAmB,GAAC,qBAA1B;AAEP,OAAO,MAAMC,mBAAmB,GAAC,qBAA1B;AACP,OAAO,MAAMC,mBAAmB,GAAC,qBAA1B;AACP,OAAO,MAAMC,mBAAmB,GAAC,qBAA1B;;AAMP,MAAMC,OAAO,GAAC,CAACC,KAAK,GAAClC,YAAP,EAAoBmC,MAApB,KAA6B;AACvC,SAAOtC,OAAO,CAACqC,KAAD,EAAQE,KAAD,IAAS;AAC1B,YAAOD,MAAM,CAACE,IAAd;AACI,WAAKC,gBAAL;AACIF,QAAAA,KAAK,CAACG,cAAN,GAAuB,IAAvB;AACAH,QAAAA,KAAK,CAACI,WAAN,GAAoB,KAApB;AACAJ,QAAAA,KAAK,CAACK,YAAN,GAAqB,IAArB;AACA;;AACF,WAAKC,gBAAL;AACEN,QAAAA,KAAK,CAACG,cAAN,GAAuB,KAAvB;AACAH,QAAAA,KAAK,CAACI,WAAN,GAAoB,IAApB;AACAJ,QAAAA,KAAK,CAACnC,SAAN,CAAgB0C,OAAhB,CAAwBC,SAAS,CAACT,MAAM,CAACU,IAAR,CAAjC;AACA;;AACF,WAAKC,gBAAL;AACEV,QAAAA,KAAK,CAACG,cAAN,GAAuB,KAAvB;AACAH,QAAAA,KAAK,CAACK,YAAN,GAAqBN,MAAM,CAACY,KAA5B;AACA;;AACA,WAAKvB,kBAAL;AACIY,QAAAA,KAAK,CAAC/B,gBAAN,GAAyB,IAAzB;AACA+B,QAAAA,KAAK,CAAC9B,aAAN,GAAsB,KAAtB;AACA8B,QAAAA,KAAK,CAAC7B,cAAN,GAAuB,IAAvB;AACA;;AACA,WAAKkB,kBAAL;AAEAW,QAAAA,KAAK,CAAC/B,gBAAN,GAAyB,KAAzB;AACA+B,QAAAA,KAAK,CAAC9B,aAAN,GAAsB,IAAtB,CAHA,CAIA;AACA;AACA;;AACA0C,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBd,MAAM,CAACU,IAAP,CAAYK,QAA/B;AACAd,QAAAA,KAAK,CAACnC,SAAN,GAAgBkC,MAAM,CAACU,IAAvB;AACA;;AACA,WAAKnB,kBAAL;AACAU,QAAAA,KAAK,CAAC/B,gBAAN,GAAyB,KAAzB;AACA+B,QAAAA,KAAK,CAAC7B,cAAN,GAAuB,KAAvB;AACA;;AAGA,WAAKY,sBAAL;AACEiB,QAAAA,KAAK,CAACxB,mBAAN,GAA4B,IAA5B;AACAwB,QAAAA,KAAK,CAACvB,gBAAN,GAAyB,KAAzB;AACAuB,QAAAA,KAAK,CAACtB,iBAAN,GAA0B,IAA1B;AACA;;AACA,WAAKI,sBAAL;AAEAkB,QAAAA,KAAK,CAACxB,mBAAN,GAA4B,KAA5B;AACAwB,QAAAA,KAAK,CAACvB,gBAAN,GAAyB,IAAzB;AACAuB,QAAAA,KAAK,CAACzB,YAAN,GAAqByB,KAAK,CAACnC,SAAN,CAAgB4C,IAAhB,CAAqBM,MAArB,GAA8B,EAAnD,CAJA,CAKA;AACA;;AACAf,QAAAA,KAAK,CAACnC,SAAN,CAAgBiD,QAAhB,GAAyBf,MAAM,CAACU,IAAP,CAAYK,QAArC;AACAd,QAAAA,KAAK,CAACnC,SAAN,CAAgB4C,IAAhB,CAAqBO,IAArB,CAA0B,GAAGjB,MAAM,CAACU,IAAP,CAAYA,IAAzC;AACA;;AACA,WAAKzB,sBAAL;AACAgB,QAAAA,KAAK,CAACxB,mBAAN,GAA4B,KAA5B;AACAwB,QAAAA,KAAK,CAACtB,iBAAN,GAA0B,KAA1B;AACA;;AAMF,WAAKO,mBAAL;AACEe,QAAAA,KAAK,CAAC5B,iBAAN,GAA0B,IAA1B;AACA4B,QAAAA,KAAK,CAAC3B,cAAN,GAAuB,KAAvB;AACA2B,QAAAA,KAAK,CAAC1B,eAAN,GAAwB,IAAxB;AACA;;AACA,WAAKY,mBAAL;AAEAc,QAAAA,KAAK,CAAC5B,iBAAN,GAA0B,KAA1B;AACA4B,QAAAA,KAAK,CAAC3B,cAAN,GAAuB,IAAvB;AAEA2B,QAAAA,KAAK,CAACnC,SAAN,GAAgBkC,MAAM,CAACU,IAAvB;AACA;;AACA,WAAKtB,mBAAL;AACAa,QAAAA,KAAK,CAAC5B,iBAAN,GAA0B,KAA1B;AACA4B,QAAAA,KAAK,CAAC1B,eAAN,GAAwB,KAAxB;AACA;;AAEF,WAAKiB,mBAAL;AACAS,QAAAA,KAAK,CAACjC,iBAAN,GAA0B,IAA1B;AACAiC,QAAAA,KAAK,CAAClC,cAAN,GAAuB,KAAvB;AACA;;AACA,WAAK0B,mBAAL;AACAQ,QAAAA,KAAK,CAACjC,iBAAN,GAA0B,KAA1B;AACAiC,QAAAA,KAAK,CAAClC,cAAN,GAAuB,IAAvB;AAEA,cAAMmD,WAAW,GAACjB,KAAK,CAACnC,SAAN,CAAgBqD,IAAhB,CAAsBC,CAAD,IAAKA,CAAC,CAACC,EAAF,KAAOrB,MAAM,CAACU,IAAP,CAAYW,EAA7C,CAAlB;AACAH,QAAAA,WAAW,CAACI,OAAZ,CAAoBd,OAApB,CAA4BR,MAAM,CAACU,IAAP,CAAYa,MAAZ,CAAmBD,OAA/C,EALA,CAMA;;AAEArB,QAAAA,KAAK,CAACnC,SAAN,GAAgBmC,KAAK,CAACnC,SAAtB;AACA;;AACA,WAAK4B,mBAAL;AACAO,QAAAA,KAAK,CAACjC,iBAAN,GAA0B,KAA1B;AACAiC,QAAAA,KAAK,CAAChC,eAAN,GAAwB,IAAxB;AACA;;AACA,WAAK0B,mBAAL;AACEM,QAAAA,KAAK,CAACrB,iBAAN,GAAwB,IAAxB;AACAqB,QAAAA,KAAK,CAACpB,cAAN,GAAqB,KAArB;AACA;;AACF,WAAKe,mBAAL;AACEK,QAAAA,KAAK,CAACrB,iBAAN,GAAwB,KAAxB;AACAqB,QAAAA,KAAK,CAACpB,cAAN,GAAqB,IAArB;AACA;;AACF,WAAKgB,mBAAL;AACEI,QAAAA,KAAK,CAACrB,iBAAN,GAAwB,KAAxB;AACAqB,QAAAA,KAAK,CAACpB,cAAN,GAAqB,KAArB;AACAoB,QAAAA,KAAK,CAACnB,eAAN,GAAsB,OAAtB;AACA;;AAGV;AACI,eAAOiB,KAAP;AA/GR;AAiHH,GAlHa,CAAd;AAmHH,CApHD;;AAsHA,eAAeD,OAAf","sourcesContent":["import shortid from \"shortid\";\nimport produce  from \"immer\";\nimport faker from 'faker';\nimport { FaLessThanEqual } from \"react-icons/fa\";\n\n\nexport const initialState={\n\nmainPosts:[],\n\n   addCommentDone:false,\n   addCommentLoading:false,\n   addCommentError:false,\n   loadPostsLoading: false,\n   loadPostsDone: false,\n   loadPostsError: null,\n   loadsPostsLoading: false,\n   loadsPostsDone: false,\n   loadsPostsError: null,\n   hasMorePosts:true,\n   loadMorePostLoading:false,\n   loadMorePostDone:false,\n   loadMorePostError:null,\n   deletePostLoading:false,\n   deletePostDone:false,\n   deletePostError:null\n\n}\n\nexport const LOAD_MORE_POST_SUCCESS='LOAD_MORE_POST_SUCCESS'\nexport const LOAD_MORE_POST_REQUEST='LOAD_MORE_POST_REQUEST'\nexport const LOAD_MORE_POST_FAILURE='LOAD_MORE_POST_FAILURE'\n\nexport const LOADS_POSTS_REQUEST = 'LOADS_POSTS_REQUEST';\nexport const LOADS_POSTS_SUCCESS = 'LOADS_POSTS_SUCCESS';\nexport const LOADS_POSTS_FAILURE = 'LOADS_POSTS_FAILURE';\n\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\n\nexport const ADD_COMMENT_REQUEST='ADD_COMMENT_REQUEST'\nexport const ADD_COMMENT_SUCCESS='ADD_COMMENT_SUCCESS'\nexport const ADD_COMMENT_FAILURE='ADD_COMMENT_FAILURE'\n\nexport const DELETE_POST_REQUEST='DELETE_POST_REQUEST'\nexport const DELETE_POST_SUCCESS='DELETE_POST_SUCCESS'\nexport const DELETE_POST_FAILURE='DELETE_POST_FAILURE'\n\n\n\n\n\nconst reducer=(state=initialState,action)=>{\n    return produce(state,(draft)=>{\n        switch(action.type){\n            case ADD_POST_REQUEST:\n                draft.addPostLoading = true;\n                draft.addPostDone = false;\n                draft.addPostError = null;\n                break;\n              case ADD_POST_SUCCESS: \n                draft.addPostLoading = false;\n                draft.addPostDone = true;\n                draft.mainPosts.unshift(dummyPost(action.data));\n                break;\n              case ADD_POST_FAILURE:\n                draft.addPostLoading = false;\n                draft.addPostError = action.error;\n                break;\n                case LOAD_POSTS_REQUEST:\n                    draft.loadPostsLoading = true;\n                    draft.loadPostsDone = false;\n                    draft.loadPostsError = null;\n                    break;\n                    case LOAD_POSTS_SUCCESS:\n                      \n                    draft.loadPostsLoading = false;\n                    draft.loadPostsDone = true;\n                    // draft.hasMorePosts = draft.mainPosts.length < 50;\n                    // draft.mainPosts = action.data.concat(draft.mainPosts);\n                    //  백만들어지면 포스트 불러올것\n                    console.log('nexq',action.data.nextPage)\n                    draft.mainPosts=action.data\n                    break;\n                    case LOAD_POSTS_FAILURE:\n                    draft.loadPostsLoading = false; \n                    draft.loadPostsError = \"ㅇㅇㅇ\";\n                    break;\n\n\n                    case LOAD_MORE_POST_REQUEST:\n                      draft.loadMorePostLoading = true;\n                      draft.loadMorePostDone = false;\n                      draft.loadMorePostError = null;\n                      break;\n                      case LOAD_MORE_POST_SUCCESS:\n                        \n                      draft.loadMorePostLoading = false;\n                      draft.loadMorePostDone = true;\n                      draft.hasMorePosts = draft.mainPosts.data.length < 30;\n                      // draft.mainPosts = action.data.concat(draft.mainPosts);\n                      //  백만들어지면 포스트 불러올것\n                      draft.mainPosts.nextPage=action.data.nextPage\n                      draft.mainPosts.data.push(...action.data.data)\n                      break;\n                      case LOAD_MORE_POST_FAILURE:\n                      draft.loadMorePostLoading = false; \n                      draft.loadMorePostError = \"ㅇㅇㅇ\";\n                      break;\n\n\n\n\n\n                    case LOADS_POSTS_REQUEST:\n                      draft.loadsPostsLoading = true;\n                      draft.loadsPostsDone = false;\n                      draft.loadsPostsError = null;\n                      break;\n                      case LOADS_POSTS_SUCCESS:\n                        \n                      draft.loadsPostsLoading = false;\n                      draft.loadsPostsDone = true;\n\n                      draft.mainPosts=action.data\n                      break;\n                      case LOADS_POSTS_FAILURE:\n                      draft.loadsPostsLoading = false; \n                      draft.loadsPostsError = \"ㅇㅇㅇ\";\n                      break;\n\n                    case ADD_COMMENT_REQUEST:\n                    draft.addCommentLoading = true;\n                    draft.addCommentDone = false;\n                    break;\n                    case ADD_COMMENT_SUCCESS:\n                    draft.addCommentLoading = false;\n                    draft.addCommentDone = true;\n\n                    const commentpost=draft.mainPosts.find((v)=>v.id===action.data.id)\n                    commentpost.comment.unshift(action.data.result.comment)\n                    // draft.mainPosts.find((v)=>v.id===action.data.id)\n                  \n                    draft.mainPosts=draft.mainPosts\n                    break;\n                    case ADD_COMMENT_FAILURE:\n                    draft.addCommentLoading = false; \n                    draft.addCommentError = 'ss';\n                    break;\n                    case DELETE_POST_REQUEST:\n                      draft.deletePostLoading=true;\n                      draft.deletePostDone=false;\n                      break;\n                    case DELETE_POST_SUCCESS:\n                      draft.deletePostLoading=false;\n                      draft.deletePostDone=true;\n                      break;\n                    case DELETE_POST_FAILURE:\n                      draft.deletePostLoading=false;\n                      draft.deletePostDone=false;\n                      draft.deletePostError='error'\n                      break;\n           \n           \n            default:\n                return state\n        }\n    })\n}\n\nexport default reducer"]},"metadata":{},"sourceType":"module"}