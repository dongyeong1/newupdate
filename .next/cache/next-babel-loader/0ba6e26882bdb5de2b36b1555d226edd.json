{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logout),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogout),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, call, fork, put, takeLatest, take } from 'redux-saga/effects';\nimport { LOGIN_FAIL, LOGIN_REQUEST, LOGIN_SUCCESS, LOGOUT_REQUEST, LOGOUT_SUCCESS } from '../reducers/user';\nimport axios from 'axios';\n\nfunction logInAPI(data) {\n  return axios.post('/login', data);\n}\n\nfunction login(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return call(logInAPI, action.data);\n\n        case 2:\n          result = _context.sent;\n          _context.prev = 3;\n          _context.next = 6;\n          return put({\n            type: LOGIN_SUCCESS,\n            data: action.data\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](3);\n          _context.next = 12;\n          return {\n            type: LOGIN_FAIL,\n            data: 'error'\n          };\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[3, 8]]);\n}\n\nfunction logOutAPI(data) {\n  return axios.post('/logout', data);\n}\n\nfunction logout() {\n  return _regeneratorRuntime.wrap(function logout$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(logOutAPI);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: LOG_OUT_SUCCESS\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: LOG_OUT_FAILURE,\n            error: 'error'\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(LOGIN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchLogout() {\n  return _regeneratorRuntime.wrap(function watchLogout$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOGOUT_SUCCESS, logout);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogin), fork(watchLogout)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/dong/CapstonProject/sagas/user.js"],"names":["login","logout","watchLogin","watchLogout","rootSaga","all","call","fork","put","takeLatest","take","LOGIN_FAIL","LOGIN_REQUEST","LOGIN_SUCCESS","LOGOUT_REQUEST","LOGOUT_SUCCESS","axios","logInAPI","data","post","action","result","type","logOutAPI","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","error"],"mappings":";;oDASUA,K;qDAoBAC,M;qDAeAC,U;qDAIAC,W;qDAIeC,Q;;AAnDzB,SAASC,GAAT,EAAaC,IAAb,EAAkBC,IAAlB,EAAuBC,GAAvB,EAA2BC,UAA3B,EAAuCC,IAAvC,QAAkD,oBAAlD;AACA,SAAQC,UAAR,EAAoBC,aAApB,EAAkCC,aAAlC,EAAgDC,cAAhD,EAAgEC,cAAhE,QAAqF,kBAArF;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAuB;AACnB,SAAOF,KAAK,CAACG,IAAN,CAAW,QAAX,EAAoBD,IAApB,CAAP;AACH;;AAED,SAAUlB,KAAV,CAAgBoB,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACc,iBAAMd,IAAI,CAACW,QAAD,EAAUG,MAAM,CAACF,IAAjB,CAAV;;AADd;AACMG,UAAAA,MADN;AAAA;AAAA;AAGA,iBAAMb,GAAG,CAAC;AACNc,YAAAA,IAAI,EAACT,aADC;AAENK,YAAAA,IAAI,EAACE,MAAM,CAACF;AAFN,WAAD,CAAT;;AAHA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQI,iBAAM;AACFI,YAAAA,IAAI,EAACX,UADH;AAEFO,YAAAA,IAAI,EAAC;AAFH,WAAN;;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAASK,SAAT,CAAmBL,IAAnB,EAAwB;AACpB,SAAOF,KAAK,CAACG,IAAN,CAAW,SAAX,EAAqBD,IAArB,CAAP;AACH;;AAED,SAAUjB,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMK,IAAI,CAACiB,SAAD,CAAV;;AAFR;AAAA;AAGQ,iBAAMf,GAAG,CAAC;AACNc,YAAAA,IAAI,EAACE;AADC,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOQ,iBAAMhB,GAAG,CAAC;AACNc,YAAAA,IAAI,EAACG,eADC;AAENC,YAAAA,KAAK,EAAC;AAFA,WAAD,CAAT;;AAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUxB,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMO,UAAU,CAACG,aAAD,EAAeZ,KAAf,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUG,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,UAAU,CAACM,cAAD,EAAgBd,MAAhB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAEX,iBAAMC,GAAG,CAAC,CACNE,IAAI,CAACL,UAAD,CADE,EAENK,IAAI,CAACJ,WAAD,CAFE,CAAD,CAAT;;AAFW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["\nimport { all,call,fork,put,takeLatest, take} from 'redux-saga/effects'\nimport {LOGIN_FAIL, LOGIN_REQUEST,LOGIN_SUCCESS,LOGOUT_REQUEST, LOGOUT_SUCCESS} from '../reducers/user'\nimport axios from 'axios'\n\nfunction logInAPI(data){\n    return axios.post('/login',data)\n}\n\nfunction* login(action){\nconst result =yield call(logInAPI,action.data)\ntry{\nyield put({\n    type:LOGIN_SUCCESS,\n    data:action.data\n})\n}catch(err){\n    yield({\n        type:LOGIN_FAIL,\n        data:'error'\n    })\n}\n} \n\n\nfunction logOutAPI(data){\n    return axios.post('/logout',data)\n}\n\nfunction* logout(){\n    try{\n        yield call(logOutAPI)\n        yield put({\n            type:LOG_OUT_SUCCESS,\n        })\n    }catch(err){\n        yield put({\n            type:LOG_OUT_FAILURE,\n            error:'error'\n             \n        })\n    }\n} \n\nfunction* watchLogin(){\n    yield takeLatest(LOGIN_REQUEST,login)\n}\n\nfunction* watchLogout(){\n    yield takeLatest(LOGOUT_SUCCESS,logout)\n}\n\nexport default function* rootSaga(){\n\n    yield all([\n        fork(watchLogin),\n        fork(watchLogout)\n    ])\n\n}"]},"metadata":{},"sourceType":"module"}