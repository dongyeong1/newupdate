{"ast":null,"code":"var _jsxFileName = \"/Users/dong/CapstonProject/pages/polyline.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { Polyline, Marker, StreetViewPanorama, MarkerClusterer } from '@react-google-maps/api';\nimport AppLayout from '../component/AppLayout'; // import Streetview from 'react-google-streetview';// import RecordElevation from '../component/RecordElavation'\n\nimport GeomHandle from '../component/GoogleMap';\nimport { Input } from 'antd';\nimport { InfoWindow } from '@react-google-maps/api'; // import InfoWindow from '../component/InfoWindow';\n\nconst mapContainerStyle = {\n  height: \"400px\",\n  width: \"800px\"\n};\n\nconst call = () => {\n  console.log('cccccc');\n};\n\nconst center = {\n  lat: 35.969997373905,\n  lng: 128.45170755523503\n};\n\nconst onLoad = polyline => {\n  console.log('polyline: ', polyline);\n};\n\nconst path = [[{\n  lat: 35.969997373905,\n  lng: 128.45170755523503\n}, {\n  lat: 35.985501427015464,\n  lng: 128.40407191943035\n}, {\n  lat: 35.89580489690752,\n  lng: 128.62238368221892\n}], [{\n  lat: 35.24651100148735,\n  lng: 128.87070362130143\n}, {\n  lat: 35.24752656439432,\n  lng: 128.8729993854958\n}, {\n  lat: 35.248984786322424,\n  lng: 128.87318007064073\n}, {\n  lat: 35.25018259185734,\n  lng: 128.87332887017186\n}, {\n  lat: 35.25065129355367,\n  lng: 128.87505069331763\n}, {\n  lat: 35.25145581526787,\n  lng: 128.87358573620605\n}]];\nconst markerPosition = [{\n  lat: 35.89580489690752,\n  lng: 128.62238368221892\n}, {\n  lat: 35.25145581526787,\n  lng: 128.87358573620605\n}];\n\nfunction createKey(location) {\n  return location.lat + location.lng;\n}\n\nconst optionss = {\n  imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m' // so you must have m1.png, m2.png, m3.png, m4.png, m5.png and m6.png in that folder\n\n};\n\nfunction polyline() {\n  //InfoWindow\n  const {\n    0: target,\n    1: setTarget\n  } = useState(false);\n  const divStyle = {\n    background: `white`,\n    border: `1px solid #ccc`,\n    padding: 15\n  };\n  const {\n    0: infoPosition,\n    1: setInfoPosition\n  } = useState(''); //InfoWindow\n  //polyline\n\n  const {\n    0: strokeWeight,\n    1: setStrokeWeight\n  } = useState(5);\n\n  const mouseOut = () => {\n    setStrokeWeight(5);\n    console.log('aaa');\n  };\n\n  const mouseOver = () => {\n    setStrokeWeight(10);\n    console.log('over');\n  };\n\n  const polylineClick = positionData => {\n    console.log('click');\n    setTarget(true);\n    console.log('ppp', positionData); // setInfoPosition(positionData[]?\n  };\n\n  const options = {\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.8,\n    strokeWeight: strokeWeight,\n    fillColor: '#FF0000',\n    fillOpacity: 0.35,\n    clickable: true,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: 30000,\n    //-27부터 호주 시작해서 점찍고 점찍고 한다\n    paths: [[{\n      lat: 35.969997373905,\n      lng: 128.45170755523503\n    }, {\n      lat: 35.985501427015464,\n      lng: 128.40407191943035\n    }, {\n      lat: 35.89580489690752,\n      lng: 128.62238368221892\n    }], [{\n      lat: 35.24731788471166,\n      lng: 128.86906207420088\n    }, {\n      lat: 35.260354548127424,\n      lng: 128.81198466603703\n    }]],\n    zIndex: 1\n  }; //polyline\n\n  const {\n    0: mapref,\n    1: setMapRef\n  } = useState(null);\n\n  const handleOnLoad = map => {\n    setMapRef(map);\n    console.log('onLoad');\n  };\n\n  const handleCenterChanged = () => {\n    if (mapref) {\n      const zoom = mapref.getZoom();\n      const lat = mapref.getCenter().lat();\n      const lng = mapref.getCenter().lng();\n      console.log('ddddddd', lat, lng, zoom);\n    }\n  };\n\n  const myLatLng = {\n    lat: -25.363,\n    lng: 131.044\n  }; // const map = new google.maps.Map(document.getElementById(\"map\"), {\n  //   zoom: 4,\n  //   center: myLatLng,\n  // });\n\n  const {\n    0: geom,\n    1: setGeom\n  } = useState({\n    lat: 35.969997373905,\n    lng: 128.45170755523503\n  });\n\n  const handleButton = async () => {\n    const currentAddr = document.getElementById('address').value;\n\n    if (currentAddr) {\n      const {\n        lat,\n        lng\n      } = await GeomHandle(currentAddr);\n      setGeom({\n        lat: lat,\n        lng: lng\n      });\n    }\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }\n  }, __jsx(AppLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 13\n    }\n  }), \"\\uAC80\\uC0C9\\uD558\\uAE30\", __jsx(Input.Search, {\n    id: \"address\",\n    style: {\n      verticalAlign: 'middle',\n      marginLeft: '10px',\n      width: '500px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 105\n    }\n  }), __jsx(\"button\", {\n    onClick: handleButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 9\n    }\n  }, \"\\uD074\\uB9AD\"), __jsx(LoadScript, {\n    googleMapsApiKey: \"AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }\n  }, __jsx(GoogleMap, {\n    id: \"marker-example\",\n    mapContainerStyle: mapContainerStyle,\n    zoom: 14,\n    center: geom,\n    onLoad: handleOnLoad,\n    onDragEnd: handleCenterChanged,\n    onZoomChanged: handleCenterChanged,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 11\n    }\n  }, __jsx(MarkerClusterer, {\n    options: optionss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 1\n    }\n  }, clusterer => markerPosition.map(p => __jsx(Marker, {\n    key: createKey(p),\n    position: p,\n    onClick: call,\n    clusterer: clusterer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 15\n    }\n  }))), __jsx(Marker, {\n    position: {\n      lat: 35.25018259185734,\n      lng: 128.87332887017186\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 9\n    }\n  }), path.map(m => __jsx(Polyline, {\n    onRightClick: polylineClick(m),\n    onMouseOver: mouseOver,\n    onMouseOut: mouseOut,\n    onLoad: onLoad,\n    options: options,\n    path: m,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 13\n    }\n  })), target && __jsx(InfoWindow, {\n    position: infoPosition,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 14\n    }\n  }, __jsx(\"div\", {\n    style: divStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 13\n    }\n  }, \"\\uB3D9\\uC601\"))))));\n}\n\nexport default /*#__PURE__*/React.memo(polyline);","map":{"version":3,"sources":["/Users/dong/CapstonProject/pages/polyline.js"],"names":["React","useState","useEffect","GoogleMap","LoadScript","Polyline","Marker","StreetViewPanorama","MarkerClusterer","AppLayout","GeomHandle","Input","InfoWindow","mapContainerStyle","height","width","call","console","log","center","lat","lng","onLoad","polyline","path","markerPosition","createKey","location","optionss","imagePath","target","setTarget","divStyle","background","border","padding","infoPosition","setInfoPosition","strokeWeight","setStrokeWeight","mouseOut","mouseOver","polylineClick","positionData","options","strokeColor","strokeOpacity","fillColor","fillOpacity","clickable","draggable","editable","visible","radius","paths","zIndex","mapref","setMapRef","handleOnLoad","map","handleCenterChanged","zoom","getZoom","getCenter","myLatLng","geom","setGeom","handleButton","currentAddr","document","getElementById","value","verticalAlign","marginLeft","clusterer","p","m","memo"],"mappings":"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","sourcesContent":["import React, {useState,useEffect} from 'react'\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { Polyline ,Marker,StreetViewPanorama,MarkerClusterer} from '@react-google-maps/api';\nimport AppLayout from '../component/AppLayout';\n// import Streetview from 'react-google-streetview';// import RecordElevation from '../component/RecordElavation'\n\nimport GeomHandle from '../component/GoogleMap'\nimport { Input } from 'antd';\nimport { InfoWindow } from '@react-google-maps/api';\n// import InfoWindow from '../component/InfoWindow';\n\n\n\n\n\n\nconst mapContainerStyle = {\n  height: \"400px\",\n  width: \"800px\"\n};\n\nconst call=()=>{\n    console.log('cccccc')\n}\n\nconst center = {lat:  35.969997373905, lng: 128.45170755523503};\n\nconst onLoad = polyline => {\n  console.log('polyline: ', polyline)\n};\n\n\n\nconst path = [\n[\n    {lat:  35.969997373905, lng: 128.45170755523503},\n    {lat:35.985501427015464, lng:128.40407191943035},\n\n    {lat: 35.89580489690752, lng: 128.62238368221892}\n    \n]\n,\n[\n    {lat:  35.24651100148735,   lng: 128.87070362130143},\n   \n    {lat: 35.24752656439432,   lng:128.8729993854958},\n    {lat:35.248984786322424, lng:128.87318007064073},\n    {lat:35.25018259185734, lng:128.87332887017186},\n    {lat:35.25065129355367, lng:128.87505069331763},\n    {\n        lat:35.25145581526787, lng:128.87358573620605\n    }\n\n    \n]\n\n\n   \n    \n];\n\nconst markerPosition=[\n    {lat: 35.89580489690752, lng: 128.62238368221892},{\n        lat:35.25145581526787, lng:128.87358573620605\n    }\n]\n\n\nfunction createKey(location) {\n    return location.lat + location.lng\n  }\n\n\nconst optionss = {\n    imagePath:\n      'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m', // so you must have m1.png, m2.png, m3.png, m4.png, m5.png and m6.png in that folder\n  }\n\n\nfunction polyline() {\n\n\n//InfoWindow\nconst [target,setTarget]=useState(false)\n\nconst divStyle = {\n    background: `white`,\n    border: `1px solid #ccc`,\n    padding: 15\n  }\n\nconst [infoPosition,setInfoPosition]=useState('')\n\n\n//InfoWindow\n\n    //polyline\n\nconst [strokeWeight,setStrokeWeight]=useState(5)\n\nconst mouseOut=()=>{\n    setStrokeWeight(5)\n    console.log('aaa')\n}\n\nconst mouseOver=()=>{\n    setStrokeWeight(10)\n    console.log('over')\n}\nconst polylineClick=(positionData)=>{\n    console.log('click')\n    setTarget(true)\n    console.log('ppp',positionData)\n    // setInfoPosition(positionData[]?\n}\n\nconst options = {\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.8,\n    strokeWeight: strokeWeight,\n    fillColor: '#FF0000',\n    fillOpacity: 0.35,\n    clickable: true,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: 30000,\n    //-27부터 호주 시작해서 점찍고 점찍고 한다\n    paths: [\n      \n          [\n              {lat:  35.969997373905, lng: 128.45170755523503},\n              {lat:35.985501427015464, lng:128.40407191943035},\n          \n              {lat: 35.89580489690752, lng: 128.62238368221892}\n              \n          ]\n          ,\n          [\n              {lat:  35.24731788471166,  lng: 128.86906207420088},\n             \n              {lat: 35.260354548127424,  lng:128.81198466603703}\n              \n          ]\n        \n    \n      \n    ],\n    zIndex: 1\n  };\n\n\n\n//polyline\n\n\n\n\n\n    const [mapref, setMapRef] = useState(null);\n    const handleOnLoad = map => {\n      setMapRef(map);\n      console.log('onLoad')\n    };\n    const handleCenterChanged = () => {\n      if (mapref) {\n        const zoom=mapref.getZoom()\n        const lat = mapref.getCenter().lat();\n        const lng = mapref.getCenter().lng();\n        console.log('ddddddd',lat,lng,zoom);\n      }\n    };\n\n    \n\n    \n   \n\n  \n\n\n    const myLatLng = { lat: -25.363, lng: 131.044 };\n    // const map = new google.maps.Map(document.getElementById(\"map\"), {\n    //   zoom: 4,\n    //   center: myLatLng,\n    // });\n    const [geom ,setGeom]=useState({lat:35.969997373905, lng: 128.45170755523503})\n\n    const handleButton = async() => {\n        const currentAddr = document.getElementById('address').value\n        if (currentAddr){\n          const {lat, lng} = await GeomHandle(currentAddr)\n          setGeom({lat:lat,lng:lng})\n       \n        }\n      }\n\n      \n  \n    return (\n        <div>\n            <AppLayout></AppLayout>        \n         검색하기\n        <Input.Search id=\"address\"  style={{verticalAlign:'middle' ,marginLeft:'10px',width:'500px'}} /><br></br>\n        <button onClick={handleButton}>클릭</button>\n              \n\n        <LoadScript\n        googleMapsApiKey=\"AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE\"\n        >\n            \n          <GoogleMap\n            id=\"marker-example\"\n            mapContainerStyle={mapContainerStyle}\n            zoom={14}\n            center={geom}\n            onLoad={handleOnLoad}\n            onDragEnd={handleCenterChanged}\n            onZoomChanged={handleCenterChanged}\n          \n            \n          >\n\n<MarkerClusterer options={optionss}>\n          {(clusterer) =>\n            markerPosition.map((p) => (\n              <Marker key={createKey(p)} position={p} onClick={call} clusterer={clusterer} />\n            ))\n          }\n        </MarkerClusterer>\n        <Marker position={{lat:35.25018259185734, lng:128.87332887017186}}  ></Marker>\n        {/* {path.map((p)=>{\n            \n        })} */}\n\n        {path.map((m)=>(\n            <Polyline onRightClick={polylineClick(m)} onMouseOver={mouseOver} onMouseOut={mouseOut} onLoad={onLoad}  options={options} path={m}></Polyline>\n            \n            ))}\n             {/* <StreetViewPanorama\n      position={center}\n      visible={true}\n    /> */}\n    {target&&<InfoWindow position={infoPosition}>\n        <div style={divStyle}>\n            <h1>동영</h1>\n        </div>\n        </InfoWindow>}\n        \n\n        \n       \n            \n          </GoogleMap>\n          </LoadScript>\n               {/* <div className=\"chart\">\n           {graphData && (\n             <RecordElevation graphData={graphData} setPosition={setPosition} />\n           )}\n\n         </div> */}\n         {/* <Streetview address=\"경남김해시\" APIkey=\"AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE\" zoomLevel={15}/> */}\n         </div>\n\n    )\n  }\n  \n  export default React.memo(polyline)"]},"metadata":{},"sourceType":"module"}