{"ast":null,"code":"var _jsxFileName = \"/Users/dong/CapstonProject/component/map/selectMap.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { Polyline, Marker, StreetViewPanorama, MarkerClusterer } from '@react-google-maps/api';\nimport { InfoWindow } from '@react-google-maps/api';\nimport Router from 'next/router';\nimport { LOAD_MAP_REQUEST } from '../../reducers/map';\nimport { MOVING_MAP_REQUEST, BIKE_MAP_REQUEST, RUNNING_MAP_REQUEST } from '../../reducers/map';\nimport { Input, Button } from 'antd';\nimport GeomHandle from '../GoogleMap';\n\nfunction selectMap({}) {\n  ///주소검색\n  const {\n    0: geom,\n    1: setGeom\n  } = useState({\n    lat: 35.969997373905,\n    lng: 128.45170755523503\n  });\n\n  const handleButton = async () => {\n    const currentAddr = document.getElementById('address').value;\n\n    if (currentAddr) {\n      const {\n        lat,\n        lng\n      } = await GeomHandle(currentAddr);\n      setGeom({\n        lat: lat,\n        lng: lng\n      });\n      dispatch({\n        type: SEARCH_MAP_REQUEST,\n        data: '1'\n      });\n      console.log('aaa', searchMap);\n    }\n  }; //주소검색\n\n\n  const dispatch = useDispatch();\n  const mapContainerStyle = {\n    height: \"400px\",\n    width: \"800px\"\n  };\n  const {\n    searchMap\n  } = useSelector(state => state.map); // const [geom ,setGeom]=useState({lat:35.969997373905, lng: 128.45170755523503})\n\n  const {\n    0: mapref,\n    1: setMapRef\n  } = useState(null);\n\n  const handleOnLoad = map => {\n    setMapRef(map);\n  };\n\n  const {\n    0: nelat,\n    1: setNelat\n  } = useState();\n  const {\n    0: nelng,\n    1: setNelng\n  } = useState();\n  const {\n    0: swlat,\n    1: setSwlat\n  } = useState();\n  const {\n    0: swlng,\n    1: setSwlng\n  } = useState();\n\n  const handleCenterChanged = () => {\n    if (mapref) {\n      var zoom = mapref.getZoom();\n      var nt = mapref.getBounds().getNorthEast().lat();\n      var ng = mapref.getBounds().getNorthEast().lng();\n      var st = mapref.getBounds().getSouthWest().lat();\n      var sg = mapref.getBounds().getSouthWest().lng();\n      setNelat(nt);\n      setNelng(ng);\n      setSwlat(st);\n      setSwlng(sg); //   console.log('zoom',zoom);\n      //   console.log('north', ne)\n      //   console.log('south',sw,',',sw)\n    }\n\n    dispatch({\n      type: MOVING_MAP_REQUEST,\n      data: {\n        north: {\n          lat: nelat,\n          lng: nelng\n        },\n        south: {\n          lat: swlat,\n          lng: swlng\n        }\n      }\n    });\n  }; //////markercluseter\n\n\n  const optionss = {\n    imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m' // so you must have m1.png, m2.png, m3.png, m4.png, m5.png and m6.png in that folder\n\n  };\n\n  function createKey(location) {\n    return location.lat + location.lng;\n  } //////markercluseter\n  //polyline\n\n\n  const {\n    0: infoPosition,\n    1: setInfoPosition\n  } = useState({\n    lat: '',\n    lng: ''\n  });\n  const {\n    0: target,\n    1: setTarget\n  } = useState(false);\n  const {\n    0: strokeWeight,\n    1: setStrokeWeight\n  } = useState(Array.from({\n    length: searchMap.length\n  }, () => 5));\n  const strokeWeights = Array.from({\n    length: searchMap.length\n  }, () => 5);\n\n  const polylineClick = positionData => {\n    setInfoPosition({\n      lat: positionData.gps.coordinates[3][1],\n      lng: positionData.gps.coordinates[3][0]\n    });\n    setPropsId(positionData.id);\n    setPropsPosition(positionData);\n    setTarget(true);\n  };\n\n  function mouseOver(index) {\n    console.log('ssss', strokeWeight);\n    strokeWeights[index] = 10;\n    setStrokeWeight(strokeWeights);\n    console.log('over');\n  }\n\n  function mouseOut(index) {\n    strokeWeights[index] = 5;\n    setStrokeWeight(strokeWeights);\n    console.log('aaa');\n  } //polyline\n  //infoWindow\n\n\n  const closeClick = () => {\n    setTarget(false);\n  };\n\n  const divStyle = {\n    background: `white`,\n    border: `1px solid #ccc`,\n    padding: 15\n  };\n\n  const oneRoute = () => {\n    dispatch({\n      type: LOAD_MAP_REQUEST,\n      data: propsId\n    });\n    Router.push({\n      pathname: '/Route/[id]',\n      query: {\n        id: propsId\n      }\n    });\n    console.log('dong', searchMap);\n  }; //infoWindow\n\n\n  const {\n    0: mapState,\n    1: setMapState\n  } = useState(); // const {mapState}=useSelector((state)=>state.map)\n\n  const bikeSelectMap = () => {\n    setMapState(true);\n  };\n\n  const runningSelectMap = () => {\n    setMapState(false);\n  };\n\n  useEffect(() => {\n    if (mapState === true) {\n      dispatch({\n        type: BIKE_MAP_REQUEST,\n        data: {\n          event: 'B',\n          north: {\n            lat: nelat,\n            lng: nelng\n          },\n          south: {\n            lat: swlat,\n            lng: swlng\n          }\n        }\n      });\n    } else if (mapState === false) {\n      dispatch({\n        type: RUNNING_MAP_REQUEST,\n        data: {\n          event: 'R',\n          north: {\n            lat: nelat,\n            lng: nelng\n          },\n          south: {\n            lat: swlat,\n            lng: swlng\n          }\n        }\n      });\n    }\n  }, [mapState]);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 5\n    }\n  }, __jsx(Input.Search, {\n    id: \"address\",\n    style: {\n      verticalAlign: 'middle',\n      marginLeft: '10px',\n      width: '500px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 1\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 97\n    }\n  }), __jsx(Button, {\n    onClick: handleButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 9\n    }\n  }, \"\\uD074\\uB9AD\"), __jsx(Button, {\n    onClick: bikeSelectMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 1\n    }\n  }, \"\\uC790\\uC804\\uAC70s\"), __jsx(Button, {\n    onClick: runningSelectMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 9\n    }\n  }, \"\\uB2EC\\uB9AC\\uAE30s\"), __jsx(LoadScript, {\n    googleMapsApiKey: \"AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 1\n    }\n  }, __jsx(GoogleMap, {\n    id: \"marker-example\",\n    mapContainerStyle: mapContainerStyle,\n    zoom: 13,\n    center: geom,\n    onLoad: handleOnLoad,\n    onDragEnd: handleCenterChanged // onZoomChanged={handleCenterChanged}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 11\n    }\n  }, __jsx(MarkerClusterer, {\n    options: optionss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 1\n    }\n  }, clusterer => searchMap.map(p => __jsx(Marker, {\n    key: createKey(p),\n    position: {\n      lat: p.start_latlng[1],\n      lng: p.start_latlng[0]\n    },\n    clusterer: clusterer,\n    icon: {\n      scaledSize: new google.maps.Size(30, 30)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 15\n    }\n  }))), searchMap.map((m, index) => __jsx(Polyline, {\n    onRightClick: () => polylineClick(m),\n    onMouseOver: () => mouseOver(index),\n    onMouseOut: () => mouseOut(index),\n    options: {\n      strokeWeight: strokeWeight[index],\n      clickable: true,\n      visible: true,\n      strokeColor: '#FF0000',\n      fillColor: '#FF0000'\n    },\n    path: m.gps.coordinates.map(p => ({\n      lat: p[1],\n      lng: p[0]\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 13\n    }\n  })), target && __jsx(InfoWindow, {\n    position: infoPosition,\n    onCloseClick: closeClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 14\n    }\n  }, __jsx(\"div\", {\n    style: divStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 13\n    }\n  }, \"\\uB3D9\\uC601\"), __jsx(\"button\", {\n    onClick: oneRoute,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 13\n    }\n  }, \"\\uC0C1\\uC138\\uBCF4\\uAE30\"))))));\n}\n\nexport default selectMap;","map":{"version":3,"sources":["/Users/dong/CapstonProject/component/map/selectMap.js"],"names":["React","useState","useEffect","useDispatch","useSelector","GoogleMap","LoadScript","Polyline","Marker","StreetViewPanorama","MarkerClusterer","InfoWindow","Router","LOAD_MAP_REQUEST","MOVING_MAP_REQUEST","BIKE_MAP_REQUEST","RUNNING_MAP_REQUEST","Input","Button","GeomHandle","selectMap","geom","setGeom","lat","lng","handleButton","currentAddr","document","getElementById","value","dispatch","type","SEARCH_MAP_REQUEST","data","console","log","searchMap","mapContainerStyle","height","width","state","map","mapref","setMapRef","handleOnLoad","nelat","setNelat","nelng","setNelng","swlat","setSwlat","swlng","setSwlng","handleCenterChanged","zoom","getZoom","nt","getBounds","getNorthEast","ng","st","getSouthWest","sg","north","south","optionss","imagePath","createKey","location","infoPosition","setInfoPosition","target","setTarget","strokeWeight","setStrokeWeight","Array","from","length","strokeWeights","polylineClick","positionData","gps","coordinates","setPropsId","id","setPropsPosition","mouseOver","index","mouseOut","closeClick","divStyle","background","border","padding","oneRoute","propsId","push","pathname","query","mapState","setMapState","bikeSelectMap","runningSelectMap","event","verticalAlign","marginLeft","clusterer","p","start_latlng","scaledSize","google","maps","Size","m","clickable","visible","strokeColor","fillColor"],"mappings":"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","sourcesContent":["import React, {useState,useEffect} from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { Polyline ,Marker,StreetViewPanorama,MarkerClusterer} from '@react-google-maps/api';\nimport { InfoWindow } from '@react-google-maps/api';\nimport Router from 'next/router'\nimport {LOAD_MAP_REQUEST} from '../../reducers/map'\nimport { MOVING_MAP_REQUEST,BIKE_MAP_REQUEST,RUNNING_MAP_REQUEST } from '../../reducers/map';\nimport {Input,Button} from 'antd'\nimport GeomHandle from '../GoogleMap'\n\nfunction selectMap({}) {\n\n    ///주소검색\n\n    const [geom ,setGeom]=useState({lat:35.969997373905, lng: 128.45170755523503})\n\n\n    const handleButton = async() => {\n        const currentAddr = document.getElementById('address').value\n        if (currentAddr){\n          const {lat, lng} = await GeomHandle(currentAddr)\n          setGeom({lat:lat,lng:lng})\n\n          dispatch({\n            type:SEARCH_MAP_REQUEST,\n            data:'1'\n        })\n        console.log('aaa',searchMap)\n\n\n\n       \n        }\n      }\n\n\n    //주소검색\n\n    const dispatch=useDispatch()\n\n\n\nconst mapContainerStyle = {\n    height: \"400px\",\n    width: \"800px\"\n  };\n  \n\n    const {searchMap}=useSelector((state)=>state.map)\n\n    // const [geom ,setGeom]=useState({lat:35.969997373905, lng: 128.45170755523503})\n    const [mapref, setMapRef] = useState(null);\n\n\n    const handleOnLoad = map => {\n        setMapRef(map);\n        \n      };\n\n      const [nelat,setNelat]=useState()\n      const [nelng,setNelng]=useState()\n\n      const [swlat,setSwlat]=useState()\n      const [swlng,setSwlng]=useState()\n\n\n\n      const handleCenterChanged = () => {\n        if (mapref) {\n          var zoom=mapref.getZoom()\n          var nt=mapref.getBounds().getNorthEast().lat();\n          var ng=mapref.getBounds().getNorthEast().lng();\n\n          var st=mapref.getBounds().getSouthWest().lat();\n          var sg=mapref.getBounds().getSouthWest().lng();\n\n          setNelat(nt)\n          setNelng(ng)\n          setSwlat(st)\n          setSwlng(sg)\n\n        //   console.log('zoom',zoom);\n        //   console.log('north', ne)\n        //   console.log('south',sw,',',sw)\n        }\n\n        dispatch({ \n          type:MOVING_MAP_REQUEST,\n          data:{\n            north:{\n              lat:nelat,\n              lng:nelng\n            },\n            south:{\n              lat:swlat,\n              lng:swlng\n            },\n  \n          }\n        })\n      \n      }\n\n      //////markercluseter\n\n\nconst optionss = {\n    imagePath:\n      'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m', // so you must have m1.png, m2.png, m3.png, m4.png, m5.png and m6.png in that folder\n  }\n\n\nfunction createKey(location) {\n    return location.lat + location.lng\n  }\n\n      //////markercluseter\n\n      //polyline\n\n      const [infoPosition,setInfoPosition]=useState({\n        lat:'',\n        lng:'',\n    })\n    \n      const [target,setTarget]=useState(false)\n\n\n      const [strokeWeight,setStrokeWeight]=useState(Array.from({length: searchMap.length}, () => 5))\n      const strokeWeights= Array.from({length: searchMap.length}, () => 5);\n\n\n      const polylineClick=(positionData)=>{\n     \n    \n        setInfoPosition({\n            lat:positionData.gps.coordinates[3][1],\n            lng:positionData.gps.coordinates[3][0]\n        })\n        setPropsId(positionData.id)\n        setPropsPosition(positionData)\n        setTarget(true)\n        \n    }\n    \n\nfunction mouseOver(index){\n    console.log('ssss',strokeWeight)\n    strokeWeights[index]=10\n    setStrokeWeight(strokeWeights)\n    console.log('over')\n}\n\nfunction mouseOut(index){\n    strokeWeights[index]=5\n    setStrokeWeight(strokeWeights)\n    console.log('aaa')\n\n}\n\n      //polyline\n\n      //infoWindow\n      const closeClick=()=>{\n        setTarget(false)\n    }\n\n\nconst divStyle = {\n    background: `white`,\n    border: `1px solid #ccc`,\n    padding: 15\n  }\n\n\n  const oneRoute=()=>{\n    dispatch({\n               type:LOAD_MAP_REQUEST,\n               data:propsId\n             })\n    Router.push({\n        pathname: '/Route/[id]',\n        query: {id:propsId},\n      });\n\n      console.log('dong',searchMap)\n}\n\n\n      //infoWindow\n\n      const [mapState,setMapState]=useState()\n    // const {mapState}=useSelector((state)=>state.map)\n    const bikeSelectMap=()=>{\n        setMapState(true)\n    }\n\n    const runningSelectMap=()=>{\n        setMapState(false)\n    }\n   \n\n    useEffect(()=>{\n\n\n\n        if(mapState===true){\n            dispatch({\n                type:BIKE_MAP_REQUEST,\n                data:{\n                    event:'B',\n                    north:{\n                        lat:nelat,\n                        lng:nelng\n                      },\n                      south:{\n                        lat:swlat,\n                        lng:swlng\n                      },\n            \n                }\n            })\n        }else if(mapState===false){\n            dispatch({\n                type:RUNNING_MAP_REQUEST,\n                data:{\n                    event:'R',\n                    north:{\n                        lat:nelat,\n                        lng:nelng\n                      },\n                      south:{\n                        lat:swlat,\n                        lng:swlng\n                      },\n                }\n            })\n\n        }\n    },[mapState])\n\n\n\n  \n    \n\n\n  return (\n    <div>\n\n<Input.Search id=\"address\"  style={{verticalAlign:'middle' ,marginLeft:'10px',width:'500px'}} /><br></br>\n        <Button onClick={handleButton}>클릭</Button>\n        \n\n<Button onClick={bikeSelectMap}>자전거s</Button>\n        <Button onClick={runningSelectMap}>달리기s</Button> \n\n<LoadScript\n        googleMapsApiKey=\"AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE\"\n        >\n            \n          <GoogleMap\n            id=\"marker-example\"\n            mapContainerStyle={mapContainerStyle}\n            zoom={13}\n            center={geom}\n            onLoad={handleOnLoad}\n            onDragEnd={handleCenterChanged}\n            // onZoomChanged={handleCenterChanged}\n          >\n\n<MarkerClusterer options={optionss}>\n          {(clusterer) =>\n            searchMap.map((p) => (\n              <Marker  key={createKey(p)} position={{lat:p.start_latlng[1],lng:p.start_latlng[0]}} clusterer={clusterer}  icon={{\n              scaledSize: new google.maps.Size(30,30),} } />\n            ))\n          }\n        </MarkerClusterer>\n      \n\n        {searchMap.map((m,index)=>(\n            <Polyline  onRightClick={()=>polylineClick(m)} onMouseOver={()=>mouseOver(index)} onMouseOut={()=>mouseOut(index)}  options={{strokeWeight:strokeWeight[index],clickable:true,visible:true,strokeColor: '#FF0000',fillColor: '#FF0000',}} path={m.gps.coordinates.map((p)=>(\n                {\n                    lat:p[1],\n                    lng:p[0]\n                }\n            ))}></Polyline>\n            \n            ))}\n            \n    {target&&<InfoWindow position={infoPosition} onCloseClick={closeClick}>\n        <div style={divStyle}>\n            <h1>동영</h1>\n                {/* <Link href={{\n                    pathname:'/Route/[id]',\n                    query: {id:propsId},\n                }}><a>상세보기</a></Link> */}\n            <button onClick={oneRoute}>상세보기</button>\n        </div>\n        </InfoWindow>} \n         \n\n        \n       \n            \n          </GoogleMap>\n          </LoadScript>\n             \n\n    </div>\n  )\n}\n\nexport default selectMap"]},"metadata":{},"sourceType":"module"}