{"ast":null,"code":"import { all, call, fork, put, takeLatest, take } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { SEARCH_MAP_REQUEST, SEARCH_MAP_SUCCESS, SEARCH_MAP_FAILURE, LOAD_MAP_REQUEST, LOAD_MAP_SUCCESS, LOAD_MAP_FAILURE, MOVING_MAP_SUCCESS, MOVING_MAP_REQUEST, MOVING_MAP_FAILURE, RUNNING_MAP_FAILURE, RUNNING_MAP_SUCCESS, RUNNING_MAP_REQUEST, BIKE_MAP_REQUEST, BIKE_MAP_SUCCESS, BIKE_MAP_FAILURE } from '../reducers/map';\n\nfunction searchMapAPI(data) {\n  // 13.124.24.179/api/track/search?bounds=128.4642505645752&bounds=35.8402903083385&bounds=128.5250186920166&bounds=128.5250186920166&zoom=16&event=B\n  // return axios.get(`http://13.124.24.179/api/track/search?bounds=${data.north.lng}&bounds=${data.north.lat}&bounds=${data.south.lng}&bounds=${data.south.lat}&event=${data.event}`)\n  return axios.get(`http://13.124.24.179/api/track/search?bounds=128.4642505645752&bounds=35.8402903083385&bounds=128.5250186920166&bounds=128.5250186920166&zoom=16&event=B`);\n}\n\nfunction* searchMap(action) {\n  try {\n    const result = yield call(searchMapAPI, action.data);\n    yield put({\n      type: SEARCH_MAP_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: SEARCH_MAP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadMapAPI(data) {// return axios.post('/searchmap',data)\n}\n\nfunction* loadMap(action) {\n  try {\n    // const result = yield call(loadPostsAPI,action.data)\n    yield put({\n      type: LOAD_MAP_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_MAP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction movingMapAPI(data) {// return axios.post('/searchmap',data)\n}\n\nfunction* movingMap(action) {\n  try {\n    // const result = yield call(loadPostsAPI,action.data)\n    yield put({\n      type: MOVING_MAP_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: MOVING_MAP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction runningMapAPI(data) {// return axios.post('/searchmap',data)\n}\n\nfunction* runningMap(action) {\n  try {\n    // const result = yield call(loadPostsAPI,action.data)\n    yield put({\n      type: RUNNING_MAP_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: RUNNING_MAP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction bikeMapAPI(data) {// return axios.post('/searchmap',data)\n}\n\nfunction* bikeMap(action) {\n  try {\n    // const result = yield call(loadPostsAPI,action.data)\n    yield put({\n      type: BIKE_MAP_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: BIKE_MAP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchSearchMap() {\n  yield takeLatest(SEARCH_MAP_REQUEST, searchMap);\n}\n\nfunction* wahchLoadMap() {\n  yield takeLatest(LOAD_MAP_REQUEST, loadMap);\n}\n\nfunction* watchMovingMap() {\n  yield takeLatest(MOVING_MAP_REQUEST, movingMap);\n}\n\nfunction* watchBikeMap() {\n  yield takeLatest(BIKE_MAP_REQUEST, bikeMap);\n}\n\nfunction* watchRunningMap() {\n  yield takeLatest(RUNNING_MAP_REQUEST, runningMap);\n}\n\nexport default function* rootSaga() {\n  yield all([fork(watchSearchMap), fork(wahchLoadMap), fork(watchMovingMap), fork(watchBikeMap), fork(watchRunningMap)]);\n}","map":{"version":3,"sources":["/Users/dong/CapstonProject/sagas/map.js"],"names":["all","call","fork","put","takeLatest","take","axios","SEARCH_MAP_REQUEST","SEARCH_MAP_SUCCESS","SEARCH_MAP_FAILURE","LOAD_MAP_REQUEST","LOAD_MAP_SUCCESS","LOAD_MAP_FAILURE","MOVING_MAP_SUCCESS","MOVING_MAP_REQUEST","MOVING_MAP_FAILURE","RUNNING_MAP_FAILURE","RUNNING_MAP_SUCCESS","RUNNING_MAP_REQUEST","BIKE_MAP_REQUEST","BIKE_MAP_SUCCESS","BIKE_MAP_FAILURE","searchMapAPI","data","get","searchMap","action","result","type","err","error","response","loadMapAPI","loadMap","movingMapAPI","movingMap","runningMapAPI","runningMap","bikeMapAPI","bikeMap","watchSearchMap","wahchLoadMap","watchMovingMap","watchBikeMap","watchRunningMap","rootSaga"],"mappings":"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","sourcesContent":["import { all,call,fork,put,takeLatest, take} from 'redux-saga/effects'\nimport axios from 'axios'\nimport { SEARCH_MAP_REQUEST ,\nSEARCH_MAP_SUCCESS,\nSEARCH_MAP_FAILURE,\nLOAD_MAP_REQUEST,\nLOAD_MAP_SUCCESS,\nLOAD_MAP_FAILURE,\nMOVING_MAP_SUCCESS,\nMOVING_MAP_REQUEST,\nMOVING_MAP_FAILURE,\nRUNNING_MAP_FAILURE,\nRUNNING_MAP_SUCCESS,\nRUNNING_MAP_REQUEST,\nBIKE_MAP_REQUEST,\nBIKE_MAP_SUCCESS,\nBIKE_MAP_FAILURE\n} from '../reducers/map'\n\n\n\nfunction searchMapAPI(data){\n    // 13.124.24.179/api/track/search?bounds=128.4642505645752&bounds=35.8402903083385&bounds=128.5250186920166&bounds=128.5250186920166&zoom=16&event=B\n    // return axios.get(`http://13.124.24.179/api/track/search?bounds=${data.north.lng}&bounds=${data.north.lat}&bounds=${data.south.lng}&bounds=${data.south.lat}&event=${data.event}`)\n    return axios.get(`http://13.124.24.179/api/track/search?bounds=128.4642505645752&bounds=35.8402903083385&bounds=128.5250186920166&bounds=128.5250186920166&zoom=16&event=B`)\n    }\n    \n\nfunction* searchMap(action){\n    try{\n        const result = yield call(searchMapAPI,action.data)\n        yield put({\n            type:SEARCH_MAP_SUCCESS,\n            data:result.data\n        })\n\n    }catch(err){\n        yield put({\n            type:SEARCH_MAP_FAILURE,\n            error:err.response.data,\n             \n        })\n\n    }\n}\n\n\nfunction loadMapAPI(data){\n    // return axios.post('/searchmap',data)\n    }\n    \n\nfunction* loadMap(action){\n    try{\n        // const result = yield call(loadPostsAPI,action.data)\n        yield put({\n            type:LOAD_MAP_SUCCESS,\n            data:action.data\n        })\n\n    }catch(err){\n        yield put({\n            type:LOAD_MAP_FAILURE,\n            error:err.response.data,\n             \n        })\n\n    }\n}\n\nfunction movingMapAPI(data){\n    // return axios.post('/searchmap',data)\n    }\n    \n\nfunction* movingMap(action){\n    try{\n        // const result = yield call(loadPostsAPI,action.data)\n        yield put({\n            type:MOVING_MAP_SUCCESS,\n            data:action.data\n        })\n\n    }catch(err){\n        yield put({\n            type:MOVING_MAP_FAILURE,\n            error:err.response.data,\n        })\n\n    }\n}\n\nfunction runningMapAPI(data){\n    // return axios.post('/searchmap',data)\n    }\n    \n\nfunction* runningMap(action){\n    try{\n        // const result = yield call(loadPostsAPI,action.data)\n        yield put({\n            type:RUNNING_MAP_SUCCESS,\n            data:action.data\n        })\n\n    }catch(err){\n        yield put({\n            type:RUNNING_MAP_FAILURE,\n            error:err.response.data,\n        })\n\n    }\n}\n\n\nfunction bikeMapAPI(data){\n    // return axios.post('/searchmap',data)\n    }\n    \n\nfunction* bikeMap(action){\n    try{\n        // const result = yield call(loadPostsAPI,action.data)\n        yield put({\n            type:BIKE_MAP_SUCCESS,\n            data:action.data\n        })\n\n    }catch(err){\n        yield put({\n            type:BIKE_MAP_FAILURE,\n            error:err.response.data,\n        })\n\n    }\n}\n\n\n\nfunction* watchSearchMap(){\n    yield takeLatest(SEARCH_MAP_REQUEST,searchMap)\n}\n\nfunction* wahchLoadMap(){\n    yield takeLatest(LOAD_MAP_REQUEST,loadMap)\n}\n\nfunction* watchMovingMap(){\n    yield takeLatest(MOVING_MAP_REQUEST,movingMap)\n}\n\nfunction* watchBikeMap(){\n    yield takeLatest(BIKE_MAP_REQUEST,bikeMap)\n}\n\nfunction* watchRunningMap(){\n    yield takeLatest(RUNNING_MAP_REQUEST,runningMap)\n}\n\n\n\n\nexport default function* rootSaga(){\n\n    yield all([\n        fork(watchSearchMap),\n        fork(wahchLoadMap),\n        fork(watchMovingMap),\n        fork(watchBikeMap),\n        fork(watchRunningMap)\n\n      \n    ])\n\n}\n"]},"metadata":{},"sourceType":"module"}