{"ast":null,"code":"var _jsxFileName = \"/Users/dong/CapstonProject/pages/polylineTest.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { Polyline, Marker, StreetViewPanorama, MarkerClusterer } from '@react-google-maps/api';\nimport AppLayout from '../component/AppLayout'; // import Streetview from 'react-google-streetview';// import RecordElevation from '../component/RecordElavation'\n\nimport { SEARCH_MAP_REQUEST } from '../reducers/map';\nimport { LOAD_MAP_REQUEST } from '../reducers/map';\nimport GeomHandle from '../component/GoogleMap';\nimport { Input, Col, Row, Button } from 'antd';\nimport SideBar from '../component/Layout/SideBar';\nimport { InfoWindow } from '@react-google-maps/api';\nimport Router from 'next/router'; // import {useHistory} from \n\nimport Link from 'next/link';\nimport SelectMap from '../component/map/selectMap'; // import InfoWindow from '../component/InfoWindow';\n\nconst iconPin = {\n  path: 'https://png.pngtree.com/png-clipart/20190921/original/pngtree-label-free-png-picture-png-image_4700172.jpg',\n  scale: 1\n};\nconst mapContainerStyle = {\n  height: \"400px\",\n  width: \"800px\"\n};\n\nconst call = () => {\n  console.log('cccccc');\n};\n\nconst center = {\n  lat: 35.969997373905,\n  lng: 128.45170755523503\n};\nconst path = [[{\n  lat: 35.969997373905,\n  lng: 128.45170755523503\n}, {\n  lat: 35.985501427015464,\n  lng: 128.40407191943035\n}, {\n  lat: 35.89580489690752,\n  lng: 128.62238368221892\n}], [{\n  lat: 35.24651100148735,\n  lng: 128.87070362130143\n}, {\n  lat: 35.24752656439432,\n  lng: 128.8729993854958\n}, {\n  lat: 35.248984786322424,\n  lng: 128.87318007064073\n}, {\n  lat: 35.25018259185734,\n  lng: 128.87332887017186\n}, {\n  lat: 35.25065129355367,\n  lng: 128.87505069331763\n}, {\n  lat: 35.25145581526787,\n  lng: 128.87358573620605\n}]];\nconst markerPosition = [{\n  lat: 35.89580489690752,\n  lng: 128.62238368221892\n}, {\n  lat: 35.25145581526787,\n  lng: 128.87358573620605\n}];\n\nfunction createKey(location) {\n  return location.lat + location.lng;\n}\n\nconst optionss = {\n  imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m' // so you must have m1.png, m2.png, m3.png, m4.png, m5.png and m6.png in that folder\n\n};\n\nfunction polylineTest() {\n  //////\n  const {\n    searchMap\n  } = useSelector(state => state.map);\n  const dispatch = useDispatch();\n  const {\n    0: propsPosition,\n    1: setPropsPosition\n  } = useState(); //InfoWindow\n\n  const {\n    0: target,\n    1: setTarget\n  } = useState(false);\n  const divStyle = {\n    background: `white`,\n    border: `1px solid #ccc`,\n    padding: 15\n  };\n  const {\n    0: infoPosition,\n    1: setInfoPosition\n  } = useState({\n    lat: '',\n    lng: ''\n  });\n  const {\n    0: propsId,\n    1: setPropsId\n  } = useState();\n\n  const closeClick = () => {\n    setTarget(false);\n  };\n\n  const i = 1;\n\n  const oneRoute = () => {\n    dispatch({\n      type: LOAD_MAP_REQUEST,\n      data: propsId\n    });\n    Router.push({\n      pathname: '/Route/[id]',\n      query: {\n        id: propsId\n      }\n    });\n    console.log('dong', searchMap);\n  }; //InfoWindow\n  //polyline\n\n\n  const {\n    0: strokeWeight,\n    1: setStrokeWeight\n  } = useState(Array.from({\n    length: searchMap.length\n  }, () => 5));\n  const strokeWeights = Array.from({\n    length: searchMap.length\n  }, () => 5);\n\n  const onLoad = polyline => {\n    console.log('polyline: ', polyline);\n  };\n\n  function mouseOut(index) {\n    strokeWeights[index] = 5;\n    setStrokeWeight(strokeWeights); // setStrokeWeight(5)\n\n    console.log('aaa');\n  }\n\n  function mouseOver(index) {\n    console.log('ssss', strokeWeight);\n    strokeWeights[index] = 10;\n    setStrokeWeight(strokeWeights);\n    console.log('over');\n  }\n\n  const polylineClick = positionData => {\n    console.log('click');\n    console.log('cc', searchMap);\n    setInfoPosition({\n      lat: positionData.gps.coordinates[3][1],\n      lng: positionData.gps.coordinates[3][0]\n    });\n    setPropsId(positionData.id);\n    setPropsPosition(positionData);\n    setTarget(true);\n    console.log('ppp', positionData);\n  };\n\n  const options = {\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.8,\n    // strokeWeight: strokeWeight,\n    fillColor: '#FF0000',\n    fillOpacity: 0.35,\n    clickable: true,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: 30000,\n    //-27부터 호주 시작해서 점찍고 점찍고 한다\n    paths: [[{\n      lat: 35.969997373905,\n      lng: 128.45170755523503\n    }, {\n      lat: 35.985501427015464,\n      lng: 128.40407191943035\n    }, {\n      lat: 35.89580489690752,\n      lng: 128.62238368221892\n    }], [{\n      lat: 35.24731788471166,\n      lng: 128.86906207420088\n    }, {\n      lat: 35.260354548127424,\n      lng: 128.81198466603703\n    }]],\n    zIndex: 1\n  }; //polyline\n\n  const {\n    0: elev,\n    1: setElev\n  } = useState();\n  const {\n    0: mapref,\n    1: setMapRef\n  } = useState(null);\n\n  const handleOnLoad = map => {\n    setMapRef(map);\n    const elevator = new google.maps.ElevationService();\n    setElev(elevator);\n    console.log(elevator);\n    console.log('onLoad');\n  };\n\n  const handleCenterChanged = () => {\n    if (mapref) {\n      // ElevationService()\n      const zoom = mapref.getZoom(); // const ele=mapref.getElevationService();\n\n      const lat = mapref.getCenter().lat();\n      const lng = mapref.getCenter().lng();\n      const ne = mapref.getBounds().getNorthEast(); // const nw=mapref.getBounds().getNorthWest();\n\n      const sw = mapref.getBounds().getSouthWest(); // const se=mapref.getBounds().getSouthEast();\n      // displayLocationElevation(lat, elevator, infowindow);\n\n      console.log('zoom', zoom);\n      console.log('north', ne.lat(), ',', ne.lng());\n      console.log('south', sw.lat(), ',', sw.lng());\n    } //   dispatch({\n    //     type:MOVING_MAP_REQUEST,\n    //     data:{\n    //       north:{\n    //         lat:ne.lat(),\n    //         lng:ne.lng()\n    //       },\n    //       south:{\n    //         lat:sw.lat(),\n    //         lng:ne.lat()\n    //       },\n    //     }\n    //   })\n\n  };\n\n  const myLatLng = {\n    lat: -25.363,\n    lng: 131.044\n  }; // const map = new google.maps.Map(document.getElementById(\"map\"), {\n  //   zoom: 4,\n  //   center: myLatLng,\n  // });\n\n  const {\n    0: geom,\n    1: setGeom\n  } = useState({\n    lat: 35.969997373905,\n    lng: 128.45170755523503\n  });\n\n  const handleButton = async () => {\n    const currentAddr = document.getElementById('address').value;\n\n    if (currentAddr) {\n      const {\n        lat,\n        lng\n      } = await GeomHandle(currentAddr);\n      setGeom({\n        lat: lat,\n        lng: lng\n      });\n      dispatch({\n        type: SEARCH_MAP_REQUEST,\n        data: '1'\n      });\n      console.log('aaa', searchMap);\n    }\n  };\n\n  const {\n    0: mapState,\n    1: setMapState\n  } = useState(false);\n\n  const selectMap = () => {\n    setMapstate(!mapState);\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 9\n    }\n  }, __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 13\n    }\n  }, __jsx(Col, {\n    span: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 13\n    }\n  }, __jsx(SideBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 17\n    }\n  })), __jsx(Col, {\n    span: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 17\n    }\n  }, \"\\uAC80\\uC0C9\\uD558\\uAE30\", __jsx(Input.Search, {\n    id: \"address\",\n    style: {\n      verticalAlign: 'middle',\n      marginLeft: '10px',\n      width: '500px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 9\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 105\n    }\n  }), __jsx(Button, {\n    onClick: handleButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 9\n    }\n  }, \"\\uD074\\uB9AD\"), __jsx(Button, {\n    onclick: selectMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 9\n    }\n  }, \"\\uC790\\uC804\\uAC70\"), __jsx(Button, {\n    onclick: selectMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 9\n    }\n  }, \"\\uB2EC\\uB9AC\\uAE30\"), __jsx(SelectMap, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 8\n    }\n  }))));\n}\n\nexport default /*#__PURE__*/React.memo(polylineTest);","map":{"version":3,"sources":["/Users/dong/CapstonProject/pages/polylineTest.js"],"names":["React","useState","useEffect","useDispatch","useSelector","GoogleMap","LoadScript","Polyline","Marker","StreetViewPanorama","MarkerClusterer","AppLayout","SEARCH_MAP_REQUEST","LOAD_MAP_REQUEST","GeomHandle","Input","Col","Row","Button","SideBar","InfoWindow","Router","Link","SelectMap","iconPin","path","scale","mapContainerStyle","height","width","call","console","log","center","lat","lng","markerPosition","createKey","location","optionss","imagePath","polylineTest","searchMap","state","map","dispatch","propsPosition","setPropsPosition","target","setTarget","divStyle","background","border","padding","infoPosition","setInfoPosition","propsId","setPropsId","closeClick","i","oneRoute","type","data","push","pathname","query","id","strokeWeight","setStrokeWeight","Array","from","length","strokeWeights","onLoad","polyline","mouseOut","index","mouseOver","polylineClick","positionData","gps","coordinates","options","strokeColor","strokeOpacity","fillColor","fillOpacity","clickable","draggable","editable","visible","radius","paths","zIndex","elev","setElev","mapref","setMapRef","handleOnLoad","elevator","google","maps","ElevationService","handleCenterChanged","zoom","getZoom","getCenter","ne","getBounds","getNorthEast","sw","getSouthWest","myLatLng","geom","setGeom","handleButton","currentAddr","document","getElementById","value","mapState","setMapState","selectMap","setMapstate","verticalAlign","marginLeft","memo"],"mappings":"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","sourcesContent":["import React, {useState,useEffect} from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { Polyline ,Marker,StreetViewPanorama,MarkerClusterer} from '@react-google-maps/api';\nimport AppLayout from '../component/AppLayout';\n// import Streetview from 'react-google-streetview';// import RecordElevation from '../component/RecordElavation'\nimport { SEARCH_MAP_REQUEST } from '../reducers/map';\nimport {LOAD_MAP_REQUEST} from '../reducers/map'\nimport GeomHandle from '../component/GoogleMap'\nimport { Input,Col,Row,Button } from 'antd';\nimport SideBar from '../component/Layout/SideBar';\nimport { InfoWindow } from '@react-google-maps/api';\nimport Router from 'next/router'\n// import {useHistory} from \nimport Link from 'next/link'\nimport SelectMap from '../component/map/selectMap'\n// import InfoWindow from '../component/InfoWindow';\n\n\n\nconst iconPin={\n    path:'https://png.pngtree.com/png-clipart/20190921/original/pngtree-label-free-png-picture-png-image_4700172.jpg',\n    scale:1\n}\n\n\n\nconst mapContainerStyle = {\n  height: \"400px\",\n  width: \"800px\"\n};\n\nconst call=()=>{\n    console.log('cccccc')\n}\n\nconst center = {lat:  35.969997373905, lng: 128.45170755523503};\n\n\n\n\n\nconst path = [\n[\n    {lat:  35.969997373905, lng: 128.45170755523503},\n    {lat:35.985501427015464, lng:128.40407191943035},\n\n    {lat: 35.89580489690752, lng: 128.62238368221892}\n    \n]\n,\n[\n    {lat:  35.24651100148735,   lng: 128.87070362130143},\n   \n    {lat: 35.24752656439432,   lng:128.8729993854958},\n    {lat:35.248984786322424, lng:128.87318007064073},\n    {lat:35.25018259185734, lng:128.87332887017186},\n    {lat:35.25065129355367, lng:128.87505069331763},\n    {\n        lat:35.25145581526787, lng:128.87358573620605\n    }\n\n    \n]\n\n\n   \n    \n];\n\nconst markerPosition=[\n    {lat: 35.89580489690752, lng: 128.62238368221892},{\n        lat:35.25145581526787, lng:128.87358573620605\n    }\n]\n\n\nfunction createKey(location) {\n    return location.lat + location.lng\n  }\n\n\nconst optionss = {\n    imagePath:\n      'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m', // so you must have m1.png, m2.png, m3.png, m4.png, m5.png and m6.png in that folder\n  }\n\n\nfunction polylineTest() {\n\n    //////\n\n    const {searchMap}=useSelector((state)=>state.map)\n\n    const dispatch=useDispatch()\n\n    const [propsPosition,setPropsPosition]=useState()\n\n\n//InfoWindow\nconst [target,setTarget]=useState(false)\n\nconst divStyle = {\n    background: `white`,\n    border: `1px solid #ccc`,\n    padding: 15\n  }\n\nconst [infoPosition,setInfoPosition]=useState({\n    lat:'',\n    lng:'',\n})\n\nconst [propsId,setPropsId]=useState()\n\nconst closeClick=()=>{\n    setTarget(false)\n}\nconst i=1\n\nconst oneRoute=()=>{\n    dispatch({\n               type:LOAD_MAP_REQUEST,\n               data:propsId\n             })\n    Router.push({\n        pathname: '/Route/[id]',\n        query: {id:propsId},\n      });\n\n      console.log('dong',searchMap)\n}\n\n\n//InfoWindow\n\n    //polyline\n\nconst [strokeWeight,setStrokeWeight]=useState(Array.from({length: searchMap.length}, () => 5))\nconst strokeWeights= Array.from({length: searchMap.length}, () => 5);\n\nconst onLoad = polyline => {\n    console.log('polyline: ', polyline)\n   \n  };\n\n\n\nfunction mouseOut(index){\n    strokeWeights[index]=5\n    setStrokeWeight(strokeWeights)\n    // setStrokeWeight(5)\n    console.log('aaa')\n\n}\n\nfunction mouseOver(index){\n    console.log('ssss',strokeWeight)\n    strokeWeights[index]=10\n    setStrokeWeight(strokeWeights)\n    console.log('over')\n}\n\n\n\n\nconst polylineClick=(positionData)=>{\n    console.log('click')\n    console.log('cc',searchMap)\n\n    setInfoPosition({\n        lat:positionData.gps.coordinates[3][1],\n        lng:positionData.gps.coordinates[3][0]\n    })\n    setPropsId(positionData.id)\n    setPropsPosition(positionData)\n    setTarget(true)\n    console.log('ppp',positionData)\n    \n}\n\nconst options = {\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.8,\n    // strokeWeight: strokeWeight,\n    fillColor: '#FF0000',\n    fillOpacity: 0.35,\n    clickable: true,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: 30000,\n    //-27부터 호주 시작해서 점찍고 점찍고 한다\n    paths: [\n      \n          [\n              {lat:  35.969997373905, lng: 128.45170755523503},\n              {lat:35.985501427015464, lng:128.40407191943035},\n          \n              {lat: 35.89580489690752, lng: 128.62238368221892}\n              \n          ]\n          ,\n          [\n              {lat:  35.24731788471166,  lng: 128.86906207420088},\n             \n              {lat: 35.260354548127424,  lng:128.81198466603703}\n              \n          ]\n        \n    \n      \n    ],\n    zIndex: 1\n  };\n\n\n\n//polyline\n\n\n\n\n    const [elev,setElev]=useState()\n    const [mapref, setMapRef] = useState(null);\n    const handleOnLoad = map => {\n      setMapRef(map);\n      const elevator = new google.maps.ElevationService();\n      setElev(elevator)\n      console.log(elevator)\n      console.log('onLoad')\n    };\n    const handleCenterChanged = () => {\n      if (mapref) {\n        // ElevationService()\n        const zoom=mapref.getZoom()\n        \n        // const ele=mapref.getElevationService();\n        const lat = mapref.getCenter().lat();\n        const lng = mapref.getCenter().lng();\n        const ne=mapref.getBounds().getNorthEast();\n        // const nw=mapref.getBounds().getNorthWest();\n        const sw=mapref.getBounds().getSouthWest();\n        // const se=mapref.getBounds().getSouthEast();\n     \n        // displayLocationElevation(lat, elevator, infowindow);\n        console.log('zoom',zoom);\n        console.log('north', ne.lat(),',',ne.lng())\n        console.log('south',sw.lat(),',',sw.lng())\n \n\n    \n      }\n    //   dispatch({\n    //     type:MOVING_MAP_REQUEST,\n    //     data:{\n    //       north:{\n    //         lat:ne.lat(),\n    //         lng:ne.lng()\n    //       },\n    //       south:{\n    //         lat:sw.lat(),\n    //         lng:ne.lat()\n    //       },\n\n    //     }\n    //   })\n    \n    }\n\n  \n\n\n    const myLatLng = { lat: -25.363, lng: 131.044 };\n    // const map = new google.maps.Map(document.getElementById(\"map\"), {\n    //   zoom: 4,\n    //   center: myLatLng,\n    // });\n    const [geom ,setGeom]=useState({lat:35.969997373905, lng: 128.45170755523503})\n\n    const handleButton = async() => {\n        const currentAddr = document.getElementById('address').value\n        if (currentAddr){\n          const {lat, lng} = await GeomHandle(currentAddr)\n          setGeom({lat:lat,lng:lng})\n\n          dispatch({\n            type:SEARCH_MAP_REQUEST,\n            data:'1'\n        })\n        console.log('aaa',searchMap)\n\n\n\n       \n        }\n      }\n\n      const [mapState,setMapState]=useState(false)\n\n      const selectMap=()=>{\n        setMapstate(!mapState)\n      }\n\n      \n  \n    return (\n        <div>\n            <Row>\n            <Col span={4}>\n                <SideBar ></SideBar>\n\n                </Col>\n                <Col span={12}>\n                검색하기\n        <Input.Search id=\"address\"  style={{verticalAlign:'middle' ,marginLeft:'10px',width:'500px'}} /><br></br>\n        <Button onClick={handleButton}>클릭</Button>\n        <Button onclick={selectMap}>자전거</Button>\n        <Button onclick={selectMap}>달리기</Button>\n              \n\n       <SelectMap></SelectMap>\n\n                </Col>\n\n\n            </Row>\n           \n       \n         </div>\n\n    )\n  }\n  \n  export default React.memo(polylineTest)"]},"metadata":{},"sourceType":"module"}