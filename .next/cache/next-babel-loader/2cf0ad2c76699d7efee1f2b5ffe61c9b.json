{"ast":null,"code":"var _jsxFileName = \"/Users/dong/CapstonProject/component/map/selectMap.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { Polyline, Marker, StreetViewPanorama, MarkerClusterer } from '@react-google-maps/api';\nimport { InfoWindow } from '@react-google-maps/api';\nimport Router from 'next/router';\nimport { LOAD_MAP_REQUEST } from '../../reducers/map';\nimport { MOVING_MAP_REQUEST, BIKE_MAP_REQUEST, RUNNING_MAP_REQUEST, SEARCH_MAP_REQUEST } from '../../reducers/map';\nimport { Input, Button, Row, Col, Card } from 'antd';\nimport GeomHandle from '../GoogleMap';\nimport SearchList from '../SearchList';\nimport Link from 'next/link';\nimport styled from \"styled-components\";\nimport wrapper from '../../store/configureStore';\nvar lat = 1;\nvar lng = 2;\n\nfunction selectMap({}) {\n  const {\n    myLocation\n  } = useSelector(state => state.map);\n  const {\n    0: geom,\n    1: setGeom\n  } = useState({\n    lat,\n    lng\n  });\n\n  function getLocation() {\n    if (navigator.geolocation) {\n      // GPS를 지원하면\n      navigator.geolocation.getCurrentPosition(function (position) {\n        setGeom({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n      }, function (error) {\n        console.error(error);\n      }, {\n        enableHighAccuracy: false,\n        maximumAge: 0,\n        timeout: Infinity\n      });\n    } else {\n      alert('GPS를 지원하지 않습니다');\n    }\n  }\n\n  useEffect(() => {\n    getLocation();\n  }, []);\n  const {\n    0: isState,\n    1: setIsState\n  } = useState(false);\n  const {\n    0: mapState,\n    1: setMapState\n  } = useState('B');\n  const dispatch = useDispatch();\n  const mapContainerStyle = {\n    marginTop: 60,\n    height: \"400px\",\n    width: \"700px\"\n  };\n  const {\n    searchMap\n  } = useSelector(state => state.map); // const [geom ,setGeom]=useState({lat:35.969997373905, lng: 128.45170755523503})\n\n  const {\n    0: mapref,\n    1: setMapRef\n  } = useState(null);\n\n  const handleOnLoad = map => {\n    setMapRef(map);\n    console.log('load됨');\n  };\n\n  const {\n    0: nelat,\n    1: setNelat\n  } = useState();\n  const {\n    0: nelng,\n    1: setNelng\n  } = useState();\n  const {\n    0: swlat,\n    1: setSwlat\n  } = useState();\n  const {\n    0: swlng,\n    1: setSwlng\n  } = useState();\n\n  const handleCenterChanged = () => {\n    if (mapref) {\n      //   var zoom=mapref.getZoom()\n      var nt = mapref.getBounds().getNorthEast().lat();\n      var ng = mapref.getBounds().getNorthEast().lng();\n      var st = mapref.getBounds().getSouthWest().lat();\n      var sg = mapref.getBounds().getSouthWest().lng();\n      setNelat(nt);\n      setNelng(ng);\n      setSwlat(st);\n      setSwlng(sg);\n    }\n\n    dispatch({\n      type: MOVING_MAP_REQUEST,\n      data: {\n        north: {\n          lat: mapref.getBounds().getNorthEast().lat(),\n          lng: mapref.getBounds().getNorthEast().lng()\n        },\n        south: {\n          lat: mapref.getBounds().getSouthWest().lat(),\n          lng: mapref.getBounds().getSouthWest().lng()\n        },\n        event: mapState\n      }\n    });\n  }; //////markercluseter\n\n\n  const optionss = {\n    imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m' // so you must have m1.png, m2.png, m3.png, m4.png, m5.png and m6.png in that folder\n\n  };\n\n  function createKey(location) {\n    return location.lat + location.lng;\n  } //////markercluseter\n  ///주소검색\n\n\n  const {\n    searchmapLoading\n  } = useSelector(state => state.map);\n\n  const handleButton = async () => {\n    const currentAddr = document.getElementById('address').value;\n\n    if (currentAddr) {\n      const {\n        lat,\n        lng\n      } = await GeomHandle(currentAddr);\n      setGeom({\n        lat: lat,\n        lng: lng\n      });\n      dispatch({\n        type: SEARCH_MAP_REQUEST,\n        data: {\n          north: {\n            lat: mapref.getBounds().getNorthEast().lat(),\n            lng: mapref.getBounds().getNorthEast().lng()\n          },\n          south: {\n            lat: mapref.getBounds().getSouthWest().lat(),\n            lng: mapref.getBounds().getSouthWest().lng()\n          },\n          event: mapState\n        }\n      });\n      console.log('aaa', searchMap);\n    }\n  }; //주소검색\n  //polyline\n  //   const [propsPosition,setPropsPosition]=useState()\n\n\n  const {\n    0: propsId,\n    1: setPropsId\n  } = useState();\n  const {\n    0: infoPosition,\n    1: setInfoPosition\n  } = useState({\n    lat: '',\n    lng: ''\n  });\n  const {\n    0: target,\n    1: setTarget\n  } = useState(false);\n  const {\n    0: strokeWeight,\n    1: setStrokeWeight\n  } = useState(Array.from({\n    length: searchMap.length\n  }, () => 3));\n  const strokeWeights = Array.from({\n    length: searchMap.length\n  }, () => 3);\n\n  const polylineClick = positionData => {\n    setInfoPosition({\n      lat: positionData.gps.coordinates[3][1],\n      lng: positionData.gps.coordinates[3][0]\n    });\n    setPropsId(positionData._id); // setPropsPosition(positionData)\n\n    setTarget(true);\n  };\n\n  function mouseOver(index) {\n    strokeWeights[index] = 10;\n    setStrokeWeight(strokeWeights);\n  }\n\n  function mouseOut(index) {\n    strokeWeights[index] = 3;\n    setStrokeWeight(strokeWeights);\n  } //polyline\n  //infoWindow\n\n\n  const closeClick = () => {\n    setTarget(false);\n  };\n\n  const divStyle = {\n    background: `white`,\n    border: `1px solid #ccc`,\n    padding: 15\n  };\n\n  const oneRoute = () => {\n    dispatch({\n      type: LOAD_MAP_REQUEST,\n      data: propsId\n    });\n    Router.push({\n      pathname: '/Route/[id]',\n      query: {\n        id: propsId\n      }\n    });\n    console.log('dong', searchMap);\n  }; //infoWindow\n  //   const [mapState,setMapState]=useState()\n  // const {mapState}=useSelector((state)=>state.map)\n\n\n  const bikeSelectMap = () => {\n    setMapState('B');\n    setIsState(true);\n  };\n\n  const runningSelectMap = () => {\n    setMapState('R');\n    setIsState(true);\n  };\n\n  useEffect(() => {\n    if (mapState === 'B' && isState === true) {\n      dispatch({\n        type: BIKE_MAP_REQUEST,\n        data: {\n          event: mapState,\n          north: {\n            lat: mapref.getBounds().getNorthEast().lat(),\n            lng: mapref.getBounds().getNorthEast().lng()\n          },\n          south: {\n            lat: mapref.getBounds().getSouthWest().lat(),\n            lng: mapref.getBounds().getSouthWest().lng()\n          }\n        }\n      });\n      setIsState(false);\n    } else if (mapState === 'R' && isState === true) {\n      dispatch({\n        type: RUNNING_MAP_REQUEST,\n        data: {\n          event: mapState,\n          north: {\n            lat: mapref.getBounds().getNorthEast().lat(),\n            lng: mapref.getBounds().getNorthEast().lng()\n          },\n          south: {\n            lat: mapref.getBounds().getSouthWest().lat(),\n            lng: mapref.getBounds().getSouthWest().lng()\n          }\n        }\n      });\n      setIsState(false);\n    }\n  }, [mapState, isState]);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 5\n    }\n  }, __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 9\n    }\n  }, __jsx(Col, {\n    span: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 13\n    }\n  }, __jsx(Input.Search, {\n    loading: searchmapLoading,\n    enterButton: \"\\uAC80\\uC0C9\",\n    onPressEnter: handleButton,\n    id: \"address\",\n    style: {\n      verticalAlign: 'middle',\n      width: '300px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 17\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 81\n    }\n  }), __jsx(Buttons, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 17\n    }\n  }, __jsx(Button, {\n    onClick: bikeSelectMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 17\n    }\n  }, \"\\uC790\\uC804\\uAC70\"), __jsx(Button, {\n    onClick: runningSelectMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 17\n    }\n  }, \"\\uB2EC\\uB9AC\\uAE30\")), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 18\n    }\n  }, searchMap.map((p, index) => __jsx(SearchList, {\n    setInfoPosition: setInfoPosition,\n    setPropsId: setPropsId,\n    setTarget: setTarget,\n    index: index,\n    setStrokeWeight: setStrokeWeight,\n    list: p,\n    key: p.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 27\n    }\n  })))), __jsx(Col, {\n    span: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 13\n    }\n  }, __jsx(LoadScript, {\n    googleMapsApiKey: \"AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 13\n    }\n  }, __jsx(GoogleMap, {\n    id: \"marker-example\",\n    mapContainerStyle: mapContainerStyle,\n    zoom: 15,\n    center: geom,\n    onLoad: handleOnLoad,\n    onDragEnd: handleCenterChanged // onZoomChanged={handleCenterChanged}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 11\n    }\n  }, __jsx(MarkerClusterer, {\n    options: optionss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 9\n    }\n  }, clusterer => searchMap.map(p => __jsx(Marker, {\n    key: createKey(p),\n    position: {\n      lat: p.start_latlng[1],\n      lng: p.start_latlng[0]\n    },\n    clusterer: clusterer,\n    icon: {\n      scaledSize: new google.maps.Size(30, 30)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 21\n    }\n  }))), searchMap.map((m, index) => __jsx(Polyline, {\n    onRightClick: () => polylineClick(m),\n    onMouseOver: () => mouseOver(index),\n    onMouseOut: () => mouseOut(index),\n    options: {\n      strokeWeight: strokeWeight[index],\n      clickable: true,\n      visible: true,\n      strokeColor: '#FF0000',\n      fillColor: '#FF0000'\n    },\n    path: m.gps.coordinates.map(p => ({\n      lat: p[1],\n      lng: p[0]\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 13\n    }\n  })), target && __jsx(InfoWindow, {\n    position: infoPosition,\n    onCloseClick: closeClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 18\n    }\n  }, __jsx(\"div\", {\n    style: divStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 13\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 17\n    }\n  }, \"\\uB3D9\\uC601\"), __jsx(\"button\", {\n    onClick: oneRoute,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 17\n    }\n  }, \"\\uC0C1\\uC138\\uBCF4\\uAE30\"))))))));\n}\n\nconst Buttons = styled.div`\n\n\nButton:hover {\n    background:#1683e8;\n    border-color: #1683e8;\n    color: #fff;\n  }\n\n  Button:focus {\n    background:#1683e8;\n    color: #fff;\n  }\n\n\n`;","map":{"version":3,"sources":["/Users/dong/CapstonProject/component/map/selectMap.js"],"names":["React","useState","useEffect","useDispatch","useSelector","GoogleMap","LoadScript","Polyline","Marker","StreetViewPanorama","MarkerClusterer","InfoWindow","Router","LOAD_MAP_REQUEST","MOVING_MAP_REQUEST","BIKE_MAP_REQUEST","RUNNING_MAP_REQUEST","SEARCH_MAP_REQUEST","Input","Button","Row","Col","Card","GeomHandle","SearchList","Link","styled","wrapper","lat","lng","selectMap","myLocation","state","map","geom","setGeom","getLocation","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","error","console","enableHighAccuracy","maximumAge","timeout","Infinity","alert","isState","setIsState","mapState","setMapState","dispatch","mapContainerStyle","marginTop","height","width","searchMap","mapref","setMapRef","handleOnLoad","log","nelat","setNelat","nelng","setNelng","swlat","setSwlat","swlng","setSwlng","handleCenterChanged","nt","getBounds","getNorthEast","ng","st","getSouthWest","sg","type","data","north","south","event","optionss","imagePath","createKey","location","searchmapLoading","handleButton","currentAddr","document","getElementById","value","propsId","setPropsId","infoPosition","setInfoPosition","target","setTarget","strokeWeight","setStrokeWeight","Array","from","length","strokeWeights","polylineClick","positionData","gps","coordinates","_id","mouseOver","index","mouseOut","closeClick","divStyle","background","border","padding","oneRoute","push","pathname","query","id","bikeSelectMap","runningSelectMap","verticalAlign","p","clusterer","start_latlng","scaledSize","google","maps","Size","m","clickable","visible","strokeColor","fillColor","Buttons","div"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAwBC,SAAxB,QAAwC,OAAxC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,wBAAtC;AACA,SAASC,QAAT,EAAmBC,MAAnB,EAA0BC,kBAA1B,EAA6CC,eAA7C,QAAmE,wBAAnE;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAAQC,gBAAR,QAA+B,oBAA/B;AACA,SAASC,kBAAT,EAA4BC,gBAA5B,EAA6CC,mBAA7C,EAAiEC,kBAAjE,QAA2F,oBAA3F;AACA,SAAQC,KAAR,EAAcC,MAAd,EAAqBC,GAArB,EAAyBC,GAAzB,EAA6BC,IAA7B,QAAwC,MAAxC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,OAAP,MAAoB,4BAApB;AAIE,IAAIC,GAAG,GAAC,CAAR;AACA,IAAIC,GAAG,GAAC,CAAR;;AAGF,SAASC,SAAT,CAAmB,EAAnB,EAAuB;AACnB,QAAM;AAACC,IAAAA;AAAD,MAAa3B,WAAW,CAAE4B,KAAD,IAASA,KAAK,CAACC,GAAhB,CAA9B;AAEA,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAgBlC,QAAQ,CAAC;AAC3B2B,IAAAA,GAD2B;AAE3BC,IAAAA;AAF2B,GAAD,CAA9B;;AAKA,WAASO,WAAT,GAAuB;AACnB,QAAIC,SAAS,CAACC,WAAd,EAA2B;AAAE;AAC3BD,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,UAASC,QAAT,EAAmB;AAE1DL,QAAAA,OAAO,CAAC;AACJP,UAAAA,GAAG,EAACY,QAAQ,CAACC,MAAT,CAAgBC,QADhB;AAEJb,UAAAA,GAAG,EAACW,QAAQ,CAACC,MAAT,CAAgBE;AAFhB,SAAD,CAAP;AAID,OAND,EAMG,UAASC,KAAT,EAAgB;AACjBC,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD,OARD,EAQG;AACDE,QAAAA,kBAAkB,EAAE,KADnB;AAEDC,QAAAA,UAAU,EAAE,CAFX;AAGDC,QAAAA,OAAO,EAAEC;AAHR,OARH;AAaD,KAdD,MAcO;AACLC,MAAAA,KAAK,CAAC,gBAAD,CAAL;AACD;AACF;;AAGHhD,EAAAA,SAAS,CAAC,MAAI;AACVkC,IAAAA,WAAW;AACd,GAFQ,EAEP,EAFO,CAAT;AAIA,QAAM;AAAA,OAACe,OAAD;AAAA,OAASC;AAAT,MAAqBnD,QAAQ,CAAC,KAAD,CAAnC;AACA,QAAM;AAAA,OAACoD,QAAD;AAAA,OAAUC;AAAV,MAAwBrD,QAAQ,CAAC,GAAD,CAAtC;AAGA,QAAMsD,QAAQ,GAACpD,WAAW,EAA1B;AAEA,QAAMqD,iBAAiB,GAAG;AAC1BC,IAAAA,SAAS,EAAC,EADgB;AAE1BC,IAAAA,MAAM,EAAE,OAFkB;AAG1BC,IAAAA,KAAK,EAAE;AAHmB,GAA1B;AAOA,QAAM;AAACC,IAAAA;AAAD,MAAYxD,WAAW,CAAE4B,KAAD,IAASA,KAAK,CAACC,GAAhB,CAA7B,CA9CmB,CAgDnB;;AACA,QAAM;AAAA,OAAC4B,MAAD;AAAA,OAASC;AAAT,MAAsB7D,QAAQ,CAAC,IAAD,CAApC;;AAGA,QAAM8D,YAAY,GAAG9B,GAAG,IAAI;AACxB6B,IAAAA,SAAS,CAAC7B,GAAD,CAAT;AACAY,IAAAA,OAAO,CAACmB,GAAR,CAAY,OAAZ;AAED,GAJH;;AAME,QAAM;AAAA,OAACC,KAAD;AAAA,OAAOC;AAAP,MAAiBjE,QAAQ,EAA/B;AACA,QAAM;AAAA,OAACkE,KAAD;AAAA,OAAOC;AAAP,MAAiBnE,QAAQ,EAA/B;AAEA,QAAM;AAAA,OAACoE,KAAD;AAAA,OAAOC;AAAP,MAAiBrE,QAAQ,EAA/B;AACA,QAAM;AAAA,OAACsE,KAAD;AAAA,OAAOC;AAAP,MAAiBvE,QAAQ,EAA/B;;AAIA,QAAMwE,mBAAmB,GAAG,MAAM;AAChC,QAAIZ,MAAJ,EAAY;AAEZ;AACE,UAAIa,EAAE,GAACb,MAAM,CAACc,SAAP,GAAmBC,YAAnB,GAAkChD,GAAlC,EAAP;AACA,UAAIiD,EAAE,GAAChB,MAAM,CAACc,SAAP,GAAmBC,YAAnB,GAAkC/C,GAAlC,EAAP;AAEA,UAAIiD,EAAE,GAACjB,MAAM,CAACc,SAAP,GAAmBI,YAAnB,GAAkCnD,GAAlC,EAAP;AACA,UAAIoD,EAAE,GAACnB,MAAM,CAACc,SAAP,GAAmBI,YAAnB,GAAkClD,GAAlC,EAAP;AAEAqC,MAAAA,QAAQ,CAACQ,EAAD,CAAR;AACAN,MAAAA,QAAQ,CAACS,EAAD,CAAR;AACAP,MAAAA,QAAQ,CAACQ,EAAD,CAAR;AACAN,MAAAA,QAAQ,CAACQ,EAAD,CAAR;AAGD;;AAEDzB,IAAAA,QAAQ,CAAC;AACP0B,MAAAA,IAAI,EAACnE,kBADE;AAEPoE,MAAAA,IAAI,EAAC;AACHC,QAAAA,KAAK,EAAC;AACFvD,UAAAA,GAAG,EAACiC,MAAM,CAACc,SAAP,GAAmBC,YAAnB,GAAkChD,GAAlC,EADF;AAEFC,UAAAA,GAAG,EAACgC,MAAM,CAACc,SAAP,GAAmBC,YAAnB,GAAkC/C,GAAlC;AAFF,SADH;AAKDuD,QAAAA,KAAK,EAAC;AACJxD,UAAAA,GAAG,EAACiC,MAAM,CAACc,SAAP,GAAmBI,YAAnB,GAAkCnD,GAAlC,EADA;AAEJC,UAAAA,GAAG,EAACgC,MAAM,CAACc,SAAP,GAAmBI,YAAnB,GAAkClD,GAAlC;AAFA,SALL;AASHwD,QAAAA,KAAK,EAAChC;AATH;AAFE,KAAD,CAAR;AAgBD,GAlCD,CAlEiB,CAsGjB;;;AAGF,QAAMiC,QAAQ,GAAG;AACbC,IAAAA,SAAS,EACT,wFAFa,CAE6E;;AAF7E,GAAjB;;AAMA,WAASC,SAAT,CAAmBC,QAAnB,EAA6B;AACzB,WAAOA,QAAQ,CAAC7D,GAAT,GAAe6D,QAAQ,CAAC5D,GAA/B;AACH,GAjHkB,CAmHjB;AAGH;;;AAEC,QAAM;AAAC6D,IAAAA;AAAD,MAAmBtF,WAAW,CAAE4B,KAAD,IAASA,KAAK,CAACC,GAAhB,CAApC;;AAID,QAAM0D,YAAY,GAAG,YAAW;AAC5B,UAAMC,WAAW,GAAGC,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmCC,KAAvD;;AACA,QAAIH,WAAJ,EAAgB;AACd,YAAM;AAAChE,QAAAA,GAAD;AAAMC,QAAAA;AAAN,UAAa,MAAMN,UAAU,CAACqE,WAAD,CAAnC;AACAzD,MAAAA,OAAO,CAAC;AAACP,QAAAA,GAAG,EAACA,GAAL;AAASC,QAAAA,GAAG,EAACA;AAAb,OAAD,CAAP;AAEA0B,MAAAA,QAAQ,CAAC;AACP0B,QAAAA,IAAI,EAAChE,kBADE;AAEPiE,QAAAA,IAAI,EAAC;AACJC,UAAAA,KAAK,EAAC;AACJvD,YAAAA,GAAG,EAACiC,MAAM,CAACc,SAAP,GAAmBC,YAAnB,GAAkChD,GAAlC,EADA;AAEJC,YAAAA,GAAG,EAACgC,MAAM,CAACc,SAAP,GAAmBC,YAAnB,GAAkC/C,GAAlC;AAFA,WADF;AAKJuD,UAAAA,KAAK,EAAC;AACJxD,YAAAA,GAAG,EAACiC,MAAM,CAACc,SAAP,GAAmBI,YAAnB,GAAkCnD,GAAlC,EADA;AAEJC,YAAAA,GAAG,EAACgC,MAAM,CAACc,SAAP,GAAmBI,YAAnB,GAAkClD,GAAlC;AAFA,WALF;AASJwD,UAAAA,KAAK,EAAChC;AATF;AAFE,OAAD,CAAR;AAeFR,MAAAA,OAAO,CAACmB,GAAR,CAAY,KAAZ,EAAkBJ,SAAlB;AAKC;AACF,GA3BH,CA5HoB,CA0JpB;AAIG;AAEF;;;AAEE,QAAM;AAAA,OAACoC,OAAD;AAAA,OAASC;AAAT,MAAqBhG,QAAQ,EAAnC;AAGA,QAAM;AAAA,OAACiG,YAAD;AAAA,OAAcC;AAAd,MAA+BlG,QAAQ,CAAC;AAC5C2B,IAAAA,GAAG,EAAC,EADwC;AAE5CC,IAAAA,GAAG,EAAC;AAFwC,GAAD,CAA7C;AAKA,QAAM;AAAA,OAACuE,MAAD;AAAA,OAAQC;AAAR,MAAmBpG,QAAQ,CAAC,KAAD,CAAjC;AAGA,QAAM;AAAA,OAACqG,YAAD;AAAA,OAAcC;AAAd,MAA+BtG,QAAQ,CAACuG,KAAK,CAACC,IAAN,CAAW;AAACC,IAAAA,MAAM,EAAE9C,SAAS,CAAC8C;AAAnB,GAAX,EAAuC,MAAM,CAA7C,CAAD,CAA7C;AACA,QAAMC,aAAa,GAAEH,KAAK,CAACC,IAAN,CAAW;AAACC,IAAAA,MAAM,EAAE9C,SAAS,CAAC8C;AAAnB,GAAX,EAAuC,MAAM,CAA7C,CAArB;;AAGA,QAAME,aAAa,GAAEC,YAAD,IAAgB;AAGlCV,IAAAA,eAAe,CAAC;AACZvE,MAAAA,GAAG,EAACiF,YAAY,CAACC,GAAb,CAAiBC,WAAjB,CAA6B,CAA7B,EAAgC,CAAhC,CADQ;AAEZlF,MAAAA,GAAG,EAACgF,YAAY,CAACC,GAAb,CAAiBC,WAAjB,CAA6B,CAA7B,EAAgC,CAAhC;AAFQ,KAAD,CAAf;AAIAd,IAAAA,UAAU,CAACY,YAAY,CAACG,GAAd,CAAV,CAPkC,CAQlC;;AACAX,IAAAA,SAAS,CAAC,IAAD,CAAT;AAEH,GAXC;;AAcF,WAASY,SAAT,CAAmBC,KAAnB,EAAyB;AACrBP,IAAAA,aAAa,CAACO,KAAD,CAAb,GAAqB,EAArB;AACAX,IAAAA,eAAe,CAACI,aAAD,CAAf;AACH;;AAED,WAASQ,QAAT,CAAkBD,KAAlB,EAAwB;AACpBP,IAAAA,aAAa,CAACO,KAAD,CAAb,GAAqB,CAArB;AACAX,IAAAA,eAAe,CAACI,aAAD,CAAf;AAEH,GAxMkB,CA0MjB;AAEA;;;AACA,QAAMS,UAAU,GAAC,MAAI;AACnBf,IAAAA,SAAS,CAAC,KAAD,CAAT;AACH,GAFC;;AAMF,QAAMgB,QAAQ,GAAG;AACbC,IAAAA,UAAU,EAAG,OADA;AAEbC,IAAAA,MAAM,EAAG,gBAFI;AAGbC,IAAAA,OAAO,EAAE;AAHI,GAAjB;;AAOF,QAAMC,QAAQ,GAAC,MAAI;AACjBlE,IAAAA,QAAQ,CAAC;AACE0B,MAAAA,IAAI,EAACpE,gBADP;AAEEqE,MAAAA,IAAI,EAACc;AAFP,KAAD,CAAR;AAKApF,IAAAA,MAAM,CAAC8G,IAAP,CAAY;AACRC,MAAAA,QAAQ,EAAE,aADF;AAERC,MAAAA,KAAK,EAAE;AAACC,QAAAA,EAAE,EAAC7B;AAAJ;AAFC,KAAZ;AAKEnD,IAAAA,OAAO,CAACmB,GAAR,CAAY,MAAZ,EAAmBJ,SAAnB;AACL,GAZC,CA1NqB,CAyOjB;AAEF;AACA;;;AACA,QAAMkE,aAAa,GAAC,MAAI;AACpBxE,IAAAA,WAAW,CAAC,GAAD,CAAX;AACAF,IAAAA,UAAU,CAAC,IAAD,CAAV;AACH,GAHD;;AAKA,QAAM2E,gBAAgB,GAAC,MAAI;AACvBzE,IAAAA,WAAW,CAAC,GAAD,CAAX;AACAF,IAAAA,UAAU,CAAC,IAAD,CAAV;AACH,GAHD;;AAKAlD,EAAAA,SAAS,CAAC,MAAI;AAEV,QAAGmD,QAAQ,KAAG,GAAX,IAAgBF,OAAO,KAAG,IAA7B,EAAkC;AAC9BI,MAAAA,QAAQ,CAAC;AACL0B,QAAAA,IAAI,EAAClE,gBADA;AAELmE,QAAAA,IAAI,EAAC;AACDG,UAAAA,KAAK,EAAChC,QADL;AAED8B,UAAAA,KAAK,EAAC;AACFvD,YAAAA,GAAG,EAACiC,MAAM,CAACc,SAAP,GAAmBC,YAAnB,GAAkChD,GAAlC,EADF;AAEFC,YAAAA,GAAG,EAACgC,MAAM,CAACc,SAAP,GAAmBC,YAAnB,GAAkC/C,GAAlC;AAFF,WAFL;AAMCuD,UAAAA,KAAK,EAAC;AACJxD,YAAAA,GAAG,EAACiC,MAAM,CAACc,SAAP,GAAmBI,YAAnB,GAAkCnD,GAAlC,EADA;AAEJC,YAAAA,GAAG,EAACgC,MAAM,CAACc,SAAP,GAAmBI,YAAnB,GAAkClD,GAAlC;AAFA;AANP;AAFA,OAAD,CAAR;AAcAuB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAhBD,MAgBM,IAAGC,QAAQ,KAAG,GAAX,IAAgBF,OAAO,KAAG,IAA7B,EAAkC;AACpCI,MAAAA,QAAQ,CAAC;AACL0B,QAAAA,IAAI,EAACjE,mBADA;AAELkE,QAAAA,IAAI,EAAC;AACDG,UAAAA,KAAK,EAAChC,QADL;AAED8B,UAAAA,KAAK,EAAC;AACFvD,YAAAA,GAAG,EAACiC,MAAM,CAACc,SAAP,GAAmBC,YAAnB,GAAkChD,GAAlC,EADF;AAEFC,YAAAA,GAAG,EAACgC,MAAM,CAACc,SAAP,GAAmBC,YAAnB,GAAkC/C,GAAlC;AAFF,WAFL;AAMCuD,UAAAA,KAAK,EAAC;AACJxD,YAAAA,GAAG,EAACiC,MAAM,CAACc,SAAP,GAAmBI,YAAnB,GAAkCnD,GAAlC,EADA;AAEJC,YAAAA,GAAG,EAACgC,MAAM,CAACc,SAAP,GAAmBI,YAAnB,GAAkClD,GAAlC;AAFA;AANP;AAFA,OAAD,CAAR;AAcAuB,MAAAA,UAAU,CAAC,KAAD,CAAV;AAEH;AACJ,GApCQ,EAoCP,CAACC,QAAD,EAAUF,OAAV,CApCO,CAAT;AA4CF,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,GAAD;AAAK,IAAA,IAAI,EAAE,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,KAAD,CAAO,MAAP;AACA,IAAA,OAAO,EAAEuC,gBADT;AAC2B,IAAA,WAAW,EAAC,cADvC;AAC4C,IAAA,YAAY,EAAEC,YAD1D;AAEA,IAAA,EAAE,EAAC,SAFH;AAEc,IAAA,KAAK,EAAE;AAACqC,MAAAA,aAAa,EAAC,QAAf;AAAyBrE,MAAAA,KAAK,EAAC;AAA/B,KAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAGoE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHpE,EAKI,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAEmE,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADA,EAEA,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAEC,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAFA,CALJ,EAUK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEOnE,SAAS,CAAC3B,GAAV,CAAc,CAACgG,CAAD,EAAGf,KAAH,KAEZ,MAAC,UAAD;AAAY,IAAA,eAAe,EAAEf,eAA7B;AAA8C,IAAA,UAAU,EAAEF,UAA1D;AAAsE,IAAA,SAAS,EAAEI,SAAjF;AAA4F,IAAA,KAAK,EAAEa,KAAnG;AAA0G,IAAA,eAAe,EAAEX,eAA3H;AAA4I,IAAA,IAAI,EAAE0B,CAAlJ;AAAqJ,IAAA,GAAG,EAAEA,CAAC,CAACJ,EAA5J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAFP,CAVL,CADJ,EAuBI,MAAC,GAAD;AAAK,IAAA,IAAI,EAAE,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,MAAC,UAAD;AACA,IAAA,gBAAgB,EAAC,yCADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIF,MAAC,SAAD;AACE,IAAA,EAAE,EAAC,gBADL;AAEE,IAAA,iBAAiB,EAAErE,iBAFrB;AAGE,IAAA,IAAI,EAAE,EAHR;AAIE,IAAA,MAAM,EAAEtB,IAJV;AAKE,IAAA,MAAM,EAAE6B,YALV;AAME,IAAA,SAAS,EAAEU,mBANb,CAOE;AAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUF,MAAC,eAAD;AAAiB,IAAA,OAAO,EAAEa,QAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACU4C,SAAD,IACGtE,SAAS,CAAC3B,GAAV,CAAegG,CAAD,IACd,MAAC,MAAD;AAAS,IAAA,GAAG,EAAEzC,SAAS,CAACyC,CAAD,CAAvB;AAA4B,IAAA,QAAQ,EAAE;AAACrG,MAAAA,GAAG,EAACqG,CAAC,CAACE,YAAF,CAAe,CAAf,CAAL;AAAuBtG,MAAAA,GAAG,EAACoG,CAAC,CAACE,YAAF,CAAe,CAAf;AAA3B,KAAtC;AAAqF,IAAA,SAAS,EAAED,SAAhG;AAA4G,IAAA,IAAI,EAAE;AAClHE,MAAAA,UAAU,EAAE,IAAIC,MAAM,CAACC,IAAP,CAAYC,IAAhB,CAAqB,EAArB,EAAwB,EAAxB;AADsG,KAAlH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CAFZ,CAVE,EAoBD3E,SAAS,CAAC3B,GAAV,CAAc,CAACuG,CAAD,EAAGtB,KAAH,KACX,MAAC,QAAD;AAAW,IAAA,YAAY,EAAE,MAAIN,aAAa,CAAC4B,CAAD,CAA1C;AAA+C,IAAA,WAAW,EAAE,MAAIvB,SAAS,CAACC,KAAD,CAAzE;AAAkF,IAAA,UAAU,EAAE,MAAIC,QAAQ,CAACD,KAAD,CAA1G;AAAoH,IAAA,OAAO,EAAE;AAACZ,MAAAA,YAAY,EAACA,YAAY,CAACY,KAAD,CAA1B;AAAkCuB,MAAAA,SAAS,EAAC,IAA5C;AAAiDC,MAAAA,OAAO,EAAC,IAAzD;AAA8DC,MAAAA,WAAW,EAAE,SAA3E;AAAqFC,MAAAA,SAAS,EAAE;AAAhG,KAA7H;AAA0O,IAAA,IAAI,EAAEJ,CAAC,CAAC1B,GAAF,CAAMC,WAAN,CAAkB9E,GAAlB,CAAuBgG,CAAD,KAClQ;AACIrG,MAAAA,GAAG,EAACqG,CAAC,CAAC,CAAD,CADT;AAEIpG,MAAAA,GAAG,EAACoG,CAAC,CAAC,CAAD;AAFT,KADkQ,CAAtB,CAAhP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,CApBC,EA8BD7B,MAAM,IAAE,MAAC,UAAD;AAAY,IAAA,QAAQ,EAAEF,YAAtB;AAAoC,IAAA,YAAY,EAAEkB,UAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACL;AAAK,IAAA,KAAK,EAAEC,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAOI;AAAQ,IAAA,OAAO,EAAEI,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAPJ,CADK,CA9BP,CAJE,CADA,CAvBJ,CAFJ,CADF;AA2FD;;AAGD,MAAMoB,OAAO,GAAEnH,MAAM,CAACoH,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAfA","sourcesContent":["import React, {useState,useEffect} from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { Polyline ,Marker,StreetViewPanorama,MarkerClusterer} from '@react-google-maps/api';\nimport { InfoWindow } from '@react-google-maps/api';\nimport Router from 'next/router'\nimport {LOAD_MAP_REQUEST} from '../../reducers/map'\nimport { MOVING_MAP_REQUEST,BIKE_MAP_REQUEST,RUNNING_MAP_REQUEST,SEARCH_MAP_REQUEST } from '../../reducers/map';\nimport {Input,Button,Row,Col,Card} from 'antd'\nimport GeomHandle from '../GoogleMap'\nimport SearchList from '../SearchList';\nimport Link from 'next/link';\nimport styled from \"styled-components\";\nimport wrapper from '../../store/configureStore';\n\n\n\n  var lat=1\n  var lng=2\n\n\nfunction selectMap({}) {\n    const {myLocation}=useSelector((state)=>state.map)\n\n    const [geom ,setGeom]=useState({\n        lat,\n        lng\n    })\n\n    function getLocation() {\n        if (navigator.geolocation) { // GPS를 지원하면\n          navigator.geolocation.getCurrentPosition(function(position) {\n             \n            setGeom({\n                lat:position.coords.latitude,\n                lng:position.coords.longitude\n            })\n          }, function(error) {\n            console.error(error);\n          }, {\n            enableHighAccuracy: false,\n            maximumAge: 0,\n            timeout: Infinity\n          });\n        } else {\n          alert('GPS를 지원하지 않습니다');\n        }\n      }\n\n   \n    useEffect(()=>{\n        getLocation()\n    },[])\n\n    const [isState,setIsState]=useState(false)\n    const [mapState,setMapState]= useState('B')\n\n   \n    const dispatch=useDispatch()\n\n    const mapContainerStyle = {\n    marginTop:60,\n    height: \"400px\",\n    width: \"700px\"\n    };\n  \n\n    const {searchMap}=useSelector((state)=>state.map)\n\n    // const [geom ,setGeom]=useState({lat:35.969997373905, lng: 128.45170755523503})\n    const [mapref, setMapRef] = useState(null);\n\n\n    const handleOnLoad = map => {\n        setMapRef(map);\n        console.log('load됨')\n        \n      };\n\n      const [nelat,setNelat]=useState()\n      const [nelng,setNelng]=useState()\n\n      const [swlat,setSwlat]=useState()\n      const [swlng,setSwlng]=useState()\n\n\n\n      const handleCenterChanged = () => {\n        if (mapref) {\n            \n        //   var zoom=mapref.getZoom()\n          var nt=mapref.getBounds().getNorthEast().lat();\n          var ng=mapref.getBounds().getNorthEast().lng();\n\n          var st=mapref.getBounds().getSouthWest().lat();\n          var sg=mapref.getBounds().getSouthWest().lng();\n\n          setNelat(nt)\n          setNelng(ng)\n          setSwlat(st)\n          setSwlng(sg)\n\n        \n        }\n\n        dispatch({ \n          type:MOVING_MAP_REQUEST,\n          data:{\n            north:{\n                lat:mapref.getBounds().getNorthEast().lat(),\n                lng:mapref.getBounds().getNorthEast().lng()\n              },\n              south:{\n                lat:mapref.getBounds().getSouthWest().lat(),\n                lng:mapref.getBounds().getSouthWest().lng()\n              },\n            event:mapState\n  \n          }\n        })\n      \n      }\n\n      //////markercluseter\n\n\n    const optionss = {\n        imagePath:\n        'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m', // so you must have m1.png, m2.png, m3.png, m4.png, m5.png and m6.png in that folder\n    }\n\n\n    function createKey(location) {\n        return location.lat + location.lng\n    }\n\n      //////markercluseter\n\n\n   ///주소검색\n\n    const {searchmapLoading}=useSelector((state)=>state.map)\n\n\n\n   const handleButton = async() => {\n       const currentAddr = document.getElementById('address').value\n       if (currentAddr){\n         const {lat, lng} = await GeomHandle(currentAddr)\n         setGeom({lat:lat,lng:lng})\n\n         dispatch({\n           type:SEARCH_MAP_REQUEST,\n           data:{\n            north:{\n              lat:mapref.getBounds().getNorthEast().lat(),\n              lng:mapref.getBounds().getNorthEast().lng()\n            },\n            south:{\n              lat:mapref.getBounds().getSouthWest().lat(),\n              lng:mapref.getBounds().getSouthWest().lng()\n            },\n            event:mapState\n  \n          }\n       })\n       console.log('aaa',searchMap)\n\n\n\n      \n       }\n     }\n\n\n   //주소검색\n\n\n\n      //polyline\n\n    //   const [propsPosition,setPropsPosition]=useState()\n\n      const [propsId,setPropsId]=useState()\n\n\n      const [infoPosition,setInfoPosition]=useState({\n        lat:'',\n        lng:'',\n        })\n    \n      const [target,setTarget]=useState(false)\n\n\n      const [strokeWeight,setStrokeWeight]=useState(Array.from({length: searchMap.length}, () => 3))\n      const strokeWeights= Array.from({length: searchMap.length}, () => 3);\n\n\n      const polylineClick=(positionData)=>{\n     \n    \n        setInfoPosition({\n            lat:positionData.gps.coordinates[3][1],\n            lng:positionData.gps.coordinates[3][0]\n        })\n        setPropsId(positionData._id)\n        // setPropsPosition(positionData)\n        setTarget(true)\n        \n    }\n    \n\n    function mouseOver(index){\n        strokeWeights[index]=10\n        setStrokeWeight(strokeWeights)\n    }\n\n    function mouseOut(index){\n        strokeWeights[index]=3\n        setStrokeWeight(strokeWeights)\n\n    }\n\n      //polyline\n\n      //infoWindow\n      const closeClick=()=>{\n        setTarget(false)\n    }\n\n\n\n    const divStyle = {\n        background: `white`,\n        border: `1px solid #ccc`,\n        padding: 15\n    }\n\n\n  const oneRoute=()=>{\n    dispatch({\n               type:LOAD_MAP_REQUEST,\n               data:propsId\n             })\n               \n    Router.push({\n        pathname: '/Route/[id]',\n        query: {id:propsId},\n      });\n\n      console.log('dong',searchMap)\n}\n\n\n      //infoWindow\n\n    //   const [mapState,setMapState]=useState()\n    // const {mapState}=useSelector((state)=>state.map)\n    const bikeSelectMap=()=>{\n        setMapState('B')\n        setIsState(true)\n    }\n\n    const runningSelectMap=()=>{\n        setMapState('R')\n        setIsState(true)\n    }\n   \n    useEffect(()=>{\n\n        if(mapState==='B'&&isState===true){\n            dispatch({\n                type:BIKE_MAP_REQUEST,\n                data:{\n                    event:mapState,\n                    north:{\n                        lat:mapref.getBounds().getNorthEast().lat(),\n                        lng:mapref.getBounds().getNorthEast().lng()\n                      },\n                      south:{\n                        lat:mapref.getBounds().getSouthWest().lat(),\n                        lng:mapref.getBounds().getSouthWest().lng()\n                      },  \n                }\n            })\n            setIsState(false)\n        }else if(mapState==='R'&&isState===true){\n            dispatch({\n                type:RUNNING_MAP_REQUEST,\n                data:{\n                    event:mapState,\n                    north:{\n                        lat:mapref.getBounds().getNorthEast().lat(),\n                        lng:mapref.getBounds().getNorthEast().lng()\n                      },\n                      south:{\n                        lat:mapref.getBounds().getSouthWest().lat(),\n                        lng:mapref.getBounds().getSouthWest().lng()\n                      },\n                }\n            })\n            setIsState(false)\n\n        }\n    },[mapState,isState])\n\n\n\n  \n    \n\n\n  return (\n    <div>\n\n        <Row>\n            <Col span={10}>\n                <Input.Search \n                loading={searchmapLoading} enterButton=\"검색\" onPressEnter={handleButton}\n                id=\"address\"  style={{verticalAlign:'middle' ,width:'300px'}} /><br></br>\n                \n                <Buttons>\n                <Button onClick={bikeSelectMap}>자전거</Button>\n                <Button onClick={runningSelectMap}>달리기</Button> \n                </Buttons>\n\n                 <div>\n                    {\n                        searchMap.map((p,index)=>(\n                            \n                          <SearchList setInfoPosition={setInfoPosition} setPropsId={setPropsId} setTarget={setTarget} index={index} setStrokeWeight={setStrokeWeight} list={p} key={p.id} ></SearchList>\n                            \n                        ))\n                        }\n                </div> \n                \n            </Col>\n\n            <Col span={10}>\n            <LoadScript\n            googleMapsApiKey=\"AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE\"\n        >\n            \n          <GoogleMap\n            id=\"marker-example\"\n            mapContainerStyle={mapContainerStyle}\n            zoom={15}\n            center={geom}\n            onLoad={handleOnLoad}\n            onDragEnd={handleCenterChanged}\n            // onZoomChanged={handleCenterChanged}\n          >\n\n        <MarkerClusterer options={optionss}>\n                {(clusterer) =>\n                    searchMap.map((p) => (\n                    <Marker  key={createKey(p)} position={{lat:p.start_latlng[1],lng:p.start_latlng[0]}} clusterer={clusterer}  icon={{\n                    scaledSize: new google.maps.Size(30,30),} } />\n                    ))\n                }\n        </MarkerClusterer>\n            \n\n        {searchMap.map((m,index)=>(\n            <Polyline  onRightClick={()=>polylineClick(m)} onMouseOver={()=>mouseOver(index)} onMouseOut={()=>mouseOut(index)}  options={{strokeWeight:strokeWeight[index],clickable:true,visible:true,strokeColor: '#FF0000',fillColor: '#FF0000',}} path={m.gps.coordinates.map((p)=>(\n                {\n                    lat:p[1],\n                    lng:p[0]\n                }\n            ))}></Polyline>\n            \n            ))}\n            \n        {target&&<InfoWindow position={infoPosition} onCloseClick={closeClick}>\n            <div style={divStyle}>\n                <h1>동영</h1>\n                    {/* <Link href={{\n                        pathname:'/Route/[id]',\n                        query: {id:propsId},\n                    }}><a>상세보기</a></Link>\n                     */}\n                <button onClick={oneRoute}>상세보기</button>\n            </div>\n            </InfoWindow>} \n            \n\n        \n       \n            \n          </GoogleMap>\n          </LoadScript>\n            \n            </Col>\n\n        </Row>\n\n    \n\n   \n             \n\n    </div>\n  )\n}\n\n\nconst Buttons= styled.div`\n\n\nButton:hover {\n    background:#1683e8;\n    border-color: #1683e8;\n    color: #fff;\n  }\n\n  Button:focus {\n    background:#1683e8;\n    color: #fff;\n  }\n\n\n`\n\n"]},"metadata":{},"sourceType":"module"}