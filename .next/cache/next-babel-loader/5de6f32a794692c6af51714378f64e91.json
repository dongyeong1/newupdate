{"ast":null,"code":"var _jsxFileName = \"/Users/dong/CapstonProject/pages/polyline.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { Polyline, Marker, StreetViewPanorama, MarkerClusterer } from '@react-google-maps/api';\nimport AppLayout from '../component/AppLayout'; // import RecordElevation from '../component/RecordElavation'\n\nimport GeomHandle from '../component/GoogleMap';\nimport { Input } from 'antd';\nconst mapContainerStyle = {\n  height: \"400px\",\n  width: \"800px\"\n};\n\nconst call = () => {\n  console.log('cccccc');\n};\n\nconst center = {\n  lat: 35.969997373905,\n  lng: 128.45170755523503\n};\n\nconst onLoad = polyline => {\n  console.log('polyline: ', polyline);\n};\n\nconst pathsss = {\n  'one': [{\n    lat: 35.24731788471166,\n    lng: 128.86906207420088\n  }, {\n    lat: 35.260354548127424,\n    lng: 128.81198466603703\n  }]\n};\nconst path = [[{\n  lat: 35.969997373905,\n  lng: 128.45170755523503\n}, {\n  lat: 35.985501427015464,\n  lng: 128.40407191943035\n}, {\n  lat: 35.89580489690752,\n  lng: 128.62238368221892\n}], [{\n  lat: 35.24651100148735,\n  lng: 128.87070362130143\n}, {\n  lat: 35.24752656439432,\n  lng: 128.8729993854958\n}, {\n  lat: 35.248984786322424,\n  lng: 128.87318007064073\n}, {\n  lat: 35.25018259185734,\n  lng: 128.87332887017186\n}, {\n  lat: 35.25065129355367,\n  lng: 128.87505069331763\n}, {\n  lat: 35.25145581526787,\n  lng: 128.87358573620605\n}]];\nconst markerPosition = [{\n  lat: 35.89580489690752,\n  lng: 128.62238368221892\n}, {\n  lat: 35.25145581526787,\n  lng: 128.87358573620605\n}];\nconst options = {\n  strokeColor: '#FF0000',\n  strokeOpacity: 0.8,\n  strokeWeight: 2,\n  fillColor: '#FF0000',\n  fillOpacity: 0.35,\n  clickable: false,\n  draggable: false,\n  editable: false,\n  visible: true,\n  radius: 30000,\n  //-27부터 호주 시작해서 점찍고 점찍고 한다\n  paths: [[{\n    lat: 35.969997373905,\n    lng: 128.45170755523503\n  }, {\n    lat: 35.985501427015464,\n    lng: 128.40407191943035\n  }, {\n    lat: 35.89580489690752,\n    lng: 128.62238368221892\n  }], [{\n    lat: 35.24731788471166,\n    lng: 128.86906207420088\n  }, {\n    lat: 35.260354548127424,\n    lng: 128.81198466603703\n  }]],\n  zIndex: 1\n};\n\nfunction createKey(location) {\n  return location.lat + location.lng;\n}\n\nconst optionss = {\n  imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m' // so you must have m1.png, m2.png, m3.png, m4.png, m5.png and m6.png in that folder\n\n};\n\nfunction polyline() {\n  const myLatLng = {\n    lat: -25.363,\n    lng: 131.044\n  }; // const map = new google.maps.Map(document.getElementById(\"map\"), {\n  //   zoom: 4,\n  //   center: myLatLng,\n  // });\n\n  const {\n    0: geom,\n    1: setGeom\n  } = useState({\n    lat: 35.969997373905,\n    lng: 128.45170755523503\n  });\n\n  const handleButton = async () => {\n    const currentAddr = document.getElementById('address').value;\n\n    if (currentAddr) {\n      const {\n        lat,\n        lng\n      } = await GeomHandle(currentAddr);\n      setGeom({\n        lat: lat,\n        lng: lng\n      });\n    }\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, __jsx(AppLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }), \"\\uAC80\\uC0C9\\uD558\\uAE30\", __jsx(Input.Search, {\n    id: \"address\",\n    enterButton: true,\n    style: {\n      verticalAlign: 'middle',\n      marginLeft: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }), __jsx(\"button\", {\n    onClick: handleButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }, \"\\uD074\\uB9AD\"), __jsx(LoadScript, {\n    googleMapsApiKey: \"AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }, __jsx(GoogleMap, {\n    id: \"marker-example\",\n    mapContainerStyle: mapContainerStyle,\n    zoom: 15,\n    center: geom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 11\n    }\n  }, __jsx(MarkerClusterer, {\n    options: optionss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 1\n    }\n  }, clusterer => markerPosition.map(p => __jsx(Marker, {\n    key: createKey(p),\n    position: p,\n    onClick: call,\n    clusterer: clusterer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 15\n    }\n  }))), __jsx(Marker, {\n    position: {\n      lat: 35.25018259185734,\n      lng: 128.87332887017186\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }\n  }), path.map(m => __jsx(Polyline, {\n    onLoad: onLoad,\n    options: options,\n    path: m,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }\n  })))));\n}\n\nexport default /*#__PURE__*/React.memo(polyline);","map":{"version":3,"sources":["/Users/dong/CapstonProject/pages/polyline.js"],"names":["React","useState","GoogleMap","LoadScript","Polyline","Marker","StreetViewPanorama","MarkerClusterer","AppLayout","GeomHandle","Input","mapContainerStyle","height","width","call","console","log","center","lat","lng","onLoad","polyline","pathsss","path","markerPosition","options","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","clickable","draggable","editable","visible","radius","paths","zIndex","createKey","location","optionss","imagePath","myLatLng","geom","setGeom","handleButton","currentAddr","document","getElementById","value","verticalAlign","marginLeft","clusterer","map","p","m","memo"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,wBAAtC;AACA,SAASC,QAAT,EAAmBC,MAAnB,EAA0BC,kBAA1B,EAA6CC,eAA7C,QAAmE,wBAAnE;AACA,OAAOC,SAAP,MAAsB,wBAAtB,C,CACA;;AAEA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,SAASC,KAAT,QAAsB,MAAtB;AAUA,MAAMC,iBAAiB,GAAG;AACxBC,EAAAA,MAAM,EAAE,OADgB;AAExBC,EAAAA,KAAK,EAAE;AAFiB,CAA1B;;AAKA,MAAMC,IAAI,GAAC,MAAI;AACXC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACH,CAFD;;AAIA,MAAMC,MAAM,GAAG;AAACC,EAAAA,GAAG,EAAG,eAAP;AAAwBC,EAAAA,GAAG,EAAE;AAA7B,CAAf;;AAEA,MAAMC,MAAM,GAAGC,QAAQ,IAAI;AACzBN,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BK,QAA1B;AACD,CAFD;;AAIA,MAAMC,OAAO,GAAG;AAGT,SAAO,CAAE;AAACJ,IAAAA,GAAG,EAAG,iBAAP;AAA2BC,IAAAA,GAAG,EAAE;AAAhC,GAAF,EAET;AAACD,IAAAA,GAAG,EAAE,kBAAN;AAA2BC,IAAAA,GAAG,EAAC;AAA/B,GAFS;AAHE,CAAhB;AAaA,MAAMI,IAAI,GAAG,CACb,CACI;AAACL,EAAAA,GAAG,EAAG,eAAP;AAAwBC,EAAAA,GAAG,EAAE;AAA7B,CADJ,EAEI;AAACD,EAAAA,GAAG,EAAC,kBAAL;AAAyBC,EAAAA,GAAG,EAAC;AAA7B,CAFJ,EAII;AAACD,EAAAA,GAAG,EAAE,iBAAN;AAAyBC,EAAAA,GAAG,EAAE;AAA9B,CAJJ,CADa,EASb,CACI;AAACD,EAAAA,GAAG,EAAG,iBAAP;AAA4BC,EAAAA,GAAG,EAAE;AAAjC,CADJ,EAGI;AAACD,EAAAA,GAAG,EAAE,iBAAN;AAA2BC,EAAAA,GAAG,EAAC;AAA/B,CAHJ,EAII;AAACD,EAAAA,GAAG,EAAC,kBAAL;AAAyBC,EAAAA,GAAG,EAAC;AAA7B,CAJJ,EAKI;AAACD,EAAAA,GAAG,EAAC,iBAAL;AAAwBC,EAAAA,GAAG,EAAC;AAA5B,CALJ,EAMI;AAACD,EAAAA,GAAG,EAAC,iBAAL;AAAwBC,EAAAA,GAAG,EAAC;AAA5B,CANJ,EAOI;AACID,EAAAA,GAAG,EAAC,iBADR;AAC2BC,EAAAA,GAAG,EAAC;AAD/B,CAPJ,CATa,CAAb;AA4BA,MAAMK,cAAc,GAAC,CACjB;AAACN,EAAAA,GAAG,EAAE,iBAAN;AAAyBC,EAAAA,GAAG,EAAE;AAA9B,CADiB,EACiC;AAC9CD,EAAAA,GAAG,EAAC,iBAD0C;AACvBC,EAAAA,GAAG,EAAC;AADmB,CADjC,CAArB;AAMA,MAAMM,OAAO,GAAG;AACdC,EAAAA,WAAW,EAAE,SADC;AAEdC,EAAAA,aAAa,EAAE,GAFD;AAGdC,EAAAA,YAAY,EAAE,CAHA;AAIdC,EAAAA,SAAS,EAAE,SAJG;AAKdC,EAAAA,WAAW,EAAE,IALC;AAMdC,EAAAA,SAAS,EAAE,KANG;AAOdC,EAAAA,SAAS,EAAE,KAPG;AAQdC,EAAAA,QAAQ,EAAE,KARI;AASdC,EAAAA,OAAO,EAAE,IATK;AAUdC,EAAAA,MAAM,EAAE,KAVM;AAWd;AACAC,EAAAA,KAAK,EAAE,CAED,CACI;AAAClB,IAAAA,GAAG,EAAG,eAAP;AAAwBC,IAAAA,GAAG,EAAE;AAA7B,GADJ,EAEI;AAACD,IAAAA,GAAG,EAAC,kBAAL;AAAyBC,IAAAA,GAAG,EAAC;AAA7B,GAFJ,EAII;AAACD,IAAAA,GAAG,EAAE,iBAAN;AAAyBC,IAAAA,GAAG,EAAE;AAA9B,GAJJ,CAFC,EAUD,CACI;AAACD,IAAAA,GAAG,EAAG,iBAAP;AAA2BC,IAAAA,GAAG,EAAE;AAAhC,GADJ,EAGI;AAACD,IAAAA,GAAG,EAAE,kBAAN;AAA2BC,IAAAA,GAAG,EAAC;AAA/B,GAHJ,CAVC,CAZO;AAgCdkB,EAAAA,MAAM,EAAE;AAhCM,CAAhB;;AAkCA,SAASC,SAAT,CAAmBC,QAAnB,EAA6B;AACzB,SAAOA,QAAQ,CAACrB,GAAT,GAAeqB,QAAQ,CAACpB,GAA/B;AACD;;AAGH,MAAMqB,QAAQ,GAAG;AACbC,EAAAA,SAAS,EACP,wFAFW,CAE+E;;AAF/E,CAAjB;;AAMA,SAASpB,QAAT,GAAoB;AAChB,QAAMqB,QAAQ,GAAG;AAAExB,IAAAA,GAAG,EAAE,CAAC,MAAR;AAAgBC,IAAAA,GAAG,EAAE;AAArB,GAAjB,CADgB,CAEhB;AACA;AACA;AACA;;AACA,QAAM;AAAA,OAACwB,IAAD;AAAA,OAAOC;AAAP,MAAgB3C,QAAQ,CAAC;AAACiB,IAAAA,GAAG,EAAC,eAAL;AAAsBC,IAAAA,GAAG,EAAE;AAA3B,GAAD,CAA9B;;AAEA,QAAM0B,YAAY,GAAG,YAAW;AAC5B,UAAMC,WAAW,GAAGC,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmCC,KAAvD;;AACA,QAAIH,WAAJ,EAAgB;AACd,YAAM;AAAC5B,QAAAA,GAAD;AAAMC,QAAAA;AAAN,UAAa,MAAMV,UAAU,CAACqC,WAAD,CAAnC;AACAF,MAAAA,OAAO,CAAC;AAAC1B,QAAAA,GAAG,EAACA,GAAL;AAASC,QAAAA,GAAG,EAACA;AAAb,OAAD,CAAP;AAED;AACF,GAPH;;AASA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,8BAGA,MAAC,KAAD,CAAO,MAAP;AAAc,IAAA,EAAE,EAAC,SAAjB;AAA2B,IAAA,WAAW,MAAtC;AAAuC,IAAA,KAAK,EAAE;AAAC+B,MAAAA,aAAa,EAAC,QAAf;AAAyBC,MAAAA,UAAU,EAAC;AAApC,KAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHA,EAIA;AAAQ,IAAA,OAAO,EAAEN,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJA,EAOA,MAAC,UAAD;AACA,IAAA,gBAAgB,EAAC,yCADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIE,MAAC,SAAD;AACE,IAAA,EAAE,EAAC,gBADL;AAEE,IAAA,iBAAiB,EAAElC,iBAFrB;AAGE,IAAA,IAAI,EAAE,EAHR;AAIE,IAAA,MAAM,EAAEgC,IAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOV,MAAC,eAAD;AAAiB,IAAA,OAAO,EAAEH,QAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACYY,SAAD,IACC5B,cAAc,CAAC6B,GAAf,CAAoBC,CAAD,IACjB,MAAC,MAAD;AAAQ,IAAA,GAAG,EAAEhB,SAAS,CAACgB,CAAD,CAAtB;AAA2B,IAAA,QAAQ,EAAEA,CAArC;AAAwC,IAAA,OAAO,EAAExC,IAAjD;AAAuD,IAAA,SAAS,EAAEsC,SAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFZ,CAPU,EAcF,MAAC,MAAD;AAAQ,IAAA,QAAQ,EAAE;AAAClC,MAAAA,GAAG,EAAC,iBAAL;AAAwBC,MAAAA,GAAG,EAAC;AAA5B,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdE,EAmBDI,IAAI,CAAC8B,GAAL,CAAUE,CAAD,IACN,MAAC,QAAD;AAAU,IAAA,MAAM,EAAEnC,MAAlB;AAA2B,IAAA,OAAO,EAAEK,OAApC;AAA6C,IAAA,IAAI,EAAE8B,CAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,CAnBC,CAJF,CAPA,CADJ;AAsDD;;AAED,4BAAevD,KAAK,CAACwD,IAAN,CAAWnC,QAAX,CAAf","sourcesContent":["import React, {useState} from 'react'\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { Polyline ,Marker,StreetViewPanorama,MarkerClusterer} from '@react-google-maps/api';\nimport AppLayout from '../component/AppLayout';\n// import RecordElevation from '../component/RecordElavation'\n\nimport GeomHandle from '../component/GoogleMap'\nimport { Input } from 'antd';\n\n\n\n\n\n\n\n\n\nconst mapContainerStyle = {\n  height: \"400px\",\n  width: \"800px\"\n};\n\nconst call=()=>{\n    console.log('cccccc')\n}\n\nconst center = {lat:  35.969997373905, lng: 128.45170755523503};\n\nconst onLoad = polyline => {\n  console.log('polyline: ', polyline)\n};\n\nconst pathsss = {\n    \n  \n       'one': [ {lat:  35.24731788471166,  lng: 128.86906207420088},\n   \n     {lat: 35.260354548127424,  lng:128.81198466603703}\n     ],\n\n\n    \n  \n};\n\nconst path = [\n[\n    {lat:  35.969997373905, lng: 128.45170755523503},\n    {lat:35.985501427015464, lng:128.40407191943035},\n\n    {lat: 35.89580489690752, lng: 128.62238368221892}\n    \n]\n,\n[\n    {lat:  35.24651100148735,   lng: 128.87070362130143},\n   \n    {lat: 35.24752656439432,   lng:128.8729993854958},\n    {lat:35.248984786322424, lng:128.87318007064073},\n    {lat:35.25018259185734, lng:128.87332887017186},\n    {lat:35.25065129355367, lng:128.87505069331763},\n    {\n        lat:35.25145581526787, lng:128.87358573620605\n    }\n\n    \n]\n\n\n   \n    \n];\n\nconst markerPosition=[\n    {lat: 35.89580489690752, lng: 128.62238368221892},{\n        lat:35.25145581526787, lng:128.87358573620605\n    }\n]\n\nconst options = {\n  strokeColor: '#FF0000',\n  strokeOpacity: 0.8,\n  strokeWeight: 2,\n  fillColor: '#FF0000',\n  fillOpacity: 0.35,\n  clickable: false,\n  draggable: false,\n  editable: false,\n  visible: true,\n  radius: 30000,\n  //-27부터 호주 시작해서 점찍고 점찍고 한다\n  paths: [\n    \n        [\n            {lat:  35.969997373905, lng: 128.45170755523503},\n            {lat:35.985501427015464, lng:128.40407191943035},\n        \n            {lat: 35.89580489690752, lng: 128.62238368221892}\n            \n        ]\n        ,\n        [\n            {lat:  35.24731788471166,  lng: 128.86906207420088},\n           \n            {lat: 35.260354548127424,  lng:128.81198466603703}\n            \n        ]\n      \n  \n    \n  ],\n  zIndex: 1\n};\nfunction createKey(location) {\n    return location.lat + location.lng\n  }\n\n\nconst optionss = {\n    imagePath:\n      'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m', // so you must have m1.png, m2.png, m3.png, m4.png, m5.png and m6.png in that folder\n  }\n\n\nfunction polyline() {\n    const myLatLng = { lat: -25.363, lng: 131.044 };\n    // const map = new google.maps.Map(document.getElementById(\"map\"), {\n    //   zoom: 4,\n    //   center: myLatLng,\n    // });\n    const [geom ,setGeom]=useState({lat:35.969997373905, lng: 128.45170755523503})\n\n    const handleButton = async() => {\n        const currentAddr = document.getElementById('address').value\n        if (currentAddr){\n          const {lat, lng} = await GeomHandle(currentAddr)\n          setGeom({lat:lat,lng:lng})\n       \n        }\n      }\n  \n    return (\n        <div>\n            <AppLayout></AppLayout>        \n         검색하기\n        <Input.Search id=\"address\" enterButton style={{verticalAlign:'middle' ,marginLeft:'10px'}}/>\n        <button onClick={handleButton}>클릭</button>\n              \n\n        <LoadScript\n        googleMapsApiKey=\"AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE\"\n        >\n            \n          <GoogleMap\n            id=\"marker-example\"\n            mapContainerStyle={mapContainerStyle}\n            zoom={15}\n            center={geom}\n          >\n\n<MarkerClusterer options={optionss}>\n          {(clusterer) =>\n            markerPosition.map((p) => (\n              <Marker key={createKey(p)} position={p} onClick={call} clusterer={clusterer} />\n            ))\n          }\n        </MarkerClusterer>\n        <Marker position={{lat:35.25018259185734, lng:128.87332887017186}}  ></Marker>\n        {/* {path.map((p)=>{\n            \n        })} */}\n\n        {path.map((m)=>(\n            <Polyline onLoad={onLoad}  options={options} path={m}></Polyline>\n            \n            ))}\n             {/* <StreetViewPanorama\n      position={center}\n      visible={true}\n    /> */}\n        \n\n        \n       \n            \n          </GoogleMap>\n          </LoadScript>\n               {/* <div className=\"chart\">\n           {graphData && (\n             <RecordElevation graphData={graphData} setPosition={setPosition} />\n           )}\n         </div> */}\n         </div>\n\n    )\n  }\n  \n  export default React.memo(polyline)"]},"metadata":{},"sourceType":"module"}