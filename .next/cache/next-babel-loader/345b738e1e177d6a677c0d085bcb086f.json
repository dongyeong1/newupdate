{"ast":null,"code":"import { all, call, fork, put, takeLatest, take } from 'redux-saga/effects';\nimport { SEARCH_MAP_REQUEST, SEARCH_MAP_SUCCESS, SEARCH_MAP_FAILURE } from '../reducers/map';\n\nfunction searchMapAPI(data) {// return axios.post('/searchmap',data)\n}\n\nfunction* searchMap(action) {\n  try {\n    // const result = yield call(loadPostsAPI,action.data)\n    yield put({\n      type: SEARCH_MAP_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: SEARCH_MAP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchSearchMap() {\n  yield takeLatest(SEARCH_MAP_REQUEST, searchMap);\n}\n\nexport default function* rootSaga() {\n  yield all([fork(watchSearchMap)]);\n}","map":{"version":3,"sources":["/Users/dong/CapstonProject/sagas/map.js"],"names":["all","call","fork","put","takeLatest","take","SEARCH_MAP_REQUEST","SEARCH_MAP_SUCCESS","SEARCH_MAP_FAILURE","searchMapAPI","data","searchMap","action","type","err","error","response","watchSearchMap","rootSaga"],"mappings":"AAAA,SAASA,GAAT,EAAaC,IAAb,EAAkBC,IAAlB,EAAuBC,GAAvB,EAA2BC,UAA3B,EAAuCC,IAAvC,QAAkD,oBAAlD;AAEA,SAASC,kBAAT,EACAC,kBADA,EAEAC,kBAFA,QAEyB,iBAFzB;;AAMA,SAASC,YAAT,CAAsBC,IAAtB,EAA2B,CACvB;AACC;;AAGL,UAAUC,SAAV,CAAoBC,MAApB,EAA2B;AACvB,MAAG;AACC;AACA,UAAMT,GAAG,CAAC;AACNU,MAAAA,IAAI,EAACN,kBADC;AAENG,MAAAA,IAAI,EAACE,MAAM,CAACF;AAFN,KAAD,CAAT;AAKH,GAPD,CAOC,OAAMI,GAAN,EAAU;AACP,UAAMX,GAAG,CAAC;AACNU,MAAAA,IAAI,EAACL,kBADC;AAENO,MAAAA,KAAK,EAACD,GAAG,CAACE,QAAJ,CAAaN;AAFb,KAAD,CAAT;AAMH;AACJ;;AAGD,UAAUO,cAAV,GAA0B;AACtB,QAAMb,UAAU,CAACE,kBAAD,EAAoBK,SAApB,CAAhB;AACH;;AAGD,eAAe,UAAUO,QAAV,GAAoB;AAE/B,QAAMlB,GAAG,CAAC,CACNE,IAAI,CAACe,cAAD,CADE,CAAD,CAAT;AAKH","sourcesContent":["import { all,call,fork,put,takeLatest, take} from 'redux-saga/effects'\n\nimport { SEARCH_MAP_REQUEST ,\nSEARCH_MAP_SUCCESS,\nSEARCH_MAP_FAILURE} from '../reducers/map'\n\n\n\nfunction searchMapAPI(data){\n    // return axios.post('/searchmap',data)\n    }\n    \n\nfunction* searchMap(action){\n    try{\n        // const result = yield call(loadPostsAPI,action.data)\n        yield put({\n            type:SEARCH_MAP_SUCCESS,\n            data:action.data\n        })\n\n    }catch(err){\n        yield put({\n            type:SEARCH_MAP_FAILURE,\n            error:err.response.data,\n             \n        })\n\n    }\n}\n\n\nfunction* watchSearchMap(){\n    yield takeLatest(SEARCH_MAP_REQUEST,searchMap)\n}\n\n\nexport default function* rootSaga(){\n\n    yield all([\n        fork(watchSearchMap),\n      \n    ])\n\n}\n"]},"metadata":{},"sourceType":"module"}