{"ast":null,"code":"var _jsxFileName = \"/Users/dong/CapstonProject/pages/Route/[id].js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport AppLayout from '../../component/AppLayout';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Polyline, Marker, StreetViewPanorama, MarkerClusterer } from '@react-google-maps/api';\nimport { MdDirectionsBike } from 'react-icons/md';\nimport { Card, Table, Row, Col } from 'antd';\nimport SideBar from '../../component/Layout/SideBar';\nimport { useRouter } from 'next/router';\nimport RouteInformation from '../../component/RouteInformation';\nimport { LOAD_LOGIN_REQUEST } from '../../reducers/user'; // import wrapper from '../../store/configureStore';\n\nimport { VerticalGridLines, HorizontalGridLines, XYPlot, LineSeries, XAxis, YAxis, Crosshair } from \"react-vis\";\nimport \"react-vis/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar mapContainerStyle = {\n  height: \"300px\",\n  width: \"500px\",\n  marginLeft: '50px',\n  marginTop: '20px'\n};\nvar dummyLank = [{\n  'userId': 1,\n  'userNickname': '동영',\n  'record': '02:36:02',\n  'speed': '27',\n  'date': '2021년2월22일'\n}, {\n  'userId': 2,\n  'userNickname': '재현',\n  'record': '02:38:57',\n  'speed': '26',\n  'date': '2021년2월22일'\n}, {\n  'userId': 3,\n  'userNickname': '현종',\n  'record': '02:40:22',\n  'speed': '25',\n  'date': '2021년2월22일'\n}, {\n  'userId': 4,\n  'userNickname': '새별',\n  'record': '02:52:11',\n  'speed': '25',\n  'date': '2021년2월22일'\n}, {\n  'userId': 5,\n  'userNickname': '대영',\n  'record': '02:55:32',\n  'speed': '24',\n  'date': '2021년2월22일'\n}, {\n  'userId': 6,\n  'userNickname': '세준',\n  'record': '02:58:06',\n  'speed': '24',\n  'date': '2021년2월22일'\n}];\n\nfunction id() {\n  _s();\n\n  var router = useRouter();\n  var id = router.query.id;\n  return id;\n}\n\n_s(id, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\nfunction oneRoute() {\n  _s2();\n\n  useEffect(function () {\n    dispatch({\n      type: LOAD_LOGIN_REQUEST\n    });\n  }, []);\n  var router = useRouter();\n\n  var _useSelector = useSelector(function (state) {\n    return state.map;\n  }),\n      loadMap = _useSelector.loadMap,\n      searchMap = _useSelector.searchMap;\n\n  var id = router.query.id;\n  var dispatch = useDispatch(); // useEffect(()=>{\n  //    dispatch({\n  //         type:LOAD_MAP_REQUEST,\n  //         data:id\n  //     })\n  // },[])\n  // const dispatch=useDispatch()\n  // useEffect(()=>{\n  //     console.log(router.query)\n  // },[])\n\n  var _useState = useState(5),\n      strokeWeight = _useState[0],\n      setStrokeWeight = _useState[1];\n\n  var mouseOut = function mouseOut() {\n    setStrokeWeight(5);\n    console.log('aaa');\n  };\n\n  var mouseOver = function mouseOver() {\n    setStrokeWeight(10);\n    console.log('over');\n  };\n\n  var options = {\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.8,\n    strokeWeight: strokeWeight,\n    fillColor: '#FF0000',\n    fillOpacity: 0.35,\n    clickable: true,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: 30000,\n    //-27부터 호주 시작해서 점찍고 점찍고 한다\n    paths: [[{\n      lat: 35.969997373905,\n      lng: 128.45170755523503\n    }, {\n      lat: 35.985501427015464,\n      lng: 128.40407191943035\n    }, {\n      lat: 35.89580489690752,\n      lng: 128.62238368221892\n    }]],\n    zIndex: 1\n  }; //elevmarker\n\n  var _useState2 = useState({\n    lat: '',\n    lng: ''\n  }),\n      elevPath = _useState2[0],\n      setElevPath = _useState2[1];\n\n  var _useState3 = useState({\n    crosshairValue: []\n  }),\n      state = _useState3[0],\n      setState = _useState3[1];\n\n  var _useState4 = useState(''),\n      index = _useState4[0],\n      setIndex = _useState4[1];\n\n  var handleMouseOver = function handleMouseOver() {\n    console.log('qqqq');\n    setState({\n      crosshairValue: []\n    });\n    setIndex(0);\n  };\n\n  var qq = function qq(value, _ref) {\n    var index = _ref.index;\n    console.log(value);\n    console.log('aa', index);\n    setIndex(index);\n    setState({\n      crosshairValue: loadMap.track.altitude.map(function (d) {\n        return d;\n      })\n    });\n    setElevPath({\n      lat: loadMap.track.gps.coordinates[index][1],\n      lng: loadMap.track.gps.coordinates[index][0]\n    });\n    console.log('ha', state);\n  }; //elevmarker\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(oneRoute, \"HRymtMCoC1718Stlqf9Ipg+ArWk=\", false, function () {\n  return [useRouter, useSelector, useDispatch];\n});\n\nexport var __N_SSG = true;\nexport default oneRoute;","map":{"version":3,"sources":["/Users/dong/CapstonProject/pages/Route/[id].js"],"names":["React","useEffect","useState","AppLayout","GoogleMap","LoadScript","useDispatch","useSelector","Polyline","Marker","StreetViewPanorama","MarkerClusterer","MdDirectionsBike","Card","Table","Row","Col","SideBar","useRouter","RouteInformation","LOAD_LOGIN_REQUEST","VerticalGridLines","HorizontalGridLines","XYPlot","LineSeries","XAxis","YAxis","Crosshair","mapContainerStyle","height","width","marginLeft","marginTop","dummyLank","id","router","query","oneRoute","dispatch","type","state","map","loadMap","searchMap","strokeWeight","setStrokeWeight","mouseOut","console","log","mouseOver","options","strokeColor","strokeOpacity","fillColor","fillOpacity","clickable","draggable","editable","visible","radius","paths","lat","lng","zIndex","elevPath","setElevPath","crosshairValue","setState","index","setIndex","handleMouseOver","qq","value","track","altitude","d","gps","coordinates"],"mappings":"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","sourcesContent":["import React,{useEffect,useState} from 'react'\nimport AppLayout from '../../component/AppLayout';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Polyline ,Marker,StreetViewPanorama,MarkerClusterer} from '@react-google-maps/api';\nimport { MdDirectionsBike } from 'react-icons/md';\nimport {LOAD_MAP_REQUEST} from '../../reducers/map'\n\n\nimport wrapper from '../../store/configureStore'\nimport { END } from 'redux-saga';\nimport axios from 'axios'\nimport { LOAD_MY_INFO_REQUEST } from '../../reducers/user';\n\nimport {Card,Table,Row,Col} from 'antd'\nimport SideBar from '../../component/Layout/SideBar';\n\nimport { useRouter } from 'next/router';\nimport RouteInformation from '../../component/RouteInformation';\nimport { LOAD_LOGIN_REQUEST } from '../../reducers/user';\n\n// import wrapper from '../../store/configureStore';\n\n\n\nimport {\n    VerticalGridLines,\n    HorizontalGridLines,\n    XYPlot,\n    LineSeries,\n    XAxis,\n    YAxis,\n    Crosshair\n  } from \"react-vis\";\n  import \"react-vis/dist/style.css\";\n\n\n\nconst mapContainerStyle = {\n    height: \"300px\",\n    width: \"500px\",\n    marginLeft:'50px',\n    marginTop:'20px'\n  };\n\nconst dummyLank=[\n    {\n        'userId':1,\n        'userNickname':'동영',\n        'record':'02:36:02',\n        'speed':'27',\n        'date':'2021년2월22일'\n    },\n    {\n        'userId':2,\n        'userNickname':'재현',\n        'record':'02:38:57',\n        'speed':'26',\n        'date':'2021년2월22일'\n    },\n    {\n        'userId':3,\n        'userNickname':'현종',\n        'record':'02:40:22',\n        'speed':'25',\n        'date':'2021년2월22일'\n    },\n    {\n        'userId':4,\n        'userNickname':'새별',\n        'record':'02:52:11',\n        'speed':'25',\n        'date':'2021년2월22일'\n    },\n    {\n        'userId':5,\n        'userNickname':'대영',\n        'record':'02:55:32',\n        'speed':'24',\n        'date':'2021년2월22일'\n    },\n    {\n        'userId':6,\n        'userNickname':'세준',\n        'record':'02:58:06',\n        'speed':'24',\n        'date':'2021년2월22일'\n    }\n]\n\nfunction id(){\n    const router=useRouter()\n    const {id}=router.query;\n\n\n    return id\n}\n\n\nfunction oneRoute() {\n\n    useEffect(()=>{\n        dispatch({\n            type: LOAD_LOGIN_REQUEST\n            });\n    },[])\n    \n    const router=useRouter()\n\n    const {loadMap,searchMap}=useSelector((state)=>state.map)\n\n        const {id}=router.query;\n        const dispatch=useDispatch()\n\n        // useEffect(()=>{\n        //    dispatch({\n        //         type:LOAD_MAP_REQUEST,\n        //         data:id\n        //     })\n\n        // },[])\n\n\n    // const dispatch=useDispatch()\n  \n    \n\n\n    \n  \n\n    // useEffect(()=>{\n    //     console.log(router.query)\n    // },[])\n\n\nconst [strokeWeight,setStrokeWeight]=useState(5)\n\n\nconst mouseOut=()=>{\n    setStrokeWeight(5)\n    console.log('aaa')\n}\n\nconst mouseOver=()=>{\n    setStrokeWeight(10)\n    console.log('over')\n}\n   \n\n    const options = {\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.8,\n        strokeWeight: strokeWeight,\n        fillColor: '#FF0000',\n        fillOpacity: 0.35,\n        clickable: true,\n        draggable: false,\n        editable: false,\n        visible: true,\n        radius: 30000,\n        //-27부터 호주 시작해서 점찍고 점찍고 한다\n        paths: [\n              [\n                  {lat:  35.969997373905, lng: 128.45170755523503},\n                  {lat:35.985501427015464, lng:128.40407191943035},\n              \n                  {lat: 35.89580489690752, lng: 128.62238368221892}\n                  \n              ]\n        \n        ],\n        zIndex: 1\n      };\n\n      //elevmarker\n\n      const [elevPath, setElevPath]=useState({\n          lat:'',\n          lng:'',\n      })\n\n      const [state,setState]=useState({\n        crosshairValue:[]\n    })\n    const [index,setIndex]=useState('')\n\n    const handleMouseOver=()=>{\n        console.log('qqqq')\n        setState({crosshairValue:[]})\n        setIndex(0)\n    }\n    const qq=(value,{index})=>{\n        console.log(value)\n        console.log('aa',index)\n        setIndex(index)\n\n        setState({crosshairValue:loadMap.track.altitude.map(d=>d)})\n        setElevPath({\n            lat:loadMap.track.gps.coordinates[index][1],\n            lng:loadMap.track.gps.coordinates[index][0]\n        })\n        console.log('ha',state)\n    }\n      //elevmarker\n\n\n\n  return (\n    <div>\n     \n\n    {/* <Row>\n      \n        <Col span={20}>\n\n        <Row>\n        <Col span={10}>\n        <div style={{fontSize:33,marginLeft:50,marginTop:50}}>{loadMap.track.trackName}</div> \n        \n      \n\n <LoadScript\n googleMapsApiKey=\"AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE\"\n >\n     \n   <GoogleMap\n     id=\"marker-example\"\n     mapContainerStyle={mapContainerStyle}\n     zoom={13}\n     center={{lat:loadMap.track.start_latlng[1],lng:loadMap.track.start_latlng[0]}}\n    \n     \n   \n     \n   >\n \n <Marker  position={{lat:loadMap.track.start_latlng[1],lng:loadMap.track.start_latlng[0]}}  />\n\n {elevPath&&<Marker position={elevPath} icon={{url:' http://maps.google.com/mapfiles/ms/icons/blue.png',}} ></Marker>}\n \n \n\n      <Polyline onMouseOver={mouseOver} onMouseOut={mouseOut}  options={options} path={loadMap.track.gps.coordinates.map((m)=>(\n         {\n             lat:m[1],\n             lng:m[0]\n         }\n     ))}></Polyline> \n  \n \n \n \n \n \n     \n   </GoogleMap>\n   </LoadScript>\n\n   \n    <XYPlot height={300} width={500} onMouseLeave={handleMouseOver}>\n          <VerticalGridLines />\n          <HorizontalGridLines />\n          <XAxis />\n          <YAxis />\n          <LineSeries data={loadMap.track.altitude} onNearestX={qq} />\n          <Crosshair\n          values={state.crosshairValue}\n          className={'test-class-name'}\n        >\n            <div style={{background:'gray',width:100,height:100}}>\n                <h3>dong</h3>\n                <div style={{fontSize:20,marginLeft:20}}>{index && state.crosshairValue[index].y}</div>\n            </div>\n\n            </Crosshair>\n        </XYPlot>\n\n        </Col>\n        <Col span={6}>\n\n            \n\n            <RouteInformation></RouteInformation>\n\n            <div style={{marginTop:200}}>\n          <div style={{marginBottom:10,marginLeft:50}}>순위</div>\n        <div style={{ height:400,marginTop:20, marginLeft:50,width:700,overflow:'auto'}}>\n            <Card style={{backgroundColor:'gray' ,height:50,height:50,width:785,borderRadius:30}}>\n            <span style={{position:'absolute',bottom:12,left:20}}>순위</span>\n\n<span style={{position:'absolute',bottom:12,left:50}}>이름</span>\n<span style={{position:'absolute',bottom:12,left:125}}>속도</span>\n<span style={{position:'absolute',bottom:12,left:220}}>기록</span>\n\n<span style={{position:'absolute',bottom:12,left:370}}>날짜</span>\n            </Card>\n          \n        {loadMap.rank==='gpsData가 존재하지 않습니다.'?'':loadMap.rank.map((b,index)=>(\n                <Card style={{marginBottom:10,borderRadius:30}}>\n                                     <a>{index+1+'위'}</a>\n\n                    <span style={{marginLeft:10}}>{b.user.name}</span>\n                    <span style={{marginLeft:50,top:10,fontSize:11}}>100km</span>\n                    <span style={{marginLeft:80,top:10,fontSize:11}}>{b.totalTime}</span>\n                    \n                    <span style={{marginLeft:100,top:10,fontSize:11}}>{b.createdAt}</span>\n                </Card>\n                \n            ))\n            \n            }\n        </div>\n       \n    \n\n  \n    </div>\n\n        </Col>\n        </Row>     \n   \n\n \n        </Col>\n    </Row>\n\n   */}\n\n\n    \n\n\n\n  \n </div>\n\n\n\n\n )\n}\n\nexport async function getStaticPaths(){\n    const posts= await axios.get('http://13.124.24.179/api/tracks')\n   \n\nvar paths1=posts.data.map((id)=>({\n     params:{id:id._id}\n }))\n\n return{\n     paths:paths1,\n     fallback:false\n }\n}\n\n\nexport const getStaticProps=wrapper.getStaticProps(async (context)=>{\n    const cookie = context.req ? context.req.headers.cookie : '';\n      axios.defaults.headers.Cookie = '';\n      if (context.req && cookie) {\n        axios.defaults.headers.Cookie = cookie;\n      }\n       context.store.dispatch({\n        type: LOAD_MY_INFO_REQUEST\n        });\n \n     context.store.dispatch({\n             type:LOAD_MAP_REQUEST,\n             data:context.params.id\n         })\n     context.store.dispatch(END)\n     await context.store.sagaTask.toPromise()\n})\n\n\n\nexport default oneRoute"]},"metadata":{},"sourceType":"module"}