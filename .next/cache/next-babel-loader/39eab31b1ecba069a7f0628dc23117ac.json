{"ast":null,"code":"var _jsxFileName = \"/Users/dong/CapstonProject/component/map/selectMap.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { Polyline, Marker, StreetViewPanorama, MarkerClusterer } from '@react-google-maps/api';\nimport { InfoWindow } from '@react-google-maps/api';\nimport Router from 'next/router';\nimport { LOAD_MAP_REQUEST } from '../../reducers/map';\nimport { MOVING_MAP_REQUEST, BIKE_MAP_REQUEST, RUNNING_MAP_REQUEST } from '../../reducers/map';\nimport { Button } from 'antd';\nimport GeomHandle from '../GoogleMap';\n\nfunction selectMap({\n  geom\n}) {\n  const dispatch = useDispatch();\n  const mapContainerStyle = {\n    height: \"400px\",\n    width: \"800px\"\n  };\n  const {\n    searchMap\n  } = useSelector(state => state.map); // const [geom ,setGeom]=useState({lat:35.969997373905, lng: 128.45170755523503})\n\n  const {\n    0: mapref,\n    1: setMapRef\n  } = useState(null);\n\n  const handleOnLoad = map => {\n    setMapRef(map);\n  };\n\n  const {\n    0: nelat,\n    1: setNelat\n  } = useState();\n  const {\n    0: nelng,\n    1: setNelng\n  } = useState();\n  const {\n    0: swlat,\n    1: setSwlat\n  } = useState();\n  const {\n    0: swlng,\n    1: setSwlng\n  } = useState();\n\n  const handleCenterChanged = () => {\n    if (mapref) {\n      var zoom = mapref.getZoom();\n      var nt = mapref.getBounds().getNorthEast().lat();\n      var ng = mapref.getBounds().getNorthEast().lng();\n      var st = mapref.getBounds().getSouthWest().lat();\n      var sg = mapref.getBounds().getSouthWest().lng();\n      setNelat(nt);\n      setNelng(ng);\n      setSwlat(st);\n      setSwlng(sg); //   console.log('zoom',zoom);\n      //   console.log('north', ne)\n      //   console.log('south',sw,',',sw)\n    }\n\n    dispatch({\n      type: MOVING_MAP_REQUEST,\n      data: {\n        north: {\n          lat: nelat,\n          lng: nelng\n        },\n        south: {\n          lat: swlat,\n          lng: swlng\n        }\n      }\n    });\n  }; //////markercluseter\n\n\n  const optionss = {\n    imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m' // so you must have m1.png, m2.png, m3.png, m4.png, m5.png and m6.png in that folder\n\n  };\n\n  function createKey(location) {\n    return location.lat + location.lng;\n  } //////markercluseter\n  //polyline\n\n\n  const {\n    0: infoPosition,\n    1: setInfoPosition\n  } = useState({\n    lat: '',\n    lng: ''\n  });\n  const {\n    0: target,\n    1: setTarget\n  } = useState(false);\n  const {\n    0: strokeWeight,\n    1: setStrokeWeight\n  } = useState(Array.from({\n    length: searchMap.length\n  }, () => 5));\n  const strokeWeights = Array.from({\n    length: searchMap.length\n  }, () => 5);\n\n  const polylineClick = positionData => {\n    setInfoPosition({\n      lat: positionData.gps.coordinates[3][1],\n      lng: positionData.gps.coordinates[3][0]\n    });\n    setPropsId(positionData.id);\n    setPropsPosition(positionData);\n    setTarget(true);\n  };\n\n  function mouseOver(index) {\n    console.log('ssss', strokeWeight);\n    strokeWeights[index] = 10;\n    setStrokeWeight(strokeWeights);\n    console.log('over');\n  }\n\n  function mouseOut(index) {\n    strokeWeights[index] = 5;\n    setStrokeWeight(strokeWeights);\n    console.log('aaa');\n  } //polyline\n  //infoWindow\n\n\n  const closeClick = () => {\n    setTarget(false);\n  };\n\n  const divStyle = {\n    background: `white`,\n    border: `1px solid #ccc`,\n    padding: 15\n  };\n\n  const oneRoute = () => {\n    dispatch({\n      type: LOAD_MAP_REQUEST,\n      data: propsId\n    });\n    Router.push({\n      pathname: '/Route/[id]',\n      query: {\n        id: propsId\n      }\n    });\n    console.log('dong', searchMap);\n  }; //infoWindow\n\n\n  const {\n    0: mapState,\n    1: setMapState\n  } = useState();\n\n  const runningselectMap = () => {\n    setMapState(2);\n    console.log(mapState);\n\n    if (mapState === 1) {\n      dispatch({\n        type: BIKE_MAP_REQUEST,\n        data: {\n          event: 'B',\n          north: {\n            lat: nelat,\n            lng: nelng\n          },\n          south: {\n            lat: swlat,\n            lng: swlng\n          }\n        }\n      });\n    } else {\n      dispatch({\n        type: RUNNING_MAP_REQUEST,\n        data: {\n          event: 'R',\n          north: {\n            lat: nelat,\n            lng: nelng\n          },\n          south: {\n            lat: swlat,\n            lng: swlng\n          }\n        }\n      });\n    }\n  };\n\n  const bikeselectMap = () => {\n    setMapState(1);\n\n    if (mapState === 1) {\n      dispatch({\n        type: BIKE_MAP_REQUEST,\n        data: {\n          event: 'B',\n          north: {\n            lat: nelat,\n            lng: nelng\n          },\n          south: {\n            lat: swlat,\n            lng: swlng\n          }\n        }\n      });\n    } else {\n      dispatch({\n        type: RUNNING_MAP_REQUEST,\n        data: {\n          event: 'R',\n          north: {\n            lat: nelat,\n            lng: nelng\n          },\n          south: {\n            lat: swlat,\n            lng: swlng\n          }\n        }\n      });\n    }\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 5\n    }\n  }, __jsx(Button, {\n    onClick: bikeselectMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 1\n    }\n  }, \"\\uC790\\uC804\\uAC70s\"), __jsx(Button, {\n    onClick: runningselectMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 9\n    }\n  }, \"\\uB2EC\\uB9AC\\uAE30s\"), __jsx(LoadScript, {\n    googleMapsApiKey: \"AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 1\n    }\n  }, __jsx(GoogleMap, {\n    id: \"marker-example\",\n    mapContainerStyle: mapContainerStyle,\n    zoom: 13,\n    center: geom,\n    onLoad: handleOnLoad,\n    onDragEnd: handleCenterChanged // onZoomChanged={handleCenterChanged}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 11\n    }\n  }, __jsx(MarkerClusterer, {\n    options: optionss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 1\n    }\n  }, clusterer => searchMap.map(p => __jsx(Marker, {\n    key: createKey(p),\n    position: {\n      lat: p.start_latlng[1],\n      lng: p.start_latlng[0]\n    },\n    clusterer: clusterer,\n    icon: {\n      scaledSize: new google.maps.Size(30, 30)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 15\n    }\n  }))), searchMap.map((m, index) => __jsx(Polyline, {\n    onRightClick: () => polylineClick(m),\n    onMouseOver: () => mouseOver(index),\n    onMouseOut: () => mouseOut(index),\n    options: {\n      strokeWeight: strokeWeight[index],\n      clickable: true,\n      visible: true,\n      strokeColor: '#FF0000',\n      fillColor: '#FF0000'\n    },\n    path: m.gps.coordinates.map(p => ({\n      lat: p[1],\n      lng: p[0]\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 13\n    }\n  })), target && __jsx(InfoWindow, {\n    position: infoPosition,\n    onCloseClick: closeClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 14\n    }\n  }, __jsx(\"div\", {\n    style: divStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 13\n    }\n  }, \"\\uB3D9\\uC601\"), __jsx(\"button\", {\n    onClick: oneRoute,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 13\n    }\n  }, \"\\uC0C1\\uC138\\uBCF4\\uAE30\"))))));\n}\n\nexport default selectMap;","map":{"version":3,"sources":["/Users/dong/CapstonProject/component/map/selectMap.js"],"names":["React","useState","useEffect","useDispatch","useSelector","GoogleMap","LoadScript","Polyline","Marker","StreetViewPanorama","MarkerClusterer","InfoWindow","Router","LOAD_MAP_REQUEST","MOVING_MAP_REQUEST","BIKE_MAP_REQUEST","RUNNING_MAP_REQUEST","Button","GeomHandle","selectMap","geom","dispatch","mapContainerStyle","height","width","searchMap","state","map","mapref","setMapRef","handleOnLoad","nelat","setNelat","nelng","setNelng","swlat","setSwlat","swlng","setSwlng","handleCenterChanged","zoom","getZoom","nt","getBounds","getNorthEast","lat","ng","lng","st","getSouthWest","sg","type","data","north","south","optionss","imagePath","createKey","location","infoPosition","setInfoPosition","target","setTarget","strokeWeight","setStrokeWeight","Array","from","length","strokeWeights","polylineClick","positionData","gps","coordinates","setPropsId","id","setPropsPosition","mouseOver","index","console","log","mouseOut","closeClick","divStyle","background","border","padding","oneRoute","propsId","push","pathname","query","mapState","setMapState","runningselectMap","event","bikeselectMap","clusterer","p","start_latlng","scaledSize","google","maps","Size","m","clickable","visible","strokeColor","fillColor"],"mappings":"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","sourcesContent":["import React, {useState,useEffect} from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { Polyline ,Marker,StreetViewPanorama,MarkerClusterer} from '@react-google-maps/api';\nimport { InfoWindow } from '@react-google-maps/api';\nimport Router from 'next/router'\nimport {LOAD_MAP_REQUEST} from '../../reducers/map'\nimport { MOVING_MAP_REQUEST,BIKE_MAP_REQUEST,RUNNING_MAP_REQUEST } from '../../reducers/map';\nimport {Button} from 'antd'\nimport GeomHandle from '../GoogleMap'\n\nfunction selectMap({geom}) {\n\n    const dispatch=useDispatch()\n\n\n\nconst mapContainerStyle = {\n    height: \"400px\",\n    width: \"800px\"\n  };\n  \n\n    const {searchMap}=useSelector((state)=>state.map)\n\n    // const [geom ,setGeom]=useState({lat:35.969997373905, lng: 128.45170755523503})\n    const [mapref, setMapRef] = useState(null);\n\n\n    const handleOnLoad = map => {\n        setMapRef(map);\n        \n      };\n\n      const [nelat,setNelat]=useState()\n      const [nelng,setNelng]=useState()\n\n      const [swlat,setSwlat]=useState()\n      const [swlng,setSwlng]=useState()\n\n\n\n      const handleCenterChanged = () => {\n        if (mapref) {\n          var zoom=mapref.getZoom()\n          var nt=mapref.getBounds().getNorthEast().lat();\n          var ng=mapref.getBounds().getNorthEast().lng();\n\n          var st=mapref.getBounds().getSouthWest().lat();\n          var sg=mapref.getBounds().getSouthWest().lng();\n\n          setNelat(nt)\n          setNelng(ng)\n          setSwlat(st)\n          setSwlng(sg)\n\n        //   console.log('zoom',zoom);\n        //   console.log('north', ne)\n        //   console.log('south',sw,',',sw)\n        }\n\n        dispatch({ \n          type:MOVING_MAP_REQUEST,\n          data:{\n            north:{\n              lat:nelat,\n              lng:nelng\n            },\n            south:{\n              lat:swlat,\n              lng:swlng\n            },\n  \n          }\n        })\n      \n      }\n\n      //////markercluseter\n\n\nconst optionss = {\n    imagePath:\n      'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m', // so you must have m1.png, m2.png, m3.png, m4.png, m5.png and m6.png in that folder\n  }\n\n\nfunction createKey(location) {\n    return location.lat + location.lng\n  }\n\n      //////markercluseter\n\n      //polyline\n\n      const [infoPosition,setInfoPosition]=useState({\n        lat:'',\n        lng:'',\n    })\n    \n      const [target,setTarget]=useState(false)\n\n\n      const [strokeWeight,setStrokeWeight]=useState(Array.from({length: searchMap.length}, () => 5))\n      const strokeWeights= Array.from({length: searchMap.length}, () => 5);\n\n\n      const polylineClick=(positionData)=>{\n     \n    \n        setInfoPosition({\n            lat:positionData.gps.coordinates[3][1],\n            lng:positionData.gps.coordinates[3][0]\n        })\n        setPropsId(positionData.id)\n        setPropsPosition(positionData)\n        setTarget(true)\n        \n    }\n    \n\nfunction mouseOver(index){\n    console.log('ssss',strokeWeight)\n    strokeWeights[index]=10\n    setStrokeWeight(strokeWeights)\n    console.log('over')\n}\n\nfunction mouseOut(index){\n    strokeWeights[index]=5\n    setStrokeWeight(strokeWeights)\n    console.log('aaa')\n\n}\n\n      //polyline\n\n      //infoWindow\n      const closeClick=()=>{\n        setTarget(false)\n    }\n\n\nconst divStyle = {\n    background: `white`,\n    border: `1px solid #ccc`,\n    padding: 15\n  }\n\n\n  const oneRoute=()=>{\n    dispatch({\n               type:LOAD_MAP_REQUEST,\n               data:propsId\n             })\n    Router.push({\n        pathname: '/Route/[id]',\n        query: {id:propsId},\n      });\n\n      console.log('dong',searchMap)\n}\n\n\n      //infoWindow\n\n      const [mapState,setMapState]=useState()\n\n      const runningselectMap=()=>{\n\n        setMapState(2)\n        console.log(mapState)\n        if(mapState===1){\n            dispatch({\n                type:BIKE_MAP_REQUEST,\n                data:{\n                    event:'B',\n                    north:{\n                        lat:nelat,\n                        lng:nelng\n                      },\n                      south:{\n                        lat:swlat,\n                        lng:swlng\n                      },\n            \n                }\n            })\n        }else{\n            dispatch({\n                type:RUNNING_MAP_REQUEST,\n                data:{\n                    event:'R',\n                    north:{\n                        lat:nelat,\n                        lng:nelng\n                      },\n                      south:{\n                        lat:swlat,\n                        lng:swlng\n                      },\n                }\n            })\n\n        }\n      }\n\n      const bikeselectMap=()=>{\n          setMapState(1)\n\n          if(mapState===1){\n            dispatch({\n                type:BIKE_MAP_REQUEST,\n                data:{\n                    event:'B',\n                    north:{\n                        lat:nelat,\n                        lng:nelng\n                      },\n                      south:{\n                        lat:swlat,\n                        lng:swlng\n                      },\n            \n                }\n            })\n        }else{\n            dispatch({\n                type:RUNNING_MAP_REQUEST,\n                data:{\n                    event:'R',\n                    north:{\n                        lat:nelat,\n                        lng:nelng\n                      },\n                      south:{\n                        lat:swlat,\n                        lng:swlng\n                      },\n                }\n            })\n\n        }\n      }\n\n\n\n  \n    \n\n    \n\n\n  return (\n    <div>\n\n<Button onClick={bikeselectMap}>자전거s</Button>\n        <Button onClick={runningselectMap}>달리기s</Button> \n\n<LoadScript\n        googleMapsApiKey=\"AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE\"\n        >\n            \n          <GoogleMap\n            id=\"marker-example\"\n            mapContainerStyle={mapContainerStyle}\n            zoom={13}\n            center={geom}\n            onLoad={handleOnLoad}\n            onDragEnd={handleCenterChanged}\n            // onZoomChanged={handleCenterChanged}\n          >\n\n<MarkerClusterer options={optionss}>\n          {(clusterer) =>\n            searchMap.map((p) => (\n              <Marker  key={createKey(p)} position={{lat:p.start_latlng[1],lng:p.start_latlng[0]}} clusterer={clusterer}  icon={{\n              scaledSize: new google.maps.Size(30,30),} } />\n            ))\n          }\n        </MarkerClusterer>\n      \n\n        {searchMap.map((m,index)=>(\n            <Polyline  onRightClick={()=>polylineClick(m)} onMouseOver={()=>mouseOver(index)} onMouseOut={()=>mouseOut(index)}  options={{strokeWeight:strokeWeight[index],clickable:true,visible:true,strokeColor: '#FF0000',fillColor: '#FF0000',}} path={m.gps.coordinates.map((p)=>(\n                {\n                    lat:p[1],\n                    lng:p[0]\n                }\n            ))}></Polyline>\n            \n            ))}\n            \n    {target&&<InfoWindow position={infoPosition} onCloseClick={closeClick}>\n        <div style={divStyle}>\n            <h1>동영</h1>\n                {/* <Link href={{\n                    pathname:'/Route/[id]',\n                    query: {id:propsId},\n                }}><a>상세보기</a></Link> */}\n            <button onClick={oneRoute}>상세보기</button>\n        </div>\n        </InfoWindow>} \n         \n\n        \n       \n            \n          </GoogleMap>\n          </LoadScript>\n             \n\n    </div>\n  )\n}\n\nexport default selectMap"]},"metadata":{},"sourceType":"module"}