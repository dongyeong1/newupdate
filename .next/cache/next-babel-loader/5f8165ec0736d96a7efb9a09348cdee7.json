{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(searchMap),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(loadMap),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(movingMap),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchSearchMap),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(wahchLoadMap),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchMovingMap),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watchBikeMap),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchRunningMap),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, call, fork, put, takeLatest, take } from 'redux-saga/effects';\nimport { SEARCH_MAP_REQUEST, SEARCH_MAP_SUCCESS, SEARCH_MAP_FAILURE, LOAD_MAP_REQUEST, LOAD_MAP_SUCCESS, LOAD_MAP_FAILURE, MOVING_MAP_SUCCESS, MOVING_MAP_REQUEST, MOVING_MAP_FAILURE } from '../reducers/map';\n\nfunction searchMapAPI(data) {// return axios.post('/searchmap',data)\n}\n\nfunction searchMap(action) {\n  return _regeneratorRuntime.wrap(function searchMap$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return put({\n            type: SEARCH_MAP_SUCCESS,\n            data: action.data\n          });\n\n        case 3:\n          _context.next = 9;\n          break;\n\n        case 5:\n          _context.prev = 5;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 9;\n          return put({\n            type: SEARCH_MAP_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 5]]);\n}\n\nfunction loadMapAPI(data) {// return axios.post('/searchmap',data)\n}\n\nfunction loadMap(action) {\n  return _regeneratorRuntime.wrap(function loadMap$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return put({\n            type: LOAD_MAP_SUCCESS,\n            data: action.data\n          });\n\n        case 3:\n          _context2.next = 9;\n          break;\n\n        case 5:\n          _context2.prev = 5;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 9;\n          return put({\n            type: LOAD_MAP_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 5]]);\n}\n\nfunction movingMapAPI(data) {// return axios.post('/searchmap',data)\n}\n\nfunction movingMap(action) {\n  return _regeneratorRuntime.wrap(function movingMap$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return put({\n            type: MOVING_MAP_SUCCESS,\n            data: action.data\n          });\n\n        case 3:\n          _context3.next = 9;\n          break;\n\n        case 5:\n          _context3.prev = 5;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 9;\n          return put({\n            type: MOVING_MAP_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 9:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 5]]);\n}\n\nfunction watchSearchMap() {\n  return _regeneratorRuntime.wrap(function watchSearchMap$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(SEARCH_MAP_REQUEST, searchMap);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction wahchLoadMap() {\n  return _regeneratorRuntime.wrap(function wahchLoadMap$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(LOAD_MAP_REQUEST, loadMap);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchMovingMap() {\n  return _regeneratorRuntime.wrap(function watchMovingMap$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(MOVING_MAP_REQUEST, movingMap);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction watchBikeMap() {\n  return _regeneratorRuntime.wrap(function watchBikeMap$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(BIKE_MAP_REQUEST, loadMap);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchRunningMap() {\n  return _regeneratorRuntime.wrap(function watchRunningMap$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(RUNNING_MAP_REQUEST, movingMap);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchSearchMap), fork(wahchLoadMap), fork(watchMovingMap), fork(watchBikeMap), fork(watchRunningMap)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}","map":{"version":3,"sources":["/Users/dong/CapstonProject/sagas/map.js"],"names":["searchMap","loadMap","movingMap","watchSearchMap","wahchLoadMap","watchMovingMap","watchBikeMap","watchRunningMap","rootSaga","all","call","fork","put","takeLatest","take","SEARCH_MAP_REQUEST","SEARCH_MAP_SUCCESS","SEARCH_MAP_FAILURE","LOAD_MAP_REQUEST","LOAD_MAP_SUCCESS","LOAD_MAP_FAILURE","MOVING_MAP_SUCCESS","MOVING_MAP_REQUEST","MOVING_MAP_FAILURE","searchMapAPI","data","action","type","error","response","loadMapAPI","movingMapAPI","BIKE_MAP_REQUEST","RUNNING_MAP_REQUEST"],"mappings":"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","sourcesContent":["import { all,call,fork,put,takeLatest, take} from 'redux-saga/effects'\n\nimport { SEARCH_MAP_REQUEST ,\nSEARCH_MAP_SUCCESS,\nSEARCH_MAP_FAILURE,\nLOAD_MAP_REQUEST,\nLOAD_MAP_SUCCESS,\nLOAD_MAP_FAILURE,\nMOVING_MAP_SUCCESS,\nMOVING_MAP_REQUEST,\nMOVING_MAP_FAILURE\n} from '../reducers/map'\n\n\n\nfunction searchMapAPI(data){\n    // return axios.post('/searchmap',data)\n    }\n    \n\nfunction* searchMap(action){\n    try{\n        // const result = yield call(loadPostsAPI,action.data)\n        yield put({\n            type:SEARCH_MAP_SUCCESS,\n            data:action.data\n        })\n\n    }catch(err){\n        yield put({\n            type:SEARCH_MAP_FAILURE,\n            error:err.response.data,\n             \n        })\n\n    }\n}\n\n\nfunction loadMapAPI(data){\n    // return axios.post('/searchmap',data)\n    }\n    \n\nfunction* loadMap(action){\n    try{\n        // const result = yield call(loadPostsAPI,action.data)\n        yield put({\n            type:LOAD_MAP_SUCCESS,\n            data:action.data\n        })\n\n    }catch(err){\n        yield put({\n            type:LOAD_MAP_FAILURE,\n            error:err.response.data,\n             \n        })\n\n    }\n}\n\nfunction movingMapAPI(data){\n    // return axios.post('/searchmap',data)\n    }\n    \n\nfunction* movingMap(action){\n    try{\n        // const result = yield call(loadPostsAPI,action.data)\n        yield put({\n            type:MOVING_MAP_SUCCESS,\n            data:action.data\n        })\n\n    }catch(err){\n        yield put({\n            type:MOVING_MAP_FAILURE,\n            error:err.response.data,\n        })\n\n    }\n}\n\n\nfunction* watchSearchMap(){\n    yield takeLatest(SEARCH_MAP_REQUEST,searchMap)\n}\n\nfunction* wahchLoadMap(){\n    yield takeLatest(LOAD_MAP_REQUEST,loadMap)\n}\n\nfunction* watchMovingMap(){\n    yield takeLatest(MOVING_MAP_REQUEST,movingMap)\n}\n\nfunction* watchBikeMap(){\n    yield takeLatest(BIKE_MAP_REQUEST,loadMap)\n}\n\nfunction* watchRunningMap(){\n    yield takeLatest(RUNNING_MAP_REQUEST,movingMap)\n}\n\n\n\n\nexport default function* rootSaga(){\n\n    yield all([\n        fork(watchSearchMap),\n        fork(wahchLoadMap),\n        fork(watchMovingMap),\n        fork(watchBikeMap),\n        fork(watchRunningMap)\n\n      \n    ])\n\n}\n"]},"metadata":{},"sourceType":"module"}