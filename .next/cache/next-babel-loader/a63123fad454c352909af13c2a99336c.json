{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(searchMap),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchSearchMap),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, call, fork, put, takeLatest, take } from 'redux-saga/effects';\nimport { SEARCH_MAP_REQUEST, SEARCH_MAP_SUCCESS, SEARCH_MAP_FAILURE } from '../reducers/map';\n\nfunction searchMapAPI(data) {// return axios.post('/searchmap',data)\n}\n\nfunction searchMap(action) {\n  return _regeneratorRuntime.wrap(function searchMap$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return put({\n            type: SEARCH_MAP_SUCCESS,\n            data: action.data\n          });\n\n        case 3:\n          _context.next = 9;\n          break;\n\n        case 5:\n          _context.prev = 5;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 9;\n          return put({\n            type: SEARCH_MAP_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 5]]);\n}\n\nfunction watchSearchMap() {\n  return _regeneratorRuntime.wrap(function watchSearchMap$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(SEARCH_MAP_REQUEST, searchMap);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchSearchMap)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Users/dong/CapstonProject/sagas/map.js"],"names":["searchMap","watchSearchMap","rootSaga","all","call","fork","put","takeLatest","take","SEARCH_MAP_REQUEST","SEARCH_MAP_SUCCESS","SEARCH_MAP_FAILURE","searchMapAPI","data","action","type","error","response"],"mappings":";;oDAaUA,S;qDAmBAC,c;qDAKeC,Q;;AArCzB,SAASC,GAAT,EAAaC,IAAb,EAAkBC,IAAlB,EAAuBC,GAAvB,EAA2BC,UAA3B,EAAuCC,IAAvC,QAAkD,oBAAlD;AAEA,SAASC,kBAAT,EACAC,kBADA,EAEAC,kBAFA,QAEyB,iBAFzB;;AAMA,SAASC,YAAT,CAAsBC,IAAtB,EAA2B,CACvB;AACC;;AAGL,SAAUb,SAAV,CAAoBc,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMR,GAAG,CAAC;AACNS,YAAAA,IAAI,EAACL,kBADC;AAENG,YAAAA,IAAI,EAACC,MAAM,CAACD;AAFN,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASQ,iBAAMP,GAAG,CAAC;AACNS,YAAAA,IAAI,EAACJ,kBADC;AAENK,YAAAA,KAAK,EAAC,YAAIC,QAAJ,CAAaJ;AAFb,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBA,SAAUZ,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,UAAU,CAACE,kBAAD,EAAoBT,SAApB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAEX,iBAAMC,GAAG,CAAC,CACNE,IAAI,CAACJ,cAAD,CADE,CAAD,CAAT;;AAFW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all,call,fork,put,takeLatest, take} from 'redux-saga/effects'\n\nimport { SEARCH_MAP_REQUEST ,\nSEARCH_MAP_SUCCESS,\nSEARCH_MAP_FAILURE} from '../reducers/map'\n\n\n\nfunction searchMapAPI(data){\n    // return axios.post('/searchmap',data)\n    }\n    \n\nfunction* searchMap(action){\n    try{\n        // const result = yield call(loadPostsAPI,action.data)\n        yield put({\n            type:SEARCH_MAP_SUCCESS,\n            data:action.data\n        })\n\n    }catch(err){\n        yield put({\n            type:SEARCH_MAP_FAILURE,\n            error:err.response.data,\n             \n        })\n\n    }\n}\n\n\nfunction* watchSearchMap(){\n    yield takeLatest(SEARCH_MAP_REQUEST,searchMap)\n}\n\n\nexport default function* rootSaga(){\n\n    yield all([\n        fork(watchSearchMap),\n      \n    ])\n\n}\n"]},"metadata":{},"sourceType":"module"}