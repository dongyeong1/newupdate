{"ast":null,"code":"var _jsxFileName = \"/Users/dong/CapstonProject/pages/polylineTest.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { Polyline, Marker, StreetViewPanorama, MarkerClusterer } from '@react-google-maps/api';\nimport AppLayout from '../component/AppLayout'; // import Streetview from 'react-google-streetview';// import RecordElevation from '../component/RecordElavation'\n\nimport { BIKE_MAP_REQUEST, SEARCH_MAP_REQUEST } from '../reducers/map';\nimport { LOAD_MAP_REQUEST } from '../reducers/map';\nimport GeomHandle from '../component/GoogleMap';\nimport { Input, Col, Row, Button } from 'antd';\nimport SideBar from '../component/Layout/SideBar';\nimport { InfoWindow } from '@react-google-maps/api';\nimport Router from 'next/router'; // import {useHistory} from \n\nimport Link from 'next/link';\nimport SelectMap from '../component/map/selectMap'; // import InfoWindow from '../component/InfoWindow';\n\nfunction polylineTest() {\n  const {\n    searchMap\n  } = useSelector(state => state.map);\n  const dispatch = useDispatch();\n  const {\n    0: propsPosition,\n    1: setPropsPosition\n  } = useState();\n  const {\n    0: geom,\n    1: setGeom\n  } = useState({\n    lat: 35.969997373905,\n    lng: 128.45170755523503\n  });\n\n  const handleButton = async () => {\n    const currentAddr = document.getElementById('address').value;\n\n    if (currentAddr) {\n      const {\n        lat,\n        lng\n      } = await GeomHandle(currentAddr);\n      setGeom({\n        lat: lat,\n        lng: lng\n      });\n      dispatch({\n        type: SEARCH_MAP_REQUEST,\n        data: '1'\n      });\n      console.log('aaa', searchMap);\n    }\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, __jsx(Col, {\n    span: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, __jsx(SideBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  })), __jsx(Col, {\n    span: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }, \"\\uAC80\\uC0C9\\uD558\\uAE30\", __jsx(Input.Search, {\n    id: \"address\",\n    style: {\n      verticalAlign: 'middle',\n      marginLeft: '10px',\n      width: '500px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 8\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 104\n    }\n  }), __jsx(Button, {\n    onClick: handleButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, \"\\uD074\\uB9AD\"), __jsx(SelectMap, {\n    mapState: mapState,\n    geom: geom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 8\n    }\n  }))));\n}\n\nexport default /*#__PURE__*/React.memo(polylineTest);","map":{"version":3,"sources":["/Users/dong/CapstonProject/pages/polylineTest.js"],"names":["React","useState","useEffect","useDispatch","useSelector","GoogleMap","LoadScript","Polyline","Marker","StreetViewPanorama","MarkerClusterer","AppLayout","BIKE_MAP_REQUEST","SEARCH_MAP_REQUEST","LOAD_MAP_REQUEST","GeomHandle","Input","Col","Row","Button","SideBar","InfoWindow","Router","Link","SelectMap","polylineTest","searchMap","state","map","dispatch","propsPosition","setPropsPosition","geom","setGeom","lat","lng","handleButton","currentAddr","document","getElementById","value","type","data","console","log","verticalAlign","marginLeft","width","mapState","memo"],"mappings":"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","sourcesContent":["import React, {useState,useEffect} from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { Polyline ,Marker,StreetViewPanorama,MarkerClusterer} from '@react-google-maps/api';\nimport AppLayout from '../component/AppLayout';\n// import Streetview from 'react-google-streetview';// import RecordElevation from '../component/RecordElavation'\nimport { BIKE_MAP_REQUEST, SEARCH_MAP_REQUEST } from '../reducers/map';\nimport {LOAD_MAP_REQUEST} from '../reducers/map'\nimport GeomHandle from '../component/GoogleMap'\nimport { Input,Col,Row,Button } from 'antd';\nimport SideBar from '../component/Layout/SideBar';\nimport { InfoWindow } from '@react-google-maps/api';\nimport Router from 'next/router'\n// import {useHistory} from \nimport Link from 'next/link'\nimport SelectMap from '../component/map/selectMap'\n// import InfoWindow from '../component/InfoWindow';\n\n\n\n\n\n\n\n\n\n\n\n   \n    \n\n\n\n\nfunction polylineTest() {\n\n\n    const {searchMap}=useSelector((state)=>state.map)\n\n    const dispatch=useDispatch()\n\n    const [propsPosition,setPropsPosition]=useState()\n\n    const [geom ,setGeom]=useState({lat:35.969997373905, lng: 128.45170755523503})\n\n\n\n\n\n\n    \n    \n      \n \n\n  \n\n\n    \n  \n\n    const handleButton = async() => {\n        const currentAddr = document.getElementById('address').value\n        if (currentAddr){\n          const {lat, lng} = await GeomHandle(currentAddr)\n          setGeom({lat:lat,lng:lng})\n\n          dispatch({\n            type:SEARCH_MAP_REQUEST,\n            data:'1'\n        })\n        console.log('aaa',searchMap)\n\n\n\n       \n        }\n      }\n\n    \n      \n  \n    return (\n        <div>\n            <Row>\n            <Col span={4}>\n                <SideBar ></SideBar>\n\n                </Col>\n                <Col span={12}>\n                검색하기\n       \n       \n       <Input.Search id=\"address\"  style={{verticalAlign:'middle' ,marginLeft:'10px',width:'500px'}} /><br></br>\n        <Button onClick={handleButton}>클릭</Button>\n        \n              \n\n       <SelectMap mapState={mapState} geom={geom}></SelectMap>\n\n                </Col>\n\n\n            </Row>\n           \n       \n         </div>\n\n    )}\n  \n  \n  export default React.memo(polylineTest)"]},"metadata":{},"sourceType":"module"}