{"ast":null,"code":"var _jsxFileName = \"/Users/dong/CapstonProject/component/map/selectMap.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { Polyline, Marker, StreetViewPanorama, MarkerClusterer } from '@react-google-maps/api';\nimport { InfoWindow } from '@react-google-maps/api';\nimport Router from 'next/router';\nimport { LOAD_MAP_REQUEST } from '../../reducers/map';\nimport { MOVING_MAP_REQUEST, BIKE_MAP_REQUEST, RUNNING_MAP_REQUEST } from '../../reducers/map';\nimport { Button } from 'antd';\nimport GeomHandle from '../GoogleMap';\n\nfunction selectMap({\n  geom\n}) {\n  const dispatch = useDispatch();\n  const mapContainerStyle = {\n    height: \"400px\",\n    width: \"800px\"\n  };\n  const {\n    searchMap\n  } = useSelector(state => state.map); // const [geom ,setGeom]=useState({lat:35.969997373905, lng: 128.45170755523503})\n\n  const {\n    0: mapref,\n    1: setMapRef\n  } = useState(null);\n\n  const handleOnLoad = map => {\n    setMapRef(map);\n  };\n\n  const {\n    0: ne,\n    1: setNe\n  } = useState({});\n  const {\n    0: sw,\n    1: setSw\n  } = useState({});\n\n  const handleCenterChanged = () => {\n    if (mapref) {\n      var zoom = mapref.getZoom();\n      var n = mapref.getBounds().getNorthEast();\n      var s = mapref.getBounds().getSouthWest();\n      setNe({\n        n\n      });\n      setSw({\n        s\n      });\n      console.log('zoom', zoom);\n      console.log('north', ne);\n      console.log('south', sw, ',', sw);\n    } // dispatch({ \n    //   type:MOVING_MAP_REQUEST,\n    //   data:{\n    //     north:{\n    //       lat:ne.lat(),\n    //       lng:ne.lng()\n    //     },\n    //     south:{\n    //       lat:sw.lat(),\n    //       lng:sw.lat()\n    //     },\n    //   }\n    // })\n\n  }; //////markercluseter\n\n\n  const optionss = {\n    imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m' // so you must have m1.png, m2.png, m3.png, m4.png, m5.png and m6.png in that folder\n\n  };\n\n  function createKey(location) {\n    return location.lat + location.lng;\n  } //////markercluseter\n  //polyline\n\n\n  const {\n    0: infoPosition,\n    1: setInfoPosition\n  } = useState({\n    lat: '',\n    lng: ''\n  });\n  const {\n    0: target,\n    1: setTarget\n  } = useState(false);\n  const {\n    0: strokeWeight,\n    1: setStrokeWeight\n  } = useState(Array.from({\n    length: searchMap.length\n  }, () => 5));\n  const strokeWeights = Array.from({\n    length: searchMap.length\n  }, () => 5);\n\n  const polylineClick = positionData => {\n    setInfoPosition({\n      lat: positionData.gps.coordinates[3][1],\n      lng: positionData.gps.coordinates[3][0]\n    });\n    setPropsId(positionData.id);\n    setPropsPosition(positionData);\n    setTarget(true);\n  };\n\n  function mouseOver(index) {\n    console.log('ssss', strokeWeight);\n    strokeWeights[index] = 10;\n    setStrokeWeight(strokeWeights);\n    console.log('over');\n  }\n\n  function mouseOut(index) {\n    strokeWeights[index] = 5;\n    setStrokeWeight(strokeWeights);\n    console.log('aaa');\n  } //polyline\n  //infoWindow\n\n\n  const closeClick = () => {\n    setTarget(false);\n  };\n\n  const divStyle = {\n    background: `white`,\n    border: `1px solid #ccc`,\n    padding: 15\n  };\n\n  const oneRoute = () => {\n    dispatch({\n      type: LOAD_MAP_REQUEST,\n      data: propsId\n    });\n    Router.push({\n      pathname: '/Route/[id]',\n      query: {\n        id: propsId\n      }\n    });\n    console.log('dong', searchMap);\n  }; //infoWindow\n\n\n  const {\n    0: mapState,\n    1: setMapState\n  } = useState(true);\n\n  const runningselectMap = () => {\n    setMapstate(true);\n\n    if (mapState) {\n      dispatch({\n        type: BIKE_MAP_REQUEST,\n        data: {\n          event: 'R',\n          north: {\n            lat: ne.lat(),\n            lng: ne.lng()\n          },\n          south: {\n            lat: sw.lat(),\n            lng: sw.lat()\n          }\n        }\n      });\n    } else {\n      dispatch({\n        type: RUNNING_MAP_REQUEST,\n        data: {\n          event: 'R',\n          north: {\n            lat: ne.lat(),\n            lng: ne.lng()\n          },\n          south: {\n            lat: sw.lat(),\n            lng: sw.lat()\n          }\n        }\n      });\n    }\n  };\n\n  const bikeselectMap = () => {\n    setMapState(false);\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 5\n    }\n  }, __jsx(Button, {\n    onclick: bikeselectMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 1\n    }\n  }, \"\\uC790\\uC804\\uAC70\"), __jsx(Button, {\n    onclick: runningselectMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 9\n    }\n  }, \"\\uB2EC\\uB9AC\\uAE30\"), __jsx(LoadScript, {\n    googleMapsApiKey: \"AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 1\n    }\n  }, __jsx(GoogleMap, {\n    id: \"marker-example\",\n    mapContainerStyle: mapContainerStyle,\n    zoom: 13,\n    center: geom,\n    onLoad: handleOnLoad,\n    onDragEnd: handleCenterChanged // onZoomChanged={handleCenterChanged}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 11\n    }\n  }, __jsx(MarkerClusterer, {\n    options: optionss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 1\n    }\n  }, clusterer => searchMap.map(p => __jsx(Marker, {\n    key: createKey(p),\n    position: {\n      lat: p.start_latlng[1],\n      lng: p.start_latlng[0]\n    },\n    clusterer: clusterer,\n    icon: {\n      scaledSize: new google.maps.Size(30, 30)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 15\n    }\n  }))), searchMap.map((m, index) => __jsx(Polyline, {\n    onRightClick: () => polylineClick(m),\n    onMouseOver: () => mouseOver(index),\n    onMouseOut: () => mouseOut(index),\n    options: {\n      strokeWeight: strokeWeight[index],\n      clickable: true,\n      visible: true,\n      strokeColor: '#FF0000',\n      fillColor: '#FF0000'\n    },\n    path: m.gps.coordinates.map(p => ({\n      lat: p[1],\n      lng: p[0]\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 13\n    }\n  })), target && __jsx(InfoWindow, {\n    position: infoPosition,\n    onCloseClick: closeClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 14\n    }\n  }, __jsx(\"div\", {\n    style: divStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 13\n    }\n  }, \"\\uB3D9\\uC601\"), __jsx(\"button\", {\n    onClick: oneRoute,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 13\n    }\n  }, \"\\uC0C1\\uC138\\uBCF4\\uAE30\"))))));\n}\n\nexport default selectMap;","map":{"version":3,"sources":["/Users/dong/CapstonProject/component/map/selectMap.js"],"names":["React","useState","useEffect","useDispatch","useSelector","GoogleMap","LoadScript","Polyline","Marker","StreetViewPanorama","MarkerClusterer","InfoWindow","Router","LOAD_MAP_REQUEST","MOVING_MAP_REQUEST","BIKE_MAP_REQUEST","RUNNING_MAP_REQUEST","Button","GeomHandle","selectMap","geom","dispatch","mapContainerStyle","height","width","searchMap","state","map","mapref","setMapRef","handleOnLoad","ne","setNe","sw","setSw","handleCenterChanged","zoom","getZoom","n","getBounds","getNorthEast","s","getSouthWest","console","log","optionss","imagePath","createKey","location","lat","lng","infoPosition","setInfoPosition","target","setTarget","strokeWeight","setStrokeWeight","Array","from","length","strokeWeights","polylineClick","positionData","gps","coordinates","setPropsId","id","setPropsPosition","mouseOver","index","mouseOut","closeClick","divStyle","background","border","padding","oneRoute","type","data","propsId","push","pathname","query","mapState","setMapState","runningselectMap","setMapstate","event","north","south","bikeselectMap","clusterer","p","start_latlng","scaledSize","google","maps","Size","m","clickable","visible","strokeColor","fillColor"],"mappings":"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","sourcesContent":["import React, {useState,useEffect} from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { Polyline ,Marker,StreetViewPanorama,MarkerClusterer} from '@react-google-maps/api';\nimport { InfoWindow } from '@react-google-maps/api';\nimport Router from 'next/router'\nimport {LOAD_MAP_REQUEST} from '../../reducers/map'\nimport { MOVING_MAP_REQUEST,BIKE_MAP_REQUEST,RUNNING_MAP_REQUEST } from '../../reducers/map';\nimport {Button} from 'antd'\nimport GeomHandle from '../GoogleMap'\n\nfunction selectMap({geom}) {\n\n    const dispatch=useDispatch()\n\n\n\nconst mapContainerStyle = {\n    height: \"400px\",\n    width: \"800px\"\n  };\n  \n\n    const {searchMap}=useSelector((state)=>state.map)\n\n    // const [geom ,setGeom]=useState({lat:35.969997373905, lng: 128.45170755523503})\n    const [mapref, setMapRef] = useState(null);\n\n\n    const handleOnLoad = map => {\n        setMapRef(map);\n        \n      };\n\n      const [ne,setNe]=useState({})\n      const [sw,setSw]=useState({})\n\n\n      const handleCenterChanged = () => {\n        if (mapref) {\n          var zoom=mapref.getZoom()\n          var n=mapref.getBounds().getNorthEast();\n          var s=mapref.getBounds().getSouthWest();\n          setNe({\n              n\n          })\n          setSw({\n              s})\n\n          console.log('zoom',zoom);\n          console.log('north', ne)\n          console.log('south',sw,',',sw)\n        }\n\n        // dispatch({ \n        //   type:MOVING_MAP_REQUEST,\n        //   data:{\n        //     north:{\n        //       lat:ne.lat(),\n        //       lng:ne.lng()\n        //     },\n        //     south:{\n        //       lat:sw.lat(),\n        //       lng:sw.lat()\n        //     },\n  \n        //   }\n        // })\n      \n      }\n\n      //////markercluseter\n\n\nconst optionss = {\n    imagePath:\n      'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m', // so you must have m1.png, m2.png, m3.png, m4.png, m5.png and m6.png in that folder\n  }\n\n\nfunction createKey(location) {\n    return location.lat + location.lng\n  }\n\n      //////markercluseter\n\n      //polyline\n\n      const [infoPosition,setInfoPosition]=useState({\n        lat:'',\n        lng:'',\n    })\n    \n      const [target,setTarget]=useState(false)\n\n\n      const [strokeWeight,setStrokeWeight]=useState(Array.from({length: searchMap.length}, () => 5))\n      const strokeWeights= Array.from({length: searchMap.length}, () => 5);\n\n\n      const polylineClick=(positionData)=>{\n     \n    \n        setInfoPosition({\n            lat:positionData.gps.coordinates[3][1],\n            lng:positionData.gps.coordinates[3][0]\n        })\n        setPropsId(positionData.id)\n        setPropsPosition(positionData)\n        setTarget(true)\n        \n    }\n    \n\nfunction mouseOver(index){\n    console.log('ssss',strokeWeight)\n    strokeWeights[index]=10\n    setStrokeWeight(strokeWeights)\n    console.log('over')\n}\n\nfunction mouseOut(index){\n    strokeWeights[index]=5\n    setStrokeWeight(strokeWeights)\n    console.log('aaa')\n\n}\n\n      //polyline\n\n      //infoWindow\n      const closeClick=()=>{\n        setTarget(false)\n    }\n\n\nconst divStyle = {\n    background: `white`,\n    border: `1px solid #ccc`,\n    padding: 15\n  }\n\n\n  const oneRoute=()=>{\n    dispatch({\n               type:LOAD_MAP_REQUEST,\n               data:propsId\n             })\n    Router.push({\n        pathname: '/Route/[id]',\n        query: {id:propsId},\n      });\n\n      console.log('dong',searchMap)\n}\n\n\n      //infoWindow\n\n      const [mapState,setMapState]=useState(true)\n\n      const runningselectMap=()=>{\n        setMapstate(true)\n\n        if(mapState){\n            dispatch({\n                type:BIKE_MAP_REQUEST,\n                data:{\n                    event:'R',\n                    north:{\n                        lat:ne.lat(),\n                        lng:ne.lng()\n                      },\n                      south:{\n                        lat:sw.lat(),\n                        lng:sw.lat()\n                      },\n                }\n            })\n        }else{\n            dispatch({\n                type:RUNNING_MAP_REQUEST,\n                data:{\n                    event:'R',\n                    north:{\n                        lat:ne.lat(),\n                        lng:ne.lng()\n                      },\n                      south:{\n                        lat:sw.lat(),\n                        lng:sw.lat()\n                      },\n                }\n            })\n\n        }\n      }\n\n      const bikeselectMap=()=>{\n          setMapState(false)\n      }\n\n\n\n  \n    \n\n    \n\n\n  return (\n    <div>\n\n<Button onclick={bikeselectMap}>자전거</Button>\n        <Button onclick={runningselectMap}>달리기</Button> \n\n<LoadScript\n        googleMapsApiKey=\"AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE\"\n        >\n            \n          <GoogleMap\n            id=\"marker-example\"\n            mapContainerStyle={mapContainerStyle}\n            zoom={13}\n            center={geom}\n            onLoad={handleOnLoad}\n            onDragEnd={handleCenterChanged}\n            // onZoomChanged={handleCenterChanged}\n          >\n\n<MarkerClusterer options={optionss}>\n          {(clusterer) =>\n            searchMap.map((p) => (\n              <Marker  key={createKey(p)} position={{lat:p.start_latlng[1],lng:p.start_latlng[0]}} clusterer={clusterer}  icon={{\n              scaledSize: new google.maps.Size(30,30),} } />\n            ))\n          }\n        </MarkerClusterer>\n      \n\n        {searchMap.map((m,index)=>(\n            <Polyline  onRightClick={()=>polylineClick(m)} onMouseOver={()=>mouseOver(index)} onMouseOut={()=>mouseOut(index)}  options={{strokeWeight:strokeWeight[index],clickable:true,visible:true,strokeColor: '#FF0000',fillColor: '#FF0000',}} path={m.gps.coordinates.map((p)=>(\n                {\n                    lat:p[1],\n                    lng:p[0]\n                }\n            ))}></Polyline>\n            \n            ))}\n            \n    {target&&<InfoWindow position={infoPosition} onCloseClick={closeClick}>\n        <div style={divStyle}>\n            <h1>동영</h1>\n                {/* <Link href={{\n                    pathname:'/Route/[id]',\n                    query: {id:propsId},\n                }}><a>상세보기</a></Link> */}\n            <button onClick={oneRoute}>상세보기</button>\n        </div>\n        </InfoWindow>} \n         \n\n        \n       \n            \n          </GoogleMap>\n          </LoadScript>\n             \n\n    </div>\n  )\n}\n\nexport default selectMap"]},"metadata":{},"sourceType":"module"}