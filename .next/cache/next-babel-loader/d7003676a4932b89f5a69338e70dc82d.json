{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/dong/CapstonProject/pages/polyline.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { Polyline, Marker, StreetViewPanorama, MarkerClusterer } from '@react-google-maps/api';\nimport AppLayout from '../component/AppLayout'; // import Streetview from 'react-google-streetview';// import RecordElevation from '../component/RecordElavation'\n\nimport GeomHandle from '../component/GoogleMap';\nimport { Input } from 'antd';\nvar mapCanvas = document.getElementById('marker-example');\nvar mapOptions = {\n  center: new google.maps.LatLng(23.634501, -102.552784),\n  zoom: 5\n};\nvar map = new google.maps.Map(mapCanvas, mapOptions);\nmap.addListener('dragend', function () {\n  var Newlat = map.getCenter().lat();\n  console.log(Newlat);\n});\nvar mapContainerStyle = {\n  height: \"400px\",\n  width: \"800px\"\n};\n\nvar call = function call() {\n  console.log('cccccc');\n};\n\nvar center = {\n  lat: 35.969997373905,\n  lng: 128.45170755523503\n};\n\nvar onLoad = function onLoad(polyline) {\n  console.log('polyline: ', polyline);\n};\n\nvar pathsss = {\n  'one': [{\n    lat: 35.24731788471166,\n    lng: 128.86906207420088\n  }, {\n    lat: 35.260354548127424,\n    lng: 128.81198466603703\n  }]\n};\nvar path = [[{\n  lat: 35.969997373905,\n  lng: 128.45170755523503\n}, {\n  lat: 35.985501427015464,\n  lng: 128.40407191943035\n}, {\n  lat: 35.89580489690752,\n  lng: 128.62238368221892\n}], [{\n  lat: 35.24651100148735,\n  lng: 128.87070362130143\n}, {\n  lat: 35.24752656439432,\n  lng: 128.8729993854958\n}, {\n  lat: 35.248984786322424,\n  lng: 128.87318007064073\n}, {\n  lat: 35.25018259185734,\n  lng: 128.87332887017186\n}, {\n  lat: 35.25065129355367,\n  lng: 128.87505069331763\n}, {\n  lat: 35.25145581526787,\n  lng: 128.87358573620605\n}]];\nvar markerPosition = [{\n  lat: 35.89580489690752,\n  lng: 128.62238368221892\n}, {\n  lat: 35.25145581526787,\n  lng: 128.87358573620605\n}];\nvar options = {\n  strokeColor: '#FF0000',\n  strokeOpacity: 0.8,\n  strokeWeight: 2,\n  fillColor: '#FF0000',\n  fillOpacity: 0.35,\n  clickable: false,\n  draggable: false,\n  editable: false,\n  visible: true,\n  radius: 30000,\n  //-27부터 호주 시작해서 점찍고 점찍고 한다\n  paths: [[{\n    lat: 35.969997373905,\n    lng: 128.45170755523503\n  }, {\n    lat: 35.985501427015464,\n    lng: 128.40407191943035\n  }, {\n    lat: 35.89580489690752,\n    lng: 128.62238368221892\n  }], [{\n    lat: 35.24731788471166,\n    lng: 128.86906207420088\n  }, {\n    lat: 35.260354548127424,\n    lng: 128.81198466603703\n  }]],\n  zIndex: 1\n};\n\nfunction createKey(location) {\n  return location.lat + location.lng;\n}\n\nvar optionss = {\n  imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m' // so you must have m1.png, m2.png, m3.png, m4.png, m5.png and m6.png in that folder\n\n};\n\nfunction polyline() {\n  _s();\n\n  var _this = this;\n\n  var myLatLng = {\n    lat: -25.363,\n    lng: 131.044\n  }; // const map = new google.maps.Map(document.getElementById(\"map\"), {\n  //   zoom: 4,\n  //   center: myLatLng,\n  // });\n\n  var _useState = useState({\n    lat: 35.969997373905,\n    lng: 128.45170755523503\n  }),\n      geom = _useState[0],\n      setGeom = _useState[1];\n\n  var handleButton = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var currentAddr, _yield$GeomHandle, lat, lng;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              currentAddr = document.getElementById('address').value;\n\n              if (!currentAddr) {\n                _context.next = 8;\n                break;\n              }\n\n              _context.next = 4;\n              return GeomHandle(currentAddr);\n\n            case 4:\n              _yield$GeomHandle = _context.sent;\n              lat = _yield$GeomHandle.lat;\n              lng = _yield$GeomHandle.lng;\n              setGeom({\n                lat: lat,\n                lng: lng\n              });\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleButton() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }, __jsx(AppLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }\n  }), \"\\uAC80\\uC0C9\\uD558\\uAE30\", __jsx(Input.Search, {\n    id: \"address\",\n    style: {\n      verticalAlign: 'middle',\n      marginLeft: '10px',\n      width: '500px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 105\n    }\n  }), __jsx(\"button\", {\n    onClick: handleButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }\n  }, \"\\uD074\\uB9AD\"), __jsx(LoadScript, {\n    googleMapsApiKey: \"AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  }, __jsx(GoogleMap, {\n    id: \"marker-example\",\n    mapContainerStyle: mapContainerStyle,\n    zoom: 13,\n    center: geom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 11\n    }\n  }, __jsx(MarkerClusterer, {\n    options: optionss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 1\n    }\n  }, function (clusterer) {\n    return markerPosition.map(function (p) {\n      return __jsx(Marker, {\n        key: createKey(p),\n        position: p,\n        onClick: call,\n        clusterer: clusterer,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 15\n        }\n      });\n    });\n  }), __jsx(Marker, {\n    position: {\n      lat: 35.25018259185734,\n      lng: 128.87332887017186\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }\n  }), path.map(function (m) {\n    return __jsx(Polyline, {\n      onLoad: onLoad,\n      options: options,\n      path: m,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 13\n      }\n    });\n  }))));\n}\n\n_s(polyline, \"8R6aTAri5/qXkb5mqwKh/ne3eAg=\");\n\nexport default /*#__PURE__*/React.memo(polyline);","map":{"version":3,"sources":["/Users/dong/CapstonProject/pages/polyline.js"],"names":["React","useState","GoogleMap","LoadScript","Polyline","Marker","StreetViewPanorama","MarkerClusterer","AppLayout","GeomHandle","Input","mapCanvas","document","getElementById","mapOptions","center","google","maps","LatLng","zoom","map","Map","addListener","Newlat","getCenter","lat","console","log","mapContainerStyle","height","width","call","lng","onLoad","polyline","pathsss","path","markerPosition","options","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","clickable","draggable","editable","visible","radius","paths","zIndex","createKey","location","optionss","imagePath","myLatLng","geom","setGeom","handleButton","currentAddr","value","verticalAlign","marginLeft","clusterer","p","m","memo"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { Polyline ,Marker,StreetViewPanorama,MarkerClusterer} from '@react-google-maps/api';\nimport AppLayout from '../component/AppLayout';\n// import Streetview from 'react-google-streetview';// import RecordElevation from '../component/RecordElavation'\n\nimport GeomHandle from '../component/GoogleMap'\nimport { Input } from 'antd';\n\nconst mapCanvas=document.getElementById('marker-example')\n\nvar mapOptions={\n    center: new google.maps.LatLng(23.634501, -102.552784),\n    zoom: 5,\n}\n\nvar map=new google.maps.Map(mapCanvas,mapOptions)\n\nmap.addListener('dragend', function() {\n    var Newlat = map.getCenter().lat();\n    console.log(Newlat);\n  });\n\n\n\n\nconst mapContainerStyle = {\n  height: \"400px\",\n  width: \"800px\"\n};\n\nconst call=()=>{\n    console.log('cccccc')\n}\n\nconst center = {lat:  35.969997373905, lng: 128.45170755523503};\n\nconst onLoad = polyline => {\n  console.log('polyline: ', polyline)\n};\n\nconst pathsss = {\n    \n  \n       'one': [ {lat:  35.24731788471166,  lng: 128.86906207420088},\n   \n     {lat: 35.260354548127424,  lng:128.81198466603703}\n     ],\n\n\n    \n  \n};\n\nconst path = [\n[\n    {lat:  35.969997373905, lng: 128.45170755523503},\n    {lat:35.985501427015464, lng:128.40407191943035},\n\n    {lat: 35.89580489690752, lng: 128.62238368221892}\n    \n]\n,\n[\n    {lat:  35.24651100148735,   lng: 128.87070362130143},\n   \n    {lat: 35.24752656439432,   lng:128.8729993854958},\n    {lat:35.248984786322424, lng:128.87318007064073},\n    {lat:35.25018259185734, lng:128.87332887017186},\n    {lat:35.25065129355367, lng:128.87505069331763},\n    {\n        lat:35.25145581526787, lng:128.87358573620605\n    }\n\n    \n]\n\n\n   \n    \n];\n\nconst markerPosition=[\n    {lat: 35.89580489690752, lng: 128.62238368221892},{\n        lat:35.25145581526787, lng:128.87358573620605\n    }\n]\n\nconst options = {\n  strokeColor: '#FF0000',\n  strokeOpacity: 0.8,\n  strokeWeight: 2,\n  fillColor: '#FF0000',\n  fillOpacity: 0.35,\n  clickable: false,\n  draggable: false,\n  editable: false,\n  visible: true,\n  radius: 30000,\n  //-27부터 호주 시작해서 점찍고 점찍고 한다\n  paths: [\n    \n        [\n            {lat:  35.969997373905, lng: 128.45170755523503},\n            {lat:35.985501427015464, lng:128.40407191943035},\n        \n            {lat: 35.89580489690752, lng: 128.62238368221892}\n            \n        ]\n        ,\n        [\n            {lat:  35.24731788471166,  lng: 128.86906207420088},\n           \n            {lat: 35.260354548127424,  lng:128.81198466603703}\n            \n        ]\n      \n  \n    \n  ],\n  zIndex: 1\n};\nfunction createKey(location) {\n    return location.lat + location.lng\n  }\n\n\nconst optionss = {\n    imagePath:\n      'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m', // so you must have m1.png, m2.png, m3.png, m4.png, m5.png and m6.png in that folder\n  }\n\n\nfunction polyline() {\n    const myLatLng = { lat: -25.363, lng: 131.044 };\n    // const map = new google.maps.Map(document.getElementById(\"map\"), {\n    //   zoom: 4,\n    //   center: myLatLng,\n    // });\n    const [geom ,setGeom]=useState({lat:35.969997373905, lng: 128.45170755523503})\n\n    const handleButton = async() => {\n        const currentAddr = document.getElementById('address').value\n        if (currentAddr){\n          const {lat, lng} = await GeomHandle(currentAddr)\n          setGeom({lat:lat,lng:lng})\n       \n        }\n      }\n  \n    return (\n        <div>\n            <AppLayout></AppLayout>        \n         검색하기\n        <Input.Search id=\"address\"  style={{verticalAlign:'middle' ,marginLeft:'10px',width:'500px'}} /><br></br>\n        <button onClick={handleButton}>클릭</button>\n              \n\n        <LoadScript\n        googleMapsApiKey=\"AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE\"\n        >\n            \n          <GoogleMap\n            id=\"marker-example\"\n            mapContainerStyle={mapContainerStyle}\n            zoom={13}\n            center={geom}\n            \n          >\n\n<MarkerClusterer options={optionss}>\n          {(clusterer) =>\n            markerPosition.map((p) => (\n              <Marker key={createKey(p)} position={p} onClick={call} clusterer={clusterer} />\n            ))\n          }\n        </MarkerClusterer>\n        <Marker position={{lat:35.25018259185734, lng:128.87332887017186}}  ></Marker>\n        {/* {path.map((p)=>{\n            \n        })} */}\n\n        {path.map((m)=>(\n            <Polyline onLoad={onLoad}  options={options} path={m}></Polyline>\n            \n            ))}\n             {/* <StreetViewPanorama\n      position={center}\n      visible={true}\n    /> */}\n        \n\n        \n       \n            \n          </GoogleMap>\n          </LoadScript>\n               {/* <div className=\"chart\">\n           {graphData && (\n             <RecordElevation graphData={graphData} setPosition={setPosition} />\n           )}\n\n         </div> */}\n         {/* <Streetview address=\"경남김해시\" APIkey=\"AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE\" zoomLevel={15}/> */}\n         </div>\n\n    )\n  }\n  \n  export default React.memo(polyline)"]},"metadata":{},"sourceType":"module"}