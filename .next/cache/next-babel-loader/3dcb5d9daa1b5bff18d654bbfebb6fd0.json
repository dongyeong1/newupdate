{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectDestructuringEmpty from \"@babel/runtime/helpers/esm/objectDestructuringEmpty\";\n\nvar _jsxFileName = \"/Users/dong/CapstonProject/component/map/selectMap.js\",\n    _s = $RefreshSig$(),\n    _templateObject;\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { Polyline, Marker, StreetViewPanorama, MarkerClusterer } from '@react-google-maps/api';\nimport { InfoWindow } from '@react-google-maps/api';\nimport Router from 'next/router';\nimport { LOAD_MAP_REQUEST } from '../../reducers/map';\nimport { MOVING_MAP_REQUEST, BIKE_MAP_REQUEST, RUNNING_MAP_REQUEST, SEARCH_MAP_REQUEST, LOAD_MY_LOCATION_REQUEST } from '../../reducers/map';\nimport { Input, Button, Row, Col, Card } from 'antd';\nimport GeomHandle from '../GoogleMap';\nimport SearchList from '../SearchList';\nimport Link from 'next/link';\nimport styled from \"styled-components\";\nimport wrapper from '../../store/configureStore';\nvar lat = 1;\nvar lng = 2;\n\nfunction selectMap(_ref) {\n  _s();\n\n  var _this = this;\n\n  _objectDestructuringEmpty(_ref);\n\n  var _useSelector = useSelector(function (state) {\n    return state.map;\n  }),\n      myLocation = _useSelector.myLocation;\n\n  var _useState = useState(),\n      geom = _useState[0],\n      setGeom = _useState[1];\n\n  var _useState2 = useState(false),\n      loadMap = _useState2[0],\n      setLoadMap = _useState2[1];\n\n  function getLocation() {\n    if (navigator.geolocation) {\n      // GPS를 지원하면\n      navigator.geolocation.getCurrentPosition(function (position) {\n        setGeom({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n        setLoadMap(true);\n      }, function (error) {\n        console.error(error);\n      }, {\n        enableHighAccuracy: false,\n        maximumAge: 0,\n        timeout: Infinity\n      });\n    } else {\n      alert('GPS를 지원하지 않습니다');\n    }\n  }\n\n  var _useState3 = useState(false),\n      isState = _useState3[0],\n      setIsState = _useState3[1];\n\n  var _useState4 = useState('B'),\n      mapState = _useState4[0],\n      setMapState = _useState4[1];\n\n  var dispatch = useDispatch();\n  var mapContainerStyle = {\n    marginTop: 60,\n    marginRight: 300,\n    height: \"600px\",\n    width: \"800px\"\n  };\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.map;\n  }),\n      searchMap = _useSelector2.searchMap; // const [geom ,setGeom]=useState({lat:35.969997373905, lng: 128.45170755523503})\n\n\n  var _useState5 = useState(null),\n      mapref = _useState5[0],\n      setMapRef = _useState5[1];\n\n  useEffect(function () {\n    getLocation();\n\n    if (mapref) {\n      dispatch({\n        type: LOAD_MY_LOCATION_REQUEST,\n        data: {\n          north: {\n            lat: mapref.getBounds().getNorthEast().lat(),\n            lng: mapref.getBounds().getNorthEast().lng()\n          },\n          south: {\n            lat: mapref.getBounds().getSouthWest().lat(),\n            lng: mapref.getBounds().getSouthWest().lng()\n          },\n          event: mapState\n        }\n      });\n    }\n  }, [loadMap]);\n\n  var handleOnLoad = function handleOnLoad(map) {\n    setMapRef(map);\n    console.log('load됨');\n  };\n\n  var handleCenterChanged = function handleCenterChanged() {\n    if (mapref) {\n      //   var zoom=mapref.getZoom()\n      var nt = mapref.getBounds().getNorthEast().lat();\n      var ng = mapref.getBounds().getNorthEast().lng();\n      var st = mapref.getBounds().getSouthWest().lat();\n      var sg = mapref.getBounds().getSouthWest().lng();\n    }\n\n    dispatch({\n      type: MOVING_MAP_REQUEST,\n      data: {\n        north: {\n          lat: mapref.getBounds().getNorthEast().lat(),\n          lng: mapref.getBounds().getNorthEast().lng()\n        },\n        south: {\n          lat: mapref.getBounds().getSouthWest().lat(),\n          lng: mapref.getBounds().getSouthWest().lng()\n        },\n        event: mapState\n      }\n    });\n  }; //////markercluseter\n\n\n  var optionss = {\n    imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m' // so you must have m1.png, m2.png, m3.png, m4.png, m5.png and m6.png in that folder\n\n  };\n\n  function createKey(location) {\n    return location.lat + location.lng;\n  } //////markercluseter\n  ///주소검색\n\n\n  var _useSelector3 = useSelector(function (state) {\n    return state.map;\n  }),\n      searchmapLoading = _useSelector3.searchmapLoading;\n\n  var handleButton = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var currentAddr, _yield$GeomHandle, _lat, _lng;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              currentAddr = document.getElementById('address').value;\n\n              if (!currentAddr) {\n                _context.next = 10;\n                break;\n              }\n\n              _context.next = 4;\n              return GeomHandle(currentAddr);\n\n            case 4:\n              _yield$GeomHandle = _context.sent;\n              _lat = _yield$GeomHandle.lat;\n              _lng = _yield$GeomHandle.lng;\n              setGeom({\n                lat: _lat,\n                lng: _lng\n              });\n              dispatch({\n                type: SEARCH_MAP_REQUEST,\n                data: {\n                  north: {\n                    lat: mapref.getBounds().getNorthEast().lat(),\n                    lng: mapref.getBounds().getNorthEast().lng()\n                  },\n                  south: {\n                    lat: mapref.getBounds().getSouthWest().lat(),\n                    lng: mapref.getBounds().getSouthWest().lng()\n                  },\n                  event: mapState\n                }\n              });\n              console.log('aaa', searchMap);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleButton() {\n      return _ref2.apply(this, arguments);\n    };\n  }(); //주소검색\n  //polyline\n  //   const [propsPosition,setPropsPosition]=useState()\n\n\n  var _useState6 = useState(),\n      propsId = _useState6[0],\n      setPropsId = _useState6[1];\n\n  var _useState7 = useState({\n    lat: '',\n    lng: ''\n  }),\n      infoPosition = _useState7[0],\n      setInfoPosition = _useState7[1];\n\n  var _useState8 = useState(false),\n      target = _useState8[0],\n      setTarget = _useState8[1];\n\n  var _useState9 = useState(Array.from({\n    length: searchMap.length\n  }, function () {\n    return 3;\n  })),\n      strokeWeight = _useState9[0],\n      setStrokeWeight = _useState9[1];\n\n  var strokeWeights = Array.from({\n    length: searchMap.length\n  }, function () {\n    return 3;\n  });\n\n  var polylineClick = function polylineClick(positionData) {\n    setInfoPosition({\n      lat: positionData.gps.coordinates[3][1],\n      lng: positionData.gps.coordinates[3][0]\n    });\n    setPropsId(positionData._id); // setPropsPosition(positionData)\n\n    setTarget(true);\n  };\n\n  function mouseOver(index) {\n    strokeWeights[index] = 10;\n    setStrokeWeight(strokeWeights);\n  }\n\n  function mouseOut(index) {\n    strokeWeights[index] = 3;\n    setStrokeWeight(strokeWeights);\n  } //polyline\n  //infoWindow\n\n\n  var closeClick = function closeClick() {\n    setTarget(false);\n  };\n\n  var divStyle = {\n    background: \"white\",\n    border: \"1px solid #ccc\",\n    padding: 15\n  };\n\n  var oneRoute = function oneRoute() {\n    dispatch({\n      type: LOAD_MAP_REQUEST,\n      data: propsId\n    });\n    Router.push({\n      pathname: '/Route/[id]',\n      query: {\n        id: propsId\n      }\n    });\n    console.log('dong', searchMap);\n  }; //infoWindow\n  //   const [mapState,setMapState]=useState()\n  // const {mapState}=useSelector((state)=>state.map)\n\n\n  var bikeSelectMap = function bikeSelectMap() {\n    setMapState('B');\n    setIsState(true);\n  };\n\n  var runningSelectMap = function runningSelectMap() {\n    setMapState('R');\n    setIsState(true);\n  };\n\n  useEffect(function () {\n    if (mapState === 'B' && isState === true) {\n      dispatch({\n        type: BIKE_MAP_REQUEST,\n        data: {\n          event: mapState,\n          north: {\n            lat: mapref.getBounds().getNorthEast().lat(),\n            lng: mapref.getBounds().getNorthEast().lng()\n          },\n          south: {\n            lat: mapref.getBounds().getSouthWest().lat(),\n            lng: mapref.getBounds().getSouthWest().lng()\n          }\n        }\n      });\n      setIsState(false);\n    } else if (mapState === 'R' && isState === true) {\n      dispatch({\n        type: RUNNING_MAP_REQUEST,\n        data: {\n          event: mapState,\n          north: {\n            lat: mapref.getBounds().getNorthEast().lat(),\n            lng: mapref.getBounds().getNorthEast().lng()\n          },\n          south: {\n            lat: mapref.getBounds().getSouthWest().lat(),\n            lng: mapref.getBounds().getSouthWest().lng()\n          }\n        }\n      });\n      setIsState(false);\n    }\n  }, [mapState, isState]);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 5\n    }\n  }, __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 9\n    }\n  }, __jsx(Col, {\n    span: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 13\n    }\n  }, __jsx(Input.Search, {\n    loading: searchmapLoading,\n    enterButton: \"\\uAC80\\uC0C9\",\n    onPressEnter: handleButton,\n    id: \"address\",\n    style: {\n      verticalAlign: 'middle',\n      width: '300px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 17\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 81\n    }\n  }), __jsx(Buttons, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 17\n    }\n  }, __jsx(Button, {\n    onClick: bikeSelectMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 17\n    }\n  }, \"\\uC790\\uC804\\uAC70\"), __jsx(Button, {\n    onClick: runningSelectMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 17\n    }\n  }, \"\\uB2EC\\uB9AC\\uAE30\")), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 18\n    }\n  }, searchMap.map(function (p, index) {\n    return __jsx(SearchList, {\n      setInfoPosition: setInfoPosition,\n      setPropsId: setPropsId,\n      setTarget: setTarget,\n      index: index,\n      setStrokeWeight: setStrokeWeight,\n      list: p,\n      key: p.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 27\n      }\n    });\n  }))), __jsx(Col, {\n    span: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 13\n    }\n  }, __jsx(LoadScript, {\n    googleMapsApiKey: \"AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 13\n    }\n  }, __jsx(GoogleMap, {\n    id: \"marker-example\",\n    mapContainerStyle: mapContainerStyle,\n    zoom: 15,\n    center: geom,\n    onLoad: handleOnLoad,\n    onDragEnd: handleCenterChanged // onZoomChanged={handleCenterChanged}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 11\n    }\n  }, __jsx(MarkerClusterer, {\n    options: optionss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 9\n    }\n  }, function (clusterer) {\n    return searchMap.map(function (p) {\n      return __jsx(Marker, {\n        key: createKey(p),\n        position: {\n          lat: p.start_latlng[1],\n          lng: p.start_latlng[0]\n        },\n        clusterer: clusterer,\n        icon: {\n          scaledSize: new google.maps.Size(30, 30)\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 21\n        }\n      });\n    });\n  }), searchMap.map(function (m, index) {\n    return __jsx(Polyline, {\n      onRightClick: function onRightClick() {\n        return polylineClick(m);\n      },\n      onMouseOver: function onMouseOver() {\n        return mouseOver(index);\n      },\n      onMouseOut: function onMouseOut() {\n        return mouseOut(index);\n      },\n      options: {\n        strokeWeight: strokeWeight[index],\n        strokeOpacity: 0.7,\n        clickable: true,\n        visible: true,\n        strokeColor: '#FF0000',\n        fillColor: '#FF0000'\n      },\n      path: m.gps.coordinates.map(function (p) {\n        return {\n          lat: p[1],\n          lng: p[0]\n        };\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 13\n      }\n    });\n  }), target && __jsx(InfoWindow, {\n    position: infoPosition,\n    onCloseClick: closeClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 18\n    }\n  }, __jsx(\"div\", {\n    style: divStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 13\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 17\n    }\n  }, \"\\uB3D9\\uC601\"), __jsx(\"button\", {\n    onClick: oneRoute,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 17\n    }\n  }, \"\\uC0C1\\uC138\\uBCF4\\uAE30\"))))))));\n}\n\n_s(selectMap, \"h9plxbh7pQ/g/WzBpl/mMdl+Dw0=\", false, function () {\n  return [useSelector, useDispatch, useSelector, useSelector];\n});\n\nexport default selectMap;\nexport var getStaticProps = wrapper.getStaticProps( /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(context) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            context.store.dispatch({\n              type: LOAD_MY_LOCATION_REQUEST,\n              data: {\n                north: {\n                  lat: mapref.getBounds().getNorthEast().lat(),\n                  lng: mapref.getBounds().getNorthEast().lng()\n                },\n                south: {\n                  lat: mapref.getBounds().getSouthWest().lat(),\n                  lng: mapref.getBounds().getSouthWest().lng()\n                },\n                event: mapState\n              }\n            });\n            context.store.dispatch(END);\n            _context2.next = 4;\n            return context.store.sagaTask.toPromise();\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}());\nvar Buttons = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n\\n\\nButton:hover {\\n    background:#1683e8;\\n    border-color: #1683e8;\\n    color: #fff;\\n  }\\n\\n  Button:focus {\\n    background:#1683e8;\\n    color: #fff;\\n  }\\n\\n\\n\"])));\n_c = Buttons;\n\nvar _c;\n\n$RefreshReg$(_c, \"Buttons\");","map":{"version":3,"sources":["/Users/dong/CapstonProject/component/map/selectMap.js"],"names":["React","useState","useEffect","useDispatch","useSelector","GoogleMap","LoadScript","Polyline","Marker","StreetViewPanorama","MarkerClusterer","InfoWindow","Router","LOAD_MAP_REQUEST","MOVING_MAP_REQUEST","BIKE_MAP_REQUEST","RUNNING_MAP_REQUEST","SEARCH_MAP_REQUEST","LOAD_MY_LOCATION_REQUEST","Input","Button","Row","Col","Card","GeomHandle","SearchList","Link","styled","wrapper","lat","lng","selectMap","state","map","myLocation","geom","setGeom","loadMap","setLoadMap","getLocation","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","error","console","enableHighAccuracy","maximumAge","timeout","Infinity","alert","isState","setIsState","mapState","setMapState","dispatch","mapContainerStyle","marginTop","marginRight","height","width","searchMap","mapref","setMapRef","type","data","north","getBounds","getNorthEast","south","getSouthWest","event","handleOnLoad","log","handleCenterChanged","nt","ng","st","sg","optionss","imagePath","createKey","location","searchmapLoading","handleButton","currentAddr","document","getElementById","value","propsId","setPropsId","infoPosition","setInfoPosition","target","setTarget","Array","from","length","strokeWeight","setStrokeWeight","strokeWeights","polylineClick","positionData","gps","coordinates","_id","mouseOver","index","mouseOut","closeClick","divStyle","background","border","padding","oneRoute","push","pathname","query","id","bikeSelectMap","runningSelectMap","verticalAlign","p","clusterer","start_latlng","scaledSize","google","maps","Size","m","strokeOpacity","clickable","visible","strokeColor","fillColor","getStaticProps","context","store","END","sagaTask","toPromise","Buttons","div"],"mappings":"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","sourcesContent":["import React, {useState,useEffect} from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { Polyline ,Marker,StreetViewPanorama,MarkerClusterer} from '@react-google-maps/api';\nimport { InfoWindow } from '@react-google-maps/api';\nimport Router from 'next/router'\nimport {LOAD_MAP_REQUEST} from '../../reducers/map'\nimport { MOVING_MAP_REQUEST,BIKE_MAP_REQUEST,RUNNING_MAP_REQUEST,SEARCH_MAP_REQUEST,LOAD_MY_LOCATION_REQUEST } from '../../reducers/map';\nimport {Input,Button,Row,Col,Card} from 'antd'\nimport GeomHandle from '../GoogleMap'\nimport SearchList from '../SearchList';\nimport Link from 'next/link';\nimport styled from \"styled-components\";\nimport wrapper from '../../store/configureStore';\n\n\n\n  var lat=1\n  var lng=2\n\n\nfunction selectMap({}) {\n    const {myLocation}=useSelector((state)=>state.map)\n\n    const [geom ,setGeom]=useState()\n\n\n    const [loadMap,setLoadMap]=useState(false)\n\n    function getLocation() {\n        if (navigator.geolocation) { // GPS를 지원하면\n          navigator.geolocation.getCurrentPosition(function(position) {\n             \n            setGeom({\n                lat:position.coords.latitude,\n                lng:position.coords.longitude\n            })\n            setLoadMap(true)\n\n           \n          }, function(error) {\n            console.error(error);\n          }, {\n            enableHighAccuracy: false,\n            maximumAge: 0,\n            timeout: Infinity\n          });\n        } else {\n          alert('GPS를 지원하지 않습니다');\n        }\n      }\n\n   \n   \n\n    const [isState,setIsState]=useState(false)\n    const [mapState,setMapState]= useState('B')\n\n   \n    const dispatch=useDispatch()\n\n    const mapContainerStyle = {\n    marginTop:60,\n    marginRight:300,\n    height: \"600px\",\n    width: \"800px\"\n    };\n  \n\n    const {searchMap}=useSelector((state)=>state.map)\n\n    // const [geom ,setGeom]=useState({lat:35.969997373905, lng: 128.45170755523503})\n    const [mapref, setMapRef] = useState(null);\n\n    useEffect(()=>{\n        getLocation()\n        if(mapref){\n            dispatch({\n                type:LOAD_MY_LOCATION_REQUEST,\n                data:{\n                    north:{\n                      lat:mapref.getBounds().getNorthEast().lat(),\n                      lng:mapref.getBounds().getNorthEast().lng()\n                    },\n                    south:{\n                      lat:mapref.getBounds().getSouthWest().lat(),\n                      lng:mapref.getBounds().getSouthWest().lng()\n                    },\n                    event:mapState\n          \n                  }\n            })\n        }\n      \n    },[loadMap])\n\n\n    const handleOnLoad = map => {\n        setMapRef(map);\n        console.log('load됨')\n      };\n\n      const handleCenterChanged = () => {\n        if (mapref) {\n            \n        //   var zoom=mapref.getZoom()\n          var nt=mapref.getBounds().getNorthEast().lat();\n          var ng=mapref.getBounds().getNorthEast().lng();\n\n          var st=mapref.getBounds().getSouthWest().lat();\n          var sg=mapref.getBounds().getSouthWest().lng();\n\n         \n\n        \n        }\n\n        dispatch({ \n          type:MOVING_MAP_REQUEST,\n          data:{\n            north:{\n                lat:mapref.getBounds().getNorthEast().lat(),\n                lng:mapref.getBounds().getNorthEast().lng()\n              },\n              south:{\n                lat:mapref.getBounds().getSouthWest().lat(),\n                lng:mapref.getBounds().getSouthWest().lng()\n              },\n            event:mapState\n  \n          }\n        })\n      \n      }\n\n      //////markercluseter\n\n\n    const optionss = {\n        imagePath:\n        'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m', // so you must have m1.png, m2.png, m3.png, m4.png, m5.png and m6.png in that folder\n    }\n\n\n    function createKey(location) {\n        return location.lat + location.lng\n    }\n\n      //////markercluseter\n\n\n   ///주소검색\n\n    const {searchmapLoading}=useSelector((state)=>state.map)\n\n\n\n   const handleButton = async() => {\n       const currentAddr = document.getElementById('address').value\n       if (currentAddr){\n         const {lat, lng} = await GeomHandle(currentAddr)\n         setGeom({lat:lat,lng:lng})\n\n         dispatch({\n           type:SEARCH_MAP_REQUEST,\n           data:{\n            north:{\n              lat:mapref.getBounds().getNorthEast().lat(),\n              lng:mapref.getBounds().getNorthEast().lng()\n            },\n            south:{\n              lat:mapref.getBounds().getSouthWest().lat(),\n              lng:mapref.getBounds().getSouthWest().lng()\n            },\n            event:mapState\n  \n          }\n       })\n       console.log('aaa',searchMap)\n\n\n\n      \n       }\n     }\n\n\n   //주소검색\n\n\n\n      //polyline\n\n    //   const [propsPosition,setPropsPosition]=useState()\n\n      const [propsId,setPropsId]=useState()\n\n\n      const [infoPosition,setInfoPosition]=useState({\n        lat:'',\n        lng:'',\n        })\n    \n      const [target,setTarget]=useState(false)\n\n\n      const [strokeWeight,setStrokeWeight]=useState(Array.from({length: searchMap.length}, () => 3))\n      const strokeWeights= Array.from({length: searchMap.length}, () => 3);\n\n\n      const polylineClick=(positionData)=>{\n     \n    \n        setInfoPosition({\n            lat:positionData.gps.coordinates[3][1],\n            lng:positionData.gps.coordinates[3][0]\n        })\n        setPropsId(positionData._id)\n        // setPropsPosition(positionData)\n        setTarget(true)\n        \n    }\n    \n\n    function mouseOver(index){\n        strokeWeights[index]=10\n        setStrokeWeight(strokeWeights)\n    }\n\n    function mouseOut(index){\n        strokeWeights[index]=3\n        setStrokeWeight(strokeWeights)\n\n    }\n\n      //polyline\n\n      //infoWindow\n      const closeClick=()=>{\n        setTarget(false)\n    }\n\n\n\n    const divStyle = {\n        background: `white`,\n        border: `1px solid #ccc`,\n        padding: 15\n    }\n\n\n  const oneRoute=()=>{\n    dispatch({\n               type:LOAD_MAP_REQUEST,\n               data:propsId\n             })\n               \n    Router.push({\n        pathname: '/Route/[id]',\n        query: {id:propsId},\n      });\n\n      console.log('dong',searchMap)\n}\n\n\n      //infoWindow\n\n    //   const [mapState,setMapState]=useState()\n    // const {mapState}=useSelector((state)=>state.map)\n    const bikeSelectMap=()=>{\n        setMapState('B')\n        setIsState(true)\n    }\n\n    const runningSelectMap=()=>{\n        setMapState('R')\n        setIsState(true)\n    }\n   \n    useEffect(()=>{\n\n        if(mapState==='B'&&isState===true){\n            dispatch({\n                type:BIKE_MAP_REQUEST,\n                data:{\n                    event:mapState,\n                    north:{\n                        lat:mapref.getBounds().getNorthEast().lat(),\n                        lng:mapref.getBounds().getNorthEast().lng()\n                      },\n                      south:{\n                        lat:mapref.getBounds().getSouthWest().lat(),\n                        lng:mapref.getBounds().getSouthWest().lng()\n                      },  \n                }\n            })\n            setIsState(false)\n        }else if(mapState==='R'&&isState===true){\n            dispatch({\n                type:RUNNING_MAP_REQUEST,\n                data:{\n                    event:mapState,\n                    north:{\n                        lat:mapref.getBounds().getNorthEast().lat(),\n                        lng:mapref.getBounds().getNorthEast().lng()\n                      },\n                      south:{\n                        lat:mapref.getBounds().getSouthWest().lat(),\n                        lng:mapref.getBounds().getSouthWest().lng()\n                      },\n                }\n            })\n            setIsState(false)\n\n        }\n    },[mapState,isState])\n\n\n\n  \n    \n\n\n  return (\n    <div>\n\n        <Row>\n            <Col span={10}>\n                <Input.Search \n                loading={searchmapLoading} enterButton=\"검색\" onPressEnter={handleButton}\n                id=\"address\"  style={{verticalAlign:'middle' ,width:'300px'}} /><br></br>\n                \n                <Buttons>\n                <Button onClick={bikeSelectMap}>자전거</Button>\n                <Button onClick={runningSelectMap}>달리기</Button> \n                </Buttons>\n\n                 <div>\n                    {\n                        searchMap.map((p,index)=>(\n                            \n                          <SearchList setInfoPosition={setInfoPosition} setPropsId={setPropsId} setTarget={setTarget} index={index} setStrokeWeight={setStrokeWeight} list={p} key={p.id} ></SearchList>\n                            \n                        ))\n                        }\n                </div> \n                \n            </Col>\n\n            <Col span={10}>\n            <LoadScript\n            googleMapsApiKey=\"AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE\"\n        >\n            \n          <GoogleMap\n            id=\"marker-example\"\n            mapContainerStyle={mapContainerStyle}\n            zoom={15}\n            center={geom}\n            onLoad={handleOnLoad}\n            onDragEnd={handleCenterChanged}\n            // onZoomChanged={handleCenterChanged}\n          >\n\n        <MarkerClusterer options={optionss}>\n                {(clusterer) =>\n                    searchMap.map((p) => (\n                    <Marker  key={createKey(p)} position={{lat:p.start_latlng[1],lng:p.start_latlng[0]}} clusterer={clusterer}  icon={{\n                    scaledSize: new google.maps.Size(30,30),} } />\n                    ))\n                }\n        </MarkerClusterer>\n            \n\n        {searchMap.map((m,index)=>(\n            <Polyline  onRightClick={()=>polylineClick(m)} onMouseOver={()=>mouseOver(index)} onMouseOut={()=>mouseOut(index)}  options={{strokeWeight:strokeWeight[index],strokeOpacity:0.7,clickable:true,visible:true,strokeColor: '#FF0000',fillColor: '#FF0000',}} path={m.gps.coordinates.map((p)=>(\n                {\n                    lat:p[1],\n                    lng:p[0]\n                }\n            ))}></Polyline>\n            \n            ))}\n            \n        {target&&<InfoWindow position={infoPosition} onCloseClick={closeClick}>\n            <div style={divStyle}>\n                <h1>동영</h1>\n                    {/* <Link href={{\n                        pathname:'/Route/[id]',\n                        query: {id:propsId},\n                    }}><a>상세보기</a></Link>\n                     */}\n                <button onClick={oneRoute}>상세보기</button>\n            </div>\n            </InfoWindow>} \n            \n\n        \n       \n            \n          </GoogleMap>\n          </LoadScript>\n            \n            </Col>\n\n        </Row>\n\n    \n\n   \n             \n\n    </div>\n  )\n}\n\n\n\n\nexport default selectMap\n\nexport const getStaticProps=wrapper.getStaticProps(async (context)=>{\n \n    context.store.dispatch({\n            type:LOAD_MY_LOCATION_REQUEST,\n            data:{\n                north:{\n                  lat:mapref.getBounds().getNorthEast().lat(),\n                  lng:mapref.getBounds().getNorthEast().lng()\n                },\n                south:{\n                  lat:mapref.getBounds().getSouthWest().lat(),\n                  lng:mapref.getBounds().getSouthWest().lng()\n                },\n                event:mapState\n      \n              }\n        })\n    context.store.dispatch(END)\n    await context.store.sagaTask.toPromise()\n\n})\n\n\nconst Buttons= styled.div`\n\n\nButton:hover {\n    background:#1683e8;\n    border-color: #1683e8;\n    color: #fff;\n  }\n\n  Button:focus {\n    background:#1683e8;\n    color: #fff;\n  }\n\n\n`\n\n"]},"metadata":{},"sourceType":"module"}