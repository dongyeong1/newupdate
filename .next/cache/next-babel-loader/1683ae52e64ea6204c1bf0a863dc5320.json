{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectDestructuringEmpty from \"@babel/runtime/helpers/esm/objectDestructuringEmpty\";\n\nvar _jsxFileName = \"/Users/dong/CapstonProject/component/map/selectMap.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { Polyline, Marker, StreetViewPanorama, MarkerClusterer } from '@react-google-maps/api';\nimport { InfoWindow } from '@react-google-maps/api';\nimport Router from 'next/router';\nimport { LOAD_MAP_REQUEST } from '../../reducers/map';\nimport { MOVING_MAP_REQUEST, BIKE_MAP_REQUEST, RUNNING_MAP_REQUEST } from '../../reducers/map';\nimport { Input, Button } from 'antd';\nimport GeomHandle from '../GoogleMap';\n\nfunction selectMap(_ref) {\n  _s();\n\n  var _this = this;\n\n  _objectDestructuringEmpty(_ref);\n\n  ///주소검색\n  var _useState = useState({\n    lat: 35.969997373905,\n    lng: 128.45170755523503\n  }),\n      geom = _useState[0],\n      setGeom = _useState[1];\n\n  var handleButton = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var currentAddr, _yield$GeomHandle, lat, lng;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              currentAddr = document.getElementById('address').value;\n\n              if (!currentAddr) {\n                _context.next = 10;\n                break;\n              }\n\n              _context.next = 4;\n              return GeomHandle(currentAddr);\n\n            case 4:\n              _yield$GeomHandle = _context.sent;\n              lat = _yield$GeomHandle.lat;\n              lng = _yield$GeomHandle.lng;\n              setGeom({\n                lat: lat,\n                lng: lng\n              });\n              dispatch({\n                type: SEARCH_MAP_REQUEST,\n                data: '1'\n              });\n              console.log('aaa', searchMap);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleButton() {\n      return _ref2.apply(this, arguments);\n    };\n  }(); //주소검색\n\n\n  var dispatch = useDispatch();\n  var mapContainerStyle = {\n    height: \"400px\",\n    width: \"800px\"\n  };\n\n  var _useSelector = useSelector(function (state) {\n    return state.map;\n  }),\n      searchMap = _useSelector.searchMap; // const [geom ,setGeom]=useState({lat:35.969997373905, lng: 128.45170755523503})\n\n\n  var _useState2 = useState(null),\n      mapref = _useState2[0],\n      setMapRef = _useState2[1];\n\n  var handleOnLoad = function handleOnLoad(map) {\n    setMapRef(map);\n  };\n\n  var _useState3 = useState(),\n      nelat = _useState3[0],\n      setNelat = _useState3[1];\n\n  var _useState4 = useState(),\n      nelng = _useState4[0],\n      setNelng = _useState4[1];\n\n  var _useState5 = useState(),\n      swlat = _useState5[0],\n      setSwlat = _useState5[1];\n\n  var _useState6 = useState(),\n      swlng = _useState6[0],\n      setSwlng = _useState6[1];\n\n  var handleCenterChanged = function handleCenterChanged() {\n    if (mapref) {\n      var zoom = mapref.getZoom();\n      var nt = mapref.getBounds().getNorthEast().lat();\n      var ng = mapref.getBounds().getNorthEast().lng();\n      var st = mapref.getBounds().getSouthWest().lat();\n      var sg = mapref.getBounds().getSouthWest().lng();\n      setNelat(nt);\n      setNelng(ng);\n      setSwlat(st);\n      setSwlng(sg); //   console.log('zoom',zoom);\n      //   console.log('north', ne)\n      //   console.log('south',sw,',',sw)\n    }\n\n    dispatch({\n      type: MOVING_MAP_REQUEST,\n      data: {\n        north: {\n          lat: nelat,\n          lng: nelng\n        },\n        south: {\n          lat: swlat,\n          lng: swlng\n        }\n      }\n    });\n  }; //////markercluseter\n\n\n  var optionss = {\n    imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m' // so you must have m1.png, m2.png, m3.png, m4.png, m5.png and m6.png in that folder\n\n  };\n\n  function createKey(location) {\n    return location.lat + location.lng;\n  } //////markercluseter\n  //polyline\n\n\n  var _useState7 = useState({\n    lat: '',\n    lng: ''\n  }),\n      infoPosition = _useState7[0],\n      setInfoPosition = _useState7[1];\n\n  var _useState8 = useState(false),\n      target = _useState8[0],\n      setTarget = _useState8[1];\n\n  var _useState9 = useState(Array.from({\n    length: searchMap.length\n  }, function () {\n    return 5;\n  })),\n      strokeWeight = _useState9[0],\n      setStrokeWeight = _useState9[1];\n\n  var strokeWeights = Array.from({\n    length: searchMap.length\n  }, function () {\n    return 5;\n  });\n\n  var polylineClick = function polylineClick(positionData) {\n    setInfoPosition({\n      lat: positionData.gps.coordinates[3][1],\n      lng: positionData.gps.coordinates[3][0]\n    });\n    setPropsId(positionData.id);\n    setPropsPosition(positionData);\n    setTarget(true);\n  };\n\n  function mouseOver(index) {\n    console.log('ssss', strokeWeight);\n    strokeWeights[index] = 10;\n    setStrokeWeight(strokeWeights);\n    console.log('over');\n  }\n\n  function mouseOut(index) {\n    strokeWeights[index] = 5;\n    setStrokeWeight(strokeWeights);\n    console.log('aaa');\n  } //polyline\n  //infoWindow\n\n\n  var closeClick = function closeClick() {\n    setTarget(false);\n  };\n\n  var divStyle = {\n    background: \"white\",\n    border: \"1px solid #ccc\",\n    padding: 15\n  };\n\n  var oneRoute = function oneRoute() {\n    dispatch({\n      type: LOAD_MAP_REQUEST,\n      data: propsId\n    });\n    Router.push({\n      pathname: '/Route/[id]',\n      query: {\n        id: propsId\n      }\n    });\n    console.log('dong', searchMap);\n  }; //infoWindow\n\n\n  var _useState10 = useState(),\n      mapState = _useState10[0],\n      setMapState = _useState10[1]; // const {mapState}=useSelector((state)=>state.map)\n\n\n  var bikeSelectMap = function bikeSelectMap() {\n    setMapState(true);\n  };\n\n  var runningSelectMap = function runningSelectMap() {\n    setMapState(false);\n  };\n\n  useEffect(function () {\n    if (mapState === true) {\n      dispatch({\n        type: BIKE_MAP_REQUEST,\n        data: {\n          event: 'B',\n          north: {\n            lat: nelat,\n            lng: nelng\n          },\n          south: {\n            lat: swlat,\n            lng: swlng\n          }\n        }\n      });\n    } else if (mapState === false) {\n      dispatch({\n        type: RUNNING_MAP_REQUEST,\n        data: {\n          event: 'R',\n          north: {\n            lat: nelat,\n            lng: nelng\n          },\n          south: {\n            lat: swlat,\n            lng: swlng\n          }\n        }\n      });\n    }\n  }, [mapState]);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 5\n    }\n  }, __jsx(Input.Search, {\n    id: \"address\",\n    style: {\n      verticalAlign: 'middle',\n      marginLeft: '10px',\n      width: '500px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 1\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 97\n    }\n  }), __jsx(Button, {\n    onClick: handleButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 9\n    }\n  }, \"\\uD074\\uB9AD\"), __jsx(Button, {\n    onClick: bikeSelectMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 1\n    }\n  }, \"\\uC790\\uC804\\uAC70s\"), __jsx(Button, {\n    onClick: runningSelectMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 9\n    }\n  }, \"\\uB2EC\\uB9AC\\uAE30s\"), __jsx(LoadScript, {\n    googleMapsApiKey: \"AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 1\n    }\n  }, __jsx(GoogleMap, {\n    id: \"marker-example\",\n    mapContainerStyle: mapContainerStyle,\n    zoom: 13,\n    center: geom,\n    onLoad: handleOnLoad,\n    onDragEnd: handleCenterChanged // onZoomChanged={handleCenterChanged}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 11\n    }\n  }, __jsx(MarkerClusterer, {\n    options: optionss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 1\n    }\n  }, function (clusterer) {\n    return searchMap.map(function (p) {\n      return __jsx(Marker, {\n        key: createKey(p),\n        position: {\n          lat: p.start_latlng[1],\n          lng: p.start_latlng[0]\n        },\n        clusterer: clusterer,\n        icon: {\n          scaledSize: new google.maps.Size(30, 30)\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 15\n        }\n      });\n    });\n  }), searchMap.map(function (m, index) {\n    return __jsx(Polyline, {\n      onRightClick: function onRightClick() {\n        return polylineClick(m);\n      },\n      onMouseOver: function onMouseOver() {\n        return mouseOver(index);\n      },\n      onMouseOut: function onMouseOut() {\n        return mouseOut(index);\n      },\n      options: {\n        strokeWeight: strokeWeight[index],\n        clickable: true,\n        visible: true,\n        strokeColor: '#FF0000',\n        fillColor: '#FF0000'\n      },\n      path: m.gps.coordinates.map(function (p) {\n        return {\n          lat: p[1],\n          lng: p[0]\n        };\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 13\n      }\n    });\n  }), target && __jsx(InfoWindow, {\n    position: infoPosition,\n    onCloseClick: closeClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 14\n    }\n  }, __jsx(\"div\", {\n    style: divStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 13\n    }\n  }, \"\\uB3D9\\uC601\"), __jsx(\"button\", {\n    onClick: oneRoute,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 13\n    }\n  }, \"\\uC0C1\\uC138\\uBCF4\\uAE30\"))))));\n}\n\n_s(selectMap, \"An+eA5rkswvJ/MbfZd2KmynjrEY=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\nexport default selectMap;","map":{"version":3,"sources":["/Users/dong/CapstonProject/component/map/selectMap.js"],"names":["React","useState","useEffect","useDispatch","useSelector","GoogleMap","LoadScript","Polyline","Marker","StreetViewPanorama","MarkerClusterer","InfoWindow","Router","LOAD_MAP_REQUEST","MOVING_MAP_REQUEST","BIKE_MAP_REQUEST","RUNNING_MAP_REQUEST","Input","Button","GeomHandle","selectMap","lat","lng","geom","setGeom","handleButton","currentAddr","document","getElementById","value","dispatch","type","SEARCH_MAP_REQUEST","data","console","log","searchMap","mapContainerStyle","height","width","state","map","mapref","setMapRef","handleOnLoad","nelat","setNelat","nelng","setNelng","swlat","setSwlat","swlng","setSwlng","handleCenterChanged","zoom","getZoom","nt","getBounds","getNorthEast","ng","st","getSouthWest","sg","north","south","optionss","imagePath","createKey","location","infoPosition","setInfoPosition","target","setTarget","Array","from","length","strokeWeight","setStrokeWeight","strokeWeights","polylineClick","positionData","gps","coordinates","setPropsId","id","setPropsPosition","mouseOver","index","mouseOut","closeClick","divStyle","background","border","padding","oneRoute","propsId","push","pathname","query","mapState","setMapState","bikeSelectMap","runningSelectMap","event","verticalAlign","marginLeft","clusterer","p","start_latlng","scaledSize","google","maps","Size","m","clickable","visible","strokeColor","fillColor"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAwBC,SAAxB,QAAwC,OAAxC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,wBAAtC;AACA,SAASC,QAAT,EAAmBC,MAAnB,EAA0BC,kBAA1B,EAA6CC,eAA7C,QAAmE,wBAAnE;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAAQC,gBAAR,QAA+B,oBAA/B;AACA,SAASC,kBAAT,EAA4BC,gBAA5B,EAA6CC,mBAA7C,QAAwE,oBAAxE;AACA,SAAQC,KAAR,EAAcC,MAAd,QAA2B,MAA3B;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,SAASC,SAAT,OAAuB;AAAA;;AAAA;;AAAA;;AAEnB;AAEA,kBAAsBnB,QAAQ,CAAC;AAACoB,IAAAA,GAAG,EAAC,eAAL;AAAsBC,IAAAA,GAAG,EAAE;AAA3B,GAAD,CAA9B;AAAA,MAAOC,IAAP;AAAA,MAAaC,OAAb;;AAGA,MAAMC,YAAY;AAAA,yEAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;AACXC,cAAAA,WADW,GACGC,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmCC,KADtC;;AAAA,mBAEbH,WAFa;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAGUP,UAAU,CAACO,WAAD,CAHpB;;AAAA;AAAA;AAGRL,cAAAA,GAHQ,qBAGRA,GAHQ;AAGHC,cAAAA,GAHG,qBAGHA,GAHG;AAIfE,cAAAA,OAAO,CAAC;AAACH,gBAAAA,GAAG,EAACA,GAAL;AAASC,gBAAAA,GAAG,EAACA;AAAb,eAAD,CAAP;AAEAQ,cAAAA,QAAQ,CAAC;AACPC,gBAAAA,IAAI,EAACC,kBADE;AAEPC,gBAAAA,IAAI,EAAC;AAFE,eAAD,CAAR;AAIFC,cAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAkBC,SAAlB;;AAViB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAZX,YAAY;AAAA;AAAA;AAAA,KAAlB,CAPmB,CA0BnB;;;AAEA,MAAMK,QAAQ,GAAC3B,WAAW,EAA1B;AAIJ,MAAMkC,iBAAiB,GAAG;AACtBC,IAAAA,MAAM,EAAE,OADc;AAEtBC,IAAAA,KAAK,EAAE;AAFe,GAA1B;;AAMI,qBAAkBnC,WAAW,CAAC,UAACoC,KAAD;AAAA,WAASA,KAAK,CAACC,GAAf;AAAA,GAAD,CAA7B;AAAA,MAAOL,SAAP,gBAAOA,SAAP,CAtCmB,CAwCnB;;;AACA,mBAA4BnC,QAAQ,CAAC,IAAD,CAApC;AAAA,MAAOyC,MAAP;AAAA,MAAeC,SAAf;;AAGA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAH,GAAG,EAAI;AACxBE,IAAAA,SAAS,CAACF,GAAD,CAAT;AAED,GAHH;;AAKE,mBAAuBxC,QAAQ,EAA/B;AAAA,MAAO4C,KAAP;AAAA,MAAaC,QAAb;;AACA,mBAAuB7C,QAAQ,EAA/B;AAAA,MAAO8C,KAAP;AAAA,MAAaC,QAAb;;AAEA,mBAAuB/C,QAAQ,EAA/B;AAAA,MAAOgD,KAAP;AAAA,MAAaC,QAAb;;AACA,mBAAuBjD,QAAQ,EAA/B;AAAA,MAAOkD,KAAP;AAAA,MAAaC,QAAb;;AAIA,MAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAChC,QAAIX,MAAJ,EAAY;AACV,UAAIY,IAAI,GAACZ,MAAM,CAACa,OAAP,EAAT;AACA,UAAIC,EAAE,GAACd,MAAM,CAACe,SAAP,GAAmBC,YAAnB,GAAkCrC,GAAlC,EAAP;AACA,UAAIsC,EAAE,GAACjB,MAAM,CAACe,SAAP,GAAmBC,YAAnB,GAAkCpC,GAAlC,EAAP;AAEA,UAAIsC,EAAE,GAAClB,MAAM,CAACe,SAAP,GAAmBI,YAAnB,GAAkCxC,GAAlC,EAAP;AACA,UAAIyC,EAAE,GAACpB,MAAM,CAACe,SAAP,GAAmBI,YAAnB,GAAkCvC,GAAlC,EAAP;AAEAwB,MAAAA,QAAQ,CAACU,EAAD,CAAR;AACAR,MAAAA,QAAQ,CAACW,EAAD,CAAR;AACAT,MAAAA,QAAQ,CAACU,EAAD,CAAR;AACAR,MAAAA,QAAQ,CAACU,EAAD,CAAR,CAXU,CAaZ;AACA;AACA;AACC;;AAEDhC,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAACjB,kBADE;AAEPmB,MAAAA,IAAI,EAAC;AACH8B,QAAAA,KAAK,EAAC;AACJ1C,UAAAA,GAAG,EAACwB,KADA;AAEJvB,UAAAA,GAAG,EAACyB;AAFA,SADH;AAKHiB,QAAAA,KAAK,EAAC;AACJ3C,UAAAA,GAAG,EAAC4B,KADA;AAEJ3B,UAAAA,GAAG,EAAC6B;AAFA;AALH;AAFE,KAAD,CAAR;AAeD,GAlCD,CAzDiB,CA6FjB;;;AAGN,MAAMc,QAAQ,GAAG;AACbC,IAAAA,SAAS,EACP,wFAFW,CAE+E;;AAF/E,GAAjB;;AAMA,WAASC,SAAT,CAAmBC,QAAnB,EAA6B;AACzB,WAAOA,QAAQ,CAAC/C,GAAT,GAAe+C,QAAQ,CAAC9C,GAA/B;AACD,GAxGoB,CA0GjB;AAEA;;;AAEA,mBAAqCrB,QAAQ,CAAC;AAC5CoB,IAAAA,GAAG,EAAC,EADwC;AAE5CC,IAAAA,GAAG,EAAC;AAFwC,GAAD,CAA7C;AAAA,MAAO+C,YAAP;AAAA,MAAoBC,eAApB;;AAKA,mBAAyBrE,QAAQ,CAAC,KAAD,CAAjC;AAAA,MAAOsE,MAAP;AAAA,MAAcC,SAAd;;AAGA,mBAAqCvE,QAAQ,CAACwE,KAAK,CAACC,IAAN,CAAW;AAACC,IAAAA,MAAM,EAAEvC,SAAS,CAACuC;AAAnB,GAAX,EAAuC;AAAA,WAAM,CAAN;AAAA,GAAvC,CAAD,CAA7C;AAAA,MAAOC,YAAP;AAAA,MAAoBC,eAApB;;AACA,MAAMC,aAAa,GAAEL,KAAK,CAACC,IAAN,CAAW;AAACC,IAAAA,MAAM,EAAEvC,SAAS,CAACuC;AAAnB,GAAX,EAAuC;AAAA,WAAM,CAAN;AAAA,GAAvC,CAArB;;AAGA,MAAMI,aAAa,GAAC,SAAdA,aAAc,CAACC,YAAD,EAAgB;AAGlCV,IAAAA,eAAe,CAAC;AACZjD,MAAAA,GAAG,EAAC2D,YAAY,CAACC,GAAb,CAAiBC,WAAjB,CAA6B,CAA7B,EAAgC,CAAhC,CADQ;AAEZ5D,MAAAA,GAAG,EAAC0D,YAAY,CAACC,GAAb,CAAiBC,WAAjB,CAA6B,CAA7B,EAAgC,CAAhC;AAFQ,KAAD,CAAf;AAIAC,IAAAA,UAAU,CAACH,YAAY,CAACI,EAAd,CAAV;AACAC,IAAAA,gBAAgB,CAACL,YAAD,CAAhB;AACAR,IAAAA,SAAS,CAAC,IAAD,CAAT;AAEH,GAXC;;AAcN,WAASc,SAAT,CAAmBC,KAAnB,EAAyB;AACrBrD,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmByC,YAAnB;AACAE,IAAAA,aAAa,CAACS,KAAD,CAAb,GAAqB,EAArB;AACAV,IAAAA,eAAe,CAACC,aAAD,CAAf;AACA5C,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACH;;AAED,WAASqD,QAAT,CAAkBD,KAAlB,EAAwB;AACpBT,IAAAA,aAAa,CAACS,KAAD,CAAb,GAAqB,CAArB;AACAV,IAAAA,eAAe,CAACC,aAAD,CAAf;AACA5C,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AAEH,GApJsB,CAsJjB;AAEA;;;AACA,MAAMsD,UAAU,GAAC,SAAXA,UAAW,GAAI;AACnBjB,IAAAA,SAAS,CAAC,KAAD,CAAT;AACH,GAFC;;AAKN,MAAMkB,QAAQ,GAAG;AACbC,IAAAA,UAAU,SADG;AAEbC,IAAAA,MAAM,kBAFO;AAGbC,IAAAA,OAAO,EAAE;AAHI,GAAjB;;AAOE,MAAMC,QAAQ,GAAC,SAATA,QAAS,GAAI;AACjBhE,IAAAA,QAAQ,CAAC;AACEC,MAAAA,IAAI,EAAClB,gBADP;AAEEoB,MAAAA,IAAI,EAAC8D;AAFP,KAAD,CAAR;AAIAnF,IAAAA,MAAM,CAACoF,IAAP,CAAY;AACRC,MAAAA,QAAQ,EAAE,aADF;AAERC,MAAAA,KAAK,EAAE;AAACd,QAAAA,EAAE,EAACW;AAAJ;AAFC,KAAZ;AAKE7D,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBC,SAAnB;AACL,GAXC,CArKqB,CAmLjB;;;AAEA,oBAA6BnC,QAAQ,EAArC;AAAA,MAAOkG,QAAP;AAAA,MAAgBC,WAAhB,kBArLiB,CAsLnB;;;AACA,MAAMC,aAAa,GAAC,SAAdA,aAAc,GAAI;AACpBD,IAAAA,WAAW,CAAC,IAAD,CAAX;AACH,GAFD;;AAIA,MAAME,gBAAgB,GAAC,SAAjBA,gBAAiB,GAAI;AACvBF,IAAAA,WAAW,CAAC,KAAD,CAAX;AACH,GAFD;;AAKAlG,EAAAA,SAAS,CAAC,YAAI;AAIV,QAAGiG,QAAQ,KAAG,IAAd,EAAmB;AACfrE,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAAChB,gBADA;AAELkB,QAAAA,IAAI,EAAC;AACDsE,UAAAA,KAAK,EAAC,GADL;AAEDxC,UAAAA,KAAK,EAAC;AACF1C,YAAAA,GAAG,EAACwB,KADF;AAEFvB,YAAAA,GAAG,EAACyB;AAFF,WAFL;AAMCiB,UAAAA,KAAK,EAAC;AACJ3C,YAAAA,GAAG,EAAC4B,KADA;AAEJ3B,YAAAA,GAAG,EAAC6B;AAFA;AANP;AAFA,OAAD,CAAR;AAeH,KAhBD,MAgBM,IAAGgD,QAAQ,KAAG,KAAd,EAAoB;AACtBrE,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAACf,mBADA;AAELiB,QAAAA,IAAI,EAAC;AACDsE,UAAAA,KAAK,EAAC,GADL;AAEDxC,UAAAA,KAAK,EAAC;AACF1C,YAAAA,GAAG,EAACwB,KADF;AAEFvB,YAAAA,GAAG,EAACyB;AAFF,WAFL;AAMCiB,UAAAA,KAAK,EAAC;AACJ3C,YAAAA,GAAG,EAAC4B,KADA;AAEJ3B,YAAAA,GAAG,EAAC6B;AAFA;AANP;AAFA,OAAD,CAAR;AAeH;AACJ,GArCQ,EAqCP,CAACgD,QAAD,CArCO,CAAT;AA6CF,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEJ,MAAC,KAAD,CAAO,MAAP;AAAc,IAAA,EAAE,EAAC,SAAjB;AAA4B,IAAA,KAAK,EAAE;AAACK,MAAAA,aAAa,EAAC,QAAf;AAAyBC,MAAAA,UAAU,EAAC,MAApC;AAA2ClE,MAAAA,KAAK,EAAC;AAAjD,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFI,EAE4F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAF5F,EAGI,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAEd,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHJ,EAMJ,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAE4E,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BANI,EAOI,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAEC,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAPJ,EASJ,MAAC,UAAD;AACQ,IAAA,gBAAgB,EAAC,yCADzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIU,MAAC,SAAD;AACE,IAAA,EAAE,EAAC,gBADL;AAEE,IAAA,iBAAiB,EAAEjE,iBAFrB;AAGE,IAAA,IAAI,EAAE,EAHR;AAIE,IAAA,MAAM,EAAEd,IAJV;AAKE,IAAA,MAAM,EAAEqB,YALV;AAME,IAAA,SAAS,EAAES,mBANb,CAOE;AAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUV,MAAC,eAAD;AAAiB,IAAA,OAAO,EAAEY,QAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACW,UAACyC,SAAD;AAAA,WACCtE,SAAS,CAACK,GAAV,CAAc,UAACkE,CAAD;AAAA,aACZ,MAAC,MAAD;AAAS,QAAA,GAAG,EAAExC,SAAS,CAACwC,CAAD,CAAvB;AAA4B,QAAA,QAAQ,EAAE;AAACtF,UAAAA,GAAG,EAACsF,CAAC,CAACC,YAAF,CAAe,CAAf,CAAL;AAAuBtF,UAAAA,GAAG,EAACqF,CAAC,CAACC,YAAF,CAAe,CAAf;AAA3B,SAAtC;AAAqF,QAAA,SAAS,EAAEF,SAAhG;AAA4G,QAAA,IAAI,EAAE;AAClHG,UAAAA,UAAU,EAAE,IAAIC,MAAM,CAACC,IAAP,CAAYC,IAAhB,CAAqB,EAArB,EAAwB,EAAxB;AADsG,SAAlH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADY;AAAA,KAAd,CADD;AAAA,GADX,CAVU,EAoBD5E,SAAS,CAACK,GAAV,CAAc,UAACwE,CAAD,EAAG1B,KAAH;AAAA,WACX,MAAC,QAAD;AAAW,MAAA,YAAY,EAAE;AAAA,eAAIR,aAAa,CAACkC,CAAD,CAAjB;AAAA,OAAzB;AAA+C,MAAA,WAAW,EAAE;AAAA,eAAI3B,SAAS,CAACC,KAAD,CAAb;AAAA,OAA5D;AAAkF,MAAA,UAAU,EAAE;AAAA,eAAIC,QAAQ,CAACD,KAAD,CAAZ;AAAA,OAA9F;AAAoH,MAAA,OAAO,EAAE;AAACX,QAAAA,YAAY,EAACA,YAAY,CAACW,KAAD,CAA1B;AAAkC2B,QAAAA,SAAS,EAAC,IAA5C;AAAiDC,QAAAA,OAAO,EAAC,IAAzD;AAA8DC,QAAAA,WAAW,EAAE,SAA3E;AAAqFC,QAAAA,SAAS,EAAE;AAAhG,OAA7H;AAA0O,MAAA,IAAI,EAAEJ,CAAC,CAAChC,GAAF,CAAMC,WAAN,CAAkBzC,GAAlB,CAAsB,UAACkE,CAAD;AAAA,eAClQ;AACItF,UAAAA,GAAG,EAACsF,CAAC,CAAC,CAAD,CADT;AAEIrF,UAAAA,GAAG,EAACqF,CAAC,CAAC,CAAD;AAFT,SADkQ;AAAA,OAAtB,CAAhP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADW;AAAA,GAAd,CApBC,EA8BLpC,MAAM,IAAE,MAAC,UAAD;AAAY,IAAA,QAAQ,EAAEF,YAAtB;AAAoC,IAAA,YAAY,EAAEoB,UAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACL;AAAK,IAAA,KAAK,EAAEC,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAMI;AAAQ,IAAA,OAAO,EAAEI,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCANJ,CADK,CA9BH,CAJV,CATI,CADF;AAiED;;GA9SQ1E,S;UA4BUjB,W,EAUGC,W;;;AA0QtB,eAAegB,SAAf","sourcesContent":["import React, {useState,useEffect} from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { Polyline ,Marker,StreetViewPanorama,MarkerClusterer} from '@react-google-maps/api';\nimport { InfoWindow } from '@react-google-maps/api';\nimport Router from 'next/router'\nimport {LOAD_MAP_REQUEST} from '../../reducers/map'\nimport { MOVING_MAP_REQUEST,BIKE_MAP_REQUEST,RUNNING_MAP_REQUEST } from '../../reducers/map';\nimport {Input,Button} from 'antd'\nimport GeomHandle from '../GoogleMap'\n\nfunction selectMap({}) {\n\n    ///주소검색\n\n    const [geom ,setGeom]=useState({lat:35.969997373905, lng: 128.45170755523503})\n\n\n    const handleButton = async() => {\n        const currentAddr = document.getElementById('address').value\n        if (currentAddr){\n          const {lat, lng} = await GeomHandle(currentAddr)\n          setGeom({lat:lat,lng:lng})\n\n          dispatch({\n            type:SEARCH_MAP_REQUEST,\n            data:'1'\n        })\n        console.log('aaa',searchMap)\n\n\n\n       \n        }\n      }\n\n\n    //주소검색\n\n    const dispatch=useDispatch()\n\n\n\nconst mapContainerStyle = {\n    height: \"400px\",\n    width: \"800px\"\n  };\n  \n\n    const {searchMap}=useSelector((state)=>state.map)\n\n    // const [geom ,setGeom]=useState({lat:35.969997373905, lng: 128.45170755523503})\n    const [mapref, setMapRef] = useState(null);\n\n\n    const handleOnLoad = map => {\n        setMapRef(map);\n        \n      };\n\n      const [nelat,setNelat]=useState()\n      const [nelng,setNelng]=useState()\n\n      const [swlat,setSwlat]=useState()\n      const [swlng,setSwlng]=useState()\n\n\n\n      const handleCenterChanged = () => {\n        if (mapref) {\n          var zoom=mapref.getZoom()\n          var nt=mapref.getBounds().getNorthEast().lat();\n          var ng=mapref.getBounds().getNorthEast().lng();\n\n          var st=mapref.getBounds().getSouthWest().lat();\n          var sg=mapref.getBounds().getSouthWest().lng();\n\n          setNelat(nt)\n          setNelng(ng)\n          setSwlat(st)\n          setSwlng(sg)\n\n        //   console.log('zoom',zoom);\n        //   console.log('north', ne)\n        //   console.log('south',sw,',',sw)\n        }\n\n        dispatch({ \n          type:MOVING_MAP_REQUEST,\n          data:{\n            north:{\n              lat:nelat,\n              lng:nelng\n            },\n            south:{\n              lat:swlat,\n              lng:swlng\n            },\n  \n          }\n        })\n      \n      }\n\n      //////markercluseter\n\n\nconst optionss = {\n    imagePath:\n      'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m', // so you must have m1.png, m2.png, m3.png, m4.png, m5.png and m6.png in that folder\n  }\n\n\nfunction createKey(location) {\n    return location.lat + location.lng\n  }\n\n      //////markercluseter\n\n      //polyline\n\n      const [infoPosition,setInfoPosition]=useState({\n        lat:'',\n        lng:'',\n    })\n    \n      const [target,setTarget]=useState(false)\n\n\n      const [strokeWeight,setStrokeWeight]=useState(Array.from({length: searchMap.length}, () => 5))\n      const strokeWeights= Array.from({length: searchMap.length}, () => 5);\n\n\n      const polylineClick=(positionData)=>{\n     \n    \n        setInfoPosition({\n            lat:positionData.gps.coordinates[3][1],\n            lng:positionData.gps.coordinates[3][0]\n        })\n        setPropsId(positionData.id)\n        setPropsPosition(positionData)\n        setTarget(true)\n        \n    }\n    \n\nfunction mouseOver(index){\n    console.log('ssss',strokeWeight)\n    strokeWeights[index]=10\n    setStrokeWeight(strokeWeights)\n    console.log('over')\n}\n\nfunction mouseOut(index){\n    strokeWeights[index]=5\n    setStrokeWeight(strokeWeights)\n    console.log('aaa')\n\n}\n\n      //polyline\n\n      //infoWindow\n      const closeClick=()=>{\n        setTarget(false)\n    }\n\n\nconst divStyle = {\n    background: `white`,\n    border: `1px solid #ccc`,\n    padding: 15\n  }\n\n\n  const oneRoute=()=>{\n    dispatch({\n               type:LOAD_MAP_REQUEST,\n               data:propsId\n             })\n    Router.push({\n        pathname: '/Route/[id]',\n        query: {id:propsId},\n      });\n\n      console.log('dong',searchMap)\n}\n\n\n      //infoWindow\n\n      const [mapState,setMapState]=useState()\n    // const {mapState}=useSelector((state)=>state.map)\n    const bikeSelectMap=()=>{\n        setMapState(true)\n    }\n\n    const runningSelectMap=()=>{\n        setMapState(false)\n    }\n   \n\n    useEffect(()=>{\n\n\n\n        if(mapState===true){\n            dispatch({\n                type:BIKE_MAP_REQUEST,\n                data:{\n                    event:'B',\n                    north:{\n                        lat:nelat,\n                        lng:nelng\n                      },\n                      south:{\n                        lat:swlat,\n                        lng:swlng\n                      },\n            \n                }\n            })\n        }else if(mapState===false){\n            dispatch({\n                type:RUNNING_MAP_REQUEST,\n                data:{\n                    event:'R',\n                    north:{\n                        lat:nelat,\n                        lng:nelng\n                      },\n                      south:{\n                        lat:swlat,\n                        lng:swlng\n                      },\n                }\n            })\n\n        }\n    },[mapState])\n\n\n\n  \n    \n\n\n  return (\n    <div>\n\n<Input.Search id=\"address\"  style={{verticalAlign:'middle' ,marginLeft:'10px',width:'500px'}} /><br></br>\n        <Button onClick={handleButton}>클릭</Button>\n        \n\n<Button onClick={bikeSelectMap}>자전거s</Button>\n        <Button onClick={runningSelectMap}>달리기s</Button> \n\n<LoadScript\n        googleMapsApiKey=\"AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE\"\n        >\n            \n          <GoogleMap\n            id=\"marker-example\"\n            mapContainerStyle={mapContainerStyle}\n            zoom={13}\n            center={geom}\n            onLoad={handleOnLoad}\n            onDragEnd={handleCenterChanged}\n            // onZoomChanged={handleCenterChanged}\n          >\n\n<MarkerClusterer options={optionss}>\n          {(clusterer) =>\n            searchMap.map((p) => (\n              <Marker  key={createKey(p)} position={{lat:p.start_latlng[1],lng:p.start_latlng[0]}} clusterer={clusterer}  icon={{\n              scaledSize: new google.maps.Size(30,30),} } />\n            ))\n          }\n        </MarkerClusterer>\n      \n\n        {searchMap.map((m,index)=>(\n            <Polyline  onRightClick={()=>polylineClick(m)} onMouseOver={()=>mouseOver(index)} onMouseOut={()=>mouseOut(index)}  options={{strokeWeight:strokeWeight[index],clickable:true,visible:true,strokeColor: '#FF0000',fillColor: '#FF0000',}} path={m.gps.coordinates.map((p)=>(\n                {\n                    lat:p[1],\n                    lng:p[0]\n                }\n            ))}></Polyline>\n            \n            ))}\n            \n    {target&&<InfoWindow position={infoPosition} onCloseClick={closeClick}>\n        <div style={divStyle}>\n            <h1>동영</h1>\n                {/* <Link href={{\n                    pathname:'/Route/[id]',\n                    query: {id:propsId},\n                }}><a>상세보기</a></Link> */}\n            <button onClick={oneRoute}>상세보기</button>\n        </div>\n        </InfoWindow>} \n         \n\n        \n       \n            \n          </GoogleMap>\n          </LoadScript>\n             \n\n    </div>\n  )\n}\n\nexport default selectMap"]},"metadata":{},"sourceType":"module"}