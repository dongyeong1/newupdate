{"ast":null,"code":"import { all, call, fork, put, takeLatest, take } from 'redux-saga/effects';\nimport { SEARCH_MAP_REQUEST, SEARCH_MAP_SUCCESS, SEARCH_MAP_FAILURE, LOAD_MAP_REQUEST, LOAD_MAP_SUCCESS, LOAD_MAP_FAILURE, MOVING_MAP_SUCCESS, MOVING_MAP_REQUEST, MOVING_MAP_FAILURE, RUNNING_MAP_FAILURE, RUNNING_MAP_SUCCESS, RUNNING_MAP_REQUEST, BIKE_MAP_REQUEST, BIKE_MAP_SUCCESS, BIKE_MAP_FAILURE } from '../reducers/map';\n\nfunction searchMapAPI(data) {// return axios.post('/searchmap',data)\n}\n\nfunction* searchMap(action) {\n  try {\n    // const result = yield call(loadPostsAPI,action.data)\n    yield put({\n      type: SEARCH_MAP_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: SEARCH_MAP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadMapAPI(data) {// return axios.post('/searchmap',data)\n}\n\nfunction* loadMap(action) {\n  try {\n    // const result = yield call(loadPostsAPI,action.data)\n    yield put({\n      type: LOAD_MAP_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_MAP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction movingMapAPI(data) {// return axios.post('/searchmap',data)\n}\n\nfunction* movingMap(action) {\n  try {\n    // const result = yield call(loadPostsAPI,action.data)\n    yield put({\n      type: MOVING_MAP_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: MOVING_MAP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction runningMapAPI(data) {// return axios.post('/searchmap',data)\n}\n\nfunction* runningMap(action) {\n  try {\n    // const result = yield call(loadPostsAPI,action.data)\n    yield put({\n      type: RUNNING_MAP_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: RUNNING_MAP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction bikeMapAPI(data) {// return axios.post('/searchmap',data)\n}\n\nfunction* bikeMap(action) {\n  try {\n    // const result = yield call(loadPostsAPI,action.data)\n    yield put({\n      type: BIKE_MAP_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: BIKE_MAP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchSearchMap() {\n  yield takeLatest(SEARCH_MAP_REQUEST, searchMap);\n}\n\nfunction* wahchLoadMap() {\n  yield takeLatest(LOAD_MAP_REQUEST, loadMap);\n}\n\nfunction* watchMovingMap() {\n  yield takeLatest(MOVING_MAP_REQUEST, movingMap);\n}\n\nfunction* watchBikeMap() {\n  yield takeLatest(BIKE_MAP_REQUEST, bikeMap);\n}\n\nfunction* watchRunningMap() {\n  yield takeLatest(RUNNING_MAP_REQUEST, runningMap);\n}\n\nexport default function* rootSaga() {\n  yield all([fork(watchSearchMap), fork(wahchLoadMap), fork(watchMovingMap), fork(watchBikeMap), fork(watchRunningMap)]);\n}","map":{"version":3,"sources":["/Users/dong/CapstonProject/sagas/map.js"],"names":["all","call","fork","put","takeLatest","take","SEARCH_MAP_REQUEST","SEARCH_MAP_SUCCESS","SEARCH_MAP_FAILURE","LOAD_MAP_REQUEST","LOAD_MAP_SUCCESS","LOAD_MAP_FAILURE","MOVING_MAP_SUCCESS","MOVING_MAP_REQUEST","MOVING_MAP_FAILURE","RUNNING_MAP_FAILURE","RUNNING_MAP_SUCCESS","RUNNING_MAP_REQUEST","BIKE_MAP_REQUEST","BIKE_MAP_SUCCESS","BIKE_MAP_FAILURE","searchMapAPI","data","searchMap","action","type","err","error","response","loadMapAPI","loadMap","movingMapAPI","movingMap","runningMapAPI","runningMap","bikeMapAPI","bikeMap","watchSearchMap","wahchLoadMap","watchMovingMap","watchBikeMap","watchRunningMap","rootSaga"],"mappings":"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","sourcesContent":["import { all,call,fork,put,takeLatest, take} from 'redux-saga/effects'\n\nimport { SEARCH_MAP_REQUEST ,\nSEARCH_MAP_SUCCESS,\nSEARCH_MAP_FAILURE,\nLOAD_MAP_REQUEST,\nLOAD_MAP_SUCCESS,\nLOAD_MAP_FAILURE,\nMOVING_MAP_SUCCESS,\nMOVING_MAP_REQUEST,\nMOVING_MAP_FAILURE,\nRUNNING_MAP_FAILURE,\nRUNNING_MAP_SUCCESS,\nRUNNING_MAP_REQUEST,\nBIKE_MAP_REQUEST,\nBIKE_MAP_SUCCESS,\nBIKE_MAP_FAILURE\n} from '../reducers/map'\n\n\n\nfunction searchMapAPI(data){\n    // return axios.post('/searchmap',data)\n    }\n    \n\nfunction* searchMap(action){\n    try{\n        // const result = yield call(loadPostsAPI,action.data)\n        yield put({\n            type:SEARCH_MAP_SUCCESS,\n            data:action.data\n        })\n\n    }catch(err){\n        yield put({\n            type:SEARCH_MAP_FAILURE,\n            error:err.response.data,\n             \n        })\n\n    }\n}\n\n\nfunction loadMapAPI(data){\n    // return axios.post('/searchmap',data)\n    }\n    \n\nfunction* loadMap(action){\n    try{\n        // const result = yield call(loadPostsAPI,action.data)\n        yield put({\n            type:LOAD_MAP_SUCCESS,\n            data:action.data\n        })\n\n    }catch(err){\n        yield put({\n            type:LOAD_MAP_FAILURE,\n            error:err.response.data,\n             \n        })\n\n    }\n}\n\nfunction movingMapAPI(data){\n    // return axios.post('/searchmap',data)\n    }\n    \n\nfunction* movingMap(action){\n    try{\n        // const result = yield call(loadPostsAPI,action.data)\n        yield put({\n            type:MOVING_MAP_SUCCESS,\n            data:action.data\n        })\n\n    }catch(err){\n        yield put({\n            type:MOVING_MAP_FAILURE,\n            error:err.response.data,\n        })\n\n    }\n}\n\nfunction runningMapAPI(data){\n    // return axios.post('/searchmap',data)\n    }\n    \n\nfunction* runningMap(action){\n    try{\n        // const result = yield call(loadPostsAPI,action.data)\n        yield put({\n            type:RUNNING_MAP_SUCCESS,\n            data:action.data\n        })\n\n    }catch(err){\n        yield put({\n            type:RUNNING_MAP_FAILURE,\n            error:err.response.data,\n        })\n\n    }\n}\n\n\nfunction bikeMapAPI(data){\n    // return axios.post('/searchmap',data)\n    }\n    \n\nfunction* bikeMap(action){\n    try{\n        // const result = yield call(loadPostsAPI,action.data)\n        yield put({\n            type:BIKE_MAP_SUCCESS,\n            data:action.data\n        })\n\n    }catch(err){\n        yield put({\n            type:BIKE_MAP_FAILURE,\n            error:err.response.data,\n        })\n\n    }\n}\n\n\n\nfunction* watchSearchMap(){\n    yield takeLatest(SEARCH_MAP_REQUEST,searchMap)\n}\n\nfunction* wahchLoadMap(){\n    yield takeLatest(LOAD_MAP_REQUEST,loadMap)\n}\n\nfunction* watchMovingMap(){\n    yield takeLatest(MOVING_MAP_REQUEST,movingMap)\n}\n\nfunction* watchBikeMap(){\n    yield takeLatest(BIKE_MAP_REQUEST,bikeMap)\n}\n\nfunction* watchRunningMap(){\n    yield takeLatest(RUNNING_MAP_REQUEST,runningMap)\n}\n\n\n\n\nexport default function* rootSaga(){\n\n    yield all([\n        fork(watchSearchMap),\n        fork(wahchLoadMap),\n        fork(watchMovingMap),\n        fork(watchBikeMap),\n        fork(watchRunningMap)\n\n      \n    ])\n\n}\n"]},"metadata":{},"sourceType":"module"}