{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/dong/CapstonProject/pages/polylineTest.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { Polyline, Marker, StreetViewPanorama, MarkerClusterer } from '@react-google-maps/api';\nimport AppLayout from '../component/AppLayout'; // import Streetview from 'react-google-streetview';// import RecordElevation from '../component/RecordElavation'\n\nimport { SEARCH_MAP_REQUEST } from '../reducers/map';\nimport { LOAD_MAP_REQUEST } from '../reducers/map';\nimport GeomHandle from '../component/GoogleMap';\nimport { Input, Col, Row, Button } from 'antd';\nimport SideBar from '../component/Layout/SideBar';\nimport { InfoWindow } from '@react-google-maps/api';\nimport Router from 'next/router'; // import {useHistory} from \n\nimport Link from 'next/link';\nimport SelectMap from '../component/map/selectMap'; // import InfoWindow from '../component/InfoWindow';\n\nfunction polylineTest() {\n  _s();\n\n  var _useSelector = useSelector(function (state) {\n    return state.map;\n  }),\n      searchMap = _useSelector.searchMap;\n\n  var dispatch = useDispatch();\n\n  var _useState = useState(),\n      propsPosition = _useState[0],\n      setPropsPosition = _useState[1];\n\n  var handleButton = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var currentAddr, _yield$GeomHandle, lat, lng;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              currentAddr = document.getElementById('address').value;\n\n              if (!currentAddr) {\n                _context.next = 10;\n                break;\n              }\n\n              _context.next = 4;\n              return GeomHandle(currentAddr);\n\n            case 4:\n              _yield$GeomHandle = _context.sent;\n              lat = _yield$GeomHandle.lat;\n              lng = _yield$GeomHandle.lng;\n              setGeom({\n                lat: lat,\n                lng: lng\n              });\n              dispatch({\n                type: SEARCH_MAP_REQUEST,\n                data: '1'\n              });\n              console.log('aaa', searchMap);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleButton() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var _useState2 = useState(true),\n      mapState = _useState2[0],\n      setMapState = _useState2[1];\n\n  var selectMap = function selectMap() {\n    setMapstate(!mapState); // if(mapState){\n    //     dispatch({\n    //         type:\n    //     })\n    // }\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, __jsx(Col, {\n    span: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, __jsx(SideBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  })), __jsx(Col, {\n    span: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }\n  }, \"\\uAC80\\uC0C9\\uD558\\uAE30\", __jsx(Input.Search, {\n    id: \"address\",\n    style: {\n      verticalAlign: 'middle',\n      marginLeft: '10px',\n      width: '500px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 8\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 104\n    }\n  }), __jsx(Button, {\n    onClick: handleButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, \"\\uD074\\uB9AD\"), __jsx(Button, {\n    onclick: selectMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, \"\\uC790\\uC804\\uAC70\"), __jsx(Button, {\n    onclick: selectMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, \"\\uB2EC\\uB9AC\\uAE30\"), __jsx(SelectMap, {\n    mapState: mapState,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 8\n    }\n  }))));\n}\n\n_s(polylineTest, \"agGLis3cvWi7F9luBjHFGC02xKA=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\nexport default /*#__PURE__*/React.memo(polylineTest);","map":{"version":3,"sources":["/Users/dong/CapstonProject/pages/polylineTest.js"],"names":["React","useState","useEffect","useDispatch","useSelector","GoogleMap","LoadScript","Polyline","Marker","StreetViewPanorama","MarkerClusterer","AppLayout","SEARCH_MAP_REQUEST","LOAD_MAP_REQUEST","GeomHandle","Input","Col","Row","Button","SideBar","InfoWindow","Router","Link","SelectMap","polylineTest","state","map","searchMap","dispatch","propsPosition","setPropsPosition","handleButton","currentAddr","document","getElementById","value","lat","lng","setGeom","type","data","console","log","mapState","setMapState","selectMap","setMapstate","verticalAlign","marginLeft","width","memo"],"mappings":"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","sourcesContent":["import React, {useState,useEffect} from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { Polyline ,Marker,StreetViewPanorama,MarkerClusterer} from '@react-google-maps/api';\nimport AppLayout from '../component/AppLayout';\n// import Streetview from 'react-google-streetview';// import RecordElevation from '../component/RecordElavation'\nimport { SEARCH_MAP_REQUEST } from '../reducers/map';\nimport {LOAD_MAP_REQUEST} from '../reducers/map'\nimport GeomHandle from '../component/GoogleMap'\nimport { Input,Col,Row,Button } from 'antd';\nimport SideBar from '../component/Layout/SideBar';\nimport { InfoWindow } from '@react-google-maps/api';\nimport Router from 'next/router'\n// import {useHistory} from \nimport Link from 'next/link'\nimport SelectMap from '../component/map/selectMap'\n// import InfoWindow from '../component/InfoWindow';\n\n\n\n\n\n\n\n\n\n\n\n   \n    \n\n\n\n\nfunction polylineTest() {\n\n\n    const {searchMap}=useSelector((state)=>state.map)\n\n    const dispatch=useDispatch()\n\n    const [propsPosition,setPropsPosition]=useState()\n\n\n\n\n\n    \n    \n      \n \n\n  \n\n\n    \n  \n\n    const handleButton = async() => {\n        const currentAddr = document.getElementById('address').value\n        if (currentAddr){\n          const {lat, lng} = await GeomHandle(currentAddr)\n          setGeom({lat:lat,lng:lng})\n\n          dispatch({\n            type:SEARCH_MAP_REQUEST,\n            data:'1'\n        })\n        console.log('aaa',searchMap)\n\n\n\n       \n        }\n      }\n\n      const [mapState,setMapState]=useState(true)\n\n      const selectMap=()=>{\n        setMapstate(!mapState)\n\n        // if(mapState){\n        //     dispatch({\n        //         type:\n        //     })\n        // }\n      }\n\n      \n  \n    return (\n        <div>\n            <Row>\n            <Col span={4}>\n                <SideBar ></SideBar>\n\n                </Col>\n                <Col span={12}>\n                검색하기\n       \n       \n       <Input.Search id=\"address\"  style={{verticalAlign:'middle' ,marginLeft:'10px',width:'500px'}} /><br></br>\n        <Button onClick={handleButton}>클릭</Button>\n        <Button onclick={selectMap}>자전거</Button>\n        <Button onclick={selectMap}>달리기</Button> \n              \n\n       <SelectMap mapState={mapState}></SelectMap>\n\n                </Col>\n\n\n            </Row>\n           \n       \n         </div>\n\n    )}\n  \n  \n  export default React.memo(polylineTest)"]},"metadata":{},"sourceType":"module"}