{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Geocode from 'react-geocode';\nvar API_KEY = 'AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE';\nGeocode.setApiKey(API_KEY);\nGeocode.setLanguage('ko');\nGeocode.setRegion('kr');\nGeocode.enableDebug();\n\nvar GoogleMap = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(currentAddr) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", Geocode.fromAddress(currentAddr).then(function (response) {\n              var _response$results$0$g = response.results[0].geometry.location,\n                  lat = _response$results$0$g.lat,\n                  lng = _response$results$0$g.lng;\n              console.log(lat, lng);\n              return {\n                lat: lat,\n                lng: lng\n              };\n            })[\"catch\"](function (err) {\n              return console.log(err);\n            }));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function GoogleMap(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n_c = GoogleMap;\nexport default GoogleMap;\n\nvar _c;\n\n$RefreshReg$(_c, \"GoogleMap\");","map":{"version":3,"sources":["/Users/dong/CapstonProject/component/GoogleMap.js"],"names":["Geocode","API_KEY","setApiKey","setLanguage","setRegion","enableDebug","GoogleMap","currentAddr","fromAddress","then","response","results","geometry","location","lat","lng","console","log","err"],"mappings":";;AAAA,OAAOA,OAAP,MAAoB,eAApB;AACA,IAAMC,OAAO,GAAC,yCAAd;AAEAD,OAAO,CAACE,SAAR,CAAkBD,OAAlB;AACAD,OAAO,CAACG,WAAR,CAAoB,IAApB;AACAH,OAAO,CAACI,SAAR,CAAkB,IAAlB;AACAJ,OAAO,CAACK,WAAR;;AAEA,IAAMC,SAAS;AAAA,sEAAG,iBAAOC,WAAP;AAAA;AAAA;AAAA;AAAA;AAAA,6CACTP,OAAO,CAACQ,WAAR,CAAoBD,WAApB,EACJE,IADI,CACE,UAAAC,QAAQ,EAAI;AACjB,0CAAqBA,QAAQ,CAACC,OAAT,CAAiB,CAAjB,EAAoBC,QAApB,CAA6BC,QAAlD;AAAA,kBAAQC,GAAR,yBAAQA,GAAR;AAAA,kBAAaC,GAAb,yBAAaA,GAAb;AACAC,cAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ,EAAgBC,GAAhB;AACA,qBAAO;AAACD,gBAAAA,GAAG,EAAHA,GAAD;AAAMC,gBAAAA,GAAG,EAAHA;AAAN,eAAP;AACD,aALI,WAME,UAAAG,GAAG;AAAA,qBAAIF,OAAO,CAACC,GAAR,CAAYC,GAAZ,CAAJ;AAAA,aANL,CADS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATZ,SAAS;AAAA;AAAA;AAAA,GAAf;;KAAMA,S;AAUN,eAAeA,SAAf","sourcesContent":["import Geocode from 'react-geocode'\nconst API_KEY='AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE'\n\nGeocode.setApiKey(API_KEY)\nGeocode.setLanguage('ko')\nGeocode.setRegion('kr')\nGeocode.enableDebug()\n\nconst GoogleMap = async (currentAddr) => {\n  return Geocode.fromAddress(currentAddr)\n    .then( response => {\n      const { lat, lng } = response.results[0].geometry.location;\n      console.log(lat,lng)\n      return {lat, lng}\n    })\n    .catch(err => console.log(err))\n}\n\nexport default GoogleMap "]},"metadata":{},"sourceType":"module"}