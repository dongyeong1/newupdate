{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/dong/CapstonProject/component/geocode.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Autocomplete from \"react-google-autocomplete\";\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE\");\nGeocode.enableDebug();\n\nvar Map = /*#__PURE__*/function (_Component) {\n  _inherits(Map, _Component);\n\n  var _super = _createSuper(Map);\n\n  function Map(props) {\n    var _this;\n\n    _classCallCheck(this, Map);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"getCity\", function (addressArray) {\n      var city = \"\";\n\n      for (var i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && \"administrative_area_level_2\" === addressArray[i].types[0]) {\n          city = addressArray[i].long_name;\n          return city;\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getArea\", function (addressArray) {\n      var area = \"\";\n\n      for (var i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0]) {\n          for (var j = 0; j < addressArray[i].types.length; j++) {\n            if (\"sublocality_level_1\" === addressArray[i].types[j] || \"locality\" === addressArray[i].types[j]) {\n              area = addressArray[i].long_name;\n              return area;\n            }\n          }\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getState\", function (addressArray) {\n      var state = \"\";\n\n      for (var i = 0; i < addressArray.length; i++) {\n        for (var _i = 0; _i < addressArray.length; _i++) {\n          if (addressArray[_i].types[0] && \"administrative_area_level_1\" === addressArray[_i].types[0]) {\n            state = addressArray[_i].long_name;\n            return state;\n          }\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (event) {\n      _this.setState(_defineProperty({}, event.target.name, event.target.value));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onInfoWindowClose\", function (event) {});\n\n    _defineProperty(_assertThisInitialized(_this), \"onPlaceSelected\", function (place) {\n      var address = place.formatted_address,\n          addressArray = place.address_components,\n          city = _this.getCity(addressArray),\n          area = _this.getArea(addressArray),\n          state = _this.getState(addressArray),\n          latValue = place.geometry.location.lat(),\n          lngValue = place.geometry.location.lng(); // Set these values in the state.\n\n\n      _this.setState({\n        address: address ? address : \"\",\n        area: area ? area : \"\",\n        city: city ? city : \"\",\n        state: state ? state : \"\",\n        markerPosition: {\n          lat: latValue,\n          lng: lngValue\n        },\n        mapPosition: {\n          lat: latValue,\n          lng: lngValue\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onMarkerDragEnd\", function (event) {\n      console.log(\"event\", event);\n      var newLat = event.latLng.lat(),\n          newLng = event.latLng.lng(),\n          addressArray = [];\n      Geocode.fromLatLng(newLat, newLng).then(function (response) {\n        var address = response.results[0].formatted_address,\n            addressArray = response.results[0].address_components,\n            city = _this.getCity(addressArray),\n            area = _this.getArea(addressArray),\n            state = _this.getState(addressArray);\n\n        _this.setState({\n          address: address ? address : \"\",\n          area: area ? area : \"\",\n          city: city ? city : \"\",\n          state: state ? state : \"\"\n        });\n      }, function (error) {\n        console.error(error);\n      });\n    });\n\n    _this.state = {\n      address: \"\",\n      city: \"\",\n      area: \"\",\n      state: \"\",\n      mapPosition: {\n        lat: _this.props.center.lat,\n        lng: _this.props.center.lng\n      },\n      markerPosition: {\n        lat: _this.props.center.lat,\n        lng: _this.props.center.lng\n      }\n    };\n    return _this;\n  }\n  /**\n   * Get the current address from the default map position and set those values in the state\n   */\n\n\n  _createClass(Map, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng).then(function (response) {\n        var address = response.results[0].formatted_address,\n            addressArray = response.results[0].address_components,\n            city = _this2.getCity(addressArray),\n            area = _this2.getArea(addressArray),\n            state = _this2.getState(addressArray);\n\n        console.log(\"city\", city, area, state);\n\n        _this2.setState({\n          address: address ? address : \"\",\n          area: area ? area : \"\",\n          city: city ? city : \"\",\n          state: state ? state : \"\"\n        });\n      }, function (error) {\n        console.error(error);\n      });\n    }\n    /**\n     * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n     *\n     * @param nextProps\n     * @param nextState\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      if (this.state.markerPosition.lat !== this.props.center.lat || this.state.address !== nextState.address || this.state.city !== nextState.city || this.state.area !== nextState.area || this.state.state !== nextState.state) {\n        return true;\n      } else if (this.props.center.lat === nextProps.center.lat) {\n        return false;\n      }\n    }\n    /**\n     * Get the city and set the city input value to the one selected\n     *\n     * @param addressArray\n     * @return {string}\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var AsyncMap = withScriptjs(withGoogleMap(function (props) {\n        return __jsx(GoogleMap, {\n          google: _this3.props.google,\n          defaultZoom: _this3.props.zoom,\n          defaultCenter: {\n            lat: _this3.state.mapPosition.lat,\n            lng: _this3.state.mapPosition.lng\n          },\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 9\n          }\n        }, __jsx(Autocomplete, {\n          style: {\n            width: \"100%\",\n            height: \"40px\",\n            paddingLeft: \"16px\",\n            marginTop: \"2px\",\n            marginBottom: \"100px\"\n          },\n          onPlaceSelected: _this3.onPlaceSelected,\n          types: [\"(regions)\"],\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 11\n          }\n        }), __jsx(Marker, {\n          google: _this3.props.google,\n          name: \"Dolores park\",\n          draggable: true,\n          onDragEnd: _this3.onMarkerDragEnd,\n          position: {\n            lat: _this3.state.markerPosition.lat,\n            lng: _this3.state.markerPosition.lng\n          },\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 11\n          }\n        }), __jsx(Marker, {\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 11\n          }\n        }), __jsx(InfoWindow, {\n          onClose: _this3.onInfoWindowClose,\n          position: {\n            lat: _this3.state.markerPosition.lat + 0.0018,\n            lng: _this3.state.markerPosition.lng\n          },\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 11\n          }\n        }, __jsx(\"div\", {\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 13\n          }\n        }, __jsx(\"span\", {\n          style: {\n            padding: 0,\n            margin: 0\n          },\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 15\n          }\n        }, _this3.state.address))));\n      }));\n      var map;\n\n      if (this.props.center.lat !== undefined) {\n        map = __jsx(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 9\n          }\n        }, __jsx(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 11\n          }\n        }, __jsx(\"div\", {\n          className: \"form-group\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 13\n          }\n        }, __jsx(\"label\", {\n          htmlFor: \"\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 15\n          }\n        }, \"City\"), __jsx(\"input\", {\n          type: \"text\",\n          name: \"city\",\n          className: \"form-control\",\n          onChange: this.onChange,\n          readOnly: \"readOnly\",\n          value: this.state.city,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 15\n          }\n        })), __jsx(\"div\", {\n          className: \"form-group\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 13\n          }\n        }, __jsx(\"label\", {\n          htmlFor: \"\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 15\n          }\n        }, \"Area\"), __jsx(\"input\", {\n          type: \"text\",\n          name: \"area\",\n          className: \"form-control\",\n          onChange: this.onChange,\n          readOnly: \"readOnly\",\n          value: this.state.area,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 15\n          }\n        })), __jsx(\"div\", {\n          className: \"form-group\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 13\n          }\n        }, __jsx(\"label\", {\n          htmlFor: \"\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 15\n          }\n        }, \"State\"), __jsx(\"input\", {\n          type: \"text\",\n          name: \"state\",\n          className: \"form-control\",\n          onChange: this.onChange,\n          readOnly: \"readOnly\",\n          value: this.state.state,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 15\n          }\n        })), __jsx(\"div\", {\n          className: \"form-group\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 13\n          }\n        }, __jsx(\"label\", {\n          htmlFor: \"\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 15\n          }\n        }, \"Address\"), __jsx(\"input\", {\n          type: \"text\",\n          name: \"address\",\n          className: \"form-control\",\n          onChange: this.onChange,\n          readOnly: \"readOnly\",\n          value: this.state.address,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 15\n          }\n        }))), __jsx(AsyncMap, {\n          googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE&libraries=places\",\n          loadingElement: __jsx(\"div\", {\n            style: {\n              height: \"100%\"\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 29\n            }\n          }),\n          containerElement: __jsx(\"div\", {\n            style: {\n              height: this.props.height\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 31\n            }\n          }),\n          mapElement: __jsx(\"div\", {\n            style: {\n              height: \"100%\"\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 25\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 11\n          }\n        }));\n      } else {\n        map = __jsx(\"div\", {\n          style: {\n            height: this.props.height\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 13\n          }\n        });\n      }\n\n      return map;\n    }\n  }]);\n\n  return Map;\n}(Component);\n\nexport default Map;","map":{"version":3,"sources":["/Users/dong/CapstonProject/component/geocode.js"],"names":["React","Component","withGoogleMap","GoogleMap","withScriptjs","InfoWindow","Marker","Autocomplete","Geocode","setApiKey","enableDebug","Map","props","addressArray","city","i","length","types","long_name","area","j","state","event","setState","target","name","value","place","address","formatted_address","address_components","getCity","getArea","getState","latValue","geometry","location","lat","lngValue","lng","markerPosition","mapPosition","console","log","newLat","latLng","newLng","fromLatLng","then","response","results","error","center","nextProps","nextState","AsyncMap","google","zoom","width","height","paddingLeft","marginTop","marginBottom","onPlaceSelected","onMarkerDragEnd","onInfoWindowClose","padding","margin","map","undefined","onChange"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  withGoogleMap,\n  GoogleMap,\n  withScriptjs,\n  InfoWindow,\n  Marker\n} from \"react-google-maps\";\nimport Autocomplete from \"react-google-autocomplete\";\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE\");\nGeocode.enableDebug();\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      address: \"\",\n      city: \"\",\n      area: \"\",\n      state: \"\",\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      }\n    };\n  }\n  /**\n   * Get the current address from the default map position and set those values in the state\n   */\n  componentDidMount() {\n    Geocode.fromLatLng(\n      this.state.mapPosition.lat,\n      this.state.mapPosition.lng\n    ).then(\n      response => {\n        const address = response.results[0].formatted_address,\n          addressArray = response.results[0].address_components,\n          city = this.getCity(addressArray),\n          area = this.getArea(addressArray),\n          state = this.getState(addressArray);\n\n        console.log(\"city\", city, area, state);\n\n        this.setState({\n          address: address ? address : \"\",\n          area: area ? area : \"\",\n          city: city ? city : \"\",\n          state: state ? state : \"\"\n        });\n      },\n      error => {\n        console.error(error);\n      }\n    );\n  }\n  /**\n   * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n   *\n   * @param nextProps\n   * @param nextState\n   * @return {boolean}\n   */\n  shouldComponentUpdate(nextProps, nextState) {\n    if (\n      this.state.markerPosition.lat !== this.props.center.lat ||\n      this.state.address !== nextState.address ||\n      this.state.city !== nextState.city ||\n      this.state.area !== nextState.area ||\n      this.state.state !== nextState.state\n    ) {\n      return true;\n    } else if (this.props.center.lat === nextProps.center.lat) {\n      return false;\n    }\n  }\n  /**\n   * Get the city and set the city input value to the one selected\n   *\n   * @param addressArray\n   * @return {string}\n   */\n  getCity = addressArray => {\n    let city = \"\";\n    for (let i = 0; i < addressArray.length; i++) {\n      if (\n        addressArray[i].types[0] &&\n        \"administrative_area_level_2\" === addressArray[i].types[0]\n      ) {\n        city = addressArray[i].long_name;\n        return city;\n      }\n    }\n  };\n  /**\n   * Get the area and set the area input value to the one selected\n   *\n   * @param addressArray\n   * @return {string}\n   */\n  getArea = addressArray => {\n    let area = \"\";\n    for (let i = 0; i < addressArray.length; i++) {\n      if (addressArray[i].types[0]) {\n        for (let j = 0; j < addressArray[i].types.length; j++) {\n          if (\n            \"sublocality_level_1\" === addressArray[i].types[j] ||\n            \"locality\" === addressArray[i].types[j]\n          ) {\n            area = addressArray[i].long_name;\n            return area;\n          }\n        }\n      }\n    }\n  };\n  /**\n   * Get the address and set the address input value to the one selected\n   *\n   * @param addressArray\n   * @return {string}\n   */\n  getState = addressArray => {\n    let state = \"\";\n    for (let i = 0; i < addressArray.length; i++) {\n      for (let i = 0; i < addressArray.length; i++) {\n        if (\n          addressArray[i].types[0] &&\n          \"administrative_area_level_1\" === addressArray[i].types[0]\n        ) {\n          state = addressArray[i].long_name;\n          return state;\n        }\n      }\n    }\n  };\n  /**\n   * And function for city,state and address input\n   * @param event\n   */\n  onChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n  /**\n   * This Event triggers when the marker window is closed\n   *\n   * @param event\n   */\n  onInfoWindowClose = event => {};\n  /**\n   * When the user types an address in the search box\n   * @param place\n   */\n  onPlaceSelected = place => {\n    const address = place.formatted_address,\n      addressArray = place.address_components,\n      city = this.getCity(addressArray),\n      area = this.getArea(addressArray),\n      state = this.getState(addressArray),\n      latValue = place.geometry.location.lat(),\n      lngValue = place.geometry.location.lng();\n    // Set these values in the state.\n    this.setState({\n      address: address ? address : \"\",\n      area: area ? area : \"\",\n      city: city ? city : \"\",\n      state: state ? state : \"\",\n      markerPosition: {\n        lat: latValue,\n        lng: lngValue\n      },\n      mapPosition: {\n        lat: latValue,\n        lng: lngValue\n      }\n    });\n  };\n  /**\n   * When the marker is dragged you get the lat and long using the functions available from event object.\n   * Use geocode to get the address, city, area and state from the lat and lng positions.\n   * And then set those values in the state.\n   *\n   * @param event\n   */\n  onMarkerDragEnd = event => {\n    console.log(\"event\", event);\n    let newLat = event.latLng.lat(),\n      newLng = event.latLng.lng(),\n      addressArray = [];\n    Geocode.fromLatLng(newLat, newLng).then(\n      response => {\n        const address = response.results[0].formatted_address,\n          addressArray = response.results[0].address_components,\n          city = this.getCity(addressArray),\n          area = this.getArea(addressArray),\n          state = this.getState(addressArray);\n        this.setState({\n          address: address ? address : \"\",\n          area: area ? area : \"\",\n          city: city ? city : \"\",\n          state: state ? state : \"\"\n        });\n      },\n      error => {\n        console.error(error);\n      }\n    );\n  };\n  render() {\n    const AsyncMap = withScriptjs(\n      withGoogleMap(props => (\n        <GoogleMap\n          google={this.props.google}\n          defaultZoom={this.props.zoom}\n          defaultCenter={{\n            lat: this.state.mapPosition.lat,\n            lng: this.state.mapPosition.lng\n          }}\n        >\n          {/* For Auto complete Search Box */}\n          <Autocomplete\n            style={{\n              width: \"100%\",\n              height: \"40px\",\n              paddingLeft: \"16px\",\n              marginTop: \"2px\",\n              marginBottom: \"100px\"\n            }}\n            onPlaceSelected={this.onPlaceSelected}\n            types={[\"(regions)\"]}\n          />\n          {/*Marker*/}\n          <Marker\n            google={this.props.google}\n            name={\"Dolores park\"}\n            draggable={true}\n            onDragEnd={this.onMarkerDragEnd}\n            position={{\n              lat: this.state.markerPosition.lat,\n              lng: this.state.markerPosition.lng\n            }}\n          />\n          <Marker />\n          {/* InfoWindow on top of marker */}\n          <InfoWindow\n            onClose={this.onInfoWindowClose}\n            position={{\n              lat: this.state.markerPosition.lat + 0.0018,\n              lng: this.state.markerPosition.lng\n            }}\n          >\n            <div>\n              <span style={{ padding: 0, margin: 0 }}>\n                {this.state.address}\n              </span>\n            </div>\n          </InfoWindow>\n        </GoogleMap>\n      ))\n    );\n    let map;\n    if (this.props.center.lat !== undefined) {\n      map = (\n        <div>\n          <div>\n            <div className=\"form-group\">\n              <label htmlFor=\"\">City</label>\n              <input\n                type=\"text\"\n                name=\"city\"\n                className=\"form-control\"\n                onChange={this.onChange}\n                readOnly=\"readOnly\"\n                value={this.state.city}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"\">Area</label>\n              <input\n                type=\"text\"\n                name=\"area\"\n                className=\"form-control\"\n                onChange={this.onChange}\n                readOnly=\"readOnly\"\n                value={this.state.area}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"\">State</label>\n              <input\n                type=\"text\"\n                name=\"state\"\n                className=\"form-control\"\n                onChange={this.onChange}\n                readOnly=\"readOnly\"\n                value={this.state.state}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"\">Address</label>\n              <input\n                type=\"text\"\n                name=\"address\"\n                className=\"form-control\"\n                onChange={this.onChange}\n                readOnly=\"readOnly\"\n                value={this.state.address}\n              />\n            </div>\n          </div>\n          <AsyncMap\n            googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE&libraries=places\"\n            loadingElement={<div style={{ height: `100%` }} />}\n            containerElement={<div style={{ height: this.props.height }} />}\n            mapElement={<div style={{ height: `100%` }} />}\n          />\n        </div>\n      );\n    } else {\n      map = <div style={{ height: this.props.height }} />;\n    }\n    return map;\n  }\n}\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}