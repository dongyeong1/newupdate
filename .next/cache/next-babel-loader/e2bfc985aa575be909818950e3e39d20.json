{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/dong/CapstonProject/pages/polyline.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { Polyline, Marker, StreetViewPanorama, MarkerClusterer } from '@react-google-maps/api';\nimport AppLayout from '../component/AppLayout'; // import Streetview from 'react-google-streetview';// import RecordElevation from '../component/RecordElavation'\n\nimport { SEARCH_MAP_REQUEST } from '../reducers/map';\nimport GeomHandle from '../component/GoogleMap';\nimport { Input } from 'antd';\nimport { InfoWindow } from '@react-google-maps/api';\nimport Router from 'next/router'; // import InfoWindow from '../component/InfoWindow';\n\nvar iconPin = {\n  path: 'https://png.pngtree.com/png-clipart/20190921/original/pngtree-label-free-png-picture-png-image_4700172.jpg',\n  scale: 1\n};\nvar mapContainerStyle = {\n  height: \"400px\",\n  width: \"800px\"\n};\n\nvar call = function call() {\n  console.log('cccccc');\n};\n\nvar center = {\n  lat: 35.969997373905,\n  lng: 128.45170755523503\n};\n\nvar onLoad = function onLoad(polyline) {\n  console.log('polyline: ', polyline);\n};\n\nvar path = [[{\n  lat: 35.969997373905,\n  lng: 128.45170755523503\n}, {\n  lat: 35.985501427015464,\n  lng: 128.40407191943035\n}, {\n  lat: 35.89580489690752,\n  lng: 128.62238368221892\n}], [{\n  lat: 35.24651100148735,\n  lng: 128.87070362130143\n}, {\n  lat: 35.24752656439432,\n  lng: 128.8729993854958\n}, {\n  lat: 35.248984786322424,\n  lng: 128.87318007064073\n}, {\n  lat: 35.25018259185734,\n  lng: 128.87332887017186\n}, {\n  lat: 35.25065129355367,\n  lng: 128.87505069331763\n}, {\n  lat: 35.25145581526787,\n  lng: 128.87358573620605\n}]];\nvar markerPosition = [{\n  lat: 35.89580489690752,\n  lng: 128.62238368221892\n}, {\n  lat: 35.25145581526787,\n  lng: 128.87358573620605\n}];\n\nfunction createKey(location) {\n  return location.lat + location.lng;\n}\n\nvar optionss = {\n  imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m' // so you must have m1.png, m2.png, m3.png, m4.png, m5.png and m6.png in that folder\n\n};\n\nfunction polyline() {\n  _s();\n\n  var _this = this;\n\n  var _useSelector = useSelector(function (state) {\n    return state.map;\n  }),\n      searchMap = _useSelector.searchMap;\n\n  var dispatch = useDispatch();\n\n  var _useState = useState(),\n      propsPosition = _useState[0],\n      setPropsPosition = _useState[1]; //InfoWindow\n\n\n  var _useState2 = useState(false),\n      target = _useState2[0],\n      setTarget = _useState2[1];\n\n  var divStyle = {\n    background: \"white\",\n    border: \"1px solid #ccc\",\n    padding: 15\n  };\n\n  var _useState3 = useState(''),\n      infoPosition = _useState3[0],\n      setInfoPosition = _useState3[1];\n\n  var closeClick = function closeClick() {\n    setTarget(false);\n  };\n\n  var i = 1;\n\n  var oneRoute = function oneRoute() {\n    Router.push({\n      pathname: '/Route/[id]',\n      query: {\n        id: 1\n      }\n    });\n  }; //InfoWindow\n  //polyline\n\n\n  var _useState4 = useState(5),\n      strokeWeight = _useState4[0],\n      setStrokeWeight = _useState4[1];\n\n  var mouseOut = function mouseOut() {\n    setStrokeWeight(5);\n    console.log('aaa');\n  };\n\n  var mouseOver = function mouseOver() {\n    setStrokeWeight(10);\n    console.log('over');\n  };\n\n  var polylineClick = function polylineClick(positionData) {\n    console.log('click');\n    console.log('cc', searchMap);\n    setInfoPosition(positionData.gps.coordinates[3]);\n    setPropsPosition(positionData);\n    setTarget(true);\n    console.log('ppp', positionData);\n  };\n\n  var options = {\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.8,\n    strokeWeight: strokeWeight,\n    fillColor: '#FF0000',\n    fillOpacity: 0.35,\n    clickable: true,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: 30000,\n    //-27부터 호주 시작해서 점찍고 점찍고 한다\n    paths: [[{\n      lat: 35.969997373905,\n      lng: 128.45170755523503\n    }, {\n      lat: 35.985501427015464,\n      lng: 128.40407191943035\n    }, {\n      lat: 35.89580489690752,\n      lng: 128.62238368221892\n    }], [{\n      lat: 35.24731788471166,\n      lng: 128.86906207420088\n    }, {\n      lat: 35.260354548127424,\n      lng: 128.81198466603703\n    }]],\n    zIndex: 1\n  }; //polyline\n\n  var _useState5 = useState(),\n      elev = _useState5[0],\n      setElev = _useState5[1];\n\n  var _useState6 = useState(null),\n      mapref = _useState6[0],\n      setMapRef = _useState6[1];\n\n  var handleOnLoad = function handleOnLoad(map) {\n    setMapRef(map);\n    var elevator = new google.maps.ElevationService();\n    setElev(elevator);\n    console.log(elevator);\n    console.log('onLoad');\n  };\n\n  var handleCenterChanged = function handleCenterChanged() {\n    if (mapref) {\n      // ElevationService()\n      var zoom = mapref.getZoom(); // const ele=mapref.getElevationService();\n\n      var lat = mapref.getCenter().lat();\n      var lng = mapref.getCenter().lng();\n      elev.getElevationForLocations({\n        locations: lat\n      }, function (results, status) {\n        console.log('s', results[0].elevation);\n      }); // displayLocationElevation(lat, elevator, infowindow);\n\n      console.log('ddddddd', lat, lng, zoom);\n    }\n  };\n\n  var myLatLng = {\n    lat: -25.363,\n    lng: 131.044\n  }; // const map = new google.maps.Map(document.getElementById(\"map\"), {\n  //   zoom: 4,\n  //   center: myLatLng,\n  // });\n\n  var _useState7 = useState({\n    lat: 35.969997373905,\n    lng: 128.45170755523503\n  }),\n      geom = _useState7[0],\n      setGeom = _useState7[1];\n\n  var handleButton = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var currentAddr, _yield$GeomHandle, lat, lng;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              currentAddr = document.getElementById('address').value;\n\n              if (!currentAddr) {\n                _context.next = 10;\n                break;\n              }\n\n              _context.next = 4;\n              return GeomHandle(currentAddr);\n\n            case 4:\n              _yield$GeomHandle = _context.sent;\n              lat = _yield$GeomHandle.lat;\n              lng = _yield$GeomHandle.lng;\n              setGeom({\n                lat: lat,\n                lng: lng\n              });\n              dispatch({\n                type: SEARCH_MAP_REQUEST,\n                data: '1'\n              });\n              console.log('aaa', searchMap);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleButton() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 9\n    }\n  }, __jsx(AppLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 13\n    }\n  }), \"\\uAC80\\uC0C9\\uD558\\uAE30\", __jsx(Input.Search, {\n    id: \"address\",\n    style: {\n      verticalAlign: 'middle',\n      marginLeft: '10px',\n      width: '500px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 9\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 105\n    }\n  }), __jsx(\"button\", {\n    onClick: handleButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 9\n    }\n  }, \"\\uD074\\uB9AD\"), __jsx(LoadScript, {\n    googleMapsApiKey: \"AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 9\n    }\n  }, __jsx(GoogleMap, {\n    id: \"marker-example\",\n    mapContainerStyle: mapContainerStyle,\n    zoom: 13,\n    center: geom,\n    onLoad: handleOnLoad,\n    onDragEnd: handleCenterChanged,\n    onZoomChanged: handleCenterChanged,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 11\n    }\n  }, __jsx(MarkerClusterer, {\n    options: optionss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 1\n    }\n  }, function (clusterer) {\n    return searchMap.map(function (p) {\n      return __jsx(Marker, {\n        key: createKey(p),\n        position: {\n          lat: p.start_latlng[1],\n          lng: p.start_latlng[0]\n        },\n        onClick: call,\n        clusterer: clusterer,\n        icon: {\n          scaledSize: new google.maps.Size(30, 30)\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 15\n        }\n      });\n    });\n  }), searchMap.map(function (m) {\n    return __jsx(Polyline, {\n      onRightClick: function onRightClick() {\n        return polylineClick(m);\n      },\n      onMouseOver: mouseOver,\n      onMouseOut: mouseOut,\n      onLoad: onLoad,\n      options: options,\n      path: m.gps.coordinates.map(function (p) {\n        return {\n          lat: p[1],\n          lng: p[0]\n        };\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 13\n      }\n    });\n  }), target && __jsx(InfoWindow, {\n    position: infoPosition,\n    onCloseClick: closeClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 14\n    }\n  }, __jsx(\"div\", {\n    style: divStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 13\n    }\n  }, \"\\uB3D9\\uC601\"), __jsx(\"button\", {\n    onClick: oneRoute,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 13\n    }\n  }, \"\\uC0C1\\uC138\\uBCF4\\uAE30\"))))));\n}\n\n_s(polyline, \"x6RtWfPQv/7p51pj/nM7WTd2CTM=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\nexport default /*#__PURE__*/React.memo(polyline);","map":{"version":3,"sources":["/Users/dong/CapstonProject/pages/polyline.js"],"names":["React","useState","useEffect","useDispatch","useSelector","GoogleMap","LoadScript","Polyline","Marker","StreetViewPanorama","MarkerClusterer","AppLayout","SEARCH_MAP_REQUEST","GeomHandle","Input","InfoWindow","Router","iconPin","path","scale","mapContainerStyle","height","width","call","console","log","center","lat","lng","onLoad","polyline","markerPosition","createKey","location","optionss","imagePath","state","map","searchMap","dispatch","propsPosition","setPropsPosition","target","setTarget","divStyle","background","border","padding","infoPosition","setInfoPosition","closeClick","i","oneRoute","push","pathname","query","id","strokeWeight","setStrokeWeight","mouseOut","mouseOver","polylineClick","positionData","gps","coordinates","options","strokeColor","strokeOpacity","fillColor","fillOpacity","clickable","draggable","editable","visible","radius","paths","zIndex","elev","setElev","mapref","setMapRef","handleOnLoad","elevator","google","maps","ElevationService","handleCenterChanged","zoom","getZoom","getCenter","getElevationForLocations","locations","results","status","elevation","myLatLng","geom","setGeom","handleButton","currentAddr","document","getElementById","value","type","data","verticalAlign","marginLeft","clusterer","p","start_latlng","scaledSize","Size","m","memo"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAwBC,SAAxB,QAAwC,OAAxC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,wBAAtC;AACA,SAASC,QAAT,EAAmBC,MAAnB,EAA0BC,kBAA1B,EAA6CC,eAA7C,QAAmE,wBAAnE;AACA,OAAOC,SAAP,MAAsB,wBAAtB,C,CACA;;AACA,SAASC,kBAAT,QAAmC,iBAAnC;AAEA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,SAASC,KAAT,QAAsB,MAAtB;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,OAAOC,MAAP,MAAmB,aAAnB,C,CAEA;;AAIA,IAAMC,OAAO,GAAC;AACVC,EAAAA,IAAI,EAAC,4GADK;AAEVC,EAAAA,KAAK,EAAC;AAFI,CAAd;AAOA,IAAMC,iBAAiB,GAAG;AACxBC,EAAAA,MAAM,EAAE,OADgB;AAExBC,EAAAA,KAAK,EAAE;AAFiB,CAA1B;;AAKA,IAAMC,IAAI,GAAC,SAALA,IAAK,GAAI;AACXC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACH,CAFD;;AAIA,IAAMC,MAAM,GAAG;AAACC,EAAAA,GAAG,EAAG,eAAP;AAAwBC,EAAAA,GAAG,EAAE;AAA7B,CAAf;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAAC,QAAQ,EAAI;AACzBN,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BK,QAA1B;AACD,CAFD;;AAMA,IAAMZ,IAAI,GAAG,CACb,CACI;AAACS,EAAAA,GAAG,EAAG,eAAP;AAAwBC,EAAAA,GAAG,EAAE;AAA7B,CADJ,EAEI;AAACD,EAAAA,GAAG,EAAC,kBAAL;AAAyBC,EAAAA,GAAG,EAAC;AAA7B,CAFJ,EAII;AAACD,EAAAA,GAAG,EAAE,iBAAN;AAAyBC,EAAAA,GAAG,EAAE;AAA9B,CAJJ,CADa,EASb,CACI;AAACD,EAAAA,GAAG,EAAG,iBAAP;AAA4BC,EAAAA,GAAG,EAAE;AAAjC,CADJ,EAGI;AAACD,EAAAA,GAAG,EAAE,iBAAN;AAA2BC,EAAAA,GAAG,EAAC;AAA/B,CAHJ,EAII;AAACD,EAAAA,GAAG,EAAC,kBAAL;AAAyBC,EAAAA,GAAG,EAAC;AAA7B,CAJJ,EAKI;AAACD,EAAAA,GAAG,EAAC,iBAAL;AAAwBC,EAAAA,GAAG,EAAC;AAA5B,CALJ,EAMI;AAACD,EAAAA,GAAG,EAAC,iBAAL;AAAwBC,EAAAA,GAAG,EAAC;AAA5B,CANJ,EAOI;AACID,EAAAA,GAAG,EAAC,iBADR;AAC2BC,EAAAA,GAAG,EAAC;AAD/B,CAPJ,CATa,CAAb;AA4BA,IAAMG,cAAc,GAAC,CACjB;AAACJ,EAAAA,GAAG,EAAE,iBAAN;AAAyBC,EAAAA,GAAG,EAAE;AAA9B,CADiB,EACiC;AAC9CD,EAAAA,GAAG,EAAC,iBAD0C;AACvBC,EAAAA,GAAG,EAAC;AADmB,CADjC,CAArB;;AAOA,SAASI,SAAT,CAAmBC,QAAnB,EAA6B;AACzB,SAAOA,QAAQ,CAACN,GAAT,GAAeM,QAAQ,CAACL,GAA/B;AACD;;AAGH,IAAMM,QAAQ,GAAG;AACbC,EAAAA,SAAS,EACP,wFAFW,CAE+E;;AAF/E,CAAjB;;AAMA,SAASL,QAAT,GAAoB;AAAA;;AAAA;;AAEhB,qBAAkB1B,WAAW,CAAC,UAACgC,KAAD;AAAA,WAASA,KAAK,CAACC,GAAf;AAAA,GAAD,CAA7B;AAAA,MAAOC,SAAP,gBAAOA,SAAP;;AAEA,MAAMC,QAAQ,GAACpC,WAAW,EAA1B;;AAEA,kBAAuCF,QAAQ,EAA/C;AAAA,MAAOuC,aAAP;AAAA,MAAqBC,gBAArB,gBANgB,CASpB;;;AACA,mBAAyBxC,QAAQ,CAAC,KAAD,CAAjC;AAAA,MAAOyC,MAAP;AAAA,MAAcC,SAAd;;AAEA,MAAMC,QAAQ,GAAG;AACbC,IAAAA,UAAU,SADG;AAEbC,IAAAA,MAAM,kBAFO;AAGbC,IAAAA,OAAO,EAAE;AAHI,GAAjB;;AAMA,mBAAqC9C,QAAQ,CAAC,EAAD,CAA7C;AAAA,MAAO+C,YAAP;AAAA,MAAoBC,eAApB;;AAEA,MAAMC,UAAU,GAAC,SAAXA,UAAW,GAAI;AACjBP,IAAAA,SAAS,CAAC,KAAD,CAAT;AACH,GAFD;;AAGA,MAAMQ,CAAC,GAAC,CAAR;;AAEA,MAAMC,QAAQ,GAAC,SAATA,QAAS,GAAI;AACfpC,IAAAA,MAAM,CAACqC,IAAP,CAAY;AACRC,MAAAA,QAAQ,EAAE,aADF;AAERC,MAAAA,KAAK,EAAE;AAACC,QAAAA,EAAE,EAAC;AAAJ;AAFC,KAAZ;AAIH,GALD,CAzBoB,CAiCpB;AAEI;;;AAEJ,mBAAqCvD,QAAQ,CAAC,CAAD,CAA7C;AAAA,MAAOwD,YAAP;AAAA,MAAoBC,eAApB;;AAGA,MAAMC,QAAQ,GAAC,SAATA,QAAS,GAAI;AACfD,IAAAA,eAAe,CAAC,CAAD,CAAf;AACAlC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACH,GAHD;;AAKA,MAAMmC,SAAS,GAAC,SAAVA,SAAU,GAAI;AAChBF,IAAAA,eAAe,CAAC,EAAD,CAAf;AACAlC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACH,GAHD;;AAIA,MAAMoC,aAAa,GAAC,SAAdA,aAAc,CAACC,YAAD,EAAgB;AAChCtC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAiBa,SAAjB;AACAW,IAAAA,eAAe,CAACa,YAAY,CAACC,GAAb,CAAiBC,WAAjB,CAA6B,CAA7B,CAAD,CAAf;AACAvB,IAAAA,gBAAgB,CAACqB,YAAD,CAAhB;AACAnB,IAAAA,SAAS,CAAC,IAAD,CAAT;AACAnB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAkBqC,YAAlB;AAEH,GARD;;AAUA,MAAMG,OAAO,GAAG;AACZC,IAAAA,WAAW,EAAE,SADD;AAEZC,IAAAA,aAAa,EAAE,GAFH;AAGZV,IAAAA,YAAY,EAAEA,YAHF;AAIZW,IAAAA,SAAS,EAAE,SAJC;AAKZC,IAAAA,WAAW,EAAE,IALD;AAMZC,IAAAA,SAAS,EAAE,IANC;AAOZC,IAAAA,SAAS,EAAE,KAPC;AAQZC,IAAAA,QAAQ,EAAE,KARE;AASZC,IAAAA,OAAO,EAAE,IATG;AAUZC,IAAAA,MAAM,EAAE,KAVI;AAWZ;AACAC,IAAAA,KAAK,EAAE,CAED,CACI;AAAChD,MAAAA,GAAG,EAAG,eAAP;AAAwBC,MAAAA,GAAG,EAAE;AAA7B,KADJ,EAEI;AAACD,MAAAA,GAAG,EAAC,kBAAL;AAAyBC,MAAAA,GAAG,EAAC;AAA7B,KAFJ,EAII;AAACD,MAAAA,GAAG,EAAE,iBAAN;AAAyBC,MAAAA,GAAG,EAAE;AAA9B,KAJJ,CAFC,EAUD,CACI;AAACD,MAAAA,GAAG,EAAG,iBAAP;AAA2BC,MAAAA,GAAG,EAAE;AAAhC,KADJ,EAGI;AAACD,MAAAA,GAAG,EAAE,kBAAN;AAA2BC,MAAAA,GAAG,EAAC;AAA/B,KAHJ,CAVC,CAZK;AAgCZgD,IAAAA,MAAM,EAAE;AAhCI,GAAhB,CA3DoB,CAgGpB;;AAKI,mBAAqB3E,QAAQ,EAA7B;AAAA,MAAO4E,IAAP;AAAA,MAAYC,OAAZ;;AACA,mBAA4B7E,QAAQ,CAAC,IAAD,CAApC;AAAA,MAAO8E,MAAP;AAAA,MAAeC,SAAf;;AACA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAAA5C,GAAG,EAAI;AAC1B2C,IAAAA,SAAS,CAAC3C,GAAD,CAAT;AACA,QAAM6C,QAAQ,GAAG,IAAIC,MAAM,CAACC,IAAP,CAAYC,gBAAhB,EAAjB;AACAP,IAAAA,OAAO,CAACI,QAAD,CAAP;AACA1D,IAAAA,OAAO,CAACC,GAAR,CAAYyD,QAAZ;AACA1D,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACD,GAND;;AAOA,MAAM6D,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAChC,QAAIP,MAAJ,EAAY;AACV;AACA,UAAMQ,IAAI,GAACR,MAAM,CAACS,OAAP,EAAX,CAFU,CAIV;;AACA,UAAM7D,GAAG,GAAGoD,MAAM,CAACU,SAAP,GAAmB9D,GAAnB,EAAZ;AACA,UAAMC,GAAG,GAAGmD,MAAM,CAACU,SAAP,GAAmB7D,GAAnB,EAAZ;AACAiD,MAAAA,IAAI,CAACa,wBAAL,CAA8B;AAACC,QAAAA,SAAS,EAAChE;AAAX,OAA9B,EAA8C,UAACiE,OAAD,EAASC,MAAT,EAAkB;AAC5DrE,QAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAgBmE,OAAO,CAAC,CAAD,CAAP,CAAWE,SAA3B;AAEH,OAHD,EAPU,CAYV;;AACAtE,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBE,GAAtB,EAA0BC,GAA1B,EAA8B2D,IAA9B;AACD;AACF,GAhBD;;AA0BA,MAAMQ,QAAQ,GAAG;AAAEpE,IAAAA,GAAG,EAAE,CAAC,MAAR;AAAgBC,IAAAA,GAAG,EAAE;AAArB,GAAjB,CAxIgB,CAyIhB;AACA;AACA;AACA;;AACA,mBAAsB3B,QAAQ,CAAC;AAAC0B,IAAAA,GAAG,EAAC,eAAL;AAAsBC,IAAAA,GAAG,EAAE;AAA3B,GAAD,CAA9B;AAAA,MAAOoE,IAAP;AAAA,MAAaC,OAAb;;AAEA,MAAMC,YAAY;AAAA,wEAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;AACXC,cAAAA,WADW,GACGC,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmCC,KADtC;;AAAA,mBAEbH,WAFa;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAGUtF,UAAU,CAACsF,WAAD,CAHpB;;AAAA;AAAA;AAGRxE,cAAAA,GAHQ,qBAGRA,GAHQ;AAGHC,cAAAA,GAHG,qBAGHA,GAHG;AAIfqE,cAAAA,OAAO,CAAC;AAACtE,gBAAAA,GAAG,EAACA,GAAL;AAASC,gBAAAA,GAAG,EAACA;AAAb,eAAD,CAAP;AAEAW,cAAAA,QAAQ,CAAC;AACPgE,gBAAAA,IAAI,EAAC3F,kBADE;AAEP4F,gBAAAA,IAAI,EAAC;AAFE,eAAD,CAAR;AAIFhF,cAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAkBa,SAAlB;;AAViB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAZ4D,YAAY;AAAA;AAAA;AAAA,KAAlB;;AAmBA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,8BAGA,MAAC,KAAD,CAAO,MAAP;AAAc,IAAA,EAAE,EAAC,SAAjB;AAA4B,IAAA,KAAK,EAAE;AAACO,MAAAA,aAAa,EAAC,QAAf;AAAyBC,MAAAA,UAAU,EAAC,MAApC;AAA2CpF,MAAAA,KAAK,EAAC;AAAjD,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHA,EAGgG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHhG,EAIA;AAAQ,IAAA,OAAO,EAAE4E,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJA,EAOA,MAAC,UAAD;AACA,IAAA,gBAAgB,EAAC,yCADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIE,MAAC,SAAD;AACE,IAAA,EAAE,EAAC,gBADL;AAEE,IAAA,iBAAiB,EAAE9E,iBAFrB;AAGE,IAAA,IAAI,EAAE,EAHR;AAIE,IAAA,MAAM,EAAE4E,IAJV;AAKE,IAAA,MAAM,EAAEf,YALV;AAME,IAAA,SAAS,EAAEK,mBANb;AAOE,IAAA,aAAa,EAAEA,mBAPjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYV,MAAC,eAAD;AAAiB,IAAA,OAAO,EAAEpD,QAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACW,UAACyE,SAAD;AAAA,WACCrE,SAAS,CAACD,GAAV,CAAc,UAACuE,CAAD;AAAA,aACZ,MAAC,MAAD;AAAS,QAAA,GAAG,EAAE5E,SAAS,CAAC4E,CAAD,CAAvB;AAA4B,QAAA,QAAQ,EAAE;AAACjF,UAAAA,GAAG,EAACiF,CAAC,CAACC,YAAF,CAAe,CAAf,CAAL;AAAuBjF,UAAAA,GAAG,EAACgF,CAAC,CAACC,YAAF,CAAe,CAAf;AAA3B,SAAtC;AAAqF,QAAA,OAAO,EAAEtF,IAA9F;AAAoG,QAAA,SAAS,EAAEoF,SAA/G;AAA2H,QAAA,IAAI,EAAE;AACjIG,UAAAA,UAAU,EAAE,IAAI3B,MAAM,CAACC,IAAP,CAAY2B,IAAhB,CAAqB,EAArB,EAAwB,EAAxB;AADqH,SAAjI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADY;AAAA,KAAd,CADD;AAAA,GADX,CAZU,EAsBDzE,SAAS,CAACD,GAAV,CAAc,UAAC2E,CAAD;AAAA,WACX,MAAC,QAAD;AAAU,MAAA,YAAY,EAAE;AAAA,eAAInD,aAAa,CAACmD,CAAD,CAAjB;AAAA,OAAxB;AAA8C,MAAA,WAAW,EAAEpD,SAA3D;AAAsE,MAAA,UAAU,EAAED,QAAlF;AAA4F,MAAA,MAAM,EAAE9B,MAApG;AAA6G,MAAA,OAAO,EAAEoC,OAAtH;AAA+H,MAAA,IAAI,EAAE+C,CAAC,CAACjD,GAAF,CAAMC,WAAN,CAAkB3B,GAAlB,CAAsB,UAACuE,CAAD;AAAA,eACvJ;AACIjF,UAAAA,GAAG,EAACiF,CAAC,CAAC,CAAD,CADT;AAEIhF,UAAAA,GAAG,EAACgF,CAAC,CAAC,CAAD;AAFT,SADuJ;AAAA,OAAtB,CAArI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADW;AAAA,GAAd,CAtBC,EAgCLlE,MAAM,IAAE,MAAC,UAAD;AAAY,IAAA,QAAQ,EAAEM,YAAtB;AAAoC,IAAA,YAAY,EAAEE,UAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACL;AAAK,IAAA,KAAK,EAAEN,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAEI;AAAQ,IAAA,OAAO,EAAEQ,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAFJ,CADK,CAhCH,CAJF,CAPA,CADJ;AA6DD;;GA/NMtB,Q;UAEa1B,W,EAEHD,W;;;AA6NjB,4BAAeH,KAAK,CAACiH,IAAN,CAAWnF,QAAX,CAAf","sourcesContent":["import React, {useState,useEffect} from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { Polyline ,Marker,StreetViewPanorama,MarkerClusterer} from '@react-google-maps/api';\nimport AppLayout from '../component/AppLayout';\n// import Streetview from 'react-google-streetview';// import RecordElevation from '../component/RecordElavation'\nimport { SEARCH_MAP_REQUEST } from '../reducers/map';\n\nimport GeomHandle from '../component/GoogleMap'\nimport { Input } from 'antd';\nimport { InfoWindow } from '@react-google-maps/api';\nimport Router from 'next/router'\n\n// import InfoWindow from '../component/InfoWindow';\n\n\n\nconst iconPin={\n    path:'https://png.pngtree.com/png-clipart/20190921/original/pngtree-label-free-png-picture-png-image_4700172.jpg',\n    scale:1\n}\n\n\n\nconst mapContainerStyle = {\n  height: \"400px\",\n  width: \"800px\"\n};\n\nconst call=()=>{\n    console.log('cccccc')\n}\n\nconst center = {lat:  35.969997373905, lng: 128.45170755523503};\n\nconst onLoad = polyline => {\n  console.log('polyline: ', polyline)\n};\n\n\n\nconst path = [\n[\n    {lat:  35.969997373905, lng: 128.45170755523503},\n    {lat:35.985501427015464, lng:128.40407191943035},\n\n    {lat: 35.89580489690752, lng: 128.62238368221892}\n    \n]\n,\n[\n    {lat:  35.24651100148735,   lng: 128.87070362130143},\n   \n    {lat: 35.24752656439432,   lng:128.8729993854958},\n    {lat:35.248984786322424, lng:128.87318007064073},\n    {lat:35.25018259185734, lng:128.87332887017186},\n    {lat:35.25065129355367, lng:128.87505069331763},\n    {\n        lat:35.25145581526787, lng:128.87358573620605\n    }\n\n    \n]\n\n\n   \n    \n];\n\nconst markerPosition=[\n    {lat: 35.89580489690752, lng: 128.62238368221892},{\n        lat:35.25145581526787, lng:128.87358573620605\n    }\n]\n\n\nfunction createKey(location) {\n    return location.lat + location.lng\n  }\n\n\nconst optionss = {\n    imagePath:\n      'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m', // so you must have m1.png, m2.png, m3.png, m4.png, m5.png and m6.png in that folder\n  }\n\n\nfunction polyline() {\n\n    const {searchMap}=useSelector((state)=>state.map)\n\n    const dispatch=useDispatch()\n\n    const [propsPosition,setPropsPosition]=useState()\n\n\n//InfoWindow\nconst [target,setTarget]=useState(false)\n\nconst divStyle = {\n    background: `white`,\n    border: `1px solid #ccc`,\n    padding: 15\n  }\n\nconst [infoPosition,setInfoPosition]=useState('')\n\nconst closeClick=()=>{\n    setTarget(false)\n}\nconst i=1\n\nconst oneRoute=()=>{\n    Router.push({\n        pathname: '/Route/[id]',\n        query: {id:1},\n      });\n}\n\n\n//InfoWindow\n\n    //polyline\n\nconst [strokeWeight,setStrokeWeight]=useState(5)\n\n\nconst mouseOut=()=>{\n    setStrokeWeight(5)\n    console.log('aaa')\n}\n\nconst mouseOver=()=>{\n    setStrokeWeight(10)\n    console.log('over')\n}\nconst polylineClick=(positionData)=>{\n    console.log('click')\n    console.log('cc',searchMap)\n    setInfoPosition(positionData.gps.coordinates[3])\n    setPropsPosition(positionData)\n    setTarget(true)\n    console.log('ppp',positionData)\n    \n}\n\nconst options = {\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.8,\n    strokeWeight: strokeWeight,\n    fillColor: '#FF0000',\n    fillOpacity: 0.35,\n    clickable: true,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: 30000,\n    //-27부터 호주 시작해서 점찍고 점찍고 한다\n    paths: [\n      \n          [\n              {lat:  35.969997373905, lng: 128.45170755523503},\n              {lat:35.985501427015464, lng:128.40407191943035},\n          \n              {lat: 35.89580489690752, lng: 128.62238368221892}\n              \n          ]\n          ,\n          [\n              {lat:  35.24731788471166,  lng: 128.86906207420088},\n             \n              {lat: 35.260354548127424,  lng:128.81198466603703}\n              \n          ]\n        \n    \n      \n    ],\n    zIndex: 1\n  };\n\n\n\n//polyline\n\n\n\n\n    const [elev,setElev]=useState()\n    const [mapref, setMapRef] = useState(null);\n    const handleOnLoad = map => {\n      setMapRef(map);\n      const elevator = new google.maps.ElevationService();\n      setElev(elevator)\n      console.log(elevator)\n      console.log('onLoad')\n    };\n    const handleCenterChanged = () => {\n      if (mapref) {\n        // ElevationService()\n        const zoom=mapref.getZoom()\n        \n        // const ele=mapref.getElevationService();\n        const lat = mapref.getCenter().lat();\n        const lng = mapref.getCenter().lng();\n        elev.getElevationForLocations({locations:lat},(results,status)=>{\n            console.log('s',results[0].elevation)\n\n        }\n        )\n        // displayLocationElevation(lat, elevator, infowindow);\n        console.log('ddddddd',lat,lng,zoom);\n      }\n    };\n\n    \n\n    \n   \n\n  \n\n\n    const myLatLng = { lat: -25.363, lng: 131.044 };\n    // const map = new google.maps.Map(document.getElementById(\"map\"), {\n    //   zoom: 4,\n    //   center: myLatLng,\n    // });\n    const [geom ,setGeom]=useState({lat:35.969997373905, lng: 128.45170755523503})\n\n    const handleButton = async() => {\n        const currentAddr = document.getElementById('address').value\n        if (currentAddr){\n          const {lat, lng} = await GeomHandle(currentAddr)\n          setGeom({lat:lat,lng:lng})\n\n          dispatch({\n            type:SEARCH_MAP_REQUEST,\n            data:'1'\n        })\n        console.log('aaa',searchMap)\n\n\n       \n        }\n      }\n\n      \n  \n    return (\n        <div>\n            <AppLayout></AppLayout>        \n         검색하기\n        <Input.Search id=\"address\"  style={{verticalAlign:'middle' ,marginLeft:'10px',width:'500px'}} /><br></br>\n        <button onClick={handleButton}>클릭</button>\n              \n\n        <LoadScript\n        googleMapsApiKey=\"AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE\"\n        >\n            \n          <GoogleMap\n            id=\"marker-example\"\n            mapContainerStyle={mapContainerStyle}\n            zoom={13}\n            center={geom}\n            onLoad={handleOnLoad}\n            onDragEnd={handleCenterChanged}\n            onZoomChanged={handleCenterChanged}\n          \n            \n          >\n\n<MarkerClusterer options={optionss}>\n          {(clusterer) =>\n            searchMap.map((p) => (\n              <Marker  key={createKey(p)} position={{lat:p.start_latlng[1],lng:p.start_latlng[0]}} onClick={call} clusterer={clusterer}  icon={{\n              scaledSize: new google.maps.Size(30,30),} } />\n            ))\n          }\n        </MarkerClusterer>\n      \n\n        {searchMap.map((m)=>(\n            <Polyline onRightClick={()=>polylineClick(m)} onMouseOver={mouseOver} onMouseOut={mouseOut} onLoad={onLoad}  options={options} path={m.gps.coordinates.map((p)=>(\n                {\n                    lat:p[1],\n                    lng:p[0]\n                }\n            ))}></Polyline>\n            \n            ))}\n            \n    {target&&<InfoWindow position={infoPosition} onCloseClick={closeClick}>\n        <div style={divStyle}>\n            <h1>동영</h1>\n            <button onClick={oneRoute}>상세보기</button>\n        </div>\n        </InfoWindow>} \n         \n\n        \n       \n            \n          </GoogleMap>\n          </LoadScript>\n             \n         </div>\n\n    )\n  }\n  \n  export default React.memo(polyline)"]},"metadata":{},"sourceType":"module"}