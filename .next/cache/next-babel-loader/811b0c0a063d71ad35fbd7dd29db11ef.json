{"ast":null,"code":"var _jsxFileName = \"/Users/dong/CapstonProject/component/map/selectMap.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { GoogleMap, LoadScript } from \"@react-google-maps/api\";\nimport { Polyline, Marker, StreetViewPanorama, MarkerClusterer } from \"@react-google-maps/api\";\nimport { InfoWindow } from \"@react-google-maps/api\";\nimport Router from \"next/router\";\nimport { LOAD_MAP_REQUEST } from \"../../reducers/map\";\nimport { MOVING_MAP_REQUEST, BIKE_MAP_REQUEST, RUNNING_MAP_REQUEST, SEARCH_MAP_REQUEST, LOAD_MY_LOCATION_REQUEST } from \"../../reducers/map\";\nimport { Input, Button, Row, Col, Card, Pagination } from \"antd\";\nimport GeomHandle from \"../GoogleMap\";\nimport SearchList from \"../SearchList\";\nimport Link from \"next/link\";\nimport styled from \"styled-components\";\nimport wrapper from \"../../store/configureStore\";\nimport { SearchOutlined } from \"@ant-design/icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar lat = 1;\nvar lng = 2;\n\nfunction selectMap({}) {\n  const {\n    myLocation\n  } = useSelector(state => state.map);\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    0: geom,\n    1: setGeom\n  } = useState();\n  const {\n    Search\n  } = Input;\n  const {\n    0: loadMap,\n    1: setLoadMap\n  } = useState(false);\n\n  function getLocation() {\n    if (navigator.geolocation) {\n      // GPS를 지원하면\n      navigator.geolocation.getCurrentPosition(function (position) {\n        setGeom({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n        setLoadMap(true);\n      }, function (error) {\n        console.error(error);\n      }, {\n        enableHighAccuracy: false,\n        maximumAge: 0,\n        timeout: Infinity\n      });\n    } else {\n      alert(\"GPS를 지원하지 않습니다\");\n    }\n  }\n\n  const {\n    0: isState,\n    1: setIsState\n  } = useState(false);\n  const {\n    0: mapState,\n    1: setMapState\n  } = useState(\"B\");\n  const dispatch = useDispatch(); // const mapContainerStyle = {\n  // marginTop:60,\n  // height: \"720px\",\n  // width: \"1000px\"\n  // };\n\n  const mapContainerStyle = {\n    // Google Map 스타일\n    width: \"88%\",\n    height: \"85vh\",\n    // margin: \"0 5%\",\n    borderRadius: \"15px\",\n    position: \"relative\",\n    left: \"8%\"\n  };\n  const {\n    searchMap\n  } = useSelector(state => state.map); // const [geom ,setGeom]=useState({lat:35.969997373905, lng: 128.45170755523503})\n\n  const {\n    0: mapref,\n    1: setMapRef\n  } = useState(null);\n  useEffect(() => {\n    getLocation();\n\n    if (mapref) {\n      dispatch({\n        type: LOAD_MY_LOCATION_REQUEST,\n        data: {\n          north: {\n            lat: mapref.getBounds().getNorthEast().lat(),\n            lng: mapref.getBounds().getNorthEast().lng()\n          },\n          south: {\n            lat: mapref.getBounds().getSouthWest().lat(),\n            lng: mapref.getBounds().getSouthWest().lng()\n          },\n          event: mapState\n        }\n      });\n    }\n  }, [loadMap]);\n\n  const handleOnLoad = map => {\n    setMapRef(map);\n    console.log(\"load됨\");\n  };\n\n  const handleCenterChanged = () => {\n    dispatch({\n      type: MOVING_MAP_REQUEST,\n      data: {\n        north: {\n          lat: mapref.getBounds().getNorthEast().lat(),\n          lng: mapref.getBounds().getNorthEast().lng()\n        },\n        south: {\n          lat: mapref.getBounds().getSouthWest().lat(),\n          lng: mapref.getBounds().getSouthWest().lng()\n        },\n        event: mapState\n      }\n    });\n  }; //////markercluseter\n\n\n  const optionss = {\n    imagePath: \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\" // so you must have m1.png, m2.png, m3.png, m4.png, m5.png and m6.png in that folder\n\n  };\n\n  function createKey(location) {\n    return location.lat + location.lng;\n  } //////markercluseter\n  ///주소검색\n\n\n  const {\n    searchmapLoading\n  } = useSelector(state => state.map);\n\n  const handleButton = async () => {\n    const currentAddr = document.getElementById(\"address\").value;\n\n    if (currentAddr) {\n      const {\n        lat,\n        lng\n      } = await GeomHandle(currentAddr);\n      setGeom({\n        lat: lat,\n        lng: lng\n      });\n      dispatch({\n        type: SEARCH_MAP_REQUEST,\n        data: {\n          north: {\n            lat: mapref.getBounds().getNorthEast().lat(),\n            lng: mapref.getBounds().getNorthEast().lng()\n          },\n          south: {\n            lat: mapref.getBounds().getSouthWest().lat(),\n            lng: mapref.getBounds().getSouthWest().lng()\n          },\n          event: mapState\n        }\n      });\n      console.log(\"aaa\", searchMap);\n    }\n  }; //주소검색\n  //polyline\n  //   const [propsPosition,setPropsPosition]=useState()\n\n\n  const {\n    0: propsId,\n    1: setPropsId\n  } = useState();\n  const {\n    0: infoPosition,\n    1: setInfoPosition\n  } = useState({\n    lat: \"\",\n    lng: \"\"\n  });\n  const {\n    0: target,\n    1: setTarget\n  } = useState(false);\n  const {\n    0: strokeWeight,\n    1: setStrokeWeight\n  } = useState(Array.from({\n    length: searchMap.length\n  }, () => 3));\n  const strokeWeights = Array.from({\n    length: searchMap.length\n  }, () => 3);\n\n  const polylineClick = positionData => {\n    setInfoPosition({\n      lat: positionData.gps.coordinates[3][1],\n      lng: positionData.gps.coordinates[3][0]\n    });\n    console.log(\"qqq\", positionData);\n    setPropsId(positionData._id); // setPropsPosition(positionData)\n\n    setTarget(true);\n  };\n\n  function mouseOver(index) {\n    strokeWeights[index] = 10;\n    setStrokeWeight(strokeWeights);\n  }\n\n  function mouseOut(index) {\n    strokeWeights[index] = 3;\n    setStrokeWeight(strokeWeights);\n  } //polyline\n  //infoWindow\n\n\n  const closeClick = () => {\n    setTarget(false);\n  };\n\n  const divStyle = {\n    background: `white`,\n    border: `1px solid #ccc`,\n    padding: 15\n  };\n\n  const oneRoute = () => {\n    dispatch({\n      type: LOAD_MAP_REQUEST,\n      data: propsId\n    });\n    Router.push({\n      pathname: \"/Route/[id]\",\n      query: {\n        id: propsId\n      }\n    });\n    console.log(\"dong\", searchMap);\n  }; //infoWindow\n  //   const [mapState,setMapState]=useState()\n  // const {mapState}=useSelector((state)=>state.map)\n\n\n  const bikeSelectMap = () => {\n    setMapState(\"B\");\n    setIsState(true);\n  };\n\n  const runningSelectMap = () => {\n    setMapState(\"R\");\n    setIsState(true);\n  };\n\n  useEffect(() => {\n    if (mapState === \"B\" && isState === true) {\n      dispatch({\n        type: BIKE_MAP_REQUEST,\n        data: {\n          event: mapState,\n          north: {\n            lat: mapref.getBounds().getNorthEast().lat(),\n            lng: mapref.getBounds().getNorthEast().lng()\n          },\n          south: {\n            lat: mapref.getBounds().getSouthWest().lat(),\n            lng: mapref.getBounds().getSouthWest().lng()\n          }\n        }\n      });\n      setIsState(false);\n    } else if (mapState === \"R\" && isState === true) {\n      dispatch({\n        type: RUNNING_MAP_REQUEST,\n        data: {\n          event: mapState,\n          north: {\n            lat: mapref.getBounds().getNorthEast().lat(),\n            lng: mapref.getBounds().getNorthEast().lng()\n          },\n          south: {\n            lat: mapref.getBounds().getSouthWest().lat(),\n            lng: mapref.getBounds().getSouthWest().lng()\n          }\n        }\n      });\n      setIsState(false);\n    }\n  }, [mapState, isState]);\n  const {\n    0: btn,\n    1: setBtn\n  } = useState(false);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(CardDiv, {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          span: 12,\n          children: /*#__PURE__*/_jsxDEV(LeftDiv, {\n            children: [/*#__PURE__*/_jsxDEV(Title, {\n              children: \"\\uCF54\\uC2A4\\uCC3E\\uAE30\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(Search, {\n                loading: searchmapLoading,\n                onPressEnter: handleButton,\n                placeholder: \"\\uCF54\\uC2A4\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",\n                enterButton: true // allowClear\n                ,\n                icon: /*#__PURE__*/_jsxDEV(SearchOutlined, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 307,\n                  columnNumber: 25\n                }, this),\n                id: \"address\",\n                size: \"large\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 301,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Buttons, {\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  className: \"btn1\",\n                  onClick: bikeSelectMap,\n                  children: \"\\uC790\\uC804\\uAC70\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 312,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  className: \"btn2\",\n                  onClick: runningSelectMap,\n                  children: \"\\uB2EC\\uB9AC\\uAE30\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 315,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 311,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 15\n            }, this), searchMap.map((p, index) =>\n            /*#__PURE__*/\n            // <Col span={24}>\n            _jsxDEV(SearchList, {\n              setInfoPosition: setInfoPosition,\n              setPropsId: setPropsId,\n              setTarget: setTarget,\n              index: index,\n              setStrokeWeight: setStrokeWeight,\n              list: p\n            }, p.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 17\n            }, this) // </Col>\n            ), /*#__PURE__*/_jsxDEV(Page, {\n              defaultCurrent: 1,\n              defaultPageSize: 3 // total={searchMap.lenth}\n              ,\n              total: 10 // onChange={onChangePage}\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          span: 12,\n          children: /*#__PURE__*/_jsxDEV(LoadScript, {\n            googleMapsApiKey: \"AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE\",\n            children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n              id: \"marker-example\",\n              mapContainerStyle: mapContainerStyle,\n              zoom: 13,\n              center: geom,\n              onLoad: handleOnLoad,\n              onDragEnd: handleCenterChanged // onZoomChanged={handleCenterChanged}\n              ,\n              children: [/*#__PURE__*/_jsxDEV(MarkerClusterer, {\n                options: optionss,\n                children: clusterer => searchMap.map(p => /*#__PURE__*/_jsxDEV(Marker, {\n                  position: {\n                    lat: p.start_latlng[1],\n                    lng: p.start_latlng[0]\n                  },\n                  clusterer: clusterer,\n                  icon: {\n                    scaledSize: new google.maps.Size(30, 30)\n                  }\n                }, createKey(p), false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 359,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 356,\n                columnNumber: 17\n              }, this), searchMap.map((m, index) => /*#__PURE__*/_jsxDEV(Polyline, {\n                onRightClick: () => polylineClick(m),\n                onMouseOver: () => mouseOver(index),\n                onMouseOut: () => mouseOut(index),\n                options: {\n                  strokeWeight: strokeWeight[index],\n                  clickable: true,\n                  visible: true,\n                  strokeColor: \"#FF0000\",\n                  fillColor: \"#FF0000\"\n                },\n                path: m.gps.coordinates.map(p => ({\n                  lat: p[1],\n                  lng: p[0]\n                }))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 375,\n                columnNumber: 19\n              }, this)), target && /*#__PURE__*/_jsxDEV(InfoWindow, {\n                position: infoPosition,\n                onCloseClick: closeClick,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: divStyle,\n                  children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                    children: \"\\uB3D9\\uC601\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 396,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: oneRoute,\n                    children: \"\\uC0C1\\uC138\\uBCF4\\uAE30\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 402,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 395,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 394,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 294,\n    columnNumber: 5\n  }, this);\n}\n\nexport default selectMap;\nexport const getStaticProps = wrapper.getStaticProps(async context => {\n  context.store.dispatch({\n    type: LOAD_MY_LOCATION_REQUEST,\n    data: {\n      north: {\n        lat: mapref.getBounds().getNorthEast().lat(),\n        lng: mapref.getBounds().getNorthEast().lng()\n      },\n      south: {\n        lat: mapref.getBounds().getSouthWest().lat(),\n        lng: mapref.getBounds().getSouthWest().lng()\n      },\n      event: mapState\n    }\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nconst Container = styled.div`\n  // 전체 div\n  width: 100%;\n  // height: 100%;\n\n  .ant-input {\n    border-radius: 15px;\n    border-radius: 1px solid #1890ff;\n  }\n\n  .ant-input-group-wrapper {\n    margin-bottom: 20px;\n  }\n\n  .ant-input-group {\n    width: 90%;\n    width: 100%;\n    // margin: 0 auto;\n  }\n\n  .ant-input-search {\n    border-radius: 9px !important;\n    // position: relative;\n    // right: 15px;\n    // z-index: 1;\n  }\n\n  .ant-input-search-button {\n    // border-radius: 55% !important;\n    // border-top-right-radius: 9px !important;\n    // border-bottom-right-radius: 9px !important;\n  }\n\n  .ant-card {\n    width: 100%;\n    border-radius: 9px;\n    box-shadow: 0 1px 2px -2px rgb(0 0 0 / 16%), 0 3px 6px 0 rgb(0 0 0 / 12%);\n    margin: 0;\n  }\n`;\nconst mapContainerStyle = {\n  // Google Map 스타일\n  width: \"100%\",\n  height: \"80vh\",\n  borderRadius: \"15px\",\n  padding: \"0 30px\"\n};\nexport const CardDiv = styled(Card)`\n  width: 100%;\n\n  border-radius: 15px;\n  box-shadow: 0 1px 2px -2px rgb(0 0 0 / 16%), 0 3px 6px 0 rgb(0 0 0 / 12%);\n\n  .ant-card-body {\n    padding: 10px;\n  }\n`; // const RightDiv = styled.div``;\n\nconst LeftDiv = styled.div`\n  display: inline-block;\n  position: relative;\n  width: 100%;\n  height: 100%;\n  padding: 0 5%;\n`;\nexport const Title = styled.p`\n  font-size: 30px;\n  font-weight: bold;\n  margin: 20px auto;\n  margin-top: 0;\n`;\nconst Page = styled(Pagination)`\n  position: absolute;\n  left: 34%;\n  bottom: 1%;\n  margin-top: 32px;\n  text-align: center;\n`;\nconst Buttons = styled.div`\n  display: inline-block;\n  width: 90%;\n  width: 100%;\n  margin-bottom: 20px;\n\n  Button {\n    height: 33px;\n    border-radius: 15px;\n    margin-right: 10px;\n  }\n\n  Button:hover {\n    background: #1683e8;\n    border-color: #1683e8;\n    color: #fff;\n  }\n\n  Button:focus {\n    background: #1683e8;\n    color: #fff;\n  }\n`;\nconst RowDiv = styled(Row)`\n  display: inline-block;\n  width: 100%;\n  height: 75%;\n  // border: 1px solid grey;\n  padding-bottom: 30px;\n`;","map":{"version":3,"sources":["/Users/dong/CapstonProject/component/map/selectMap.js"],"names":["React","useState","useEffect","useDispatch","useSelector","GoogleMap","LoadScript","Polyline","Marker","StreetViewPanorama","MarkerClusterer","InfoWindow","Router","LOAD_MAP_REQUEST","MOVING_MAP_REQUEST","BIKE_MAP_REQUEST","RUNNING_MAP_REQUEST","SEARCH_MAP_REQUEST","LOAD_MY_LOCATION_REQUEST","Input","Button","Row","Col","Card","Pagination","GeomHandle","SearchList","Link","styled","wrapper","SearchOutlined","lat","lng","selectMap","myLocation","state","map","me","user","geom","setGeom","Search","loadMap","setLoadMap","getLocation","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","error","console","enableHighAccuracy","maximumAge","timeout","Infinity","alert","isState","setIsState","mapState","setMapState","dispatch","mapContainerStyle","width","height","borderRadius","left","searchMap","mapref","setMapRef","type","data","north","getBounds","getNorthEast","south","getSouthWest","event","handleOnLoad","log","handleCenterChanged","optionss","imagePath","createKey","location","searchmapLoading","handleButton","currentAddr","document","getElementById","value","propsId","setPropsId","infoPosition","setInfoPosition","target","setTarget","strokeWeight","setStrokeWeight","Array","from","length","strokeWeights","polylineClick","positionData","gps","coordinates","_id","mouseOver","index","mouseOut","closeClick","divStyle","background","border","padding","oneRoute","push","pathname","query","id","bikeSelectMap","runningSelectMap","btn","setBtn","p","clusterer","start_latlng","scaledSize","google","maps","Size","m","clickable","visible","strokeColor","fillColor","getStaticProps","context","store","END","sagaTask","toPromise","Container","div","CardDiv","LeftDiv","Title","Page","Buttons","RowDiv"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { GoogleMap, LoadScript } from \"@react-google-maps/api\";\nimport {\n  Polyline,\n  Marker,\n  StreetViewPanorama,\n  MarkerClusterer,\n} from \"@react-google-maps/api\";\nimport { InfoWindow } from \"@react-google-maps/api\";\nimport Router from \"next/router\";\nimport { LOAD_MAP_REQUEST } from \"../../reducers/map\";\nimport {\n  MOVING_MAP_REQUEST,\n  BIKE_MAP_REQUEST,\n  RUNNING_MAP_REQUEST,\n  SEARCH_MAP_REQUEST,\n  LOAD_MY_LOCATION_REQUEST,\n} from \"../../reducers/map\";\nimport { Input, Button, Row, Col, Card, Pagination } from \"antd\";\nimport GeomHandle from \"../GoogleMap\";\nimport SearchList from \"../SearchList\";\nimport Link from \"next/link\";\nimport styled from \"styled-components\";\nimport wrapper from \"../../store/configureStore\";\nimport { SearchOutlined } from \"@ant-design/icons\";\n\nvar lat = 1;\nvar lng = 2;\n\nfunction selectMap({}) {\n  const { myLocation } = useSelector((state) => state.map);\n\n  const {me}=useSelector((state)=>state.user)\n  const [geom, setGeom] = useState();\n  const { Search } = Input;\n\n  const [loadMap, setLoadMap] = useState(false);\n\n  function getLocation() {\n    if (navigator.geolocation) {\n      // GPS를 지원하면\n      navigator.geolocation.getCurrentPosition(\n        function (position) {\n          setGeom({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude,\n          });\n          setLoadMap(true);\n        },\n        function (error) {\n          console.error(error);\n        },\n        {\n          enableHighAccuracy: false,\n          maximumAge: 0,\n          timeout: Infinity,\n        }\n      );\n    } else {\n      alert(\"GPS를 지원하지 않습니다\");\n    }\n  }\n\n  const [isState, setIsState] = useState(false);\n  const [mapState, setMapState] = useState(\"B\");\n\n  const dispatch = useDispatch();\n\n  // const mapContainerStyle = {\n  // marginTop:60,\n  // height: \"720px\",\n  // width: \"1000px\"\n  // };\n  const mapContainerStyle = {\n    // Google Map 스타일\n    width: \"88%\",\n    height: \"85vh\",\n    // margin: \"0 5%\",\n    borderRadius: \"15px\",\n    position: \"relative\",\n    left: \"8%\",\n  };\n\n  const { searchMap } = useSelector((state) => state.map);\n\n  // const [geom ,setGeom]=useState({lat:35.969997373905, lng: 128.45170755523503})\n  const [mapref, setMapRef] = useState(null);\n\n  useEffect(() => {\n    getLocation();\n    if (mapref) {\n      dispatch({\n        type: LOAD_MY_LOCATION_REQUEST,\n        data: {\n          north: {\n            lat: mapref.getBounds().getNorthEast().lat(),\n            lng: mapref.getBounds().getNorthEast().lng(),\n          },\n          south: {\n            lat: mapref.getBounds().getSouthWest().lat(),\n            lng: mapref.getBounds().getSouthWest().lng(),\n          },\n          event: mapState,\n        },\n      });\n    }\n  }, [loadMap]);\n\n  const handleOnLoad = (map) => {\n    setMapRef(map);\n    console.log(\"load됨\");\n  };\n\n  const handleCenterChanged = () => {\n    dispatch({\n      type: MOVING_MAP_REQUEST,\n      data: {\n        north: {\n          lat: mapref.getBounds().getNorthEast().lat(),\n          lng: mapref.getBounds().getNorthEast().lng(),\n        },\n        south: {\n          lat: mapref.getBounds().getSouthWest().lat(),\n          lng: mapref.getBounds().getSouthWest().lng(),\n        },\n        event: mapState,\n      },\n    });\n  };\n\n  //////markercluseter\n\n  const optionss = {\n    imagePath:\n      \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\", // so you must have m1.png, m2.png, m3.png, m4.png, m5.png and m6.png in that folder\n  };\n\n  function createKey(location) {\n    return location.lat + location.lng;\n  }\n\n  //////markercluseter\n\n  ///주소검색\n\n  const { searchmapLoading } = useSelector((state) => state.map);\n\n  const handleButton = async () => {\n    const currentAddr = document.getElementById(\"address\").value;\n    if (currentAddr) {\n      const { lat, lng } = await GeomHandle(currentAddr);\n      setGeom({ lat: lat, lng: lng });\n\n      dispatch({\n        type: SEARCH_MAP_REQUEST,\n        data: {\n          north: {\n            lat: mapref.getBounds().getNorthEast().lat(),\n            lng: mapref.getBounds().getNorthEast().lng(),\n          },\n          south: {\n            lat: mapref.getBounds().getSouthWest().lat(),\n            lng: mapref.getBounds().getSouthWest().lng(),\n          },\n          event: mapState,\n        },\n      });\n      console.log(\"aaa\", searchMap);\n    }\n  };\n\n  //주소검색\n\n  //polyline\n\n  //   const [propsPosition,setPropsPosition]=useState()\n\n  const [propsId, setPropsId] = useState();\n\n  const [infoPosition, setInfoPosition] = useState({\n    lat: \"\",\n    lng: \"\",\n  });\n\n  const [target, setTarget] = useState(false);\n\n  const [strokeWeight, setStrokeWeight] = useState(\n    Array.from({ length: searchMap.length }, () => 3)\n  );\n  const strokeWeights = Array.from({ length: searchMap.length }, () => 3);\n\n  const polylineClick = (positionData) => {\n    setInfoPosition({\n      lat: positionData.gps.coordinates[3][1],\n      lng: positionData.gps.coordinates[3][0],\n    });\n    console.log(\"qqq\", positionData);\n    setPropsId(positionData._id);\n    // setPropsPosition(positionData)\n    setTarget(true);\n  };\n\n  function mouseOver(index) {\n    strokeWeights[index] = 10;\n    setStrokeWeight(strokeWeights);\n  }\n\n  function mouseOut(index) {\n    strokeWeights[index] = 3;\n    setStrokeWeight(strokeWeights);\n  }\n\n  //polyline\n\n  //infoWindow\n  const closeClick = () => {\n    setTarget(false);\n  };\n\n  const divStyle = {\n    background: `white`,\n    border: `1px solid #ccc`,\n    padding: 15,\n  };\n\n  const oneRoute = () => {\n    dispatch({\n      type: LOAD_MAP_REQUEST,\n      data: propsId,\n    });\n\n    Router.push({\n      pathname: \"/Route/[id]\",\n      query: { id: propsId},\n    });\n\n    console.log(\"dong\", searchMap);\n  };\n\n  //infoWindow\n\n  //   const [mapState,setMapState]=useState()\n  // const {mapState}=useSelector((state)=>state.map)\n  const bikeSelectMap = () => {\n    setMapState(\"B\");\n    setIsState(true);\n  };\n\n  const runningSelectMap = () => {\n    setMapState(\"R\");\n    setIsState(true);\n  };\n\n  useEffect(() => {\n    if (mapState === \"B\" && isState === true) {\n      dispatch({\n        type: BIKE_MAP_REQUEST,\n        data: {\n          event: mapState,\n          north: {\n            lat: mapref.getBounds().getNorthEast().lat(),\n            lng: mapref.getBounds().getNorthEast().lng(),\n          },\n          south: {\n            lat: mapref.getBounds().getSouthWest().lat(),\n            lng: mapref.getBounds().getSouthWest().lng(),\n          },\n        },\n      });\n      setIsState(false);\n    } else if (mapState === \"R\" && isState === true) {\n      dispatch({\n        type: RUNNING_MAP_REQUEST,\n        data: {\n          event: mapState,\n          north: {\n            lat: mapref.getBounds().getNorthEast().lat(),\n            lng: mapref.getBounds().getNorthEast().lng(),\n          },\n          south: {\n            lat: mapref.getBounds().getSouthWest().lat(),\n            lng: mapref.getBounds().getSouthWest().lng(),\n          },\n        },\n      });\n      setIsState(false);\n    }\n  }, [mapState, isState]);\n\n  const [btn, setBtn] = useState(false);\n\n  return (\n    <Container>\n      <CardDiv>\n        <Row>\n          <Col span={12}>\n            <LeftDiv>\n              <Title>코스찾기</Title>\n              <div>\n                <Search\n                  loading={searchmapLoading}\n                  onPressEnter={handleButton}\n                  placeholder=\"코스를 입력해주세요\"\n                  enterButton\n                  // allowClear\n                  icon={<SearchOutlined />}\n                  id=\"address\"\n                  size=\"large\"\n                />\n                <Buttons>\n                  <Button className=\"btn1\" onClick={bikeSelectMap}>\n                    자전거\n                  </Button>\n                  <Button className=\"btn2\" onClick={runningSelectMap}>\n                    달리기\n                  </Button>\n                </Buttons>\n              </div>\n              {/* <RowDiv gutter={[0, 16]}> */}\n              {searchMap.map((p, index) => (\n                // <Col span={24}>\n                <SearchList\n                  setInfoPosition={setInfoPosition}\n                  setPropsId={setPropsId}\n                  setTarget={setTarget}\n                  index={index}\n                  setStrokeWeight={setStrokeWeight}\n                  list={p}\n                  key={p.id}\n                ></SearchList>\n                // </Col>\n              ))}\n              {/* </RowDiv> */}\n              <Page\n                defaultCurrent={1}\n                defaultPageSize={3}\n                // total={searchMap.lenth}\n                total={10}\n                // onChange={onChangePage}\n              />\n            </LeftDiv>\n          </Col>\n\n          <Col span={12}>\n            <LoadScript googleMapsApiKey=\"AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE\">\n              <GoogleMap\n                id=\"marker-example\"\n                mapContainerStyle={mapContainerStyle}\n                zoom={13}\n                center={geom}\n                onLoad={handleOnLoad}\n                onDragEnd={handleCenterChanged}\n                // onZoomChanged={handleCenterChanged}\n              >\n                <MarkerClusterer options={optionss}>\n                  {(clusterer) =>\n                    searchMap.map((p) => (\n                      <Marker\n                        key={createKey(p)}\n                        position={{\n                          lat: p.start_latlng[1],\n                          lng: p.start_latlng[0],\n                        }}\n                        clusterer={clusterer}\n                        icon={{\n                          scaledSize: new google.maps.Size(30, 30),\n                        }}\n                      />\n                    ))\n                  }\n                </MarkerClusterer>\n\n                {searchMap.map((m, index) => (\n                  <Polyline\n                    onRightClick={() => polylineClick(m)}\n                    onMouseOver={() => mouseOver(index)}\n                    onMouseOut={() => mouseOut(index)}\n                    options={{\n                      strokeWeight: strokeWeight[index],\n                      clickable: true,\n                      visible: true,\n                      strokeColor: \"#FF0000\",\n                      fillColor: \"#FF0000\",\n                    }}\n                    path={m.gps.coordinates.map((p) => ({\n                      lat: p[1],\n                      lng: p[0],\n                    }))}\n                  ></Polyline>\n                ))}\n\n                {target && (\n                  <InfoWindow position={infoPosition} onCloseClick={closeClick}>\n                    <div style={divStyle}>\n                      <h1>동영</h1>\n                      {/* <Link href={{\n                        pathname:'/Route/[id]',\n                        query: {id:propsId},\n                    }}><a>상세보기</a></Link>\n                     */}\n                      <button onClick={oneRoute}>상세보기</button>\n                    </div>\n                  </InfoWindow>\n                )}\n              </GoogleMap>\n            </LoadScript>\n          </Col>\n        </Row>\n      </CardDiv>\n    </Container>\n  );\n}\n\nexport default selectMap;\n\nexport const getStaticProps = wrapper.getStaticProps(async (context) => {\n  context.store.dispatch({\n    type: LOAD_MY_LOCATION_REQUEST,\n    data: {\n      north: {\n        lat: mapref.getBounds().getNorthEast().lat(),\n        lng: mapref.getBounds().getNorthEast().lng(),\n      },\n      south: {\n        lat: mapref.getBounds().getSouthWest().lat(),\n        lng: mapref.getBounds().getSouthWest().lng(),\n      },\n      event: mapState,\n    },\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\n\nconst Container = styled.div`\n  // 전체 div\n  width: 100%;\n  // height: 100%;\n\n  .ant-input {\n    border-radius: 15px;\n    border-radius: 1px solid #1890ff;\n  }\n\n  .ant-input-group-wrapper {\n    margin-bottom: 20px;\n  }\n\n  .ant-input-group {\n    width: 90%;\n    width: 100%;\n    // margin: 0 auto;\n  }\n\n  .ant-input-search {\n    border-radius: 9px !important;\n    // position: relative;\n    // right: 15px;\n    // z-index: 1;\n  }\n\n  .ant-input-search-button {\n    // border-radius: 55% !important;\n    // border-top-right-radius: 9px !important;\n    // border-bottom-right-radius: 9px !important;\n  }\n\n  .ant-card {\n    width: 100%;\n    border-radius: 9px;\n    box-shadow: 0 1px 2px -2px rgb(0 0 0 / 16%), 0 3px 6px 0 rgb(0 0 0 / 12%);\n    margin: 0;\n  }\n`;\n\nconst mapContainerStyle = {\n  // Google Map 스타일\n  width: \"100%\",\n  height: \"80vh\",\n  borderRadius: \"15px\",\n  padding: \"0 30px\",\n};\n\nexport const CardDiv = styled(Card)`\n  width: 100%;\n\n  border-radius: 15px;\n  box-shadow: 0 1px 2px -2px rgb(0 0 0 / 16%), 0 3px 6px 0 rgb(0 0 0 / 12%);\n\n  .ant-card-body {\n    padding: 10px;\n  }\n`;\n\n// const RightDiv = styled.div``;\n\nconst LeftDiv = styled.div`\n  display: inline-block;\n  position: relative;\n  width: 100%;\n  height: 100%;\n  padding: 0 5%;\n`;\n\nexport const Title = styled.p`\n  font-size: 30px;\n  font-weight: bold;\n  margin: 20px auto;\n  margin-top: 0;\n`;\n\nconst Page = styled(Pagination)`\n  position: absolute;\n  left: 34%;\n  bottom: 1%;\n  margin-top: 32px;\n  text-align: center;\n`;\n\nconst Buttons = styled.div`\n  display: inline-block;\n  width: 90%;\n  width: 100%;\n  margin-bottom: 20px;\n\n  Button {\n    height: 33px;\n    border-radius: 15px;\n    margin-right: 10px;\n  }\n\n  Button:hover {\n    background: #1683e8;\n    border-color: #1683e8;\n    color: #fff;\n  }\n\n  Button:focus {\n    background: #1683e8;\n    color: #fff;\n  }\n`;\n\nconst RowDiv = styled(Row)`\n  display: inline-block;\n  width: 100%;\n  height: 75%;\n  // border: 1px solid grey;\n  padding-bottom: 30px;\n`;"]},"metadata":{},"sourceType":"module"}