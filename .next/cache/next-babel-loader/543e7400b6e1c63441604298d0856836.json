{"ast":null,"code":"var _jsxFileName = \"/Users/dong/CapstonProject/pages/polyline.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { Polyline, Marker, StreetViewPanorama, MarkerClusterer } from '@react-google-maps/api';\nimport AppLayout from '../component/AppLayout'; // import Streetview from 'react-google-streetview';// import RecordElevation from '../component/RecordElavation'\n\nimport { SEARCH_MAP_REQUEST } from '../reducers/map';\nimport { LOAD_MAP_REQUEST } from '../reducers/map';\nimport GeomHandle from '../component/GoogleMap';\nimport { Input, Col, Row } from 'antd';\nimport SideBar from '../component/Layout/SideBar';\nimport { InfoWindow } from '@react-google-maps/api';\nimport Router from 'next/router'; // import {useHistory} from \n\nimport Link from 'next/link'; // import InfoWindow from '../component/InfoWindow';\n\nconst iconPin = {\n  path: 'https://png.pngtree.com/png-clipart/20190921/original/pngtree-label-free-png-picture-png-image_4700172.jpg',\n  scale: 1\n};\nconst mapContainerStyle = {\n  height: \"400px\",\n  width: \"800px\"\n};\n\nconst call = () => {\n  console.log('cccccc');\n};\n\nconst center = {\n  lat: 35.969997373905,\n  lng: 128.45170755523503\n};\nconst path = [[{\n  lat: 35.969997373905,\n  lng: 128.45170755523503\n}, {\n  lat: 35.985501427015464,\n  lng: 128.40407191943035\n}, {\n  lat: 35.89580489690752,\n  lng: 128.62238368221892\n}], [{\n  lat: 35.24651100148735,\n  lng: 128.87070362130143\n}, {\n  lat: 35.24752656439432,\n  lng: 128.8729993854958\n}, {\n  lat: 35.248984786322424,\n  lng: 128.87318007064073\n}, {\n  lat: 35.25018259185734,\n  lng: 128.87332887017186\n}, {\n  lat: 35.25065129355367,\n  lng: 128.87505069331763\n}, {\n  lat: 35.25145581526787,\n  lng: 128.87358573620605\n}]];\nconst markerPosition = [{\n  lat: 35.89580489690752,\n  lng: 128.62238368221892\n}, {\n  lat: 35.25145581526787,\n  lng: 128.87358573620605\n}];\n\nfunction createKey(location) {\n  return location.lat + location.lng;\n}\n\nconst optionss = {\n  imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m' // so you must have m1.png, m2.png, m3.png, m4.png, m5.png and m6.png in that folder\n\n};\n\nfunction polyline() {\n  //////\n  const {\n    searchMap\n  } = useSelector(state => state.map);\n  const dispatch = useDispatch();\n  const {\n    0: propsPosition,\n    1: setPropsPosition\n  } = useState(); //InfoWindow\n\n  const {\n    0: target,\n    1: setTarget\n  } = useState(false);\n  const divStyle = {\n    background: `white`,\n    border: `1px solid #ccc`,\n    padding: 15\n  };\n  const {\n    0: infoPosition,\n    1: setInfoPosition\n  } = useState({\n    lat: '',\n    lng: ''\n  });\n  const {\n    0: propsId,\n    1: setPropsId\n  } = useState();\n\n  const closeClick = () => {\n    setTarget(false);\n  };\n\n  const i = 1;\n\n  const oneRoute = () => {\n    dispatch({\n      type: LOAD_MAP_REQUEST,\n      data: propsId\n    });\n    Router.push({\n      pathname: '/Route/[id]',\n      query: {\n        id: propsId\n      }\n    });\n    console.log('dong', searchMap);\n  }; //InfoWindow\n  //polyline\n\n\n  const {\n    0: strokeWeight,\n    1: setStrokeWeight\n  } = useState(Array.from({\n    length: searchMap.length\n  }, () => 5));\n  const strokeWeights = Array.from({\n    length: searchMap.length\n  }, () => 5);\n\n  const onLoad = polyline => {\n    console.log('polyline: ', polyline);\n  };\n\n  function mouseOut(index) {\n    strokeWeights[index] = 5;\n    setStrokeWeight(strokeWeights); // setStrokeWeight(5)\n\n    console.log('aaa');\n  }\n\n  function mouseOver(index) {\n    console.log('ssss', strokeWeight);\n    strokeWeights[index] = 10;\n    setStrokeWeight(strokeWeights);\n    console.log('over');\n  }\n\n  const polylineClick = positionData => {\n    console.log('click');\n    console.log('cc', searchMap);\n    setInfoPosition({\n      lat: positionData.gps.coordinates[3][1],\n      lng: positionData.gps.coordinates[3][0]\n    });\n    setPropsId(positionData.id);\n    setPropsPosition(positionData);\n    setTarget(true);\n    console.log('ppp', positionData);\n  };\n\n  const options = {\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.8,\n    // strokeWeight: strokeWeight,\n    fillColor: '#FF0000',\n    fillOpacity: 0.35,\n    clickable: true,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: 30000,\n    //-27부터 호주 시작해서 점찍고 점찍고 한다\n    paths: [[{\n      lat: 35.969997373905,\n      lng: 128.45170755523503\n    }, {\n      lat: 35.985501427015464,\n      lng: 128.40407191943035\n    }, {\n      lat: 35.89580489690752,\n      lng: 128.62238368221892\n    }], [{\n      lat: 35.24731788471166,\n      lng: 128.86906207420088\n    }, {\n      lat: 35.260354548127424,\n      lng: 128.81198466603703\n    }]],\n    zIndex: 1\n  }; //polyline\n\n  const {\n    0: elev,\n    1: setElev\n  } = useState();\n  const {\n    0: mapref,\n    1: setMapRef\n  } = useState(null);\n\n  const handleOnLoad = map => {\n    setMapRef(map);\n    const elevator = new google.maps.ElevationService();\n    setElev(elevator);\n    console.log(elevator);\n    console.log('onLoad');\n  };\n\n  const handleCenterChanged = () => {\n    if (mapref) {\n      // ElevationService()\n      const zoom = mapref.getZoom(); // const ele=mapref.getElevationService();\n\n      const lat = mapref.getCenter().lat();\n      const lng = mapref.getCenter().lng();\n      const ne = mapref.getBounds().getNorthEast();\n      const nw = mapref.getBounds().getNorthWest();\n      const sw = mapref.getBounds().getSouthWest();\n      const se = mapref.getBounds().getSouthEast();\n      elev.getElevationForLocations({\n        locations: lat\n      }, (results, status) => {\n        console.log('s', results[0].elevation);\n      }); // displayLocationElevation(lat, elevator, infowindow);\n\n      console.log('ddddddd', lat, lng, zoom);\n      console.log('nnn', ne, nw, sw, se);\n    }\n  };\n\n  const myLatLng = {\n    lat: -25.363,\n    lng: 131.044\n  }; // const map = new google.maps.Map(document.getElementById(\"map\"), {\n  //   zoom: 4,\n  //   center: myLatLng,\n  // });\n\n  const {\n    0: geom,\n    1: setGeom\n  } = useState({\n    lat: 35.969997373905,\n    lng: 128.45170755523503\n  });\n\n  const handleButton = async () => {\n    const currentAddr = document.getElementById('address').value;\n\n    if (currentAddr) {\n      const {\n        lat,\n        lng\n      } = await GeomHandle(currentAddr);\n      setGeom({\n        lat: lat,\n        lng: lng\n      });\n      dispatch({\n        type: SEARCH_MAP_REQUEST,\n        data: '1'\n      });\n      console.log('aaa', searchMap);\n    }\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 9\n    }\n  }, __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 13\n    }\n  }, __jsx(Col, {\n    span: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 13\n    }\n  }, __jsx(SideBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 17\n    }\n  })), __jsx(Col, {\n    span: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 17\n    }\n  }, \"\\uAC80\\uC0C9\\uD558\\uAE30\", __jsx(Input.Search, {\n    id: \"address\",\n    style: {\n      verticalAlign: 'middle',\n      marginLeft: '10px',\n      width: '500px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 9\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 105\n    }\n  }), __jsx(\"button\", {\n    onClick: handleButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 9\n    }\n  }, \"\\uD074\\uB9AD\"), __jsx(LoadScript, {\n    googleMapsApiKey: \"AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 9\n    }\n  }, __jsx(GoogleMap, {\n    id: \"marker-example\",\n    mapContainerStyle: mapContainerStyle,\n    zoom: 13,\n    center: geom,\n    onLoad: handleOnLoad,\n    onDragEnd: handleCenterChanged,\n    onZoomChanged: handleCenterChanged,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 11\n    }\n  }, __jsx(MarkerClusterer, {\n    options: optionss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 1\n    }\n  }, clusterer => searchMap.map(p => __jsx(Marker, {\n    key: createKey(p),\n    position: {\n      lat: p.start_latlng[1],\n      lng: p.start_latlng[0]\n    },\n    onClick: call,\n    clusterer: clusterer,\n    icon: {\n      scaledSize: new google.maps.Size(30, 30)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 15\n    }\n  }))), searchMap.map((m, index) => __jsx(Polyline, {\n    onRightClick: () => polylineClick(m),\n    onMouseOver: () => mouseOver(index),\n    onMouseOut: () => mouseOut(index),\n    onLoad: onLoad,\n    options: {\n      strokeWeight: strokeWeight[index],\n      clickable: true,\n      visible: true,\n      strokeColor: '#FF0000',\n      fillColor: '#FF0000'\n    },\n    path: m.gps.coordinates.map(p => ({\n      lat: p[1],\n      lng: p[0]\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 13\n    }\n  })), target && __jsx(InfoWindow, {\n    position: infoPosition,\n    onCloseClick: closeClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 14\n    }\n  }, __jsx(\"div\", {\n    style: divStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 13\n    }\n  }, \"\\uB3D9\\uC601\"), __jsx(\"button\", {\n    onClick: oneRoute,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 13\n    }\n  }, \"\\uC0C1\\uC138\\uBCF4\\uAE30\"))))))));\n}\n\nexport default /*#__PURE__*/React.memo(polyline);","map":{"version":3,"sources":["/Users/dong/CapstonProject/pages/polyline.js"],"names":["React","useState","useEffect","useDispatch","useSelector","GoogleMap","LoadScript","Polyline","Marker","StreetViewPanorama","MarkerClusterer","AppLayout","SEARCH_MAP_REQUEST","LOAD_MAP_REQUEST","GeomHandle","Input","Col","Row","SideBar","InfoWindow","Router","Link","iconPin","path","scale","mapContainerStyle","height","width","call","console","log","center","lat","lng","markerPosition","createKey","location","optionss","imagePath","polyline","searchMap","state","map","dispatch","propsPosition","setPropsPosition","target","setTarget","divStyle","background","border","padding","infoPosition","setInfoPosition","propsId","setPropsId","closeClick","i","oneRoute","type","data","push","pathname","query","id","strokeWeight","setStrokeWeight","Array","from","length","strokeWeights","onLoad","mouseOut","index","mouseOver","polylineClick","positionData","gps","coordinates","options","strokeColor","strokeOpacity","fillColor","fillOpacity","clickable","draggable","editable","visible","radius","paths","zIndex","elev","setElev","mapref","setMapRef","handleOnLoad","elevator","google","maps","ElevationService","handleCenterChanged","zoom","getZoom","getCenter","ne","getBounds","getNorthEast","nw","getNorthWest","sw","getSouthWest","se","getSouthEast","getElevationForLocations","locations","results","status","elevation","myLatLng","geom","setGeom","handleButton","currentAddr","document","getElementById","value","verticalAlign","marginLeft","clusterer","p","start_latlng","scaledSize","Size","m","memo"],"mappings":"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","sourcesContent":["import React, {useState,useEffect} from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { Polyline ,Marker,StreetViewPanorama,MarkerClusterer} from '@react-google-maps/api';\nimport AppLayout from '../component/AppLayout';\n// import Streetview from 'react-google-streetview';// import RecordElevation from '../component/RecordElavation'\nimport { SEARCH_MAP_REQUEST } from '../reducers/map';\nimport {LOAD_MAP_REQUEST} from '../reducers/map'\nimport GeomHandle from '../component/GoogleMap'\nimport { Input,Col,Row } from 'antd';\nimport SideBar from '../component/Layout/SideBar';\nimport { InfoWindow } from '@react-google-maps/api';\nimport Router from 'next/router'\n// import {useHistory} from \nimport Link from 'next/link'\n// import InfoWindow from '../component/InfoWindow';\n\n\n\nconst iconPin={\n    path:'https://png.pngtree.com/png-clipart/20190921/original/pngtree-label-free-png-picture-png-image_4700172.jpg',\n    scale:1\n}\n\n\n\nconst mapContainerStyle = {\n  height: \"400px\",\n  width: \"800px\"\n};\n\nconst call=()=>{\n    console.log('cccccc')\n}\n\nconst center = {lat:  35.969997373905, lng: 128.45170755523503};\n\n\n\n\n\nconst path = [\n[\n    {lat:  35.969997373905, lng: 128.45170755523503},\n    {lat:35.985501427015464, lng:128.40407191943035},\n\n    {lat: 35.89580489690752, lng: 128.62238368221892}\n    \n]\n,\n[\n    {lat:  35.24651100148735,   lng: 128.87070362130143},\n   \n    {lat: 35.24752656439432,   lng:128.8729993854958},\n    {lat:35.248984786322424, lng:128.87318007064073},\n    {lat:35.25018259185734, lng:128.87332887017186},\n    {lat:35.25065129355367, lng:128.87505069331763},\n    {\n        lat:35.25145581526787, lng:128.87358573620605\n    }\n\n    \n]\n\n\n   \n    \n];\n\nconst markerPosition=[\n    {lat: 35.89580489690752, lng: 128.62238368221892},{\n        lat:35.25145581526787, lng:128.87358573620605\n    }\n]\n\n\nfunction createKey(location) {\n    return location.lat + location.lng\n  }\n\n\nconst optionss = {\n    imagePath:\n      'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m', // so you must have m1.png, m2.png, m3.png, m4.png, m5.png and m6.png in that folder\n  }\n\n\nfunction polyline() {\n\n    //////\n\n    const {searchMap}=useSelector((state)=>state.map)\n\n    const dispatch=useDispatch()\n\n    const [propsPosition,setPropsPosition]=useState()\n\n\n//InfoWindow\nconst [target,setTarget]=useState(false)\n\nconst divStyle = {\n    background: `white`,\n    border: `1px solid #ccc`,\n    padding: 15\n  }\n\nconst [infoPosition,setInfoPosition]=useState({\n    lat:'',\n    lng:'',\n})\n\nconst [propsId,setPropsId]=useState()\n\nconst closeClick=()=>{\n    setTarget(false)\n}\nconst i=1\n\nconst oneRoute=()=>{\n    dispatch({\n               type:LOAD_MAP_REQUEST,\n               data:propsId\n             })\n    Router.push({\n        pathname: '/Route/[id]',\n        query: {id:propsId},\n      });\n\n      console.log('dong',searchMap)\n}\n\n\n//InfoWindow\n\n    //polyline\n\nconst [strokeWeight,setStrokeWeight]=useState(Array.from({length: searchMap.length}, () => 5))\nconst strokeWeights= Array.from({length: searchMap.length}, () => 5);\n\nconst onLoad = polyline => {\n    console.log('polyline: ', polyline)\n   \n  };\n\n\n\nfunction mouseOut(index){\n    strokeWeights[index]=5\n    setStrokeWeight(strokeWeights)\n    // setStrokeWeight(5)\n    console.log('aaa')\n\n}\n\nfunction mouseOver(index){\n    console.log('ssss',strokeWeight)\n    strokeWeights[index]=10\n    setStrokeWeight(strokeWeights)\n    console.log('over')\n}\n\n\n\n\nconst polylineClick=(positionData)=>{\n    console.log('click')\n    console.log('cc',searchMap)\n\n    setInfoPosition({\n        lat:positionData.gps.coordinates[3][1],\n        lng:positionData.gps.coordinates[3][0]\n    })\n    setPropsId(positionData.id)\n    setPropsPosition(positionData)\n    setTarget(true)\n    console.log('ppp',positionData)\n    \n}\n\nconst options = {\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.8,\n    // strokeWeight: strokeWeight,\n    fillColor: '#FF0000',\n    fillOpacity: 0.35,\n    clickable: true,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: 30000,\n    //-27부터 호주 시작해서 점찍고 점찍고 한다\n    paths: [\n      \n          [\n              {lat:  35.969997373905, lng: 128.45170755523503},\n              {lat:35.985501427015464, lng:128.40407191943035},\n          \n              {lat: 35.89580489690752, lng: 128.62238368221892}\n              \n          ]\n          ,\n          [\n              {lat:  35.24731788471166,  lng: 128.86906207420088},\n             \n              {lat: 35.260354548127424,  lng:128.81198466603703}\n              \n          ]\n        \n    \n      \n    ],\n    zIndex: 1\n  };\n\n\n\n//polyline\n\n\n\n\n    const [elev,setElev]=useState()\n    const [mapref, setMapRef] = useState(null);\n    const handleOnLoad = map => {\n      setMapRef(map);\n      const elevator = new google.maps.ElevationService();\n      setElev(elevator)\n      console.log(elevator)\n      console.log('onLoad')\n    };\n    const handleCenterChanged = () => {\n      if (mapref) {\n        // ElevationService()\n        const zoom=mapref.getZoom()\n        \n        // const ele=mapref.getElevationService();\n        const lat = mapref.getCenter().lat();\n        const lng = mapref.getCenter().lng();\n        const ne=mapref.getBounds().getNorthEast();\n        const nw=mapref.getBounds().getNorthWest();\n        const sw=mapref.getBounds().getSouthWest();\n        const se=mapref.getBounds().getSouthEast();\n        elev.getElevationForLocations({locations:lat},(results,status)=>{\n            console.log('s',results[0].elevation)\n\n        }\n        )\n        // displayLocationElevation(lat, elevator, infowindow);\n        console.log('ddddddd',lat,lng,zoom);\n        console.log('nnn',ne,nw,sw,se)\n      }\n    };\n\n    \n\n    \n   \n\n  \n\n\n    const myLatLng = { lat: -25.363, lng: 131.044 };\n    // const map = new google.maps.Map(document.getElementById(\"map\"), {\n    //   zoom: 4,\n    //   center: myLatLng,\n    // });\n    const [geom ,setGeom]=useState({lat:35.969997373905, lng: 128.45170755523503})\n\n    const handleButton = async() => {\n        const currentAddr = document.getElementById('address').value\n        if (currentAddr){\n          const {lat, lng} = await GeomHandle(currentAddr)\n          setGeom({lat:lat,lng:lng})\n\n          dispatch({\n            type:SEARCH_MAP_REQUEST,\n            data:'1'\n        })\n        console.log('aaa',searchMap)\n\n\n\n       \n        }\n      }\n\n      \n  \n    return (\n        <div>\n            <Row>\n            <Col span={4}>\n                <SideBar ></SideBar>\n\n                </Col>\n                <Col span={12}>\n                검색하기\n        <Input.Search id=\"address\"  style={{verticalAlign:'middle' ,marginLeft:'10px',width:'500px'}} /><br></br>\n        <button onClick={handleButton}>클릭</button>\n              \n\n        <LoadScript\n        googleMapsApiKey=\"AIzaSyAYsO2CGL0YCjMoLk29eyitFC2PIJnJbYE\"\n        >\n            \n          <GoogleMap\n            id=\"marker-example\"\n            mapContainerStyle={mapContainerStyle}\n            zoom={13}\n            center={geom}\n            onLoad={handleOnLoad}\n            onDragEnd={handleCenterChanged}\n            onZoomChanged={handleCenterChanged}\n          \n            \n          >\n\n<MarkerClusterer options={optionss}>\n          {(clusterer) =>\n            searchMap.map((p) => (\n              <Marker  key={createKey(p)} position={{lat:p.start_latlng[1],lng:p.start_latlng[0]}} onClick={call} clusterer={clusterer}  icon={{\n              scaledSize: new google.maps.Size(30,30),} } />\n            ))\n          }\n        </MarkerClusterer>\n      \n\n        {searchMap.map((m,index)=>(\n            <Polyline  onRightClick={()=>polylineClick(m)} onMouseOver={()=>mouseOver(index)} onMouseOut={()=>mouseOut(index)} onLoad={onLoad}  options={{strokeWeight:strokeWeight[index],clickable:true,visible:true,strokeColor: '#FF0000',fillColor: '#FF0000',}} path={m.gps.coordinates.map((p)=>(\n                {\n                    lat:p[1],\n                    lng:p[0]\n                }\n            ))}></Polyline>\n            \n            ))}\n            \n    {target&&<InfoWindow position={infoPosition} onCloseClick={closeClick}>\n        <div style={divStyle}>\n            <h1>동영</h1>\n                {/* <Link href={{\n                    pathname:'/Route/[id]',\n                    query: {id:propsId},\n                }}><a>상세보기</a></Link> */}\n            <button onClick={oneRoute}>상세보기</button>\n        </div>\n        </InfoWindow>} \n         \n\n        \n       \n            \n          </GoogleMap>\n          </LoadScript>\n             \n\n                </Col>\n\n\n            </Row>\n           \n       \n         </div>\n\n    )\n  }\n  \n  export default React.memo(polyline)"]},"metadata":{},"sourceType":"module"}