{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(loadPosts),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPosts),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, call, fork, put, takeLatest, take } from 'redux-saga/effects';\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_SUCCESS, LOAD_POSTS_REQUEST, ADD_COMMENT_REQUEST, ADD_COMMENT_FAILURE, ADD_COMMENT_SUCCESS } from '../reducers/post';\n\nfunction addPostAPI(data) {// return axios.post('/signup',data)\n}\n\nfunction addPost(action) {\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          // const result=yield call(addPostAPI,action.data)\n          console.log('ddddddddd');\n          _context.next = 4;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: action.data\n          });\n\n        case 4:\n          _context.next = 10;\n          break;\n\n        case 6:\n          _context.prev = 6;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 10;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 6]]);\n}\n\nfunction loadPostsAPI(data) {// return axios.post('/loadPosts',data)\n}\n\nfunction loadPosts(action) {\n  return _regeneratorRuntime.wrap(function loadPosts$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return put({\n            type: LOAD_POSTS_SUCCESS,\n            data: action.data\n          });\n\n        case 3:\n          _context2.next = 9;\n          break;\n\n        case 5:\n          _context2.prev = 5;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 9;\n          return put({\n            type: LOAD_POSTS_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 5]]);\n}\n\nfunction addCommentAPI(data) {// return axios.post('/loadPosts',data)\n}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          // const result = yield call(addCommentAPßI,action.data)\n          console.log(action);\n          _context3.next = 4;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data\n          });\n\n        case 4:\n          _context3.next = 10;\n          break;\n\n        case 6:\n          _context3.prev = 6;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 10;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 10:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 6]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchLoadPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadPosts$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchAddPost), fork(watchLoadPosts), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["/Users/dong/CapstonProject/sagas/post.js"],"names":["addPost","loadPosts","addComment","watchAddPost","watchLoadPosts","watchAddComment","rootSaga","all","call","fork","put","takeLatest","take","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_SUCCESS","LOAD_POSTS_REQUEST","ADD_COMMENT_REQUEST","ADD_COMMENT_FAILURE","ADD_COMMENT_SUCCESS","addPostAPI","data","action","console","log","type","error","response","loadPostsAPI","addCommentAPI"],"mappings":"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","sourcesContent":["\nimport { all,call,fork,put,takeLatest, take} from 'redux-saga/effects'\n\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_SUCCESS,LOAD_POSTS_REQUEST, ADD_COMMENT_REQUEST,ADD_COMMENT_FAILURE,ADD_COMMENT_SUCCESS} from '../reducers/post'\n\n\nfunction addPostAPI(data){\n// return axios.post('/signup',data)\n}\n\nfunction* addPost(action){\n\n    try{\n        // const result=yield call(addPostAPI,action.data)\n        console.log('ddddddddd')\n          yield put({\n              type:ADD_POST_SUCCESS,\n              data:action.data\n          })\n      }catch(err){\n          yield put({\n              type:ADD_POST_FAILURE,\n              error:err.response.data,\n               \n          })\n      }\n}\n\n\nfunction loadPostsAPI(data){\n    // return axios.post('/loadPosts',data)\n    }\n    \n\nfunction* loadPosts(action){\n    try{\n        // const result = yield call(loadPostsAPI,action.data)\n        yield put({\n            type:LOAD_POSTS_SUCCESS,\n            data:action.data\n        })\n\n    }catch(err){\n        yield put({\n            type:LOAD_POSTS_FAILURE,\n            error:err.response.data,\n             \n        })\n\n    }\n}\n\nfunction addCommentAPI(data){\n    // return axios.post('/loadPosts',data)\n    }\n    \n\nfunction* addComment(action){\n    try{\n        // const result = yield call(addCommentAPßI,action.data)\n        console.log(action)\n        yield put({\n            type:ADD_COMMENT_SUCCESS,\n            data:action.data\n        })\n\n    }catch(err){\n        yield put({\n            type:ADD_COMMENT_FAILURE,\n            error:err.response.data,\n             \n        })\n\n    }\n}\n\n\n\nfunction* watchAddPost(){\n    yield takeLatest(ADD_POST_REQUEST,addPost)\n}\n\nfunction* watchLoadPosts(){\n    yield takeLatest(LOAD_POSTS_REQUEST,loadPosts)\n}\nfunction* watchAddComment(){\n    yield takeLatest(ADD_COMMENT_REQUEST,addComment)\n\n\n}\n\nexport default function* rootSaga(){\n\n    yield all([\n        fork(watchAddPost),\n        fork(watchLoadPosts),\n        fork(watchAddComment),\n        \n      \n    ])\n\n}\n"]},"metadata":{},"sourceType":"module"}