{"ast":null,"code":"import NextAuth from \"next-auth\";\nimport GoogleProvider from \"next-auth/providers/google\";\nimport LineProvider from \"next-auth/providers/line\";\nexport default NextAuth({\n  providers: [LineProvider({\n    clientId: process.env.LINE_CLIENT_ID,\n    clientSecret: process.env.LINE_CLIENT_SECRET,\n    disable_auto_login: false\n  }), GoogleProvider({\n    clientId: process.env.GOOGLE_CLIENT_ID,\n    clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n    authorization: {\n      params: {\n        prompt: \"consent\",\n        access_type: \"offline\",\n        response_type: \"code\"\n      }\n    }\n  })],\n  jwt: {\n    encryption: true\n  },\n  secret: process.env.SECRET,\n  callbacks: {\n    async jwt({\n      token,\n      user,\n      account,\n      profile\n    }) {\n      if (account !== null && account !== void 0 && account.accessToken) {\n        token.accessToken = account.accessToken;\n      }\n\n      return token;\n    },\n\n    async redirect({\n      url,\n      _baseUrl\n    }) {\n      if (url === \"/dashboard\") {\n        return Promise.resolve(\"/\");\n      }\n\n      return Promise.resolve(\"/\");\n    },\n\n    async session({\n      session,\n      token,\n      user\n    }) {\n      session.accessToken = token.accessToken;\n      return session;\n    },\n\n    async signIn({\n      user,\n      account,\n      profile,\n      email\n    }) {\n      const isAllowedToSignIn = true;\n\n      if (isAllowedToSignIn) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n  }\n});","map":{"version":3,"sources":["C:/Next/CAPSTONE_UPDATE/pages/api/auth/[...nextauth].js"],"names":["NextAuth","GoogleProvider","LineProvider","providers","clientId","process","env","LINE_CLIENT_ID","clientSecret","LINE_CLIENT_SECRET","disable_auto_login","GOOGLE_CLIENT_ID","GOOGLE_CLIENT_SECRET","authorization","params","prompt","access_type","response_type","jwt","encryption","secret","SECRET","callbacks","token","user","account","profile","accessToken","redirect","url","_baseUrl","Promise","resolve","session","signIn","email","isAllowedToSignIn"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AAEA,eAAeF,QAAQ,CAAC;AACtBG,EAAAA,SAAS,EAAE,CACTD,YAAY,CAAC;AACXE,IAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,cADX;AAEXC,IAAAA,YAAY,EAAEH,OAAO,CAACC,GAAR,CAAYG,kBAFf;AAGXC,IAAAA,kBAAkB,EAAE;AAHT,GAAD,CADH,EAMTT,cAAc,CAAC;AACbG,IAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYK,gBADT;AAEbH,IAAAA,YAAY,EAAEH,OAAO,CAACC,GAAR,CAAYM,oBAFb;AAGbC,IAAAA,aAAa,EAAE;AACbC,MAAAA,MAAM,EAAE;AACNC,QAAAA,MAAM,EAAE,SADF;AAENC,QAAAA,WAAW,EAAE,SAFP;AAGNC,QAAAA,aAAa,EAAE;AAHT;AADK;AAHF,GAAD,CANL,CADW;AAmBtBC,EAAAA,GAAG,EAAE;AACHC,IAAAA,UAAU,EAAE;AADT,GAnBiB;AAsBtBC,EAAAA,MAAM,EAAEf,OAAO,CAACC,GAAR,CAAYe,MAtBE;AAuBtBC,EAAAA,SAAS,EAAE;AACT,UAAMJ,GAAN,CAAU;AAAEK,MAAAA,KAAF;AAASC,MAAAA,IAAT;AAAeC,MAAAA,OAAf;AAAwBC,MAAAA;AAAxB,KAAV,EAA6C;AAC3C,UAAID,OAAJ,aAAIA,OAAJ,eAAIA,OAAO,CAAEE,WAAb,EAA0B;AACxBJ,QAAAA,KAAK,CAACI,WAAN,GAAoBF,OAAO,CAACE,WAA5B;AACD;;AACD,aAAOJ,KAAP;AACD,KANQ;;AAOT,UAAMK,QAAN,CAAe;AAAEC,MAAAA,GAAF;AAAOC,MAAAA;AAAP,KAAf,EAAkC;AAChC,UAAID,GAAG,KAAK,YAAZ,EAA0B;AACxB,eAAOE,OAAO,CAACC,OAAR,CAAgB,GAAhB,CAAP;AACD;;AACD,aAAOD,OAAO,CAACC,OAAR,CAAgB,GAAhB,CAAP;AACD,KAZQ;;AAaT,UAAMC,OAAN,CAAc;AAAEA,MAAAA,OAAF;AAAWV,MAAAA,KAAX;AAAkBC,MAAAA;AAAlB,KAAd,EAAwC;AACtCS,MAAAA,OAAO,CAACN,WAAR,GAAsBJ,KAAK,CAACI,WAA5B;AACA,aAAOM,OAAP;AACD,KAhBQ;;AAiBT,UAAMC,MAAN,CAAa;AAAEV,MAAAA,IAAF;AAAQC,MAAAA,OAAR;AAAiBC,MAAAA,OAAjB;AAA0BS,MAAAA;AAA1B,KAAb,EAAgD;AAC9C,YAAMC,iBAAiB,GAAG,IAA1B;;AACA,UAAIA,iBAAJ,EAAuB;AACrB,eAAO,IAAP;AACD,OAFD,MAEO;AACL,eAAO,KAAP;AACD;AACF;;AAxBQ;AAvBW,CAAD,CAAvB","sourcesContent":["import NextAuth from \"next-auth\";\nimport GoogleProvider from \"next-auth/providers/google\";\nimport LineProvider from \"next-auth/providers/line\";\n\nexport default NextAuth({\n  providers: [\n    LineProvider({\n      clientId: process.env.LINE_CLIENT_ID,\n      clientSecret: process.env.LINE_CLIENT_SECRET,\n      disable_auto_login: false,\n    }),\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n      authorization: {\n        params: {\n          prompt: \"consent\",\n          access_type: \"offline\",\n          response_type: \"code\",\n        },\n      },\n    }),\n  ],\n  jwt: {\n    encryption: true,\n  },\n  secret: process.env.SECRET,\n  callbacks: {\n    async jwt({ token, user, account, profile }) {\n      if (account?.accessToken) {\n        token.accessToken = account.accessToken;\n      }\n      return token;\n    },\n    async redirect({ url, _baseUrl }) {\n      if (url === \"/dashboard\") {\n        return Promise.resolve(\"/\");\n      }\n      return Promise.resolve(\"/\");\n    },\n    async session({ session, token, user }) {\n      session.accessToken = token.accessToken;\n      return session;\n    },\n    async signIn({ user, account, profile, email }) {\n      const isAllowedToSignIn = true;\n      if (isAllowedToSignIn) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n  },\n});"]},"metadata":{},"sourceType":"module"}